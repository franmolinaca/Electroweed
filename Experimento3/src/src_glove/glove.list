
glove.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 99 1c 00 08 97 1c 00 08 95 1c 00 08     ... ............
 8000010:	95 1c 00 08 95 1c 00 08 95 1c 00 08 00 00 00 00     ................
	...
 800002c:	97 1c 00 08 97 1c 00 08 00 00 00 00 97 1c 00 08     ................
 800003c:	97 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800004c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800005c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800006c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800007c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800008c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800009c:	95 1c 00 08 95 1c 00 08 09 05 00 08 95 1c 00 08     ................
 80000ac:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 80000bc:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 80000cc:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 80000dc:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 80000ec:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 80000fc:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800010c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800011c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800012c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800013c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800014c:	01 06 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800015c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800016c:	95 1c 00 08 95 1c 00 08 95 1c 00 08 95 1c 00 08     ................
 800017c:	95 1c 00 08 95 1c 00 08                             ........

08000184 <leds_init>:


float joint_2_angle = 0.0f;

void leds_init(void) 
{
 8000184:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 8000186:	4c11      	ldr	r4, [pc, #68]	; (80001cc <leds_init+0x48>)

float joint_2_angle = 0.0f;

void leds_init(void) 
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
 8000188:	4811      	ldr	r0, [pc, #68]	; (80001d0 <leds_init+0x4c>)
 800018a:	2108      	movs	r1, #8
 800018c:	f001 f982 	bl	8001494 <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 8000190:	4620      	mov	r0, r4
 8000192:	2101      	movs	r1, #1
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800019a:	f000 fe78 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
 800019e:	4620      	mov	r0, r4
 80001a0:	2101      	movs	r1, #1
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001a8:	f000 fe71 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
 80001ac:	4620      	mov	r0, r4
 80001ae:	2101      	movs	r1, #1
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001b6:	f000 fe6a 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80001ba:	4620      	mov	r0, r4
 80001bc:	2101      	movs	r1, #1
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
 80001c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80001c8:	f000 be61 	b.w	8000e8e <gpio_mode_setup>
 80001cc:	40020c00 	.word	0x40020c00
 80001d0:	40023830 	.word	0x40023830

080001d4 <adc_init>:
}

void adc_init (void)
{
 80001d4:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80001d6:	4c33      	ldr	r4, [pc, #204]	; (80002a4 <adc_init+0xd0>)
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
}

void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
 80001d8:	4833      	ldr	r0, [pc, #204]	; (80002a8 <adc_init+0xd4>)
 80001da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001de:	f001 f959 	bl	8001494 <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80001e2:	4620      	mov	r0, r4
 80001e4:	2101      	movs	r1, #1
 80001e6:	f001 f955 	bl	8001494 <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80001ea:	4620      	mov	r0, r4



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80001ec:	4c2f      	ldr	r4, [pc, #188]	; (80002ac <adc_init+0xd8>)

void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80001ee:	2104      	movs	r1, #4
 80001f0:	f001 f950 	bl	8001494 <rcc_peripheral_enable_clock>



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80001f4:	4620      	mov	r0, r4
 80001f6:	2103      	movs	r1, #3
 80001f8:	2200      	movs	r2, #0
 80001fa:	2302      	movs	r3, #2
 80001fc:	f000 fe47 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
 8000200:	4620      	mov	r0, r4
 8000202:	2103      	movs	r1, #3
 8000204:	2200      	movs	r2, #0
 8000206:	2304      	movs	r3, #4
 8000208:	f000 fe41 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 800020c:	4620      	mov	r0, r4
 800020e:	2103      	movs	r1, #3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 8000210:	f504 6400 	add.w	r4, r4, #2048	; 0x800



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 8000214:	2200      	movs	r2, #0
 8000216:	2308      	movs	r3, #8
 8000218:	f000 fe39 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 800021c:	4620      	mov	r0, r4
 800021e:	2103      	movs	r1, #3
 8000220:	2200      	movs	r2, #0
 8000222:	2302      	movs	r3, #2
 8000224:	f000 fe33 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
 8000228:	4620      	mov	r0, r4
 800022a:	2103      	movs	r1, #3
 800022c:	2200      	movs	r2, #0
 800022e:	2304      	movs	r3, #4
 8000230:	f000 fe2d 	bl	8000e8e <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6
 8000234:	2320      	movs	r3, #32
 8000236:	2103      	movs	r1, #3
 8000238:	2200      	movs	r2, #0
 800023a:	4620      	mov	r0, r4
 800023c:	f000 fe27 	bl	8000e8e <gpio_mode_setup>

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
  adc_disable_scan_mode(ADC1);
 8000240:	f5a4 4468 	sub.w	r4, r4, #59392	; 0xe800
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fd01 	bl	8000c4c <adc_set_clk_prescale>
  adc_disable_scan_mode(ADC1);
 800024a:	4620      	mov	r0, r4
 800024c:	f000 fc82 	bl	8000b54 <adc_disable_scan_mode>
  adc_set_single_conversion_mode(ADC1);
 8000250:	4620      	mov	r0, r4
 8000252:	f000 fc8e 	bl	8000b72 <adc_set_single_conversion_mode>

  adc_set_sample_time(ADC1, ADC_CHANNEL1, ADC_SMPR_SMP_3CYC);   //joint_1
 8000256:	4620      	mov	r0, r4
 8000258:	2101      	movs	r1, #1
 800025a:	2200      	movs	r2, #0
 800025c:	f000 fc8e 	bl	8000b7c <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL2, ADC_SMPR_SMP_3CYC);   //joint_2
 8000260:	4620      	mov	r0, r4
 8000262:	2102      	movs	r1, #2
 8000264:	2200      	movs	r2, #0
 8000266:	f000 fc89 	bl	8000b7c <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL3, ADC_SMPR_SMP_3CYC);   //joint_3
 800026a:	4620      	mov	r0, r4
 800026c:	2103      	movs	r1, #3
 800026e:	2200      	movs	r2, #0
 8000270:	f000 fc84 	bl	8000b7c <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
 8000274:	4620      	mov	r0, r4
 8000276:	210b      	movs	r1, #11
 8000278:	2200      	movs	r2, #0
 800027a:	f000 fc7f 	bl	8000b7c <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
 800027e:	4620      	mov	r0, r4
 8000280:	210c      	movs	r1, #12
 8000282:	2200      	movs	r2, #0
 8000284:	f000 fc7a 	bl	8000b7c <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6
 8000288:	4620      	mov	r0, r4
 800028a:	210f      	movs	r1, #15
 800028c:	2200      	movs	r2, #0
 800028e:	f000 fc75 	bl	8000b7c <adc_set_sample_time>

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fce4 	bl	8000c60 <adc_set_multi_mode>
  adc_power_on(ADC1);
 8000298:	4620      	mov	r0, r4

  //nvic_enable_irq(NVIC_ADC_IRQ);
  //adc_enable_eoc_interrupt(ADC1);
  //adc_disable_eoc_interrupt(ADC1);
}
 800029a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
  adc_power_on(ADC1);
 800029e:	f000 bccf 	b.w	8000c40 <adc_power_on>
 80002a2:	bf00      	nop
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40023844 	.word	0x40023844
 80002ac:	40020000 	.word	0x40020000

080002b0 <voltage_measure>:

}


float voltage_measure (uint32_t adc,uint8_t channel)
{
 80002b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80002b2:	aa04      	add	r2, sp, #16

}


float voltage_measure (uint32_t adc,uint8_t channel)
{
 80002b4:	4604      	mov	r4, r0
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80002b6:	f802 1d10 	strb.w	r1, [r2, #-16]!
    adc_set_regular_sequence(adc, 1, channels);	
 80002ba:	2101      	movs	r1, #1
 80002bc:	466a      	mov	r2, sp
 80002be:	f000 fc79 	bl	8000bb4 <adc_set_regular_sequence>
    adc_start_conversion_regular(adc);
 80002c2:	4620      	mov	r0, r4
 80002c4:	f000 fc4b 	bl	8000b5e <adc_start_conversion_regular>
    gpio_toggle (GPIOD,GPIO15);
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <voltage_measure+0x48>)
 80002ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ce:	f000 fdda 	bl	8000e86 <gpio_toggle>

    while (!adc_eoc(adc));
 80002d2:	4620      	mov	r0, r4
 80002d4:	f000 fcae 	bl	8000c34 <adc_eoc>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d0fa      	beq.n	80002d2 <voltage_measure+0x22>
    voltage=adc_read_regular(adc)*(VREF/ADC_CONVERSION_FACTOR);
 80002dc:	4620      	mov	r0, r4
 80002de:	f000 fcad 	bl	8000c3c <adc_read_regular>
 80002e2:	ee07 0a90 	vmov	s15, r0
 80002e6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    return voltage;
}
 80002ea:	eddf 7a04 	vldr	s15, [pc, #16]	; 80002fc <voltage_measure+0x4c>
 80002ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80002f2:	b004      	add	sp, #16
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	bf00      	nop
 80002f8:	40020c00 	.word	0x40020c00
 80002fc:	3a3dd2f2 	.word	0x3a3dd2f2

08000300 <DTC_SVM_tim_init>:


void DTC_SVM_tim_init(void)
{
 8000300:	b510      	push	{r4, lr}
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 8000302:	487e      	ldr	r0, [pc, #504]	; (80004fc <DTC_SVM_tim_init+0x1fc>)
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000304:	4c7e      	ldr	r4, [pc, #504]	; (8000500 <DTC_SVM_tim_init+0x200>)


void DTC_SVM_tim_init(void)
{
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 8000306:	2101      	movs	r1, #1
 8000308:	f001 f8c4 	bl	8001494 <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);
 800030c:	487d      	ldr	r0, [pc, #500]	; (8000504 <DTC_SVM_tim_init+0x204>)
 800030e:	2110      	movs	r1, #16
 8000310:	f001 f8c0 	bl	8001494 <rcc_peripheral_enable_clock>

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000314:	4620      	mov	r0, r4
 8000316:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800031a:	2102      	movs	r1, #2
 800031c:	2200      	movs	r2, #0
 800031e:	f000 fdb6 	bl	8000e8e <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
 8000322:	4620      	mov	r0, r4
 8000324:	2101      	movs	r1, #1
 8000326:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800032a:	f000 fdd2 	bl	8000ed2 <gpio_set_af>
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
 800032e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000332:	4620      	mov	r0, r4
 8000334:	2102      	movs	r1, #2
 8000336:	2200      	movs	r2, #0
 8000338:	f000 fda9 	bl	8000e8e <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 800033c:	4620      	mov	r0, r4
 800033e:	2101      	movs	r1, #1

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 8000340:	f5a4 3488 	sub.w	r4, r4, #69632	; 0x11000
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 8000344:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8000348:	f000 fdc3 	bl	8000ed2 <gpio_set_af>

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 800034c:	4620      	mov	r0, r4
 800034e:	f000 fde9 	bl	8000f24 <timer_reset>
	/* Timer global mode:
	 * - No divider
	 * - Alignment edge
	 * - Direction up
	 */
	timer_set_mode(TIM1, TIM_CR1_CKD_CK_INT, //For dead time and filter sampling, not important for now.
 8000352:	2100      	movs	r1, #0
 8000354:	460b      	mov	r3, r1
 8000356:	2220      	movs	r2, #32
 8000358:	4620      	mov	r0, r4
 800035a:	f000 fe52 	bl	8001002 <timer_set_mode>
						//TIM_CR1_CMS_CENTER_1
						//TIM_CR1_CMS_CENTER_2
						//TIM_CR1_CMS_CENTER_3 la frequencia del pwm se divide a la mitad. (frecuencia senoidal)
			 TIM_CR1_DIR_UP);

	timer_set_prescaler(TIM1, PRESCALE); //1 = disabled (max speed)
 800035e:	4620      	mov	r0, r4
 8000360:	2101      	movs	r1, #1
 8000362:	f000 fe77 	bl	8001054 <timer_set_prescaler>
	timer_set_repetition_counter(TIM1, 0); //disabled
 8000366:	2100      	movs	r1, #0
 8000368:	4620      	mov	r0, r4
 800036a:	f000 fe75 	bl	8001058 <timer_set_repetition_counter>
	timer_enable_preload(TIM1);
 800036e:	4620      	mov	r0, r4
 8000370:	f000 fe50 	bl	8001014 <timer_enable_preload>
	timer_continuous_mode(TIM1);
 8000374:	4620      	mov	r0, r4
 8000376:	f000 fe52 	bl	800101e <timer_continuous_mode>

	/* Period (32kHz). */
	timer_set_period(TIM1, PWM_PERIOD_ARR); //ARR (value compared against main counter to reload counter aka: period of counter)
 800037a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800037e:	4620      	mov	r0, r4
 8000380:	f000 fe74 	bl	800106c <timer_set_period>

	/* Configure break and deadtime. */
	//timer_set_deadtime(TIM1, deadtime_percentage*pwm_period_ARR);
    //timer_set_deadtime(TIM1, 1100.0f*PWM_PERIOD_ARR);
    //timer_set_deadtime(TIM1, DEAD_TIME_PERCENTAGE*PWM_PERIOD_ARR);
	timer_set_enabled_off_state_in_idle_mode(TIM1);
 8000384:	4620      	mov	r0, r4
 8000386:	f001 f85f 	bl	8001448 <timer_set_enabled_off_state_in_idle_mode>
	timer_set_enabled_off_state_in_run_mode(TIM1);
 800038a:	4620      	mov	r0, r4
 800038c:	f001 f850 	bl	8001430 <timer_set_enabled_off_state_in_run_mode>
	timer_disable_break(TIM1);
 8000390:	4620      	mov	r0, r4
 8000392:	f001 f841 	bl	8001418 <timer_disable_break>
	timer_set_break_polarity_high(TIM1);
 8000396:	4620      	mov	r0, r4
 8000398:	f001 f832 	bl	8001400 <timer_set_break_polarity_high>
	timer_disable_break_automatic_output(TIM1);
 800039c:	4620      	mov	r0, r4
 800039e:	f001 f823 	bl	80013e8 <timer_disable_break_automatic_output>
	timer_set_break_lock(TIM1, TIM_BDTR_LOCK_OFF);
 80003a2:	4620      	mov	r0, r4
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 f85b 	bl	8001460 <timer_set_break_lock>

	/* Disable outputs. */
	timer_disable_oc_output(TIM1, TIM_OC1);
 80003aa:	4620      	mov	r0, r4
 80003ac:	2100      	movs	r1, #0
 80003ae:	f000 ffa1 	bl	80012f4 <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC1N);
 80003b2:	4620      	mov	r0, r4
 80003b4:	2101      	movs	r1, #1
 80003b6:	f000 ff9d 	bl	80012f4 <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2);
 80003ba:	4620      	mov	r0, r4
 80003bc:	2102      	movs	r1, #2
 80003be:	f000 ff99 	bl	80012f4 <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2N);
 80003c2:	4620      	mov	r0, r4
 80003c4:	2103      	movs	r1, #3
 80003c6:	f000 ff95 	bl	80012f4 <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3);
 80003ca:	4620      	mov	r0, r4
 80003cc:	2104      	movs	r1, #4
 80003ce:	f000 ff91 	bl	80012f4 <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3N);
 80003d2:	4620      	mov	r0, r4
 80003d4:	2105      	movs	r1, #5
 80003d6:	f000 ff8d 	bl	80012f4 <timer_disable_oc_output>

	/* -- OC1 and OC1N configuration -- */
	/* Configure global mode of line 1. */
	timer_enable_oc_preload(TIM1, TIM_OC1);
 80003da:	4620      	mov	r0, r4
 80003dc:	2100      	movs	r1, #0
 80003de:	f000 ff0a 	bl	80011f6 <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC1, TIM_OCM_PWM1);
 80003e2:	2206      	movs	r2, #6
 80003e4:	4620      	mov	r0, r4
 80003e6:	2100      	movs	r1, #0
 80003e8:	f000 fe42 	bl	8001070 <timer_set_oc_mode>
	/* Configure OC1. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1);
 80003ec:	4620      	mov	r0, r4
 80003ee:	2100      	movs	r1, #0
 80003f0:	f000 ff1c 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1); //When idle (braked) put 0 on output
 80003f4:	4620      	mov	r0, r4
 80003f6:	2100      	movs	r1, #0
 80003f8:	f000 ffae 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Configure OC1N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1N);
 80003fc:	4620      	mov	r0, r4
 80003fe:	2101      	movs	r1, #1
 8000400:	f000 ff14 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1N);
 8000404:	4620      	mov	r0, r4
 8000406:	2101      	movs	r1, #1
 8000408:	f000 ffa6 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC1. */
	timer_set_oc_value(TIM1, TIM_OC1, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 800040c:	4620      	mov	r0, r4
 800040e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000412:	2100      	movs	r1, #0
 8000414:	f000 ffcc 	bl	80013b0 <timer_set_oc_value>

	/* -- OC2 and OC2N configuration -- */
	/* Configure global mode of line 2. */
	timer_enable_oc_preload(TIM1, TIM_OC2);
 8000418:	4620      	mov	r0, r4
 800041a:	2102      	movs	r1, #2
 800041c:	f000 feeb 	bl	80011f6 <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC2, TIM_OCM_PWM1);
 8000420:	2206      	movs	r2, #6
 8000422:	4620      	mov	r0, r4
 8000424:	2102      	movs	r1, #2
 8000426:	f000 fe23 	bl	8001070 <timer_set_oc_mode>
	/* Configure OC2. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2);
 800042a:	4620      	mov	r0, r4
 800042c:	2102      	movs	r1, #2
 800042e:	f000 fefd 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2);
 8000432:	4620      	mov	r0, r4
 8000434:	2102      	movs	r1, #2
 8000436:	f000 ff8f 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Configure OC2N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2N);
 800043a:	4620      	mov	r0, r4
 800043c:	2103      	movs	r1, #3
 800043e:	f000 fef5 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2N);
 8000442:	4620      	mov	r0, r4
 8000444:	2103      	movs	r1, #3
 8000446:	f000 ff87 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC2. */
	timer_set_oc_value(TIM1, TIM_OC2, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 800044a:	4620      	mov	r0, r4
 800044c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000450:	2102      	movs	r1, #2
 8000452:	f000 ffad 	bl	80013b0 <timer_set_oc_value>

	/* -- OC3 and OC3N configuration -- */
	/* Configure global mode of line 3. */
	timer_enable_oc_preload(TIM1, TIM_OC3);
 8000456:	4620      	mov	r0, r4
 8000458:	2104      	movs	r1, #4
 800045a:	f000 fecc 	bl	80011f6 <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
 800045e:	2206      	movs	r2, #6
 8000460:	4620      	mov	r0, r4
 8000462:	2104      	movs	r1, #4
 8000464:	f000 fe04 	bl	8001070 <timer_set_oc_mode>
	/* Configure OC3. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3);
 8000468:	4620      	mov	r0, r4
 800046a:	2104      	movs	r1, #4
 800046c:	f000 fede 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3);
 8000470:	4620      	mov	r0, r4
 8000472:	2104      	movs	r1, #4
 8000474:	f000 ff70 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Configure OC3N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3N);
 8000478:	4620      	mov	r0, r4
 800047a:	2105      	movs	r1, #5
 800047c:	f000 fed6 	bl	800122c <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3N);
 8000480:	4620      	mov	r0, r4
 8000482:	2105      	movs	r1, #5
 8000484:	f000 ff68 	bl	8001358 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC3. */
	timer_set_oc_value(TIM1, TIM_OC3, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);//100);
 8000488:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800048c:	4620      	mov	r0, r4
 800048e:	2104      	movs	r1, #4
 8000490:	f000 ff8e 	bl	80013b0 <timer_set_oc_value>

	/* Reenable outputs. */
	timer_enable_oc_output(TIM1, TIM_OC1);
 8000494:	4620      	mov	r0, r4
 8000496:	2100      	movs	r1, #0
 8000498:	f000 fefa 	bl	8001290 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC1N);
 800049c:	4620      	mov	r0, r4
 800049e:	2101      	movs	r1, #1
 80004a0:	f000 fef6 	bl	8001290 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2);
 80004a4:	4620      	mov	r0, r4
 80004a6:	2102      	movs	r1, #2
 80004a8:	f000 fef2 	bl	8001290 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2N);
 80004ac:	4620      	mov	r0, r4
 80004ae:	2103      	movs	r1, #3
 80004b0:	f000 feee 	bl	8001290 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3);
 80004b4:	4620      	mov	r0, r4
 80004b6:	2104      	movs	r1, #4
 80004b8:	f000 feea 	bl	8001290 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3N);
 80004bc:	2105      	movs	r1, #5
 80004be:	4620      	mov	r0, r4
 80004c0:	f000 fee6 	bl	8001290 <timer_enable_oc_output>

	/* ---- */

	/* ARR reload enable. */
	timer_enable_preload(TIM1);
 80004c4:	4620      	mov	r0, r4
 80004c6:	f000 fda5 	bl	8001014 <timer_enable_preload>
	/*
	 * Enable preload of complementary channel configurations and
	 * update on COM event.
	 */
	//timer_enable_preload_complementry_enable_bits(TIM1);
	timer_disable_preload_complementry_enable_bits(TIM1);
 80004ca:	4620      	mov	r0, r4
 80004cc:	f000 fdb6 	bl	800103c <timer_disable_preload_complementry_enable_bits>

	/* Enable outputs in the break subsystem. */
	timer_enable_break_main_output(TIM1);
 80004d0:	4620      	mov	r0, r4
 80004d2:	f000 ff7d 	bl	80013d0 <timer_enable_break_main_output>

	/* Generate update event to reload all registers before starting*/
	timer_generate_event(TIM1, TIM_EGR_UG);
 80004d6:	2101      	movs	r1, #1
 80004d8:	4620      	mov	r0, r4
 80004da:	f000 ffcd 	bl	8001478 <timer_generate_event>

	/* Counter enable. */
	timer_enable_counter(TIM1);
 80004de:	4620      	mov	r0, r4
 80004e0:	f000 fda7 	bl	8001032 <timer_enable_counter>

	/*********/
	/*Capture compare interrupt*/

	//enable capture compare interrupt
	timer_enable_update_event(TIM1);
 80004e4:	4620      	mov	r0, r4
 80004e6:	f000 fd9f 	bl	8001028 <timer_enable_update_event>

	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
 80004ea:	4620      	mov	r0, r4
 80004ec:	2101      	movs	r1, #1
 80004ee:	f000 fd7f 	bl	8000ff0 <timer_enable_irq>
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 80004f2:	2019      	movs	r0, #25
}
 80004f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 80004f8:	f001 bc16 	b.w	8001d28 <nvic_enable_irq>
 80004fc:	40023844 	.word	0x40023844
 8000500:	40021000 	.word	0x40021000
 8000504:	40023830 	.word	0x40023830

08000508 <tim1_up_tim10_isr>:
}

void tim1_up_tim10_isr(void) 
{
 8000508:	b510      	push	{r4, lr}
    float joint_0_angle = 0.0f;
    float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 800050a:	4c13      	ldr	r4, [pc, #76]	; (8000558 <tim1_up_tim10_isr+0x50>)
}

void tim1_up_tim10_isr(void) 
{
  //Clear the update interrupt flag
  timer_clear_flag(TIM1,TIM_SR_UIF);
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <tim1_up_tim10_isr+0x54>)
 800050e:	2101      	movs	r1, #1
 8000510:	f000 fd72 	bl	8000ff8 <timer_clear_flag>
    float joint_0_angle = 0.0f;
    float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 8000514:	6823      	ldr	r3, [r4, #0]
	if(counter >=1500)// Print frequency each n cycles
 8000516:	f240 52db 	movw	r2, #1499	; 0x5db
    float joint_0_angle = 0.0f;
    float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 800051a:	3301      	adds	r3, #1
	if(counter >=1500)// Print frequency each n cycles
 800051c:	4293      	cmp	r3, r2
    float joint_0_angle = 0.0f;
    float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 800051e:	6023      	str	r3, [r4, #0]
	if(counter >=1500)// Print frequency each n cycles
 8000520:	dd18      	ble.n	8000554 <tim1_up_tim10_isr+0x4c>

	{
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <tim1_up_tim10_isr+0x58>)
 8000524:	2101      	movs	r1, #1
 8000526:	f7ff fec3 	bl	80002b0 <voltage_measure>
        voltage_joint_1	= voltage_measure (ADC1,ADC_CHANNEL2);
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <tim1_up_tim10_isr+0x58>)
 800052c:	2102      	movs	r1, #2
 800052e:	f7ff febf 	bl	80002b0 <voltage_measure>
        voltage_joint_2 = voltage_measure (ADC1,ADC_CHANNEL3);
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <tim1_up_tim10_isr+0x58>)
 8000534:	2103      	movs	r1, #3
 8000536:	f7ff febb 	bl	80002b0 <voltage_measure>
 800053a:	ee10 0a10 	vmov	r0, s0

        joint_0_angle = CONVERSION_FACTOR_JOINT_0*voltage_joint_0;
        joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;  
 800053e:	ed84 0a01 	vstr	s0, [r4, #4]
        printf("%6.2f \n",joint_2_angle); 
 8000542:	f006 fc95 	bl	8006e70 <__aeabi_f2d>
 8000546:	4602      	mov	r2, r0
 8000548:	460b      	mov	r3, r1
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <tim1_up_tim10_isr+0x5c>)
 800054c:	f002 fa52 	bl	80029f4 <printf>
		counter=0;
 8000550:	2300      	movs	r3, #0
 8000552:	6023      	str	r3, [r4, #0]
 8000554:	bd10      	pop	{r4, pc}
 8000556:	bf00      	nop
 8000558:	200008c4 	.word	0x200008c4
 800055c:	40010000 	.word	0x40010000
 8000560:	40012000 	.word	0x40012000
 8000564:	08007a48 	.word	0x08007a48

08000568 <system_init>:
  //adc_enable_eoc_interrupt(ADC1);
  //adc_disable_eoc_interrupt(ADC1);
}

void system_init(void) 
{
 8000568:	b508      	push	{r3, lr}
  rcc_clock_setup_hse_3v3(&hse_8mhz_3v3[CLOCK_3V3_168MHZ]);
 800056a:	480a      	ldr	r0, [pc, #40]	; (8000594 <system_init+0x2c>)
 800056c:	f000 fc3e 	bl	8000dec <rcc_clock_setup_hse_3v3>
  leds_init();
 8000570:	f7ff fe08 	bl	8000184 <leds_init>
  adc_init();
 8000574:	f7ff fe2e 	bl	80001d4 <adc_init>
  cdcacm_init();
 8000578:	f000 f814 	bl	80005a4 <cdcacm_init>
  DTC_SVM_tim_init();
 800057c:	f7ff fec0 	bl	8000300 <DTC_SVM_tim_init>
  tim1_up_tim10_isr();
 8000580:	f7ff ffc2 	bl	8000508 <tim1_up_tim10_isr>
  printled(4, LRED);
 8000584:	2004      	movs	r0, #4
 8000586:	4904      	ldr	r1, [pc, #16]	; (8000598 <system_init+0x30>)
 8000588:	f44f 4280 	mov.w	r2, #16384	; 0x4000

}
 800058c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  leds_init();
  adc_init();
  cdcacm_init();
  DTC_SVM_tim_init();
  tim1_up_tim10_isr();
  printled(4, LRED);
 8000590:	f000 b848 	b.w	8000624 <printled>
 8000594:	08007b74 	.word	0x08007b74
 8000598:	40020c00 	.word	0x40020c00

0800059c <main>:
	}	

  }

int main(void)
{
 800059c:	b508      	push	{r3, lr}
    system_init();
 800059e:	f7ff ffe3 	bl	8000568 <system_init>
 80005a2:	e7fe      	b.n	80005a2 <main+0x6>

080005a4 <cdcacm_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm.h>
#include <libopencm3-plus/utils/common.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm_common.h>

void cdcacm_init(void) {
 80005a4:	b508      	push	{r3, lr}
  //system setup
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <cdcacm_init+0x50>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	f000 ff73 	bl	8001494 <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <cdcacm_init+0x54>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	f000 ff6f 	bl	8001494 <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE,
 80005b6:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <cdcacm_init+0x58>)
 80005bc:	2102      	movs	r1, #2
 80005be:	2200      	movs	r2, #0
 80005c0:	f000 fc65 	bl	8000e8e <gpio_mode_setup>
			GPIO9 | GPIO11 | GPIO12);
  gpio_set_af(GPIOA, GPIO_AF10, GPIO9 | GPIO11 | GPIO12);
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <cdcacm_init+0x58>)
 80005c6:	210a      	movs	r1, #10
 80005c8:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80005cc:	f000 fc81 	bl	8000ed2 <gpio_set_af>

  cdcacm_usb_init();
 80005d0:	f000 f9e4 	bl	800099c <cdcacm_usb_init>
  nvic_set_priority(NVIC_OTG_FS_IRQ, IRQ_PRI_USB);
 80005d4:	2043      	movs	r0, #67	; 0x43
 80005d6:	2120      	movs	r1, #32
 80005d8:	f001 fbb4 	bl	8001d44 <nvic_set_priority>
  nvic_enable_irq(NVIC_OTG_FS_IRQ);
 80005dc:	2043      	movs	r0, #67	; 0x43
 80005de:	f001 fba3 	bl	8001d28 <nvic_enable_irq>
  while (cdcacm_get_config() != 1) { wait(1); }; //wait until usb is configured
 80005e2:	f000 f981 	bl	80008e8 <cdcacm_get_config>
 80005e6:	2801      	cmp	r0, #1
 80005e8:	d003      	beq.n	80005f2 <cdcacm_init+0x4e>
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f80e 	bl	800060c <wait>
 80005f0:	e7f7      	b.n	80005e2 <cdcacm_init+0x3e>
}
 80005f2:	bd08      	pop	{r3, pc}
 80005f4:	40023830 	.word	0x40023830
 80005f8:	40023834 	.word	0x40023834
 80005fc:	40020000 	.word	0x40020000

08000600 <otg_fs_isr>:

void otg_fs_isr(void)
{
  usbd_poll(usbdev);
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <otg_fs_isr+0x8>)
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	f000 bf78 	b.w	80014f8 <usbd_poll>
 8000608:	20008914 	.word	0x20008914

0800060c <wait>:
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 800060c:	2200      	movs	r2, #0
 800060e:	4282      	cmp	r2, r0
 8000610:	da05      	bge.n	800061e <wait+0x12>
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <wait+0x14>)
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
 8000614:	bf00      	nop
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
 8000616:	3b01      	subs	r3, #1
 8000618:	d1fc      	bne.n	8000614 <wait+0x8>
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 800061a:	3201      	adds	r2, #1
 800061c:	e7f7      	b.n	800060e <wait+0x2>
 800061e:	4770      	bx	lr
 8000620:	000186a0 	.word	0x000186a0

08000624 <printled>:
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
}

void printled(int rep, int gpiop, int pin) {
 8000624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000628:	230a      	movs	r3, #10
 800062a:	4606      	mov	r6, r0
 800062c:	460d      	mov	r5, r1
 800062e:	4617      	mov	r7, r2
 8000630:	4c0f      	ldr	r4, [pc, #60]	; (8000670 <printled+0x4c>)
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
 8000632:	bf00      	nop
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
 8000634:	3c01      	subs	r4, #1
 8000636:	d1fc      	bne.n	8000632 <printled+0xe>
  }
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
 8000638:	3b01      	subs	r3, #1
 800063a:	d1f9      	bne.n	8000630 <printled+0xc>
 800063c:	461c      	mov	r4, r3
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 800063e:	42b4      	cmp	r4, r6
 8000640:	da13      	bge.n	800066a <printled+0x46>
    gpio_set(gpiop, pin);
 8000642:	fa1f f887 	uxth.w	r8, r7
 8000646:	4628      	mov	r0, r5
 8000648:	4641      	mov	r1, r8
 800064a:	f000 fc17 	bl	8000e7c <gpio_set>
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 8000650:	bf00      	nop
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 8000652:	3b01      	subs	r3, #1
 8000654:	d1fc      	bne.n	8000650 <printled+0x2c>
      __asm__("nop");
    gpio_clear(gpiop, pin);
 8000656:	4628      	mov	r0, r5
 8000658:	4641      	mov	r1, r8
 800065a:	f000 fc11 	bl	8000e80 <gpio_clear>
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 8000660:	bf00      	nop
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 8000662:	3b01      	subs	r3, #1
 8000664:	d1fc      	bne.n	8000660 <printled+0x3c>
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 8000666:	3401      	adds	r4, #1
 8000668:	e7e9      	b.n	800063e <printled+0x1a>
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
  }
}
 800066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800066e:	bf00      	nop
 8000670:	000f4240 	.word	0x000f4240
 8000674:	007a1200 	.word	0x007a1200

08000678 <strlen2>:
      __asm__("nop");
  }
}

int strlen2(char s[]) {
  int i=0;
 8000678:	2300      	movs	r3, #0
  while (s[i] != '\0') {
 800067a:	5cc2      	ldrb	r2, [r0, r3]
 800067c:	3301      	adds	r3, #1
 800067e:	2a00      	cmp	r2, #0
 8000680:	d1fb      	bne.n	800067a <strlen2+0x2>
    i++;
  }
  return(i+1);
}
 8000682:	4618      	mov	r0, r3
 8000684:	4770      	bx	lr

08000686 <reverse>:

void reverse(char s[])
{
 8000686:	b510      	push	{r4, lr}
 8000688:	4604      	mov	r4, r0
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 800068a:	f7ff fff5 	bl	8000678 <strlen2>
 800068e:	2200      	movs	r2, #0
 8000690:	1e83      	subs	r3, r0, #2
 8000692:	429a      	cmp	r2, r3
 8000694:	da06      	bge.n	80006a4 <reverse+0x1e>
    c = s[i];
 8000696:	5ca1      	ldrb	r1, [r4, r2]
    s[i] = s[j];
 8000698:	5ce0      	ldrb	r0, [r4, r3]
 800069a:	54a0      	strb	r0, [r4, r2]
    s[j] = c;
 800069c:	54e1      	strb	r1, [r4, r3]

void reverse(char s[])
{
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 800069e:	3201      	adds	r2, #1
 80006a0:	3b01      	subs	r3, #1
 80006a2:	e7f6      	b.n	8000692 <reverse+0xc>
    c = s[i];
    s[i] = s[j];
    s[j] = c;
  }
}
 80006a4:	bd10      	pop	{r4, pc}

080006a6 <itoa>:

void itoa(int n, char s[])
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	2200      	movs	r2, #0
 80006aa:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80006ae:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 80006b2:	260a      	movs	r6, #10
 80006b4:	fb94 f5f6 	sdiv	r5, r4, r6
 80006b8:	fb06 4415 	mls	r4, r6, r5, r4
 80006bc:	3430      	adds	r4, #48	; 0x30
 80006be:	548c      	strb	r4, [r1, r2]
 80006c0:	1c53      	adds	r3, r2, #1
  } while ((n /= 10) > 0);     /* delete it */
 80006c2:	462c      	mov	r4, r5
 80006c4:	b10d      	cbz	r5, 80006ca <itoa+0x24>
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 80006c6:	461a      	mov	r2, r3
 80006c8:	e7f3      	b.n	80006b2 <itoa+0xc>
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 80006ca:	2800      	cmp	r0, #0
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 80006cc:	461c      	mov	r4, r3
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 80006ce:	da02      	bge.n	80006d6 <itoa+0x30>
    s[i++] = '-';
 80006d0:	1c93      	adds	r3, r2, #2
 80006d2:	222d      	movs	r2, #45	; 0x2d
 80006d4:	550a      	strb	r2, [r1, r4]
  s[i] = '\0';
 80006d6:	2200      	movs	r2, #0
 80006d8:	54ca      	strb	r2, [r1, r3]
  reverse(s);
 80006da:	4608      	mov	r0, r1
}
 80006dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    s[i++] = n % 10 + '0';   /* get next digit */
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
    s[i++] = '-';
  s[i] = '\0';
  reverse(s);
 80006e0:	f7ff bfd1 	b.w	8000686 <reverse>

080006e4 <_write>:
   &dotab_cdcacm,  /* standard error */
   0             /* terminates the list */
};

long _write(int fd, const void *buf, size_t cnt);
long _write(int fd, const void *buf, size_t cnt) {
 80006e4:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).write(fd, buf, cnt);
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <_write+0x10>)
 80006e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	4798      	blx	r3
}
 80006f0:	bd08      	pop	{r3, pc}
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000

080006f8 <_read>:

long _read(int fd, char *buf, size_t cnt);
long _read(int fd, char *buf, size_t cnt) {
 80006f8:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).read(fd, buf, cnt);
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <_read+0x10>)
 80006fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	4798      	blx	r3
}
 8000704:	bd08      	pop	{r3, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000

0800070c <_open>:

int _open(const char *file, int flags, int mode);
int _open(const char *file, int flags, int mode) {
 800070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000710:	4605      	mov	r5, r0
 8000712:	460f      	mov	r7, r1
 8000714:	4690      	mov	r8, r2
  int which_devoptab = 0;
 8000716:	2400      	movs	r4, #0
  int fd = -1;
  /* search for "file" in dotab_list[].name */
  do {
    if( strcmp( (*devoptab_list[which_devoptab]).name, file ) == 0 ) {
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_open+0x30>)
 800071a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800071e:	4629      	mov	r1, r5
 8000720:	6830      	ldr	r0, [r6, #0]
 8000722:	f002 fa19 	bl	8002b58 <strcmp>
 8000726:	b108      	cbz	r0, 800072c <_open+0x20>
      fd = which_devoptab;
      break;
    }
  } while( devoptab_list[which_devoptab++] );
 8000728:	3401      	adds	r4, #1
 800072a:	e7f5      	b.n	8000718 <_open+0xc>
  /* if we found the requested file/device,
     then invoke the device's open_r() method */
  if( fd != -1 ) (*devoptab_list[fd]).open(file, flags, mode );
 800072c:	6873      	ldr	r3, [r6, #4]
 800072e:	4628      	mov	r0, r5
 8000730:	4639      	mov	r1, r7
 8000732:	4642      	mov	r2, r8
 8000734:	4798      	blx	r3
  /* it doesn't exist! */
  else errno = ENODEV;
  return fd;
}
 8000736:	4620      	mov	r0, r4
 8000738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800073c:	20000000 	.word	0x20000000

08000740 <_close>:

long _close(int fd);
long _close(int fd) {
 8000740:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).close(fd);
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <_close+0x10>)
 8000744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4798      	blx	r3
}
 800074c:	bd08      	pop	{r3, pc}
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <_sbrk>:

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 8000754:	b530      	push	{r4, r5, lr}
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <_sbrk+0x84>)
 8000758:	681c      	ldr	r4, [r3, #0]
 800075a:	2c02      	cmp	r4, #2
}

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 800075c:	b085      	sub	sp, #20
 800075e:	4605      	mov	r5, r0
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 8000760:	d116      	bne.n	8000790 <_sbrk+0x3c>
    write( 2, "Asking for: ", 12);
 8000762:	220c      	movs	r2, #12
 8000764:	4620      	mov	r0, r4
 8000766:	491d      	ldr	r1, [pc, #116]	; (80007dc <_sbrk+0x88>)
 8000768:	f002 fb34 	bl	8002dd4 <write>
    char incr_c[15];
    itoa(incr, incr_c);
 800076c:	4669      	mov	r1, sp
 800076e:	4628      	mov	r0, r5
 8000770:	f7ff ff99 	bl	80006a6 <itoa>
    write( 2, incr_c, strlen2(incr_c));
 8000774:	4668      	mov	r0, sp
 8000776:	f7ff ff7f 	bl	8000678 <strlen2>
 800077a:	4669      	mov	r1, sp
 800077c:	4602      	mov	r2, r0
 800077e:	4620      	mov	r0, r4
 8000780:	f002 fb28 	bl	8002dd4 <write>
    write( 2, " bytes.\n", 8);
 8000784:	4620      	mov	r0, r4
 8000786:	4916      	ldr	r1, [pc, #88]	; (80007e0 <_sbrk+0x8c>)
 8000788:	2208      	movs	r2, #8
 800078a:	f002 fb23 	bl	8002dd4 <write>
 800078e:	e001      	b.n	8000794 <_sbrk+0x40>
  } else {
    first++;
 8000790:	3401      	adds	r4, #1
 8000792:	601c      	str	r4, [r3, #0]
  }
  //*/
  //
/* initialize */
  if( heap_end == 0 ) heap_end = _heap;
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <_sbrk+0x90>)
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <_sbrk+0x94>)
 8000798:	6811      	ldr	r1, [r2, #0]
 800079a:	b901      	cbnz	r1, 800079e <_sbrk+0x4a>
 800079c:	6013      	str	r3, [r2, #0]
  prev_heap_end = heap_end;
 800079e:	6810      	ldr	r0, [r2, #0]
  if( heap_end + incr -_heap > HEAPSIZE ) {
 80007a0:	4405      	add	r5, r0
 80007a2:	1aeb      	subs	r3, r5, r3
 80007a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007a8:	dd12      	ble.n	80007d0 <_sbrk+0x7c>
/* heap overflow—announce on stderr */
    printled(10, LRED);
 80007aa:	200a      	movs	r0, #10
 80007ac:	490f      	ldr	r1, [pc, #60]	; (80007ec <_sbrk+0x98>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	f7ff ff37 	bl	8000624 <printled>
    printled(10, LORANGE);
 80007b6:	200a      	movs	r0, #10
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <_sbrk+0x98>)
 80007ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007be:	f7ff ff31 	bl	8000624 <printled>
    write( 2, "Heap overflow!\n", 15 );
 80007c2:	490b      	ldr	r1, [pc, #44]	; (80007f0 <_sbrk+0x9c>)
 80007c4:	220f      	movs	r2, #15
 80007c6:	2002      	movs	r0, #2
 80007c8:	f002 fb04 	bl	8002dd4 <write>
    abort();
 80007cc:	f001 fcd4 	bl	8002178 <abort>
  }
  heap_end += incr;
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_sbrk+0x90>)
 80007d2:	601d      	str	r5, [r3, #0]
  return (caddr_t) prev_heap_end;
}
 80007d4:	b005      	add	sp, #20
 80007d6:	bd30      	pop	{r4, r5, pc}
 80007d8:	200088cc 	.word	0x200088cc
 80007dc:	08007a50 	.word	0x08007a50
 80007e0:	08007a5d 	.word	0x08007a5d
 80007e4:	200088d0 	.word	0x200088d0
 80007e8:	200008cc 	.word	0x200008cc
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	08007a66 	.word	0x08007a66

080007f4 <_stat>:

int _stat(const char *file, struct stat *pstat);
int _stat(NOT_USED const char *file, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80007fa:	2000      	movs	r0, #0
 80007fc:	4770      	bx	lr

080007fe <_fstat>:

int _fstat(int fd, struct stat *pstat);
int _fstat(NOT_USED int fd, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000804:	2000      	movs	r0, #0
 8000806:	4770      	bx	lr

08000808 <_lseek>:

off_t _lseek(int fd, off_t pos, int whence);
off_t _lseek(NOT_USED int fd, NOT_USED off_t pos, NOT_USED int whence) {
   return 0;
}
 8000808:	2000      	movs	r0, #0
 800080a:	4770      	bx	lr

0800080c <cdcacm_control_request>:
	(void)complete;
	(void)buf;
	(void)usbd_dev;
	(void)len;

	switch (req->bRequest) {
 800080c:	7848      	ldrb	r0, [r1, #1]
 800080e:	2820      	cmp	r0, #32
 8000810:	d004      	beq.n	800081c <cdcacm_control_request+0x10>
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
			return 0;
		return 1;
	}
	return 0;
 8000812:	f1b0 0322 	subs.w	r3, r0, #34	; 0x22
 8000816:	4258      	negs	r0, r3
 8000818:	4158      	adcs	r0, r3
 800081a:	4770      	bx	lr
		 * advertise it in the ACM functional descriptor.
		 */
		return 1;
		}
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
 800081c:	8818      	ldrh	r0, [r3, #0]
 800081e:	2806      	cmp	r0, #6
 8000820:	bf94      	ite	ls
 8000822:	2000      	movls	r0, #0
 8000824:	2001      	movhi	r0, #1
			return 0;
		return 1;
	}
	return 0;
}
 8000826:	4770      	bx	lr

08000828 <cdcacm_callback_out>:
int cdcacm_sent=true;

static void cdcacm_callback_out(NOT_USED usbd_device* usbd_dev,NOT_USED uint8_t ep)
{
  //printled(1, LORANGE);
  cdcacm_sent=true;
 8000828:	4b01      	ldr	r3, [pc, #4]	; (8000830 <cdcacm_callback_out+0x8>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	4770      	bx	lr
 8000830:	2000001c 	.word	0x2000001c

08000834 <cdcacm_reset>:
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
}

void cdcacm_reset(void);
void cdcacm_reset(void) {
 8000834:	4770      	bx	lr
	...

08000838 <cdcacm_set_config>:
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 8000838:	b530      	push	{r4, r5, lr}
	configured = wValue;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <cdcacm_set_config+0x78>)
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 800083c:	b087      	sub	sp, #28
	configured = wValue;
 800083e:	6019      	str	r1, [r3, #0]
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <cdcacm_set_config+0x7c>)
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2101      	movs	r1, #1
 8000846:	2202      	movs	r2, #2
 8000848:	2340      	movs	r3, #64	; 0x40
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 800084a:	4604      	mov	r4, r0
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 800084c:	f000 fe5a 	bl	8001504 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <cdcacm_set_config+0x80>)
 8000852:	9300      	str	r3, [sp, #0]
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 8000854:	2500      	movs	r5, #0

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 8000856:	4620      	mov	r0, r4
 8000858:	2182      	movs	r1, #130	; 0x82
 800085a:	2202      	movs	r2, #2
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	f000 fe51 	bl	8001504 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 8000862:	4620      	mov	r0, r4
 8000864:	9500      	str	r5, [sp, #0]
 8000866:	2183      	movs	r1, #131	; 0x83
 8000868:	2203      	movs	r2, #3
 800086a:	2310      	movs	r3, #16
 800086c:	f000 fe4a 	bl	8001504 <usbd_ep_setup>
	usbd_register_control_callback(
 8000870:	4620      	mov	r0, r4
 8000872:	2121      	movs	r1, #33	; 0x21
 8000874:	227f      	movs	r2, #127	; 0x7f
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <cdcacm_set_config+0x84>)
 8000878:	f001 f911 	bl	8001a9e <usbd_register_control_callback>
	 * Allows the use of /dev/tty* devices on *BSD/MacOS
	 */
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
 800087c:	23a1      	movs	r3, #161	; 0xa1
 800087e:	f88d 300c 	strb.w	r3, [sp, #12]
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
 8000882:	2320      	movs	r3, #32
 8000884:	f88d 300d 	strb.w	r3, [sp, #13]
	notif->wValue = 0;
	notif->wIndex = 0;
	notif->wLength = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	f8ad 3012 	strh.w	r3, [sp, #18]
	buf[8] = 3; /* DCD | DSR */
 800088e:	2303      	movs	r3, #3
 8000890:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[9] = 0;
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 8000894:	4620      	mov	r0, r4
 8000896:	2183      	movs	r1, #131	; 0x83
 8000898:	aa03      	add	r2, sp, #12
 800089a:	230a      	movs	r3, #10
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
	notif->wValue = 0;
 800089c:	f8ad 500e 	strh.w	r5, [sp, #14]
	notif->wIndex = 0;
 80008a0:	f8ad 5010 	strh.w	r5, [sp, #16]
	notif->wLength = 2;
	buf[8] = 3; /* DCD | DSR */
	buf[9] = 0;
 80008a4:	f88d 5015 	strb.w	r5, [sp, #21]
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 80008a8:	f000 fe4b 	bl	8001542 <usbd_ep_write_packet>
}
 80008ac:	b007      	add	sp, #28
 80008ae:	bd30      	pop	{r4, r5, pc}
 80008b0:	20008a00 	.word	0x20008a00
 80008b4:	080008c1 	.word	0x080008c1
 80008b8:	08000829 	.word	0x08000829
 80008bc:	0800080d 	.word	0x0800080d

080008c0 <cdcacm_callback_in>:
	}
	return 0;
}

static void cdcacm_callback_in(usbd_device *usbd_dev, uint8_t ep)
{
 80008c0:	b508      	push	{r3, lr}
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <cdcacm_callback_in+0x20>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	f000 fe41 	bl	800154e <usbd_ep_read_packet>
  if (len > 0) {
 80008cc:	4602      	mov	r2, r0
 80008ce:	b128      	cbz	r0, 80008dc <cdcacm_callback_in+0x1c>
    cbuf_append(&cdc_cbuf_in, buf,  len);
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <cdcacm_callback_in+0x24>)
 80008d2:	4903      	ldr	r1, [pc, #12]	; (80008e0 <cdcacm_callback_in+0x20>)
  }
}
 80008d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
  if (len > 0) {
    cbuf_append(&cdc_cbuf_in, buf,  len);
 80008d8:	f000 b90e 	b.w	8000af8 <cbuf_append>
 80008dc:	bd08      	pop	{r3, pc}
 80008de:	bf00      	nop
 80008e0:	200089a8 	.word	0x200089a8
 80008e4:	200089e8 	.word	0x200089e8

080008e8 <cdcacm_get_config>:
}

int cdcacm_get_config(void)
{
	return configured;
}
 80008e8:	4b01      	ldr	r3, [pc, #4]	; (80008f0 <cdcacm_get_config+0x8>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20008a00 	.word	0x20008a00

080008f4 <cdcacm_open>:
  return s;
}

int cdcacm_open(NOT_USED const char *path, NOT_USED int flags, NOT_USED int mode) {
  return(0);
}
 80008f4:	2000      	movs	r0, #0
 80008f6:	4770      	bx	lr

080008f8 <cdcacm_close>:

int cdcacm_close(NOT_USED int fd) {
  return(0);
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	4770      	bx	lr

080008fc <cdcacm_write_now>:

void cdcacm_write_now(char* buf, int len) {
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4605      	mov	r5, r0
 8000900:	460c      	mov	r4, r1
  //printled(1, LGREEN);
  //while (cdcacm_sent == false) {};
  //nvic_disable_irq(NVIC_OTG_FS_IRQ);
  //cdcacm_sent=false;
  //__asm__("CPSID i;");
  while (usbd_ep_write_packet(usbdev, 0x82, buf, len) ==0);
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <cdcacm_write_now+0x1c>)
 8000904:	2182      	movs	r1, #130	; 0x82
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	462a      	mov	r2, r5
 800090a:	b2a3      	uxth	r3, r4
 800090c:	f000 fe19 	bl	8001542 <usbd_ep_write_packet>
 8000910:	2800      	cmp	r0, #0
 8000912:	d0f6      	beq.n	8000902 <cdcacm_write_now+0x6>
  //cdcacm_sent=false;
  //nvic_enable_irq(NVIC_OTG_FS_IRQ);
  //__asm__("CPSIE i;");
  //printled(2, LGREEN);
}
 8000914:	bd38      	pop	{r3, r4, r5, pc}
 8000916:	bf00      	nop
 8000918:	20008914 	.word	0x20008914

0800091c <cdcacm_write>:

long cdcacm_write(NOT_USED int fd, const char *ptr, int len) {
 800091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000920:	4688      	mov	r8, r1
 8000922:	4617      	mov	r7, r2
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 8000924:	2500      	movs	r5, #0
 8000926:	42bd      	cmp	r5, r7
 8000928:	da1e      	bge.n	8000968 <cdcacm_write+0x4c>
    {
      buf[buf_pos]=ptr[index];
 800092a:	4c11      	ldr	r4, [pc, #68]	; (8000970 <cdcacm_write+0x54>)
 800092c:	4e11      	ldr	r6, [pc, #68]	; (8000974 <cdcacm_write+0x58>)
 800092e:	6821      	ldr	r1, [r4, #0]
 8000930:	f818 3005 	ldrb.w	r3, [r8, r5]
 8000934:	5473      	strb	r3, [r6, r1]
      buf_pos+=1;
 8000936:	3101      	adds	r1, #1
      if (buf_pos == 1) {
 8000938:	2901      	cmp	r1, #1
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
    {
      buf[buf_pos]=ptr[index];
      buf_pos+=1;
 800093a:	6021      	str	r1, [r4, #0]
 800093c:	4630      	mov	r0, r6
      if (buf_pos == 1) {
 800093e:	d103      	bne.n	8000948 <cdcacm_write+0x2c>
	//if (buf_pos == CDCACM_PACKET_SIZE/2) {
	cdcacm_write_now(buf, buf_pos);
 8000940:	f7ff ffdc 	bl	80008fc <cdcacm_write_now>
	buf_pos=0;
 8000944:	2300      	movs	r3, #0
 8000946:	6023      	str	r3, [r4, #0]
      }	
      if (ptr[index] == '\n')
 8000948:	f818 3005 	ldrb.w	r3, [r8, r5]
 800094c:	2b0a      	cmp	r3, #10
 800094e:	d109      	bne.n	8000964 <cdcacm_write+0x48>
	{
	  buf[buf_pos]='\r';
 8000950:	6821      	ldr	r1, [r4, #0]
	  buf_pos+=1;
	  cdcacm_write_now(buf, buf_pos);
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <cdcacm_write+0x58>)
	cdcacm_write_now(buf, buf_pos);
	buf_pos=0;
      }	
      if (ptr[index] == '\n')
	{
	  buf[buf_pos]='\r';
 8000954:	230d      	movs	r3, #13
 8000956:	5473      	strb	r3, [r6, r1]
	  buf_pos+=1;
 8000958:	3101      	adds	r1, #1
 800095a:	6021      	str	r1, [r4, #0]
	  cdcacm_write_now(buf, buf_pos);
 800095c:	f7ff ffce 	bl	80008fc <cdcacm_write_now>
	  buf_pos=0;
 8000960:	2300      	movs	r3, #0
 8000962:	6023      	str	r3, [r4, #0]
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 8000964:	3501      	adds	r5, #1
 8000966:	e7de      	b.n	8000926 <cdcacm_write+0xa>
	  buf_pos=0;
	}
    }

  return len;
}
 8000968:	4638      	mov	r0, r7
 800096a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800096e:	bf00      	nop
 8000970:	200089a4 	.word	0x200089a4
 8000974:	200088d4 	.word	0x200088d4

08000978 <cdcacm_read>:

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	460d      	mov	r5, r1
 800097c:	4614      	mov	r4, r2
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <cdcacm_read+0x20>)
 8000980:	f000 f880 	bl	8000a84 <cbuf_used>
 8000984:	42a0      	cmp	r0, r4
 8000986:	dbfa      	blt.n	800097e <cdcacm_read+0x6>
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 8000988:	4629      	mov	r1, r5
 800098a:	4622      	mov	r2, r4
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <cdcacm_read+0x20>)
}
 800098e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 8000992:	f000 b887 	b.w	8000aa4 <cbuf_pop>
 8000996:	bf00      	nop
 8000998:	200089e8 	.word	0x200089e8

0800099c <cdcacm_usb_init>:
  } else {
    return(-1);
  }
}

void cdcacm_usb_init(void) {
 800099c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  //receive buffer setup
  if (cbuf_init(&cdc_cbuf_in, CDCACM_READ_BUF_SIZE) != 0) { //couldn't initialize buffer for usb
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <cdcacm_usb_init+0x90>)
 80009a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a4:	f000 f85a 	bl	8000a5c <cbuf_init>
 80009a8:	b130      	cbz	r0, 80009b8 <cdcacm_usb_init+0x1c>
    while(1) {
      printled(5, LRED);
 80009aa:	2005      	movs	r0, #5
 80009ac:	4920      	ldr	r1, [pc, #128]	; (8000a30 <cdcacm_usb_init+0x94>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b2:	f7ff fe37 	bl	8000624 <printled>
 80009b6:	e7f8      	b.n	80009aa <cdcacm_usb_init+0xe>
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <cdcacm_usb_init+0x98>)
 80009ba:	681a      	ldr	r2, [r3, #0]
                       *(unique_id_p + 1) +
 80009bc:	685c      	ldr	r4, [r3, #4]
                       *(unique_id_p + 2);
 80009be:	3308      	adds	r3, #8
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 80009c0:	4414      	add	r4, r2
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
 80009c2:	681b      	ldr	r3, [r3, #0]
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 80009c4:	441c      	add	r4, r3
 80009c6:	f06f 0103 	mvn.w	r1, #3
 80009ca:	4341      	muls	r1, r0
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <cdcacm_usb_init+0x9c>)
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 80009ce:	fa24 f101 	lsr.w	r1, r4, r1
 80009d2:	1813      	adds	r3, r2, r0
 80009d4:	f001 010f 	and.w	r1, r1, #15
 80009d8:	3801      	subs	r0, #1
 80009da:	3130      	adds	r1, #48	; 0x30
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 80009dc:	f110 0f08 	cmn.w	r0, #8
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 80009e0:	71d9      	strb	r1, [r3, #7]
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 80009e2:	d1f0      	bne.n	80009c6 <cdcacm_usb_init+0x2a>
 80009e4:	2300      	movs	r3, #0
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
    if(s[i] > '9')
 80009e6:	5cd1      	ldrb	r1, [r2, r3]
 80009e8:	2939      	cmp	r1, #57	; 0x39
 80009ea:	d902      	bls.n	80009f2 <cdcacm_usb_init+0x56>
      s[i] += 'A' - '9' - 1;
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <cdcacm_usb_init+0x9c>)
 80009ee:	3107      	adds	r1, #7
 80009f0:	5419      	strb	r1, [r3, r0]

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
 80009f2:	3301      	adds	r3, #1
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d1f6      	bne.n	80009e6 <cdcacm_usb_init+0x4a>
    if(s[i] > '9')
      s[i] += 'A' - '9' - 1;
  s[8] = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	7213      	strb	r3, [r2, #8]
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 80009fc:	2303      	movs	r3, #3
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <cdcacm_usb_init+0xa0>)
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <cdcacm_usb_init+0xa4>)
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <cdcacm_usb_init+0xa8>)
 8000a0c:	490e      	ldr	r1, [pc, #56]	; (8000a48 <cdcacm_usb_init+0xac>)
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <cdcacm_usb_init+0xb0>)
 8000a10:	4c0f      	ldr	r4, [pc, #60]	; (8000a50 <cdcacm_usb_init+0xb4>)
 8000a12:	f000 fd4d 	bl	80014b0 <usbd_init>
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 8000a16:	490f      	ldr	r1, [pc, #60]	; (8000a54 <cdcacm_usb_init+0xb8>)
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 8000a18:	6020      	str	r0, [r4, #0]
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 8000a1a:	f000 ff4c 	bl	80018b6 <usbd_register_set_config_callback>
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	490d      	ldr	r1, [pc, #52]	; (8000a58 <cdcacm_usb_init+0xbc>)
}
 8000a22:	b004      	add	sp, #16
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 8000a28:	f000 bd64 	b.w	80014f4 <usbd_register_reset_callback>
 8000a2c:	200089e8 	.word	0x200089e8
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	1fff7a10 	.word	0x1fff7a10
 8000a38:	20008998 	.word	0x20008998
 8000a3c:	20008918 	.word	0x20008918
 8000a40:	08007b0a 	.word	0x08007b0a
 8000a44:	20000010 	.word	0x20000010
 8000a48:	08007ae3 	.word	0x08007ae3
 8000a4c:	08007be4 	.word	0x08007be4
 8000a50:	20008914 	.word	0x20008914
 8000a54:	08000839 	.word	0x08000839
 8000a58:	08000835 	.word	0x08000835

08000a5c <cbuf_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a5c:	b570      	push	{r4, r5, r6, lr}
  cbuf->size=0;
 8000a5e:	2500      	movs	r5, #0
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a60:	4604      	mov	r4, r0
  cbuf->size=0;
 8000a62:	6045      	str	r5, [r0, #4]
  cbuf->first_pos=0;
 8000a64:	6085      	str	r5, [r0, #8]
  cbuf->last_pos=0;
 8000a66:	60c5      	str	r5, [r0, #12]
  cbuf->wmut=0;
 8000a68:	6105      	str	r5, [r0, #16]
  cbuf->rmut=0;
 8000a6a:	6145      	str	r5, [r0, #20]
  cbuf->buf=malloc(sizeof(char)*size);
 8000a6c:	4608      	mov	r0, r1
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a6e:	460e      	mov	r6, r1
  cbuf->size=0;
  cbuf->first_pos=0;
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
 8000a70:	f001 fc34 	bl	80022dc <malloc>
 8000a74:	6020      	str	r0, [r4, #0]
  if (cbuf->buf == NULL) {
 8000a76:	b110      	cbz	r0, 8000a7e <cbuf_init+0x22>
    return(-1);
  } else {
    cbuf->size=size;
 8000a78:	6066      	str	r6, [r4, #4]
    return(0);
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
  if (cbuf->buf == NULL) {
    return(-1);
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  } else {
    cbuf->size=size;
    return(0);
  }
}
 8000a82:	bd70      	pop	{r4, r5, r6, pc}

08000a84 <cbuf_used>:
  cbuf->rmut=0;
  cbuf->buf=NULL;
}

int cbuf_used(cbuf_t* cbuf) {
  if (cbuf->last_pos >= cbuf->first_pos) {
 8000a84:	68c2      	ldr	r2, [r0, #12]
 8000a86:	6883      	ldr	r3, [r0, #8]
 8000a88:	429a      	cmp	r2, r3
    return(cbuf->last_pos-cbuf->first_pos);
  } else {
    return(cbuf->last_pos+cbuf->size-cbuf->first_pos);
 8000a8a:	bfbc      	itt	lt
 8000a8c:	6840      	ldrlt	r0, [r0, #4]
 8000a8e:	1812      	addlt	r2, r2, r0
 8000a90:	1ad0      	subs	r0, r2, r3
  }
}
 8000a92:	4770      	bx	lr

08000a94 <cbuf_free>:

int cbuf_free(cbuf_t* cbuf) {
 8000a94:	b510      	push	{r4, lr}
 8000a96:	4604      	mov	r4, r0
  return(cbuf->size-cbuf_used(cbuf));
 8000a98:	f7ff fff4 	bl	8000a84 <cbuf_used>
 8000a9c:	6863      	ldr	r3, [r4, #4]
}
 8000a9e:	1a18      	subs	r0, r3, r0
 8000aa0:	bd10      	pop	{r4, pc}
	...

08000aa4 <cbuf_pop>:

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	460e      	mov	r6, r1
  int i=0;
  gpio_toggle(LBLUE);
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <cbuf_pop+0x50>)
 8000aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000

int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000ab0:	4617      	mov	r7, r2
  int i=0;
  gpio_toggle(LBLUE);
 8000ab2:	f000 f9e8 	bl	8000e86 <gpio_toggle>
  LOCK(cbuf->rmut);
 8000ab6:	b672      	cpsid	i
 8000ab8:	6960      	ldr	r0, [r4, #20]
 8000aba:	b9b8      	cbnz	r0, 8000aec <cbuf_pop+0x48>
 8000abc:	2301      	movs	r3, #1
 8000abe:	6163      	str	r3, [r4, #20]
  for (i=0; i<out_len; i++) {
 8000ac0:	42b8      	cmp	r0, r7
 8000ac2:	da03      	bge.n	8000acc <cbuf_pop+0x28>
    if (cbuf->first_pos == cbuf->last_pos) { //empty
 8000ac4:	68a3      	ldr	r3, [r4, #8]
 8000ac6:	68e5      	ldr	r5, [r4, #12]
 8000ac8:	42ab      	cmp	r3, r5
 8000aca:	d102      	bne.n	8000ad2 <cbuf_pop+0x2e>
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000acc:	2300      	movs	r3, #0
 8000ace:	6163      	str	r3, [r4, #20]
 8000ad0:	e00d      	b.n	8000aee <cbuf_pop+0x4a>
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
 8000ad2:	6825      	ldr	r5, [r4, #0]
 8000ad4:	5ceb      	ldrb	r3, [r5, r3]
 8000ad6:	5433      	strb	r3, [r6, r0]
    cbuf->first_pos++;
 8000ad8:	68a3      	ldr	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
 8000ada:	6865      	ldr	r5, [r4, #4]
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000adc:	3301      	adds	r3, #1
    if (cbuf->first_pos == cbuf->size) {
 8000ade:	42ab      	cmp	r3, r5
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000ae0:	60a3      	str	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
 8000ae2:	bf04      	itt	eq
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	60a3      	streq	r3, [r4, #8]

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
  gpio_toggle(LBLUE);
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
 8000ae8:	3001      	adds	r0, #1
 8000aea:	e7e9      	b.n	8000ac0 <cbuf_pop+0x1c>
int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
 8000aec:	2000      	movs	r0, #0
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000aee:	b662      	cpsie	i
  return(i);
}
 8000af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <cbuf_append>:

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4604      	mov	r4, r0
 8000afc:	460f      	mov	r7, r1
  int i=0;
  gpio_toggle(LORANGE);
 8000afe:	4814      	ldr	r0, [pc, #80]	; (8000b50 <cbuf_append+0x58>)
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  }
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000b04:	4615      	mov	r5, r2
  int i=0;
  gpio_toggle(LORANGE);
 8000b06:	f000 f9be 	bl	8000e86 <gpio_toggle>
  LOCK(cbuf->wmut);
 8000b0a:	b672      	cpsid	i
 8000b0c:	6926      	ldr	r6, [r4, #16]
 8000b0e:	b9e6      	cbnz	r6, 8000b4a <cbuf_append+0x52>
 8000b10:	2301      	movs	r3, #1
 8000b12:	6123      	str	r3, [r4, #16]
  if (cbuf_free(cbuf) > in_size) {
 8000b14:	4620      	mov	r0, r4
 8000b16:	f7ff ffbd 	bl	8000a94 <cbuf_free>
 8000b1a:	42a8      	cmp	r0, r5
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	dd11      	ble.n	8000b44 <cbuf_append+0x4c>
    for (i=0; i<in_size; i++) {
 8000b20:	42a8      	cmp	r0, r5
 8000b22:	da0d      	bge.n	8000b40 <cbuf_append+0x48>
      cbuf->buf[cbuf->last_pos]=in[i];
 8000b24:	68e3      	ldr	r3, [r4, #12]
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	5c39      	ldrb	r1, [r7, r0]
 8000b2a:	54d1      	strb	r1, [r2, r3]
      cbuf->last_pos++;
 8000b2c:	68e3      	ldr	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
 8000b2e:	6862      	ldr	r2, [r4, #4]
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000b30:	3301      	adds	r3, #1
      if (cbuf->last_pos == cbuf->size) {
 8000b32:	4293      	cmp	r3, r2
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000b34:	60e3      	str	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
 8000b36:	bf04      	itt	eq
 8000b38:	2300      	moveq	r3, #0
 8000b3a:	60e3      	streq	r3, [r4, #12]
int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	e7ef      	b.n	8000b20 <cbuf_append+0x28>
 8000b40:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000b44:	2300      	movs	r3, #0
 8000b46:	6123      	str	r3, [r4, #16]
 8000b48:	e000      	b.n	8000b4c <cbuf_append+0x54>
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
 8000b4a:	2000      	movs	r0, #0
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000b4c:	b662      	cpsie	i
  return(i);
}
 8000b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <adc_disable_scan_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_disable_scan_mode(uint32_t adc)
{
	ADC_CR1(adc) &= ~ADC_CR1_SCAN;
 8000b54:	6843      	ldr	r3, [r0, #4]
 8000b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b5a:	6043      	str	r3, [r0, #4]
 8000b5c:	4770      	bx	lr

08000b5e <adc_start_conversion_regular>:
*/

void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR2(adc) |= ADC_CR2_SWSTART;
 8000b5e:	6883      	ldr	r3, [r0, #8]
 8000b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b64:	f100 0208 	add.w	r2, r0, #8
 8000b68:	6083      	str	r3, [r0, #8]

	/* Wait until the ADC starts the conversion. */
	while (ADC_CR2(adc) & ADC_CR2_SWSTART);
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	d4fc      	bmi.n	8000b6a <adc_start_conversion_regular+0xc>
}
 8000b70:	4770      	bx	lr

08000b72 <adc_set_single_conversion_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_set_single_conversion_mode(uint32_t adc)
{
	ADC_CR2(adc) &= ~ADC_CR2_CONT;
 8000b72:	6883      	ldr	r3, [r0, #8]
 8000b74:	f023 0302 	bic.w	r3, r3, #2
 8000b78:	6083      	str	r3, [r0, #8]
 8000b7a:	4770      	bx	lr

08000b7c <adc_set_sample_time>:

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
	uint32_t reg32;

	if (channel < 10) {
 8000b7c:	2909      	cmp	r1, #9
adc_channel
@param[in] time Unsigned int8. Sampling time selection from @ref adc_sample_rg
*/

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
 8000b7e:	b510      	push	{r4, lr}
	uint32_t reg32;

	if (channel < 10) {
 8000b80:	d80b      	bhi.n	8000b9a <adc_set_sample_time+0x1e>
		reg32 = ADC_SMPR2(adc);
 8000b82:	6904      	ldr	r4, [r0, #16]
		reg32 &= ~(0x7 << (channel * 3));
 8000b84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b88:	2307      	movs	r3, #7
 8000b8a:	408b      	lsls	r3, r1
 8000b8c:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << (channel * 3));
 8000b90:	fa02 f101 	lsl.w	r1, r2, r1
 8000b94:	4319      	orrs	r1, r3
		ADC_SMPR2(adc) = reg32;
 8000b96:	6101      	str	r1, [r0, #16]
 8000b98:	bd10      	pop	{r4, pc}
	} else {
		reg32 = ADC_SMPR1(adc);
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000b9a:	390a      	subs	r1, #10
 8000b9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		reg32 = ADC_SMPR2(adc);
		reg32 &= ~(0x7 << (channel * 3));
		reg32 |= (time << (channel * 3));
		ADC_SMPR2(adc) = reg32;
	} else {
		reg32 = ADC_SMPR1(adc);
 8000ba0:	68c4      	ldr	r4, [r0, #12]
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	408b      	lsls	r3, r1
 8000ba6:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << ((channel - 10) * 3));
 8000baa:	408a      	lsls	r2, r1
 8000bac:	ea43 0102 	orr.w	r1, r3, r2
		ADC_SMPR1(adc) = reg32;
 8000bb0:	60c1      	str	r1, [r0, #12]
 8000bb2:	bd10      	pop	{r4, pc}

08000bb4 <adc_set_regular_sequence>:
{
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000bb4:	2910      	cmp	r1, #16
@param[in] length Unsigned int8. Number of channels in the group.
@param[in] channel Unsigned int8[]. Set of channels in sequence, integers 0..18.
*/

void adc_set_regular_sequence(uint32_t adc, uint8_t length, uint8_t channel[])
{
 8000bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000bba:	d839      	bhi.n	8000c30 <adc_set_regular_sequence+0x7c>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	461e      	mov	r6, r3
 8000bc6:	461f      	mov	r7, r3
 8000bc8:	fa5f fc83 	uxtb.w	ip, r3
 8000bcc:	f10c 0801 	add.w	r8, ip, #1
 8000bd0:	fa5f f888 	uxtb.w	r8, r8
		return;
	}

	for (i = 1; i <= length; i++) {
 8000bd4:	4588      	cmp	r8, r1
 8000bd6:	d825      	bhi.n	8000c24 <adc_set_regular_sequence+0x70>
		if (i <= 6) {
 8000bd8:	f1b8 0f06 	cmp.w	r8, #6
 8000bdc:	d807      	bhi.n	8000bee <adc_set_regular_sequence+0x3a>
			reg32_3 |= (channel[i - 1] << ((i - 1) * 5));
 8000bde:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000be2:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 8000be6:	fa09 f808 	lsl.w	r8, r9, r8
 8000bea:	ea45 0508 	orr.w	r5, r5, r8
		}
		if ((i > 6) & (i <= 12)) {
 8000bee:	f1ac 0806 	sub.w	r8, ip, #6
 8000bf2:	f1b8 0f05 	cmp.w	r8, #5
 8000bf6:	d807      	bhi.n	8000c08 <adc_set_regular_sequence+0x54>
			reg32_2 |= (channel[i - 1] << ((i - 6 - 1) * 5));
 8000bf8:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000bfc:	f104 081e 	add.w	r8, r4, #30
 8000c00:	fa09 f808 	lsl.w	r8, r9, r8
 8000c04:	ea46 0608 	orr.w	r6, r6, r8
		}
		if ((i > 12) & (i <= 16)) {
 8000c08:	f1ac 0c0c 	sub.w	ip, ip, #12
 8000c0c:	f1bc 0f03 	cmp.w	ip, #3
 8000c10:	d805      	bhi.n	8000c1e <adc_set_regular_sequence+0x6a>
			reg32_1 |= (channel[i - 1] << ((i - 12 - 1) * 5));
 8000c12:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000c16:	fa0c fc04 	lsl.w	ip, ip, r4
 8000c1a:	ea47 070c 	orr.w	r7, r7, ip
 8000c1e:	3301      	adds	r3, #1
 8000c20:	3405      	adds	r4, #5
 8000c22:	e7d1      	b.n	8000bc8 <adc_set_regular_sequence+0x14>
		}
	}
	reg32_1 |= ((length - 1) << ADC_SQR1_L_LSB);
 8000c24:	3901      	subs	r1, #1
 8000c26:	ea47 5701 	orr.w	r7, r7, r1, lsl #20

	ADC_SQR1(adc) = reg32_1;
 8000c2a:	62c7      	str	r7, [r0, #44]	; 0x2c
	ADC_SQR2(adc) = reg32_2;
 8000c2c:	6306      	str	r6, [r0, #48]	; 0x30
	ADC_SQR3(adc) = reg32_3;
 8000c2e:	6345      	str	r5, [r0, #52]	; 0x34
 8000c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c34 <adc_eoc>:
@returns bool. End of conversion flag.
*/

bool adc_eoc(uint32_t adc)
{
	return (ADC_SR(adc) & ADC_SR_EOC) != 0;
 8000c34:	6800      	ldr	r0, [r0, #0]
}
 8000c36:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000c3a:	4770      	bx	lr

08000c3c <adc_read_regular>:
@returns Unsigned int32 conversion result.
*/

uint32_t adc_read_regular(uint32_t adc)
{
	return ADC_DR(adc);
 8000c3c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8000c3e:	4770      	bx	lr

08000c40 <adc_power_on>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_power_on(uint32_t adc)
{
	ADC_CR2(adc) |= ADC_CR2_ADON;
 8000c40:	6883      	ldr	r3, [r0, #8]
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6083      	str	r3, [r0, #8]
 8000c48:	4770      	bx	lr
	...

08000c4c <adc_set_clk_prescale>:
adc_ccr_adcpre
*/

void adc_set_clk_prescale(uint32_t prescale)
{
	uint32_t reg32 = ((ADC_CCR & ~ADC_CCR_ADCPRE_MASK) | prescale);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <adc_set_clk_prescale+0x10>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c54:	4310      	orrs	r0, r2
	ADC_CCR = reg32;
 8000c56:	6018      	str	r0, [r3, #0]
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40012304 	.word	0x40012304

08000c60 <adc_set_multi_mode>:
@param[in] mode Unsigned int32. Multiple mode selection from @ref adc_multi_mode
*/

void adc_set_multi_mode(uint32_t mode)
{
	ADC_CCR |= mode;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <adc_set_multi_mode+0xc>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4310      	orrs	r0, r2
 8000c66:	6018      	str	r0, [r3, #0]
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40012304 	.word	0x40012304

08000c70 <rcc_wait_for_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000c70:	2804      	cmp	r0, #4
 8000c72:	d81c      	bhi.n	8000cae <rcc_wait_for_osc_ready+0x3e>
 8000c74:	e8df f000 	tbb	[pc, r0]
 8000c78:	120d0803 	.word	0x120d0803
 8000c7c:	17          	.byte	0x17
 8000c7d:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <rcc_wait_for_osc_ready+0x40>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	d5fb      	bpl.n	8000c7e <rcc_wait_for_osc_ready+0xe>
 8000c86:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <rcc_wait_for_osc_ready+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0398      	lsls	r0, r3, #14
 8000c8e:	d5fb      	bpl.n	8000c88 <rcc_wait_for_osc_ready+0x18>
 8000c90:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <rcc_wait_for_osc_ready+0x40>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	0799      	lsls	r1, r3, #30
 8000c98:	d5fb      	bpl.n	8000c92 <rcc_wait_for_osc_ready+0x22>
 8000c9a:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <rcc_wait_for_osc_ready+0x44>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	079a      	lsls	r2, r3, #30
 8000ca2:	d5fb      	bpl.n	8000c9c <rcc_wait_for_osc_ready+0x2c>
 8000ca4:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <rcc_wait_for_osc_ready+0x48>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	079b      	lsls	r3, r3, #30
 8000cac:	d5fb      	bpl.n	8000ca6 <rcc_wait_for_osc_ready+0x36>
 8000cae:	4770      	bx	lr
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40023870 	.word	0x40023870
 8000cb8:	40023874 	.word	0x40023874

08000cbc <rcc_wait_for_sysclk_status>:
	}
}

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
 8000cbc:	2801      	cmp	r0, #1
 8000cbe:	d00a      	beq.n	8000cd6 <rcc_wait_for_sysclk_status+0x1a>
 8000cc0:	d302      	bcc.n	8000cc8 <rcc_wait_for_sysclk_status+0xc>
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d00e      	beq.n	8000ce4 <rcc_wait_for_sysclk_status+0x28>
 8000cc6:	4770      	bx	lr
	case PLL:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_PLL);
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <rcc_wait_for_sysclk_status+0x34>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d1f9      	bne.n	8000cc8 <rcc_wait_for_sysclk_status+0xc>
 8000cd4:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <rcc_wait_for_sysclk_status+0x34>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d1f9      	bne.n	8000cd6 <rcc_wait_for_sysclk_status+0x1a>
 8000ce2:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSI);
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <rcc_wait_for_sysclk_status+0x34>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	079b      	lsls	r3, r3, #30
 8000cea:	d1fb      	bne.n	8000ce4 <rcc_wait_for_sysclk_status+0x28>
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023808 	.word	0x40023808

08000cf4 <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d817      	bhi.n	8000d28 <rcc_osc_on+0x34>
 8000cf8:	e8df f000 	tbb	[pc, r0]
 8000cfc:	0f0d0803 	.word	0x0f0d0803
 8000d00:	11          	.byte	0x11
 8000d01:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <rcc_osc_on+0x38>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000d0a:	e00c      	b.n	8000d26 <rcc_osc_on+0x32>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <rcc_osc_on+0x38>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d14:	e007      	b.n	8000d26 <rcc_osc_on+0x32>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <rcc_osc_on+0x38>)
 8000d18:	e002      	b.n	8000d20 <rcc_osc_on+0x2c>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <rcc_osc_on+0x3c>)
 8000d1c:	e000      	b.n	8000d20 <rcc_osc_on+0x2c>
		break;
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <rcc_osc_on+0x40>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40023870 	.word	0x40023870
 8000d34:	40023874 	.word	0x40023874

08000d38 <rcc_osc_off>:
	}
}

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8000d38:	2804      	cmp	r0, #4
 8000d3a:	d817      	bhi.n	8000d6c <rcc_osc_off+0x34>
 8000d3c:	e8df f000 	tbb	[pc, r0]
 8000d40:	0f0d0803 	.word	0x0f0d0803
 8000d44:	11          	.byte	0x11
 8000d45:	00          	.byte	0x00
	case PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <rcc_osc_off+0x38>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000d4e:	e00c      	b.n	8000d6a <rcc_osc_off+0x32>
		break;
	case HSE:
		RCC_CR &= ~RCC_CR_HSEON;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <rcc_osc_off+0x38>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d58:	e007      	b.n	8000d6a <rcc_osc_off+0x32>
		break;
	case HSI:
		RCC_CR &= ~RCC_CR_HSION;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <rcc_osc_off+0x38>)
 8000d5c:	e002      	b.n	8000d64 <rcc_osc_off+0x2c>
		break;
	case LSE:
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <rcc_osc_off+0x3c>)
 8000d60:	e000      	b.n	8000d64 <rcc_osc_off+0x2c>
		break;
	case LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <rcc_osc_off+0x40>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40023870 	.word	0x40023870
 8000d78:	40023874 	.word	0x40023874

08000d7c <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <rcc_set_sysclk_source+0x10>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 8000d80:	f022 0203 	bic.w	r2, r2, #3
	RCC_CFGR = (reg32 | clk);
 8000d84:	4310      	orrs	r0, r2
 8000d86:	6018      	str	r0, [r3, #0]
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023808 	.word	0x40023808

08000d90 <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <rcc_set_ppre2+0x10>)
 8000d92:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8000d94:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8000d98:	ea42 3040 	orr.w	r0, r2, r0, lsl #13
 8000d9c:	6018      	str	r0, [r3, #0]
 8000d9e:	4770      	bx	lr
 8000da0:	40023808 	.word	0x40023808

08000da4 <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <rcc_set_ppre1+0x10>)
 8000da6:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 8000da8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000dac:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
 8000db0:	6018      	str	r0, [r3, #0]
 8000db2:	4770      	bx	lr
 8000db4:	40023808 	.word	0x40023808

08000db8 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <rcc_set_hpre+0x10>)
 8000dba:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000dbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000dc0:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	4770      	bx	lr
 8000dc8:	40023808 	.word	0x40023808

08000dcc <rcc_set_main_pll_hse>:
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000dcc:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000dd4:	0852      	lsrs	r2, r2, #1
		RCC_PLLCFGR_PLLSRC |
 8000dd6:	ea43 1181 	orr.w	r1, r3, r1, lsl #6
void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000dda:	1e53      	subs	r3, r2, #1
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000ddc:	4a02      	ldr	r2, [pc, #8]	; (8000de8 <rcc_set_main_pll_hse+0x1c>)
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
		RCC_PLLCFGR_PLLSRC |
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000de2:	6011      	str	r1, [r2, #0]
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023804 	.word	0x40023804

08000dec <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const clock_scale_t *clock)
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff ff7f 	bl	8000cf4 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff ff3a 	bl	8000c70 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffbd 	bl	8000d7c <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff ff76 	bl	8000cf4 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff ff31 	bl	8000c70 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 8000e0e:	7be0      	ldrb	r0, [r4, #15]
 8000e10:	b100      	cbz	r0, 8000e14 <rcc_clock_setup_hse_3v3+0x28>
		pwr_set_vos_scale(SCALE1);
	} else {
		pwr_set_vos_scale(SCALE2);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 ffa6 	bl	8001d64 <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8000e18:	7b20      	ldrb	r0, [r4, #12]
 8000e1a:	f7ff ffcd 	bl	8000db8 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8000e1e:	7b60      	ldrb	r0, [r4, #13]
 8000e20:	f7ff ffc0 	bl	8000da4 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8000e24:	7ba0      	ldrb	r0, [r4, #14]
 8000e26:	f7ff ffb3 	bl	8000d90 <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 8000e2a:	7922      	ldrb	r2, [r4, #4]
 8000e2c:	7963      	ldrb	r3, [r4, #5]
 8000e2e:	7820      	ldrb	r0, [r4, #0]
 8000e30:	8861      	ldrh	r1, [r4, #2]
 8000e32:	f7ff ffcb 	bl	8000dcc <rcc_set_main_pll_hse>

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <rcc_clock_setup_hse_3v3+0x84>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e3e:	601a      	str	r2, [r3, #0]

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	0192      	lsls	r2, r2, #6
 8000e44:	d5fc      	bpl.n	8000e40 <rcc_clock_setup_hse_3v3+0x54>
	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
	rcc_wait_for_osc_ready(PLL);

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 8000e46:	68a0      	ldr	r0, [r4, #8]
 8000e48:	f000 fb1a 	bl	8001480 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff ff95 	bl	8000d7c <rcc_set_sysclk_source>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(PLL);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ff32 	bl	8000cbc <rcc_wait_for_sysclk_status>

	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <rcc_clock_setup_hse_3v3+0x88>)
 8000e5a:	6923      	ldr	r3, [r4, #16]
 8000e5c:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = clock->apb2_frequency;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <rcc_clock_setup_hse_3v3+0x8c>)
 8000e60:	6962      	ldr	r2, [r4, #20]
 8000e62:	601a      	str	r2, [r3, #0]

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000e64:	2002      	movs	r0, #2
}
 8000e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
	rcc_ppre2_frequency = clock->apb2_frequency;

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000e6a:	f7ff bf65 	b.w	8000d38 <rcc_osc_off>
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	20000020 	.word	0x20000020
 8000e78:	20000024 	.word	0x20000024

08000e7c <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000e7c:	6181      	str	r1, [r0, #24]
 8000e7e:	4770      	bx	lr

08000e80 <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000e80:	0409      	lsls	r1, r1, #16
 8000e82:	6181      	str	r1, [r0, #24]
 8000e84:	4770      	bx	lr

08000e86 <gpio_toggle>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 8000e86:	6943      	ldr	r3, [r0, #20]
 8000e88:	4059      	eors	r1, r3
 8000e8a:	6141      	str	r1, [r0, #20]
 8000e8c:	4770      	bx	lr

08000e8e <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000e92:	6806      	ldr	r6, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000e94:	68c5      	ldr	r5, [r0, #12]
 8000e96:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000e98:	fa43 f704 	asr.w	r7, r3, r4
 8000e9c:	07ff      	lsls	r7, r7, #31
 8000e9e:	d511      	bpl.n	8000ec4 <gpio_mode_setup+0x36>
 8000ea0:	0067      	lsls	r7, r4, #1
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000ea2:	f04f 0c03 	mov.w	ip, #3
 8000ea6:	fa0c fc07 	lsl.w	ip, ip, r7
 8000eaa:	ea6f 0c0c 	mvn.w	ip, ip
		moder |= GPIO_MODE(i, mode);
 8000eae:	fa01 f807 	lsl.w	r8, r1, r7
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000eb2:	ea0c 0606 	and.w	r6, ip, r6
		moder |= GPIO_MODE(i, mode);
		pupd &= ~GPIO_PUPD_MASK(i);
 8000eb6:	ea0c 0505 	and.w	r5, ip, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000eba:	fa02 f707 	lsl.w	r7, r2, r7
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
		moder |= GPIO_MODE(i, mode);
 8000ebe:	ea46 0608 	orr.w	r6, r6, r8
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000ec2:	433d      	orrs	r5, r7
 8000ec4:	3401      	adds	r4, #1
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
	pupd = GPIO_PUPDR(gpioport);

	for (i = 0; i < 16; i++) {
 8000ec6:	2c10      	cmp	r4, #16
 8000ec8:	d1e6      	bne.n	8000e98 <gpio_mode_setup+0xa>
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000eca:	6006      	str	r6, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000ecc:	60c5      	str	r5, [r0, #12]
 8000ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ed2 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 8000ed4:	6a05      	ldr	r5, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8000ed6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000ed8:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000eda:	fa42 f603 	asr.w	r6, r2, r3
 8000ede:	07f7      	lsls	r7, r6, #31
 8000ee0:	d507      	bpl.n	8000ef2 <gpio_set_af+0x20>
 8000ee2:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000ee4:	270f      	movs	r7, #15
 8000ee6:	40b7      	lsls	r7, r6
 8000ee8:	ea25 0507 	bic.w	r5, r5, r7
		afrl |= GPIO_AFR(i, alt_func_num);
 8000eec:	fa01 f606 	lsl.w	r6, r1, r6
 8000ef0:	4335      	orrs	r5, r6
 8000ef2:	3301      	adds	r3, #1
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);

	for (i = 0; i < 8; i++) {
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d1f0      	bne.n	8000eda <gpio_set_af+0x8>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f103 0608 	add.w	r6, r3, #8
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000efe:	fa42 f606 	asr.w	r6, r2, r6
 8000f02:	07f6      	lsls	r6, r6, #31
 8000f04:	d507      	bpl.n	8000f16 <gpio_set_af+0x44>
 8000f06:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000f08:	270f      	movs	r7, #15
 8000f0a:	40b7      	lsls	r7, r6
 8000f0c:	ea24 0407 	bic.w	r4, r4, r7
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000f10:	fa01 f606 	lsl.w	r6, r1, r6
 8000f14:	4334      	orrs	r4, r6
 8000f16:	3301      	adds	r3, #1
		}
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d1ee      	bne.n	8000efa <gpio_set_af+0x28>
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
		afrh |= GPIO_AFR(i - 8, alt_func_num);
	}

	GPIO_AFRL(gpioport) = afrl;
 8000f1c:	6205      	str	r5, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000f1e:	6244      	str	r4, [r0, #36]	; 0x24
 8000f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f24 <timer_reset>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
 8000f24:	b508      	push	{r3, lr}
	switch (timer_peripheral) {
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <timer_reset+0xb8>)
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	d036      	beq.n	8000f9a <timer_reset+0x76>
 8000f2c:	d810      	bhi.n	8000f50 <timer_reset+0x2c>
 8000f2e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d024      	beq.n	8000f80 <timer_reset+0x5c>
 8000f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f3a:	4298      	cmp	r0, r3
 8000f3c:	d026      	beq.n	8000f8c <timer_reset+0x68>
 8000f3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f42:	d149      	bne.n	8000fd8 <timer_reset+0xb4>
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f44:	4826      	ldr	r0, [pc, #152]	; (8000fe0 <timer_reset+0xbc>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	f000 faa8 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f4c:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <timer_reset+0xbc>)
 8000f4e:	e015      	b.n	8000f7c <timer_reset+0x58>
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <timer_reset+0xc0>)
 8000f52:	4298      	cmp	r0, r3
 8000f54:	d02f      	beq.n	8000fb6 <timer_reset+0x92>
 8000f56:	d804      	bhi.n	8000f62 <timer_reset+0x3e>
 8000f58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	d023      	beq.n	8000fa8 <timer_reset+0x84>
 8000f60:	bd08      	pop	{r3, pc}
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <timer_reset+0xc4>)
 8000f64:	4298      	cmp	r0, r3
 8000f66:	d004      	beq.n	8000f72 <timer_reset+0x4e>
 8000f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	d029      	beq.n	8000fc4 <timer_reset+0xa0>
 8000f70:	bd08      	pop	{r3, pc}
#if defined(TIM1_BASE)
	case TIM1:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <timer_reset+0xc8>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	f000 fa91 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 8000f7a:	481c      	ldr	r0, [pc, #112]	; (8000fec <timer_reset+0xc8>)
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	e027      	b.n	8000fd0 <timer_reset+0xac>
		break;
	case TIM3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <timer_reset+0xbc>)
 8000f82:	2102      	movs	r1, #2
 8000f84:	f000 fa8a 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 8000f88:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <timer_reset+0xbc>)
 8000f8a:	e020      	b.n	8000fce <timer_reset+0xaa>
		break;
	case TIM4:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <timer_reset+0xbc>)
 8000f8e:	2104      	movs	r1, #4
 8000f90:	f000 fa84 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <timer_reset+0xbc>)
 8000f96:	2104      	movs	r1, #4
 8000f98:	e01a      	b.n	8000fd0 <timer_reset+0xac>
		break;
#if defined(TIM5_BASE)
	case TIM5:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 8000f9a:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <timer_reset+0xbc>)
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	f000 fa7d 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 8000fa2:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <timer_reset+0xbc>)
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	e013      	b.n	8000fd0 <timer_reset+0xac>
		break;
#endif
	case TIM6:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <timer_reset+0xbc>)
 8000faa:	2110      	movs	r1, #16
 8000fac:	f000 fa76 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <timer_reset+0xbc>)
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	e00c      	b.n	8000fd0 <timer_reset+0xac>
		break;
	case TIM7:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <timer_reset+0xbc>)
 8000fb8:	2120      	movs	r1, #32
 8000fba:	f000 fa6f 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <timer_reset+0xbc>)
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	e005      	b.n	8000fd0 <timer_reset+0xac>
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <timer_reset+0xc8>)
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	f000 fa68 	bl	800149c <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <timer_reset+0xc8>)
 8000fce:	2102      	movs	r1, #2
		rcc_peripheral_clear_reset(&RCC_APB1RSTR,
					   RCC_APB1RSTR_TIM14RST);
		break;
*/
	}
}
 8000fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000fd4:	f000 ba66 	b.w	80014a4 <rcc_peripheral_clear_reset>
 8000fd8:	bd08      	pop	{r3, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000c00 	.word	0x40000c00
 8000fe0:	40023820 	.word	0x40023820
 8000fe4:	40001400 	.word	0x40001400
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40023824 	.word	0x40023824

08000ff0 <timer_enable_irq>:
enable bits to be set
*/

void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) |= irq;
 8000ff0:	68c3      	ldr	r3, [r0, #12]
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	60c1      	str	r1, [r0, #12]
 8000ff6:	4770      	bx	lr

08000ff8 <timer_clear_flag>:
@param[in] flag Unsigned int32. @ref tim_sr_values. Status register flag.
*/

void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag)
{
	TIM_SR(timer_peripheral) &= ~flag;
 8000ff8:	6903      	ldr	r3, [r0, #16]
 8000ffa:	ea23 0101 	bic.w	r1, r3, r1
 8000ffe:	6101      	str	r1, [r0, #16]
 8001000:	4770      	bx	lr

08001002 <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 8001002:	b510      	push	{r4, lr}
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 8001004:	6804      	ldr	r4, [r0, #0]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);

	cr1 |= clock_div | alignment | direction;
 8001006:	4313      	orrs	r3, r2
{
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 8001008:	f424 745c 	bic.w	r4, r4, #880	; 0x370

	cr1 |= clock_div | alignment | direction;
 800100c:	4319      	orrs	r1, r3
 800100e:	430c      	orrs	r4, r1

	TIM_CR1(timer_peripheral) = cr1;
 8001010:	6004      	str	r4, [r0, #0]
 8001012:	bd10      	pop	{r4, pc}

08001014 <timer_enable_preload>:
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 8001014:	6803      	ldr	r3, [r0, #0]
 8001016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4770      	bx	lr

0800101e <timer_continuous_mode>:
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 800101e:	6803      	ldr	r3, [r0, #0]
 8001020:	f023 0308 	bic.w	r3, r3, #8
 8001024:	6003      	str	r3, [r0, #0]
 8001026:	4770      	bx	lr

08001028 <timer_enable_update_event>:
tim_reg_base
*/

void timer_enable_update_event(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_UDIS;
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4770      	bx	lr

08001032 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6003      	str	r3, [r0, #0]
 800103a:	4770      	bx	lr

0800103c <timer_disable_preload_complementry_enable_bits>:
*/

void timer_disable_preload_complementry_enable_bits(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <timer_disable_preload_complementry_enable_bits+0x14>)
 800103e:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001042:	429a      	cmp	r2, r3
 8001044:	d103      	bne.n	800104e <timer_disable_preload_complementry_enable_bits+0x12>
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCPC;
 8001046:	6843      	ldr	r3, [r0, #4]
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6043      	str	r3, [r0, #4]
 800104e:	4770      	bx	lr
 8001050:	40010000 	.word	0x40010000

08001054 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8001054:	6281      	str	r1, [r0, #40]	; 0x28
 8001056:	4770      	bx	lr

08001058 <timer_set_repetition_counter>:
*/

void timer_set_repetition_counter(uint32_t timer_peripheral, uint32_t value)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <timer_set_repetition_counter+0x10>)
 800105a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800105e:	429a      	cmp	r2, r3
		TIM_RCR(timer_peripheral) = value;
 8001060:	bf08      	it	eq
 8001062:	6301      	streq	r1, [r0, #48]	; 0x30
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000

0800106c <timer_set_period>:
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
	TIM_ARR(timer_peripheral) = period;
 800106c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800106e:	4770      	bx	lr

08001070 <timer_set_oc_mode>:
*/

void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
		       enum tim_oc_mode oc_mode)
{
	switch (oc_id) {
 8001070:	2906      	cmp	r1, #6
 8001072:	f200 80bf 	bhi.w	80011f4 <timer_set_oc_mode+0x184>
 8001076:	e8df f011 	tbh	[pc, r1, lsl #1]
 800107a:	0007      	.short	0x0007
 800107c:	003200bd 	.word	0x003200bd
 8001080:	005e00bd 	.word	0x005e00bd
 8001084:	008c00bd 	.word	0x008c00bd
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 8001088:	6983      	ldr	r3, [r0, #24]
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC1S_OUT;
 8001090:	6983      	ldr	r3, [r0, #24]
 8001092:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1M_MASK;
 8001094:	6983      	ldr	r3, [r0, #24]
 8001096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109a:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 800109c:	2a07      	cmp	r2, #7
 800109e:	f200 80a9 	bhi.w	80011f4 <timer_set_oc_mode+0x184>
 80010a2:	e8df f002 	tbb	[pc, r2]
 80010a6:	5a2e      	.short	0x5a2e
 80010a8:	100c0804 	.word	0x100c0804
 80010ac:	1814      	.short	0x1814
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_INACTIVE;
 80010ae:	6983      	ldr	r3, [r0, #24]
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	e084      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_TOGGLE;
 80010b6:	6983      	ldr	r3, [r0, #24]
 80010b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010bc:	e080      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FORCE_LOW;
 80010be:	6983      	ldr	r3, [r0, #24]
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	e07c      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 80010c6:	6983      	ldr	r3, [r0, #24]
 80010c8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80010cc:	e078      	b.n	80011c0 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC1M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM1;
 80010ce:	6983      	ldr	r3, [r0, #24]
 80010d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010d4:	e074      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM2;
 80010d6:	6983      	ldr	r3, [r0, #24]
 80010d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80010dc:	e070      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 80010de:	6983      	ldr	r3, [r0, #24]
 80010e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010e4:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC2S_OUT;
 80010e6:	6983      	ldr	r3, [r0, #24]
 80010e8:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2M_MASK;
 80010ea:	6983      	ldr	r3, [r0, #24]
 80010ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010f0:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 80010f2:	2a07      	cmp	r2, #7
 80010f4:	d87e      	bhi.n	80011f4 <timer_set_oc_mode+0x184>
 80010f6:	e8df f002 	tbb	[pc, r2]
 80010fa:	6004      	.short	0x6004
 80010fc:	120e0a06 	.word	0x120e0a06
 8001100:	1a16      	.short	0x1a16
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FROZEN;
 8001102:	6983      	ldr	r3, [r0, #24]
 8001104:	e05c      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_INACTIVE;
 8001106:	6983      	ldr	r3, [r0, #24]
 8001108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110c:	e058      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_TOGGLE;
 800110e:	6983      	ldr	r3, [r0, #24]
 8001110:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001114:	e054      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FORCE_LOW;
 8001116:	6983      	ldr	r3, [r0, #24]
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	e050      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 800111e:	6983      	ldr	r3, [r0, #24]
 8001120:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8001124:	e04c      	b.n	80011c0 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC2M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM1;
 8001126:	6983      	ldr	r3, [r0, #24]
 8001128:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800112c:	e048      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM2;
 800112e:	6983      	ldr	r3, [r0, #24]
 8001130:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001134:	e044      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC3:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 8001136:	6983      	ldr	r3, [r0, #24]
 8001138:	f023 0303 	bic.w	r3, r3, #3
 800113c:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC3S_OUT;
 800113e:	6983      	ldr	r3, [r0, #24]
 8001140:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3M_MASK;
 8001142:	69c3      	ldr	r3, [r0, #28]
 8001144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001148:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 800114a:	2a07      	cmp	r2, #7
 800114c:	d852      	bhi.n	80011f4 <timer_set_oc_mode+0x184>
 800114e:	e8df f002 	tbb	[pc, r2]
 8001152:	0432      	.short	0x0432
 8001154:	14100c08 	.word	0x14100c08
 8001158:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC3M_ACTIVE;
 800115a:	6983      	ldr	r3, [r0, #24]
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	e02e      	b.n	80011c0 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_INACTIVE;
 8001162:	69c3      	ldr	r3, [r0, #28]
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	e043      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_TOGGLE;
 800116a:	69c3      	ldr	r3, [r0, #28]
 800116c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001170:	e03f      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FORCE_LOW;
 8001172:	69c3      	ldr	r3, [r0, #28]
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	e03b      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 800117a:	69c3      	ldr	r3, [r0, #28]
 800117c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001180:	e037      	b.n	80011f2 <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC3M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM1;
 8001182:	69c3      	ldr	r3, [r0, #28]
 8001184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001188:	e033      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM2;
 800118a:	69c3      	ldr	r3, [r0, #28]
 800118c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001190:	e02f      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		}
		break;
	case TIM_OC4:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 8001192:	6983      	ldr	r3, [r0, #24]
 8001194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001198:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC4S_OUT;
 800119a:	6983      	ldr	r3, [r0, #24]
 800119c:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4M_MASK;
 800119e:	69c3      	ldr	r3, [r0, #28]
 80011a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011a4:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 80011a6:	2a07      	cmp	r2, #7
 80011a8:	d824      	bhi.n	80011f4 <timer_set_oc_mode+0x184>
 80011aa:	e8df f002 	tbb	[pc, r2]
 80011ae:	0604      	.short	0x0604
 80011b0:	17130f0b 	.word	0x17130f0b
 80011b4:	1f1b      	.short	0x1f1b
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FROZEN;
 80011b6:	69c3      	ldr	r3, [r0, #28]
 80011b8:	e01b      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC4M_ACTIVE;
 80011ba:	6983      	ldr	r3, [r0, #24]
 80011bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c0:	6183      	str	r3, [r0, #24]
			break;
 80011c2:	4770      	bx	lr
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_INACTIVE;
 80011c4:	69c3      	ldr	r3, [r0, #28]
 80011c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ca:	e012      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_TOGGLE;
 80011cc:	69c3      	ldr	r3, [r0, #28]
 80011ce:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80011d2:	e00e      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FORCE_LOW;
 80011d4:	69c3      	ldr	r3, [r0, #28]
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	e00a      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 80011dc:	69c3      	ldr	r3, [r0, #28]
 80011de:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80011e2:	e006      	b.n	80011f2 <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC4M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM1;
 80011e4:	69c3      	ldr	r3, [r0, #28]
 80011e6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80011ea:	e002      	b.n	80011f2 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM2;
 80011ec:	69c3      	ldr	r3, [r0, #28]
 80011ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80011f2:	61c3      	str	r3, [r0, #28]
 80011f4:	4770      	bx	lr

080011f6 <timer_enable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80011f6:	2906      	cmp	r1, #6
 80011f8:	d816      	bhi.n	8001228 <timer_enable_oc_preload+0x32>
 80011fa:	e8df f001 	tbb	[pc, r1]
 80011fe:	1504      	.short	0x1504
 8001200:	150d1508 	.word	0x150d1508
 8001204:	11          	.byte	0x11
 8001205:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1PE;
 8001206:	6983      	ldr	r3, [r0, #24]
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	e002      	b.n	8001214 <timer_enable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2PE;
 800120e:	6983      	ldr	r3, [r0, #24]
 8001210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001214:	6183      	str	r3, [r0, #24]
		break;
 8001216:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3PE;
 8001218:	69c3      	ldr	r3, [r0, #28]
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	e002      	b.n	8001226 <timer_enable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4PE;
 8001220:	69c3      	ldr	r3, [r0, #28]
 8001222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001226:	61c3      	str	r3, [r0, #28]
 8001228:	4770      	bx	lr
	...

0800122c <timer_set_oc_polarity_high>:
		timers 1 and 8)
*/

void timer_set_oc_polarity_high(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 800122c:	2906      	cmp	r1, #6
 800122e:	d815      	bhi.n	800125c <timer_set_oc_polarity_high+0x30>
 8001230:	e8df f001 	tbb	[pc, r1]
 8001234:	14081404 	.word	0x14081404
 8001238:	140c      	.short	0x140c
 800123a:	10          	.byte	0x10
 800123b:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1P;
 800123c:	6a03      	ldr	r3, [r0, #32]
 800123e:	f023 0302 	bic.w	r3, r3, #2
 8001242:	e00a      	b.n	800125a <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2P;
 8001244:	6a03      	ldr	r3, [r0, #32]
 8001246:	f023 0320 	bic.w	r3, r3, #32
 800124a:	e006      	b.n	800125a <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3P;
 800124c:	6a03      	ldr	r3, [r0, #32]
 800124e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001252:	e002      	b.n	800125a <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4P;
 8001254:	6a03      	ldr	r3, [r0, #32]
 8001256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800125a:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <timer_set_oc_polarity_high+0x60>)
 800125e:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001262:	429a      	cmp	r2, r3
 8001264:	d111      	bne.n	800128a <timer_set_oc_polarity_high+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 8001266:	2903      	cmp	r1, #3
 8001268:	d007      	beq.n	800127a <timer_set_oc_polarity_high+0x4e>
 800126a:	2905      	cmp	r1, #5
 800126c:	d009      	beq.n	8001282 <timer_set_oc_polarity_high+0x56>
 800126e:	2901      	cmp	r1, #1
 8001270:	d10b      	bne.n	800128a <timer_set_oc_polarity_high+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NP;
 8001272:	6a03      	ldr	r3, [r0, #32]
 8001274:	f023 0308 	bic.w	r3, r3, #8
 8001278:	e006      	b.n	8001288 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NP;
 800127a:	6a03      	ldr	r3, [r0, #32]
 800127c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001280:	e002      	b.n	8001288 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NP;
 8001282:	6a03      	ldr	r3, [r0, #32]
 8001284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001288:	6203      	str	r3, [r0, #32]
 800128a:	4770      	bx	lr
 800128c:	40010000 	.word	0x40010000

08001290 <timer_enable_oc_output>:
		timers 1 and 8)
*/

void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8001290:	2906      	cmp	r1, #6
 8001292:	d815      	bhi.n	80012c0 <timer_enable_oc_output+0x30>
 8001294:	e8df f001 	tbb	[pc, r1]
 8001298:	14081404 	.word	0x14081404
 800129c:	140c      	.short	0x140c
 800129e:	10          	.byte	0x10
 800129f:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1E;
 80012a0:	6a03      	ldr	r3, [r0, #32]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	e00a      	b.n	80012be <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2E;
 80012a8:	6a03      	ldr	r3, [r0, #32]
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	e006      	b.n	80012be <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
 80012b0:	6a03      	ldr	r3, [r0, #32]
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	e002      	b.n	80012be <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 80012b8:	6a03      	ldr	r3, [r0, #32]
 80012ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012be:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <timer_enable_oc_output+0x60>)
 80012c2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d111      	bne.n	80012ee <timer_enable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 80012ca:	2903      	cmp	r1, #3
 80012cc:	d007      	beq.n	80012de <timer_enable_oc_output+0x4e>
 80012ce:	2905      	cmp	r1, #5
 80012d0:	d009      	beq.n	80012e6 <timer_enable_oc_output+0x56>
 80012d2:	2901      	cmp	r1, #1
 80012d4:	d10b      	bne.n	80012ee <timer_enable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NE;
 80012d6:	6a03      	ldr	r3, [r0, #32]
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	e006      	b.n	80012ec <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NE;
 80012de:	6a03      	ldr	r3, [r0, #32]
 80012e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e4:	e002      	b.n	80012ec <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NE;
 80012e6:	6a03      	ldr	r3, [r0, #32]
 80012e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ec:	6203      	str	r3, [r0, #32]
 80012ee:	4770      	bx	lr
 80012f0:	40010000 	.word	0x40010000

080012f4 <timer_disable_oc_output>:
		timers 1 and 8)
*/

void timer_disable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80012f4:	2906      	cmp	r1, #6
 80012f6:	d815      	bhi.n	8001324 <timer_disable_oc_output+0x30>
 80012f8:	e8df f001 	tbb	[pc, r1]
 80012fc:	14081404 	.word	0x14081404
 8001300:	140c      	.short	0x140c
 8001302:	10          	.byte	0x10
 8001303:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1E;
 8001304:	6a03      	ldr	r3, [r0, #32]
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	e00a      	b.n	8001322 <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2E;
 800130c:	6a03      	ldr	r3, [r0, #32]
 800130e:	f023 0310 	bic.w	r3, r3, #16
 8001312:	e006      	b.n	8001322 <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3E;
 8001314:	6a03      	ldr	r3, [r0, #32]
 8001316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131a:	e002      	b.n	8001322 <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4E;
 800131c:	6a03      	ldr	r3, [r0, #32]
 800131e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001322:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <timer_disable_oc_output+0x60>)
 8001326:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800132a:	429a      	cmp	r2, r3
 800132c:	d111      	bne.n	8001352 <timer_disable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 800132e:	2903      	cmp	r1, #3
 8001330:	d007      	beq.n	8001342 <timer_disable_oc_output+0x4e>
 8001332:	2905      	cmp	r1, #5
 8001334:	d009      	beq.n	800134a <timer_disable_oc_output+0x56>
 8001336:	2901      	cmp	r1, #1
 8001338:	d10b      	bne.n	8001352 <timer_disable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NE;
 800133a:	6a03      	ldr	r3, [r0, #32]
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	e006      	b.n	8001350 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NE;
 8001342:	6a03      	ldr	r3, [r0, #32]
 8001344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001348:	e002      	b.n	8001350 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NE;
 800134a:	6a03      	ldr	r3, [r0, #32]
 800134c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001350:	6203      	str	r3, [r0, #32]
 8001352:	4770      	bx	lr
 8001354:	40010000 	.word	0x40010000

08001358 <timer_set_oc_idle_state_unset>:
void timer_set_oc_idle_state_unset(uint32_t timer_peripheral,
				   enum tim_oc_id oc_id)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	/* Acting for TIM1 and TIM8 only. */
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <timer_set_oc_idle_state_unset+0x54>)
 800135a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800135e:	429a      	cmp	r2, r3
 8001360:	d123      	bne.n	80013aa <timer_set_oc_idle_state_unset+0x52>
		return;
	}

	switch (oc_id) {
 8001362:	2906      	cmp	r1, #6
 8001364:	d821      	bhi.n	80013aa <timer_set_oc_idle_state_unset+0x52>
 8001366:	e8df f001 	tbb	[pc, r1]
 800136a:	0804      	.short	0x0804
 800136c:	1814100c 	.word	0x1814100c
 8001370:	1c          	.byte	0x1c
 8001371:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1;
 8001372:	6843      	ldr	r3, [r0, #4]
 8001374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001378:	e016      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC1N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1N;
 800137a:	6843      	ldr	r3, [r0, #4]
 800137c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001380:	e012      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2;
 8001382:	6843      	ldr	r3, [r0, #4]
 8001384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001388:	e00e      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2N;
 800138a:	6843      	ldr	r3, [r0, #4]
 800138c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001390:	e00a      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3;
 8001392:	6843      	ldr	r3, [r0, #4]
 8001394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001398:	e006      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3N;
 800139a:	6843      	ldr	r3, [r0, #4]
 800139c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013a0:	e002      	b.n	80013a8 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC4:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS4;
 80013a2:	6843      	ldr	r3, [r0, #4]
 80013a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a8:	6043      	str	r3, [r0, #4]
 80013aa:	4770      	bx	lr
 80013ac:	40010000 	.word	0x40010000

080013b0 <timer_set_oc_value>:
*/

void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
			uint32_t value)
{
	switch (oc_id) {
 80013b0:	2906      	cmp	r1, #6
 80013b2:	d80c      	bhi.n	80013ce <timer_set_oc_value+0x1e>
 80013b4:	e8df f001 	tbb	[pc, r1]
 80013b8:	0b060b04 	.word	0x0b060b04
 80013bc:	0b08      	.short	0x0b08
 80013be:	0a          	.byte	0x0a
 80013bf:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCR1(timer_peripheral) = value;
 80013c0:	6342      	str	r2, [r0, #52]	; 0x34
		break;
 80013c2:	4770      	bx	lr
	case TIM_OC2:
		TIM_CCR2(timer_peripheral) = value;
 80013c4:	6382      	str	r2, [r0, #56]	; 0x38
		break;
 80013c6:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCR3(timer_peripheral) = value;
 80013c8:	63c2      	str	r2, [r0, #60]	; 0x3c
		break;
 80013ca:	4770      	bx	lr
	case TIM_OC4:
		TIM_CCR4(timer_peripheral) = value;
 80013cc:	6402      	str	r2, [r0, #64]	; 0x40
 80013ce:	4770      	bx	lr

080013d0 <timer_enable_break_main_output>:
*/

void timer_enable_break_main_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <timer_enable_break_main_output+0x14>)
 80013d2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d103      	bne.n	80013e2 <timer_enable_break_main_output+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_MOE;
 80013da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e0:	6443      	str	r3, [r0, #68]	; 0x44
 80013e2:	4770      	bx	lr
 80013e4:	40010000 	.word	0x40010000

080013e8 <timer_disable_break_automatic_output>:
*/

void timer_disable_break_automatic_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <timer_disable_break_automatic_output+0x14>)
 80013ea:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d103      	bne.n	80013fa <timer_disable_break_automatic_output+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_AOE;
 80013f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f8:	6443      	str	r3, [r0, #68]	; 0x44
 80013fa:	4770      	bx	lr
 80013fc:	40010000 	.word	0x40010000

08001400 <timer_set_break_polarity_high>:
*/

void timer_set_break_polarity_high(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <timer_set_break_polarity_high+0x14>)
 8001402:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001406:	429a      	cmp	r2, r3
 8001408:	d103      	bne.n	8001412 <timer_set_break_polarity_high+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_BKP;
 800140a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800140c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001410:	6443      	str	r3, [r0, #68]	; 0x44
 8001412:	4770      	bx	lr
 8001414:	40010000 	.word	0x40010000

08001418 <timer_disable_break>:
*/

void timer_disable_break(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <timer_disable_break+0x14>)
 800141a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800141e:	429a      	cmp	r2, r3
 8001420:	d103      	bne.n	800142a <timer_disable_break+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_BKE;
 8001422:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001428:	6443      	str	r3, [r0, #68]	; 0x44
 800142a:	4770      	bx	lr
 800142c:	40010000 	.word	0x40010000

08001430 <timer_set_enabled_off_state_in_run_mode>:
*/

void timer_set_enabled_off_state_in_run_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <timer_set_enabled_off_state_in_run_mode+0x14>)
 8001432:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001436:	429a      	cmp	r2, r3
 8001438:	d103      	bne.n	8001442 <timer_set_enabled_off_state_in_run_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSR;
 800143a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800143c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001440:	6443      	str	r3, [r0, #68]	; 0x44
 8001442:	4770      	bx	lr
 8001444:	40010000 	.word	0x40010000

08001448 <timer_set_enabled_off_state_in_idle_mode>:
*/

void timer_set_enabled_off_state_in_idle_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <timer_set_enabled_off_state_in_idle_mode+0x14>)
 800144a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800144e:	429a      	cmp	r2, r3
 8001450:	d103      	bne.n	800145a <timer_set_enabled_off_state_in_idle_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSI;
 8001452:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001458:	6443      	str	r3, [r0, #68]	; 0x44
 800145a:	4770      	bx	lr
 800145c:	40010000 	.word	0x40010000

08001460 <timer_set_break_lock>:
*/

void timer_set_break_lock(uint32_t timer_peripheral, uint32_t lock)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <timer_set_break_lock+0x14>)
 8001462:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001466:	429a      	cmp	r2, r3
 8001468:	d102      	bne.n	8001470 <timer_set_break_lock+0x10>
		TIM_BDTR(timer_peripheral) |= lock;
 800146a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800146c:	4319      	orrs	r1, r3
 800146e:	6441      	str	r1, [r0, #68]	; 0x44
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40010000 	.word	0x40010000

08001478 <timer_generate_event>:
@param[in] event Unsigned int32. Event specification @ref tim_event_gen
*/

void timer_generate_event(uint32_t timer_peripheral, uint32_t event)
{
	TIM_EGR(timer_peripheral) |= event;
 8001478:	6943      	ldr	r3, [r0, #20]
 800147a:	4319      	orrs	r1, r3
 800147c:	6141      	str	r1, [r0, #20]
 800147e:	4770      	bx	lr

08001480 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <flash_set_ws+0x10>)
 8001482:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 8001484:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 8001488:	4310      	orrs	r0, r2
	FLASH_ACR = reg32;
 800148a:	6018      	str	r0, [r3, #0]
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	4319      	orrs	r1, r3
 8001498:	6001      	str	r1, [r0, #0]
 800149a:	4770      	bx	lr

0800149c <rcc_peripheral_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset)
{
	*reg |= reset;
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	4319      	orrs	r1, r3
 80014a0:	6001      	str	r1, [r0, #0]
 80014a2:	4770      	bx	lr

080014a4 <rcc_peripheral_clear_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset)
{
	*reg &= ~clear_reset;
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	ea23 0101 	bic.w	r1, r3, r1
 80014aa:	6001      	str	r1, [r0, #0]
 80014ac:	4770      	bx	lr
	...

080014b0 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 80014b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b4:	4605      	mov	r5, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 80014b6:	6800      	ldr	r0, [r0, #0]
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 80014b8:	4698      	mov	r8, r3
 80014ba:	460e      	mov	r6, r1
 80014bc:	4617      	mov	r7, r2
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 80014be:	4780      	blx	r0

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 80014c0:	9b06      	ldr	r3, [sp, #24]
 80014c2:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 80014c4:	9b07      	ldr	r3, [sp, #28]
 80014c6:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80014c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80014cc:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <usbd_init+0x38>)
 80014d0:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <usbd_init+0x3c>)
 80014d4:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <usbd_init+0x40>)
{
	usbd_device *usbd_dev;

	usbd_dev = driver->init();

	usbd_dev->driver = driver;
 80014d8:	f8c0 50c8 	str.w	r5, [r0, #200]	; 0xc8
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
 80014dc:	e880 01c0 	stmia.w	r0, {r6, r7, r8}

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80014e0:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	return usbd_dev;
}
 80014e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014e6:	bf00      	nop
 80014e8:	08001ac5 	.word	0x08001ac5
 80014ec:	08001b1f 	.word	0x08001b1f
 80014f0:	08001ba5 	.word	0x08001ba5

080014f4 <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 80014f4:	61c1      	str	r1, [r0, #28]
 80014f6:	4770      	bx	lr

080014f8 <usbd_poll>:
	}
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
 80014f8:	b508      	push	{r3, lr}
	usbd_dev->driver->poll(usbd_dev);
 80014fa:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	4798      	blx	r3
 8001502:	bd08      	pop	{r3, pc}

08001504 <usbd_ep_setup>:
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size,
		   void (*callback)(usbd_device *usbd_dev, uint8_t ep))
{
 8001504:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8001506:	9c06      	ldr	r4, [sp, #24]
 8001508:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
 800150c:	9400      	str	r4, [sp, #0]
 800150e:	68ac      	ldr	r4, [r5, #8]
 8001510:	47a0      	blx	r4
}
 8001512:	b003      	add	sp, #12
 8001514:	bd30      	pop	{r4, r5, pc}

08001516 <_usbd_reset>:
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 8001516:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 8001518:	2400      	movs	r4, #0
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 800151a:	4605      	mov	r5, r0
	usbd_dev->current_address = 0;
 800151c:	7584      	strb	r4, [r0, #22]
	usbd_dev->current_config = 0;
 800151e:	75c4      	strb	r4, [r0, #23]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, 64, NULL);
 8001520:	4621      	mov	r1, r4
 8001522:	4622      	mov	r2, r4
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9400      	str	r4, [sp, #0]
 8001528:	f7ff ffec 	bl	8001504 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 800152c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8001530:	4628      	mov	r0, r5
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4621      	mov	r1, r4
 8001536:	4798      	blx	r3

	if (usbd_dev->user_callback_reset) {
 8001538:	69eb      	ldr	r3, [r5, #28]
 800153a:	b103      	cbz	r3, 800153e <_usbd_reset+0x28>
		usbd_dev->user_callback_reset();
 800153c:	4798      	blx	r3
	}
}
 800153e:	b003      	add	sp, #12
 8001540:	bd30      	pop	{r4, r5, pc}

08001542 <usbd_ep_write_packet>:
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
}

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8001542:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8001544:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001548:	69e4      	ldr	r4, [r4, #28]
 800154a:	47a0      	blx	r4
}
 800154c:	bd10      	pop	{r4, pc}

0800154e <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 800154e:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8001550:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001554:	6a24      	ldr	r4, [r4, #32]
 8001556:	47a0      	blx	r4
}
 8001558:	bd10      	pop	{r4, pc}

0800155a <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 800155a:	b508      	push	{r3, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 800155c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4798      	blx	r3
 8001564:	bd08      	pop	{r3, pc}

08001566 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
 8001566:	b508      	push	{r3, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8001568:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4798      	blx	r3
}
 8001570:	bd08      	pop	{r3, pc}

08001572 <usb_standard_set_configuration>:
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 8001572:	b538      	push	{r3, r4, r5, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 8001574:	884b      	ldrh	r3, [r1, #2]
 8001576:	7dc2      	ldrb	r2, [r0, #23]
 8001578:	429a      	cmp	r2, r3
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 800157e:	d00f      	beq.n	80015a0 <usb_standard_set_configuration+0x2e>
		return 1;
	}

	usbd_dev->current_config = req->wValue;
 8001580:	75c3      	strb	r3, [r0, #23]

	/* Reset all endpoints. */
	usbd_dev->driver->ep_reset(usbd_dev);
 8001582:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4798      	blx	r3

	if (usbd_dev->user_callback_set_config) {
 800158a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800158e:	b13a      	cbz	r2, 80015a0 <usb_standard_set_configuration+0x2e>
		/*
		 * Flush control callbacks. These will be reregistered
		 * by the user handler.
		 */
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
			usbd_dev->user_control_callback[i].cb = NULL;
 8001590:	2300      	movs	r3, #0
 8001592:	6463      	str	r3, [r4, #68]	; 0x44
 8001594:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001596:	6563      	str	r3, [r4, #84]	; 0x54
 8001598:	65e3      	str	r3, [r4, #92]	; 0x5c
		}

		usbd_dev->user_callback_set_config(usbd_dev, req->wValue);
 800159a:	4620      	mov	r0, r4
 800159c:	8869      	ldrh	r1, [r5, #2]
 800159e:	4790      	blx	r2
	}

	return 1;
}
 80015a0:	2001      	movs	r0, #1
 80015a2:	bd38      	pop	{r3, r4, r5, pc}

080015a4 <usb_standard_get_configuration>:
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 80015a4:	8819      	ldrh	r1, [r3, #0]
 80015a6:	2901      	cmp	r1, #1
		*len = 1;
 80015a8:	bf84      	itt	hi
 80015aa:	2101      	movhi	r1, #1
 80015ac:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = usbd_dev->current_config;
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	7dc2      	ldrb	r2, [r0, #23]
 80015b2:	701a      	strb	r2, [r3, #0]

	return 1;
}
 80015b4:	2001      	movs	r0, #1
 80015b6:	4770      	bx	lr

080015b8 <usb_standard_set_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
 80015b8:	884a      	ldrh	r2, [r1, #2]
 80015ba:	b912      	cbnz	r2, 80015c2 <usb_standard_set_interface+0xa>
		return 0;
	}
	*len = 0;
 80015bc:	801a      	strh	r2, [r3, #0]

	return 1;
 80015be:	2001      	movs	r0, #1
 80015c0:	4770      	bx	lr
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
		return 0;
 80015c2:	2000      	movs	r0, #0
	}
	*len = 0;

	return 1;
}
 80015c4:	4770      	bx	lr

080015c6 <usb_standard_get_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	*len = 1;
 80015c6:	2001      	movs	r0, #1
 80015c8:	8018      	strh	r0, [r3, #0]
	(*buf)[0] = 0;
 80015ca:	6813      	ldr	r3, [r2, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

	return 1;
}
 80015d0:	4770      	bx	lr

080015d2 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80015d2:	8819      	ldrh	r1, [r3, #0]
 80015d4:	2902      	cmp	r1, #2
		*len = 2;
 80015d6:	bf84      	itt	hi
 80015d8:	2102      	movhi	r1, #2
 80015da:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80015dc:	6811      	ldr	r1, [r2, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80015e2:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 80015e4:	2001      	movs	r0, #1
	/* bit 1: remote wakeup */
	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 80015e6:	7053      	strb	r3, [r2, #1]

	return 1;
}
 80015e8:	4770      	bx	lr

080015ea <usb_standard_interface_get_status>:
{
	(void)usbd_dev;
	(void)req;
	/* not defined */

	if (*len > 2) {
 80015ea:	8819      	ldrh	r1, [r3, #0]
 80015ec:	2902      	cmp	r1, #2
		*len = 2;
 80015ee:	bf84      	itt	hi
 80015f0:	2102      	movhi	r1, #2
 80015f2:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80015fa:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 80015fc:	2001      	movs	r0, #1

	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 80015fe:	7053      	strb	r3, [r2, #1]

	return 1;
}
 8001600:	4770      	bx	lr

08001602 <usb_standard_endpoint_get_status>:

static int usb_standard_endpoint_get_status(usbd_device *usbd_dev,
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
 8001602:	b538      	push	{r3, r4, r5, lr}
 8001604:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 8001606:	881a      	ldrh	r2, [r3, #0]
		*len = 2;
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001608:	6825      	ldr	r5, [r4, #0]
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 2) {
 800160a:	2a02      	cmp	r2, #2
		*len = 2;
 800160c:	bf84      	itt	hi
 800160e:	2202      	movhi	r2, #2
 8001610:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001612:	8889      	ldrh	r1, [r1, #4]
 8001614:	b2c9      	uxtb	r1, r1
 8001616:	f7ff ffa6 	bl	8001566 <usbd_ep_stall_get>
 800161a:	3000      	adds	r0, #0
 800161c:	bf18      	it	ne
 800161e:	2001      	movne	r0, #1
 8001620:	7028      	strb	r0, [r5, #0]
	(*buf)[1] = 0;
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	705a      	strb	r2, [r3, #1]

	return 1;
}
 8001628:	2001      	movs	r0, #1
 800162a:	bd38      	pop	{r3, r4, r5, pc}

0800162c <usb_standard_endpoint_stall>:

static int usb_standard_endpoint_stall(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 800162c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 800162e:	8889      	ldrh	r1, [r1, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	b2c9      	uxtb	r1, r1
 8001634:	f7ff ff91 	bl	800155a <usbd_ep_stall_set>

	return 1;
}
 8001638:	2001      	movs	r0, #1
 800163a:	bd08      	pop	{r3, pc}

0800163c <usb_standard_endpoint_unstall>:

static int usb_standard_endpoint_unstall(usbd_device *usbd_dev,
					 struct usb_setup_data *req,
					 uint8_t **buf, uint16_t *len)
{
 800163c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 800163e:	8889      	ldrh	r1, [r1, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	b2c9      	uxtb	r1, r1
 8001644:	f7ff ff89 	bl	800155a <usbd_ep_stall_set>

	return 1;
}
 8001648:	2001      	movs	r0, #1
 800164a:	bd08      	pop	{r3, pc}

0800164c <usb_standard_set_address>:
}

static int usb_standard_set_address(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 800164c:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 800164e:	780a      	ldrb	r2, [r1, #0]
 8001650:	b972      	cbnz	r2, 8001670 <usb_standard_set_address+0x24>
 8001652:	884c      	ldrh	r4, [r1, #2]
 8001654:	2c7f      	cmp	r4, #127	; 0x7f
 8001656:	d80b      	bhi.n	8001670 <usb_standard_set_address+0x24>

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8001658:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
	}

	usbd_dev->current_address = req->wValue;
 800165c:	7584      	strb	r4, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 800165e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001662:	b11a      	cbz	r2, 800166c <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001664:	8849      	ldrh	r1, [r1, #2]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	4798      	blx	r3
	}

	return 1;
 800166c:	2001      	movs	r0, #1
 800166e:	bd10      	pop	{r4, pc}
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
 8001670:	2000      	movs	r0, #0
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return 1;
}
 8001672:	bd10      	pop	{r4, pc}

08001674 <usb_standard_get_descriptor>:
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 8001674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001678:	4604      	mov	r4, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);
 800167a:	8848      	ldrh	r0, [r1, #2]
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 800167c:	461d      	mov	r5, r3
	return wValue >> 8;
}

static int usb_descriptor_index(uint16_t wValue)
{
	return wValue & 0xFF;
 800167e:	b2c3      	uxtb	r3, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 8001680:	0a00      	lsrs	r0, r0, #8
 8001682:	2802      	cmp	r0, #2
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 8001684:	b087      	sub	sp, #28
 8001686:	4617      	mov	r7, r2
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 8001688:	d00f      	beq.n	80016aa <usb_standard_get_descriptor+0x36>
 800168a:	2803      	cmp	r0, #3
 800168c:	f000 80d4 	beq.w	8001838 <usb_standard_get_descriptor+0x1c4>
 8001690:	2801      	cmp	r0, #1
 8001692:	f040 810c 	bne.w	80018ae <usb_standard_get_descriptor+0x23a>
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	6013      	str	r3, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	882a      	ldrh	r2, [r5, #0]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	bf38      	it	cc
 80016a4:	4613      	movcc	r3, r2
 80016a6:	802b      	strh	r3, [r5, #0]
		return USBD_REQ_HANDLED;
 80016a8:	e102      	b.n	80018b0 <usb_standard_get_descriptor+0x23c>
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80016aa:	6920      	ldr	r0, [r4, #16]
 80016ac:	6010      	str	r0, [r2, #0]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80016ae:	270d      	movs	r7, #13
 80016b0:	f8d4 8004 	ldr.w	r8, [r4, #4]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80016b4:	882e      	ldrh	r6, [r5, #0]
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80016b6:	9001      	str	r0, [sp, #4]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80016b8:	435f      	muls	r7, r3
 80016ba:	eb08 0307 	add.w	r3, r8, r7
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80016be:	f818 4007 	ldrb.w	r4, [r8, r7]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80016c2:	9302      	str	r3, [sp, #8]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80016c4:	42a6      	cmp	r6, r4
 80016c6:	bf38      	it	cc
 80016c8:	4634      	movcc	r4, r6
 80016ca:	4619      	mov	r1, r3
 80016cc:	4622      	mov	r2, r4
 80016ce:	f001 f8a9 	bl	8002824 <memcpy>
	buf += count;
 80016d2:	9b01      	ldr	r3, [sp, #4]
	len -= count;
	total += count;
	totallen += cfg->bLength;
 80016d4:	f818 7007 	ldrb.w	r7, [r8, r7]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
	len -= count;
 80016d8:	1b36      	subs	r6, r6, r4
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
 80016da:	4423      	add	r3, r4
	len -= count;
 80016dc:	b2b6      	uxth	r6, r6
	total += count;
	totallen += cfg->bLength;
 80016de:	f04f 0800 	mov.w	r8, #0
 80016e2:	f8cd 8010 	str.w	r8, [sp, #16]

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80016e6:	9802      	ldr	r0, [sp, #8]
 80016e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80016ec:	7901      	ldrb	r1, [r0, #4]
 80016ee:	fa1f f288 	uxth.w	r2, r8
 80016f2:	4291      	cmp	r1, r2
 80016f4:	f240 809c 	bls.w	8001830 <usb_standard_get_descriptor+0x1bc>
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
 80016f8:	210c      	movs	r1, #12
 80016fa:	434a      	muls	r2, r1
 80016fc:	9802      	ldr	r0, [sp, #8]
 80016fe:	9203      	str	r2, [sp, #12]
 8001700:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001704:	f8d0 2009 	ldr.w	r2, [r0, #9]
 8001708:	4442      	add	r2, r8
 800170a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800170e:	f1b8 0f00 	cmp.w	r8, #0
 8001712:	d014      	beq.n	800173e <usb_standard_get_descriptor+0xca>
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001714:	f898 9000 	ldrb.w	r9, [r8]
 8001718:	454e      	cmp	r6, r9
 800171a:	bf38      	it	cc
 800171c:	46b1      	movcc	r9, r6
 800171e:	4618      	mov	r0, r3
 8001720:	464a      	mov	r2, r9
 8001722:	4641      	mov	r1, r8
 8001724:	f001 f87e 	bl	8002824 <memcpy>
			buf += count;
			len -= count;
			total += count;
			totallen += assoc->bLength;
 8001728:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 800172c:	4603      	mov	r3, r0
			buf += count;
			len -= count;
 800172e:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 8001732:	444c      	add	r4, r9
			totallen += assoc->bLength;
 8001734:	4417      	add	r7, r2
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
 8001736:	444b      	add	r3, r9
			len -= count;
 8001738:	b2b6      	uxth	r6, r6
			total += count;
 800173a:	b2a4      	uxth	r4, r4
			totallen += assoc->bLength;
 800173c:	b2bf      	uxth	r7, r7
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 800173e:	f04f 0c00 	mov.w	ip, #0
			len -= count;
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001742:	9a02      	ldr	r2, [sp, #8]
 8001744:	9803      	ldr	r0, [sp, #12]
 8001746:	f8d2 1009 	ldr.w	r1, [r2, #9]
 800174a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800174e:	4408      	add	r0, r1
 8001750:	f851 1008 	ldr.w	r1, [r1, r8]
 8001754:	fa1f f28c 	uxth.w	r2, ip
 8001758:	428a      	cmp	r2, r1
 800175a:	da64      	bge.n	8001826 <usb_standard_get_descriptor+0x1b2>
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
 800175c:	f04f 0a15 	mov.w	sl, #21
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001760:	f8d0 b008 	ldr.w	fp, [r0, #8]
					&cfg->interface[i].altsetting[j];
 8001764:	fb0a fa02 	mul.w	sl, sl, r2
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001768:	eb0b 080a 	add.w	r8, fp, sl
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800176c:	f81b 900a 	ldrb.w	r9, [fp, sl]
 8001770:	f8cd c000 	str.w	ip, [sp]
 8001774:	454e      	cmp	r6, r9
 8001776:	bf38      	it	cc
 8001778:	46b1      	movcc	r9, r6
 800177a:	464a      	mov	r2, r9
 800177c:	4618      	mov	r0, r3
 800177e:	4641      	mov	r1, r8
 8001780:	f001 f850 	bl	8002824 <memcpy>
 8001784:	4603      	mov	r3, r0
			buf += count;
 8001786:	444b      	add	r3, r9
			len -= count;
 8001788:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 800178c:	44a1      	add	r9, r4
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 800178e:	f8d8 4011 	ldr.w	r4, [r8, #17]
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 8001792:	f8d8 100d 	ldr.w	r1, [r8, #13]
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
 8001796:	f81b a00a 	ldrb.w	sl, [fp, sl]
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
 800179a:	b2b6      	uxth	r6, r6
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 800179c:	42a6      	cmp	r6, r4
 800179e:	bfb8      	it	lt
 80017a0:	4634      	movlt	r4, r6
 80017a2:	b2a4      	uxth	r4, r4
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 80017a4:	4622      	mov	r2, r4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f83c 	bl	8002824 <memcpy>
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
 80017ac:	f8d8 2011 	ldr.w	r2, [r8, #17]
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
 80017b0:	fa1f f989 	uxth.w	r9, r9
			totallen += iface->bLength;
 80017b4:	4492      	add	sl, r2
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 80017b6:	4603      	mov	r3, r0
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 80017b8:	1b36      	subs	r6, r6, r4
			total += count;
			totallen += iface->extralen;
 80017ba:	fa17 f78a 	uxtah	r7, r7, sl
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
 80017be:	4423      	add	r3, r4
			len -= count;
			total += count;
 80017c0:	444c      	add	r4, r9
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 80017c2:	b2b6      	uxth	r6, r6
			total += count;
 80017c4:	b2a4      	uxth	r4, r4
			totallen += iface->extralen;
 80017c6:	b2bf      	uxth	r7, r7
 80017c8:	f04f 0a00 	mov.w	sl, #0
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80017cc:	f898 2004 	ldrb.w	r2, [r8, #4]
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 80017d0:	f8dd c000 	ldr.w	ip, [sp]
 80017d4:	f10a 0001 	add.w	r0, sl, #1
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80017d8:	fa1f fa8a 	uxth.w	sl, sl
 80017dc:	4552      	cmp	r2, sl
 80017de:	9005      	str	r0, [sp, #20]
 80017e0:	d91e      	bls.n	8001820 <usb_standard_get_descriptor+0x1ac>
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
 80017e2:	f8d8 b009 	ldr.w	fp, [r8, #9]
 80017e6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80017ea:	4618      	mov	r0, r3
 80017ec:	f81b 900a 	ldrb.w	r9, [fp, sl]
 80017f0:	f8cd c000 	str.w	ip, [sp]
 80017f4:	454e      	cmp	r6, r9
 80017f6:	bf38      	it	cc
 80017f8:	46b1      	movcc	r9, r6
 80017fa:	eb0b 010a 	add.w	r1, fp, sl
 80017fe:	464a      	mov	r2, r9
 8001800:	f001 f810 	bl	8002824 <memcpy>
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 8001804:	f81b 200a 	ldrb.w	r2, [fp, sl]
 8001808:	f8dd a014 	ldr.w	sl, [sp, #20]
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 800180c:	4603      	mov	r3, r0
				buf += count;
				len -= count;
 800180e:	ebc9 0606 	rsb	r6, r9, r6
				total += count;
 8001812:	444c      	add	r4, r9
				totallen += ep->bLength;
 8001814:	4417      	add	r7, r2
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
 8001816:	444b      	add	r3, r9
				len -= count;
 8001818:	b2b6      	uxth	r6, r6
				total += count;
 800181a:	b2a4      	uxth	r4, r4
				totallen += ep->bLength;
 800181c:	b2bf      	uxth	r7, r7
 800181e:	e7d5      	b.n	80017cc <usb_standard_get_descriptor+0x158>
 8001820:	f10c 0c01 	add.w	ip, ip, #1
 8001824:	e78d      	b.n	8001742 <usb_standard_get_descriptor+0xce>
 8001826:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800182a:	f108 0801 	add.w	r8, r8, #1
 800182e:	e758      	b.n	80016e2 <usb_standard_get_descriptor+0x6e>
			}
		}
	}

	/* Fill in wTotalLength. */
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	805f      	strh	r7, [r3, #2]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001834:	802c      	strh	r4, [r5, #0]
 8001836:	e038      	b.n	80018aa <usb_standard_get_descriptor+0x236>
		return USBD_REQ_HANDLED;
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001838:	6926      	ldr	r6, [r4, #16]

		if (descr_idx == 0) {
 800183a:	b953      	cbnz	r3, 8001852 <usb_standard_get_descriptor+0x1de>
			/* Send sane Language ID descriptor... */
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 800183c:	2309      	movs	r3, #9
 800183e:	70b3      	strb	r3, [r6, #2]
 8001840:	2304      	movs	r3, #4
 8001842:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 8001844:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
 8001846:	882b      	ldrh	r3, [r5, #0]
 8001848:	2b04      	cmp	r3, #4
 800184a:	bf28      	it	cs
 800184c:	2304      	movcs	r3, #4
 800184e:	802b      	strh	r3, [r5, #0]
 8001850:	e028      	b.n	80018a4 <usb_standard_get_descriptor+0x230>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
 8001852:	68a0      	ldr	r0, [r4, #8]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
		} else {
			array_idx = descr_idx - 1;
 8001854:	3b01      	subs	r3, #1

			if (!usbd_dev->strings) {
 8001856:	b358      	cbz	r0, 80018b0 <usb_standard_get_descriptor+0x23c>
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
			}

			/* Check that string index is in range. */
			if (array_idx >= usbd_dev->num_strings) {
 8001858:	68e2      	ldr	r2, [r4, #12]
 800185a:	4293      	cmp	r3, r2
 800185c:	da27      	bge.n	80018ae <usb_standard_get_descriptor+0x23a>
				return USBD_REQ_NOTSUPP;
			}

			/* Strings with Language ID differnet from
			 * USB_LANGID_ENGLISH_US are not supported */
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 800185e:	8889      	ldrh	r1, [r1, #4]
 8001860:	f240 4209 	movw	r2, #1033	; 0x409
 8001864:	4291      	cmp	r1, r2
 8001866:	d122      	bne.n	80018ae <usb_standard_get_descriptor+0x23a>
			}

			/* Ths string is returned as UTF16, hence the
			 * multiplication
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001868:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800186c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001870:	f001 fa80 	bl	8002d74 <strlen>
 8001874:	3001      	adds	r0, #1
 8001876:	0043      	lsls	r3, r0, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 800187c:	882a      	ldrh	r2, [r5, #0]
 800187e:	4293      	cmp	r3, r2
 8001880:	bf28      	it	cs
 8001882:	4613      	movcs	r3, r2
 8001884:	802b      	strh	r3, [r5, #0]

			for (i = 0; i < (*len / 2) - 1; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	882a      	ldrh	r2, [r5, #0]
 800188a:	0852      	lsrs	r2, r2, #1
 800188c:	3a01      	subs	r2, #1
 800188e:	4293      	cmp	r3, r2
 8001890:	da08      	bge.n	80018a4 <usb_standard_get_descriptor+0x230>
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
 8001892:	68a2      	ldr	r2, [r4, #8]
 8001894:	f852 2008 	ldr.w	r2, [r2, r8]
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
				sd->wData[i] =
 8001898:	5cd1      	ldrb	r1, [r2, r3]
 800189a:	eb06 0243 	add.w	r2, r6, r3, lsl #1
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
 800189e:	3301      	adds	r3, #1
				sd->wData[i] =
 80018a0:	8051      	strh	r1, [r2, #2]
 80018a2:	e7f1      	b.n	8001888 <usb_standard_get_descriptor+0x214>
					usbd_dev->strings[array_idx][i];
			}
		}

		sd->bDescriptorType = USB_DT_STRING;
 80018a4:	2303      	movs	r3, #3
 80018a6:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 80018a8:	603e      	str	r6, [r7, #0]

		return USBD_REQ_HANDLED;
 80018aa:	2001      	movs	r0, #1
 80018ac:	e000      	b.n	80018b0 <usb_standard_get_descriptor+0x23c>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
 80018ae:	2000      	movs	r0, #0
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 80018b0:	b007      	add	sp, #28
 80018b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080018b6 <usbd_register_set_config_callback>:

void usbd_register_set_config_callback(usbd_device *usbd_dev,
				       void (*callback)(usbd_device *usbd_dev,
				       uint16_t wValue))
{
	usbd_dev->user_callback_set_config = callback;
 80018b6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 80018ba:	4770      	bx	lr

080018bc <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 80018bc:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80018be:	784c      	ldrb	r4, [r1, #1]
 80018c0:	2c09      	cmp	r4, #9
 80018c2:	d805      	bhi.n	80018d0 <_usbd_standard_request_device+0x14>
 80018c4:	4d04      	ldr	r5, [pc, #16]	; (80018d8 <_usbd_standard_request_device+0x1c>)
 80018c6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_SET_DESCRIPTOR:
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
 80018ca:	b11c      	cbz	r4, 80018d4 <_usbd_standard_request_device+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80018cc:	47a0      	blx	r4
 80018ce:	bd38      	pop	{r3, r4, r5, pc}
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
		return 0;
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
 80018d4:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 80018d6:	bd38      	pop	{r3, r4, r5, pc}
 80018d8:	08007b8c 	.word	0x08007b8c

080018dc <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80018de:	784c      	ldrb	r4, [r1, #1]
 80018e0:	2c0b      	cmp	r4, #11
 80018e2:	d805      	bhi.n	80018f0 <_usbd_standard_request_interface+0x14>
 80018e4:	4d04      	ldr	r5, [pc, #16]	; (80018f8 <_usbd_standard_request_interface+0x1c>)
 80018e6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
 80018ea:	b11c      	cbz	r4, 80018f4 <_usbd_standard_request_interface+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80018ec:	47a0      	blx	r4
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
		return 0;
 80018f0:	2000      	movs	r0, #0
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
 80018f4:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	08007bb4 	.word	0x08007bb4

080018fc <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 80018fc:	b510      	push	{r4, lr}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80018fe:	784c      	ldrb	r4, [r1, #1]
 8001900:	2c01      	cmp	r4, #1
 8001902:	d003      	beq.n	800190c <_usbd_standard_request_endpoint+0x10>
 8001904:	d309      	bcc.n	800191a <_usbd_standard_request_endpoint+0x1e>
 8001906:	2c03      	cmp	r4, #3
 8001908:	d003      	beq.n	8001912 <_usbd_standard_request_endpoint+0x16>
 800190a:	e004      	b.n	8001916 <_usbd_standard_request_endpoint+0x1a>
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800190c:	884c      	ldrh	r4, [r1, #2]
 800190e:	b134      	cbz	r4, 800191e <_usbd_standard_request_endpoint+0x22>
 8001910:	e001      	b.n	8001916 <_usbd_standard_request_endpoint+0x1a>
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001912:	884c      	ldrh	r4, [r1, #2]
 8001914:	b12c      	cbz	r4, 8001922 <_usbd_standard_request_endpoint+0x26>
		 */
		break;
	}

	if (!command) {
		return 0;
 8001916:	2000      	movs	r0, #0
 8001918:	bd10      	pop	{r4, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
		}
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_endpoint_get_status;
 800191a:	4c03      	ldr	r4, [pc, #12]	; (8001928 <_usbd_standard_request_endpoint+0x2c>)
 800191c:	e002      	b.n	8001924 <_usbd_standard_request_endpoint+0x28>
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
 800191e:	4c03      	ldr	r4, [pc, #12]	; (800192c <_usbd_standard_request_endpoint+0x30>)
 8001920:	e000      	b.n	8001924 <_usbd_standard_request_endpoint+0x28>
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
 8001922:	4c03      	ldr	r4, [pc, #12]	; (8001930 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001924:	47a0      	blx	r4
}
 8001926:	bd10      	pop	{r4, pc}
 8001928:	08001603 	.word	0x08001603
 800192c:	0800163d 	.word	0x0800163d
 8001930:	0800162d 	.word	0x0800162d

08001934 <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8001934:	b510      	push	{r4, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001936:	780c      	ldrb	r4, [r1, #0]
 8001938:	f014 0f60 	tst.w	r4, #96	; 0x60
 800193c:	d112      	bne.n	8001964 <_usbd_standard_request+0x30>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 800193e:	f004 041f 	and.w	r4, r4, #31
 8001942:	2c01      	cmp	r4, #1
 8001944:	d00a      	beq.n	800195c <_usbd_standard_request+0x28>
 8001946:	d305      	bcc.n	8001954 <_usbd_standard_request+0x20>
 8001948:	2c02      	cmp	r4, #2
 800194a:	d10b      	bne.n	8001964 <_usbd_standard_request+0x30>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 800194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001950:	f7ff bfd4 	b.w	80018fc <_usbd_standard_request_endpoint>
	default:
		return 0;
	}
}
 8001954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001958:	f7ff bfb0 	b.w	80018bc <_usbd_standard_request_device>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 800195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
 8001960:	f7ff bfbc 	b.w	80018dc <_usbd_standard_request_interface>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001964:	2000      	movs	r0, #0
 8001966:	bd10      	pop	{r4, pc}

08001968 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001968:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800196a:	2100      	movs	r1, #0
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 800196c:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	f7ff fdf3 	bl	800155a <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800197a:	bd10      	pop	{r4, pc}

0800197c <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 800197c:	b538      	push	{r3, r4, r5, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800197e:	6802      	ldr	r2, [r0, #0]
 8001980:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001982:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 8001984:	79d2      	ldrb	r2, [r2, #7]
 8001986:	1aed      	subs	r5, r5, r3
 8001988:	4295      	cmp	r5, r2
 800198a:	bfa8      	it	ge
 800198c:	4615      	movge	r5, r2
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800198e:	6b82      	ldr	r2, [r0, #56]	; 0x38
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001990:	b2ad      	uxth	r5, r5
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001992:	441a      	add	r2, r3
 8001994:	2100      	movs	r1, #0
 8001996:	462b      	mov	r3, r5
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001998:	4604      	mov	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800199a:	f7ff fdd8 	bl	800154e <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_buf +
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 800199e:	42a8      	cmp	r0, r5
 80019a0:	d005      	beq.n	80019ae <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ffe0 	bl	8001968 <stall_transaction>
		return -1;
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
	}

	usbd_dev->control_state.ctrl_len += size;
 80019ae:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80019b0:	4403      	add	r3, r0
 80019b2:	87a3      	strh	r3, [r4, #60]	; 0x3c

	return packetsize;
}
 80019b4:	bd38      	pop	{r3, r4, r5, pc}

080019b6 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 80019b6:	b538      	push	{r3, r4, r5, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019b8:	6803      	ldr	r3, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80019ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019bc:	79dd      	ldrb	r5, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 80019be:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019c0:	429d      	cmp	r5, r3

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 80019c2:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80019c4:	f04f 0100 	mov.w	r1, #0
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019c8:	d20f      	bcs.n	80019ea <usb_control_send_chunk+0x34>
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80019ca:	462b      	mov	r3, r5
 80019cc:	f7ff fdb9 	bl	8001542 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 80019d6:	6823      	ldr	r3, [r4, #0]
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 80019d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019da:	79d9      	ldrb	r1, [r3, #7]
 80019dc:	440a      	add	r2, r1
 80019de:	63a2      	str	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 80019e0:	79db      	ldrb	r3, [r3, #7]
 80019e2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80019ea:	f7ff fdaa 	bl	8001542 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);
		usbd_dev->control_state.state = LAST_DATA_IN;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80019f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80019fa:	bd38      	pop	{r3, r4, r5, pc}

080019fc <usb_control_request_dispatch>:
	return packetsize;
}

static int usb_control_request_dispatch(usbd_device *usbd_dev,
					struct usb_setup_data *req)
{
 80019fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a00:	4604      	mov	r4, r0
 8001a02:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8001a04:	f100 0844 	add.w	r8, r0, #68	; 0x44
 8001a08:	2500      	movs	r5, #0

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
 8001a0a:	f858 7005 	ldr.w	r7, [r8, r5]
 8001a0e:	b957      	cbnz	r7, 8001a26 <usb_control_request_dispatch+0x2a>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001a10:	4620      	mov	r0, r4
 8001a12:	4631      	mov	r1, r6
 8001a14:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001a18:	f104 033c 	add.w	r3, r4, #60	; 0x3c
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001a1c:	b002      	add	sp, #8
 8001a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001a22:	f7ff bf87 	b.w	8001934 <_usbd_standard_request>
 8001a26:	eb08 0305 	add.w	r3, r8, r5
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001a2a:	7831      	ldrb	r1, [r6, #0]
 8001a2c:	7958      	ldrb	r0, [r3, #5]
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	ea00 0301 	and.w	r3, r0, r1
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d003      	beq.n	8001a40 <usb_control_request_dispatch+0x44>
 8001a38:	3508      	adds	r5, #8
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001a3a:	2d20      	cmp	r5, #32
 8001a3c:	d1e5      	bne.n	8001a0a <usb_control_request_dispatch+0xe>
 8001a3e:	e7e7      	b.n	8001a10 <usb_control_request_dispatch+0x14>
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001a40:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4620      	mov	r0, r4
 8001a48:	4631      	mov	r1, r6
 8001a4a:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001a4e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8001a52:	47b8      	blx	r7
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8001a54:	2801      	cmp	r0, #1
 8001a56:	d8ef      	bhi.n	8001a38 <usb_control_request_dispatch+0x3c>

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001a58:	b002      	add	sp, #8
 8001a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a5e <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001a5e:	b510      	push	{r4, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001a60:	6902      	ldr	r2, [r0, #16]
 8001a62:	6382      	str	r2, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001a64:	798a      	ldrb	r2, [r1, #6]
 8001a66:	79cb      	ldrb	r3, [r1, #7]
 8001a68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001a6c:	8783      	strh	r3, [r0, #60]	; 0x3c
}

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001a6e:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001a70:	f7ff ffc4 	bl	80019fc <usb_control_request_dispatch>
 8001a74:	b170      	cbz	r0, 8001a94 <usb_control_setup_read+0x36>
		if (usbd_dev->control_state.ctrl_len) {
 8001a76:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001a78:	4620      	mov	r0, r4
{
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
 8001a7a:	b119      	cbz	r1, 8001a84 <usb_control_setup_read+0x26>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8001a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001a80:	f7ff bf99 	b.w	80019b6 <usb_control_send_chunk>
		} else {
			/* Go to status stage if handled. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001a84:	460b      	mov	r3, r1
 8001a86:	460a      	mov	r2, r1
 8001a88:	f7ff fd5b 	bl	8001542 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001a92:	bd10      	pop	{r4, pc}
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001a94:	4620      	mov	r0, r4
	}
}
 8001a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001a9a:	f7ff bf65 	b.w	8001968 <stall_transaction>

08001a9e <usbd_register_control_callback>:

/* Register application callback function for handling USB control requests. */
int usbd_register_control_callback(usbd_device *usbd_dev, uint8_t type,
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
 8001a9e:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 8001aa6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001aa8:	b12e      	cbz	r6, 8001ab6 <usbd_register_control_callback+0x18>
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001aaa:	3501      	adds	r5, #1
 8001aac:	2d04      	cmp	r5, #4
 8001aae:	d1f8      	bne.n	8001aa2 <usbd_register_control_callback+0x4>
		usbd_dev->user_control_callback[i].type_mask = type_mask;
		usbd_dev->user_control_callback[i].cb = callback;
		return 0;
	}

	return -1;
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (usbd_dev->user_control_callback[i].cb) {
			continue;
		}

		usbd_dev->user_control_callback[i].type = type;
 8001ab6:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001aba:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
		usbd_dev->user_control_callback[i].cb = callback;
 8001abe:	6463      	str	r3, [r4, #68]	; 0x44
		return 0;
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}

08001ac4 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001ac6:	f100 0630 	add.w	r6, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001aca:	2500      	movs	r5, #0
 8001acc:	6405      	str	r5, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	2308      	movs	r3, #8

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001ad4:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001ad6:	f7ff fd3a 	bl	800154e <usbd_ep_read_packet>
 8001ada:	2808      	cmp	r0, #8
 8001adc:	d004      	beq.n	8001ae8 <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 8001ade:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
		stall_transaction(usbd_dev);
 8001ae4:	f7ff bf40 	b.w	8001968 <stall_transaction>
		return;
	}

	if (req->wLength == 0) {
 8001ae8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001aea:	b11b      	cbz	r3, 8001af4 <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001aec:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	da05      	bge.n	8001b00 <_usbd_control_setup+0x3c>
		usb_control_setup_read(usbd_dev, req);
 8001af4:	4620      	mov	r0, r4
 8001af6:	4631      	mov	r1, r6
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}

	if (req->wLength == 0) {
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8001afc:	f7ff bfaf 	b.w	8001a5e <usb_control_setup_read>
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001b00:	8aa2      	ldrh	r2, [r4, #20]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3eb      	bcc.n	8001ade <_usbd_control_setup+0x1a>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001b06:	6922      	ldr	r2, [r4, #16]
 8001b08:	63a2      	str	r2, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001b0a:	6822      	ldr	r2, [r4, #0]
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = 0;
 8001b0c:	87a5      	strh	r5, [r4, #60]	; 0x3c
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001b0e:	79d2      	ldrb	r2, [r2, #7]
 8001b10:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 8001b12:	bf34      	ite	cc
 8001b14:	2305      	movcc	r3, #5
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001b16:	2306      	movcs	r3, #6
 8001b18:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}

08001b1e <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001b1e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001b22:	2b06      	cmp	r3, #6
		usb_control_setup_write(usbd_dev, req);
	}
}

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001b28:	d010      	beq.n	8001b4c <_usbd_control_out+0x2e>
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	d024      	beq.n	8001b78 <_usbd_control_out+0x5a>
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d133      	bne.n	8001b9a <_usbd_control_out+0x7c>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001b32:	f7ff ff23 	bl	800197c <usb_control_recv_chunk>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	db33      	blt.n	8001ba2 <_usbd_control_out+0x84>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001b3a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001b3c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b3e:	1ad2      	subs	r2, r2, r3
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
 8001b40:	6823      	ldr	r3, [r4, #0]
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001b42:	79db      	ldrb	r3, [r3, #7]
	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dc2c      	bgt.n	8001ba2 <_usbd_control_out+0x84>
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001b48:	2306      	movs	r3, #6
 8001b4a:	e010      	b.n	8001b6e <_usbd_control_out+0x50>
		}
		break;
	case LAST_DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001b4c:	f7ff ff16 	bl	800197c <usb_control_recv_chunk>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	db26      	blt.n	8001ba2 <_usbd_control_out+0x84>
		}
		/*
		 * We have now received the full data payload.
		 * Invoke callback to process.
		 */
		if (usb_control_request_dispatch(usbd_dev,
 8001b54:	4620      	mov	r0, r4
 8001b56:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b5a:	f7ff ff4f 	bl	80019fc <usb_control_request_dispatch>
 8001b5e:	b148      	cbz	r0, 8001b74 <_usbd_control_out+0x56>
					&(usbd_dev->control_state.req))) {
			/* Got to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	460a      	mov	r2, r1
 8001b68:	f7ff fceb 	bl	8001542 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001b72:	bd10      	pop	{r4, pc}
		} else {
			stall_transaction(usbd_dev);
 8001b74:	4620      	mov	r0, r4
 8001b76:	e010      	b.n	8001b9a <_usbd_control_out+0x7c>
		}
		break;
	case STATUS_OUT:
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	f7ff fce6 	bl	800154e <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b8a:	b11b      	cbz	r3, 8001b94 <_usbd_control_out+0x76>
			usbd_dev->control_state.complete(usbd_dev,
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b92:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001b98:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
 8001b9e:	f7ff bee3 	b.w	8001968 <stall_transaction>
 8001ba2:	bd10      	pop	{r4, pc}

08001ba4 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001ba4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001ba8:	2b03      	cmp	r3, #3
		stall_transaction(usbd_dev);
	}
}

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8001baa:	b510      	push	{r4, lr}
 8001bac:	4604      	mov	r4, r0
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001bae:	d007      	beq.n	8001bc0 <_usbd_control_in+0x1c>
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d007      	beq.n	8001bc4 <_usbd_control_in+0x20>
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d11c      	bne.n	8001bf2 <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8001bbc:	f7ff befb 	b.w	80019b6 <usb_control_send_chunk>
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	e013      	b.n	8001bec <_usbd_control_in+0x48>
		break;
	case STATUS_IN:
		if (usbd_dev->control_state.complete) {
 8001bc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bc6:	b113      	cbz	r3, 8001bce <_usbd_control_in+0x2a>
			usbd_dev->control_state.complete(usbd_dev,
 8001bc8:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001bcc:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}

		/* Exception: Handle SET ADDRESS function here... */
		if ((req->bmRequestType == 0) &&
 8001bce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001bd2:	b953      	cbnz	r3, 8001bea <_usbd_control_in+0x46>
 8001bd4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d106      	bne.n	8001bea <_usbd_control_in+0x46>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001bdc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001be0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4620      	mov	r0, r4
 8001be6:	b2c9      	uxtb	r1, r1
 8001be8:	4798      	blx	r3
		}
		usbd_dev->control_state.state = IDLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		break;
 8001bf0:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
		}
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
 8001bf6:	f7ff beb7 	b.w	8001968 <stall_transaction>
	...

08001bfc <stm32f107_usbd_init>:
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *stm32f107_usbd_init(void)
{
	OTG_FS_GINTSTS = OTG_FS_GINTSTS_MMIS;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <stm32f107_usbd_init+0x78>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]

	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_PHYSEL;
 8001c02:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8001c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c0a:	f843 2c08 	str.w	r2, [r3, #-8]
	/* Enable VBUS sensing in device mode and power down the PHY. */
	OTG_FS_GCCFG |= OTG_FS_GCCFG_VBUSBSEN | OTG_FS_GCCFG_PWRDWN;
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c10:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

	/* Wait for AHB idle. */
	while (!(OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_AHBIDL));
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <stm32f107_usbd_init+0x7c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	dafb      	bge.n	8001c16 <stm32f107_usbd_init+0x1a>
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f012 0101 	ands.w	r1, r2, #1
 8001c2c:	d1fb      	bne.n	8001c26 <stm32f107_usbd_init+0x2a>

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <stm32f107_usbd_init+0x80>)

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001c30:	4813      	ldr	r0, [pc, #76]	; (8001c80 <stm32f107_usbd_init+0x84>)
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c38:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001c3c:	6013      	str	r3, [r2, #0]

	/* Full speed device. */
	OTG_FS_DCFG |= OTG_FS_DCFG_DSPD;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <stm32f107_usbd_init+0x88>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f042 0203 	orr.w	r2, r2, #3
 8001c46:	601a      	str	r2, [r3, #0]

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <stm32f107_usbd_init+0x8c>)

	/* Full speed device. */
	OTG_FS_DCFG |= OTG_FS_DCFG_DSPD;

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;
 8001c4a:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	6013      	str	r3, [r2, #0]
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001c52:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc

	/* Unmask interrupts for TX and RX. */
	OTG_FS_GAHBCFG |= OTG_FS_GAHBCFG_GINT;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <stm32f107_usbd_init+0x90>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
	OTG_FS_GINTMSK = OTG_FS_GINTMSK_ENUMDNEM |
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <stm32f107_usbd_init+0x94>)
 8001c62:	611a      	str	r2, [r3, #16]
			 OTG_FS_GINTMSK_RXFLVLM |
			 OTG_FS_GINTMSK_IEPINT |
			 OTG_FS_GINTMSK_USBSUSPM |
			 OTG_FS_GINTMSK_WUIM |
			 OTG_FS_GINTMSK_SOFM;
	OTG_FS_DAINTMSK = 0xF;
 8001c64:	220f      	movs	r2, #15
 8001c66:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
	OTG_FS_DIEPMSK = OTG_FS_DIEPMSK_XFRCM;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

	return &usbd_dev;
}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	50000014 	.word	0x50000014
 8001c78:	50000010 	.word	0x50000010
 8001c7c:	5000000c 	.word	0x5000000c
 8001c80:	20008a04 	.word	0x20008a04
 8001c84:	50000800 	.word	0x50000800
 8001c88:	50000024 	.word	0x50000024
 8001c8c:	50000008 	.word	0x50000008
 8001c90:	80042818 	.word	0x80042818

08001c94 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8001c94:	e7fe      	b.n	8001c94 <blocking_handler>

08001c96 <null_handler>:
	while (1);
}

void null_handler(void)
{
 8001c96:	4770      	bx	lr

08001c98 <reset_handler>:
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4918      	ldr	r1, [pc, #96]	; (8001cfc <reset_handler+0x64>)
 8001c9c:	4818      	ldr	r0, [pc, #96]	; (8001d00 <reset_handler+0x68>)
 8001c9e:	1853      	adds	r3, r2, r1
 8001ca0:	4283      	cmp	r3, r0
 8001ca2:	d204      	bcs.n	8001cae <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <reset_handler+0x6c>)
 8001ca6:	58d3      	ldr	r3, [r2, r3]
 8001ca8:	5053      	str	r3, [r2, r1]
 8001caa:	3204      	adds	r2, #4
 8001cac:	e7f5      	b.n	8001c9a <reset_handler+0x2>
	}

	while (dest < &_ebss) {
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <reset_handler+0x70>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d203      	bcs.n	8001cbc <reset_handler+0x24>
		*dest++ = 0;
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	e7f8      	b.n	8001cae <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
 8001cbc:	4c13      	ldr	r4, [pc, #76]	; (8001d0c <reset_handler+0x74>)
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <reset_handler+0x78>)
 8001cc0:	429c      	cmp	r4, r3
 8001cc2:	d203      	bcs.n	8001ccc <reset_handler+0x34>
		(*fp)();
 8001cc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8001cc8:	4798      	blx	r3
 8001cca:	e7f8      	b.n	8001cbe <reset_handler+0x26>
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001ccc:	4c11      	ldr	r4, [pc, #68]	; (8001d14 <reset_handler+0x7c>)
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <reset_handler+0x80>)
 8001cd0:	429c      	cmp	r4, r3
 8001cd2:	d203      	bcs.n	8001cdc <reset_handler+0x44>
		(*fp)();
 8001cd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8001cd8:	4798      	blx	r3
 8001cda:	e7f8      	b.n	8001cce <reset_handler+0x36>
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <reset_handler+0x84>)

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001cde:	4c10      	ldr	r4, [pc, #64]	; (8001d20 <reset_handler+0x88>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ce6:	601a      	str	r2, [r3, #0]

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 8001ce8:	f7fe fc58 	bl	800059c <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <reset_handler+0x8c>)
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	d203      	bcs.n	8001cfa <reset_handler+0x62>
		(*fp)();
 8001cf2:	f854 3b04 	ldr.w	r3, [r4], #4
 8001cf6:	4798      	blx	r3
 8001cf8:	e7f8      	b.n	8001cec <reset_handler+0x54>
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	200008c4 	.word	0x200008c4
 8001d04:	08007da4 	.word	0x08007da4
 8001d08:	20008b24 	.word	0x20008b24
 8001d0c:	08007d9c 	.word	0x08007d9c
 8001d10:	08007d9c 	.word	0x08007d9c
 8001d14:	08007d9c 	.word	0x08007d9c
 8001d18:	08007d9c 	.word	0x08007d9c
 8001d1c:	e000ed88 	.word	0xe000ed88
 8001d20:	08007d9c 	.word	0x08007d9c
 8001d24:	08007d9c 	.word	0x08007d9c

08001d28 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <nvic_enable_irq+0x18>)
 8001d2a:	0942      	lsrs	r2, r0, #5
 8001d2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001d30:	f000 001f 	and.w	r0, r0, #31
 8001d34:	2201      	movs	r2, #1
 8001d36:	fa02 f000 	lsl.w	r0, r2, r0
 8001d3a:	6018      	str	r0, [r3, #0]
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 8001d44:	2850      	cmp	r0, #80	; 0x50
 8001d46:	d904      	bls.n	8001d52 <nvic_set_priority+0xe>
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
 8001d48:	f000 000f 	and.w	r0, r0, #15
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <nvic_set_priority+0x1c>)
 8001d4e:	54c1      	strb	r1, [r0, r3]
 8001d50:	4770      	bx	lr
	} else {
		/* Device specific interrupts */
		NVIC_IPR(irqn) = priority;
 8001d52:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d56:	f500 4064 	add.w	r0, r0, #58368	; 0xe400
 8001d5a:	7001      	strb	r1, [r0, #0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed14 	.word	0xe000ed14

08001d64 <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(vos_scale_t scale)
{
	if (scale == SCALE1) {
 8001d64:	b920      	cbnz	r0, 8001d70 <pwr_set_vos_scale+0xc>
		PWR_CR |= PWR_CR_VOS;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <pwr_set_vos_scale+0x1c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d6e:	e005      	b.n	8001d7c <pwr_set_vos_scale+0x18>
	} else if (scale == SCALE2) {
 8001d70:	2801      	cmp	r0, #1
 8001d72:	d104      	bne.n	8001d7e <pwr_set_vos_scale+0x1a>
		PWR_CR &= PWR_CR_VOS;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <pwr_set_vos_scale+0x1c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4770      	bx	lr
 8001d80:	40007000 	.word	0x40007000

08001d84 <stm32fx07_set_address>:
#define REBASE(x)        MMIO32((x) + (dev_base_address))
#define REBASE_FIFO(x)   (&MMIO32((dev_base_address) + (OTG_FIFO(x))))

void stm32fx07_set_address(usbd_device *usbd_dev, uint8_t addr)
{
	REBASE(OTG_DCFG) = (REBASE(OTG_DCFG) & ~OTG_FS_DCFG_DAD) | (addr << 4);
 8001d84:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001d8e:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8001d92:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8001d96:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 8001d9a:	4770      	bx	lr

08001d9c <stm32fx07_ep_setup>:
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001da0:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001da4:	9e08      	ldr	r6, [sp, #32]
 8001da6:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001daa:	f003 077f 	and.w	r7, r3, #127	; 0x7f
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001dae:	d13a      	bne.n	8001e26 <stm32fx07_ep_setup+0x8a>
		/* Configure IN part. */
		if (max_size >= 64) {
 8001db0:	2b3f      	cmp	r3, #63	; 0x3f
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
		/* Configure IN part. */
		if (max_size >= 64) {
 8001db4:	d902      	bls.n	8001dbc <stm32fx07_ep_setup+0x20>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001db6:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
 8001dba:	e009      	b.n	8001dd0 <stm32fx07_ep_setup+0x34>
		} else if (max_size >= 32) {
 8001dbc:	2b1f      	cmp	r3, #31
 8001dbe:	d901      	bls.n	8001dc4 <stm32fx07_ep_setup+0x28>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_32;
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	e003      	b.n	8001dcc <stm32fx07_ep_setup+0x30>
		} else if (max_size >= 16) {
 8001dc4:	2b0f      	cmp	r3, #15
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_16;
 8001dc6:	bf8c      	ite	hi
 8001dc8:	2102      	movhi	r1, #2
		} else {
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_8;
 8001dca:	2103      	movls	r1, #3
 8001dcc:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
		}

		REBASE(OTG_DIEPTSIZ0) =
 8001dd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dd2:	b2ba      	uxth	r2, r7
 8001dd4:	f8c1 2910 	str.w	r2, [r1, #2320]	; 0x910
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
 8001dd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dda:	f8d1 5900 	ldr.w	r5, [r1, #2304]	; 0x900
 8001dde:	f045 4508 	orr.w	r5, r5, #2281701376	; 0x88000000
 8001de2:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
 8001de8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001dec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
 8001df0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001df4:	f8c1 2b10 	str.w	r2, [r1, #2832]	; 0xb10
		REBASE(OTG_DOEPCTL(0)) |=
 8001df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dfa:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8001dfe:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 8001e02:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
		    OTG_FS_DOEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001e06:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001e08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001e10:	6291      	str	r1, [r2, #40]	; 0x28
					 usbd_dev->driver->rx_fifo_size;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001e12:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
 8001e16:	4413      	add	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		usbd_dev->fifo_mem_top_ep0 = usbd_dev->fifo_mem_top;
 8001e1e:	f8a0 30ce 	strh.w	r3, [r0, #206]	; 0xce

		return;
 8001e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (dir) {
 8001e26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e2a:	ea4f 4a82 	mov.w	sl, r2, lsl #18
 8001e2e:	d02c      	beq.n	8001e8a <stm32fx07_ep_setup+0xee>
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
 8001e30:	f8b0 c0cc 	ldrh.w	ip, [r0, #204]	; 0xcc

		return;
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
 8001e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e36:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8001e3a:	f105 0940 	add.w	r9, r5, #64	; 0x40
 8001e3e:	ea4c 4208 	orr.w	r2, ip, r8, lsl #16
 8001e42:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001e46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001e48:	44c4      	add	ip, r8
 8001e4a:	f8a0 c0cc 	strh.w	ip, [r0, #204]	; 0xcc

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001e4e:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 8001e52:	f04f 0c20 	mov.w	ip, #32
 8001e56:	fb1c 1105 	smlabb	r1, ip, r5, r1
 8001e5a:	b2bf      	uxth	r7, r7
 8001e5c:	600f      	str	r7, [r1, #0]
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e5e:	f44f 6710 	mov.w	r7, #2304	; 0x900
 8001e62:	fb1c 7705 	smlabb	r7, ip, r5, r7
 8001e66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
 8001e68:	f04a 4218 	orr.w	r2, sl, #2550136832	; 0x98000000
 8001e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e70:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;
 8001e72:	4313      	orrs	r3, r2
 8001e74:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e78:	4323      	orrs	r3, r4
 8001e7a:	507b      	str	r3, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;

		if (callback) {
 8001e7c:	b33e      	cbz	r6, 8001ece <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001e7e:	230c      	movs	r3, #12
 8001e80:	fb03 0005 	mla	r0, r3, r5, r0
 8001e84:	6646      	str	r6, [r0, #100]	; 0x64
 8001e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			    (void *)callback;
		}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
 8001e8c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8001e90:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8001e94:	f8c1 70d4 	str.w	r7, [r1, #212]	; 0xd4
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001e98:	f502 6c31 	add.w	ip, r2, #2832	; 0xb10
 8001e9c:	2120      	movs	r1, #32
 8001e9e:	fb11 cc05 	smlabb	ip, r1, r5, ip
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001ea2:	f04a 4214 	orr.w	r2, sl, #2483027968	; 0x94000000
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001ea6:	f8cc 7000 	str.w	r7, [ip]
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001eaa:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 8001eae:	fb11 7705 	smlabb	r7, r1, r5, r7
 8001eb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001eb8:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001eba:	4313      	orrs	r3, r2

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001ebc:	4323      	orrs	r3, r4
 8001ebe:	507b      	str	r3, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;

		if (callback) {
 8001ec0:	b12e      	cbz	r6, 8001ece <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	fb03 0005 	mla	r0, r3, r5, r0
 8001ec8:	6686      	str	r6, [r0, #104]	; 0x68
 8001eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ed2 <stm32fx07_endpoints_reset>:
}

void stm32fx07_endpoints_reset(usbd_device *usbd_dev)
{
	/* The core resets the endpoints automatically on reset. */
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001ed2:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
 8001ed6:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
 8001eda:	4770      	bx	lr

08001edc <stm32fx07_ep_stall_set>:
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (addr == 0) {
 8001ee2:	b951      	cbnz	r1, 8001efa <stm32fx07_ep_stall_set+0x1e>
		if (stall) {
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 8001ee4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001ee6:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	if (addr == 0) {
		if (stall) {
 8001eea:	b112      	cbz	r2, 8001ef2 <stm32fx07_ep_stall_set+0x16>
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 8001eec:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8001ef0:	e001      	b.n	8001ef6 <stm32fx07_ep_stall_set+0x1a>
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
 8001ef2:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8001ef6:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
		}
	}

	if (addr & 0x80) {
 8001efa:	0608      	lsls	r0, r1, #24
		addr &= 0x7F;
 8001efc:	bf46      	itte	mi
 8001efe:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001f02:	3148      	addmi	r1, #72	; 0x48
 8001f04:	3158      	addpl	r1, #88	; 0x58
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 8001f06:	0149      	lsls	r1, r1, #5
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
 8001f08:	b122      	cbz	r2, 8001f14 <stm32fx07_ep_stall_set+0x38>
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	58ca      	ldr	r2, [r1, r3]
 8001f0e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001f12:	e008      	b.n	8001f26 <stm32fx07_ep_stall_set+0x4a>
		} else {
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_FS_DOEPCTL0_STALL;
 8001f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f16:	5888      	ldr	r0, [r1, r2]
 8001f18:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
 8001f1c:	5088      	str	r0, [r1, r2]
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTLX_SD0PID;
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	58ca      	ldr	r2, [r1, r3]
 8001f22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f26:	50ca      	str	r2, [r1, r3]
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <stm32fx07_ep_stall_get>:
}

uint8_t stm32fx07_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	/* Return non-zero if STALL set. */
	if (addr & 0x80) {
 8001f2a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f2e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
		return (REBASE(OTG_DIEPCTL(addr & 0x7f)) &
 8001f32:	bf1a      	itte	ne
 8001f34:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001f38:	3148      	addne	r1, #72	; 0x48
				OTG_FS_DIEPCTL0_STALL) ? 1 : 0;
	} else {
		return (REBASE(OTG_DOEPCTL(addr)) &
 8001f3a:	3158      	addeq	r1, #88	; 0x58
 8001f3c:	0149      	lsls	r1, r1, #5
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	58c8      	ldr	r0, [r1, r3]
 8001f42:	f3c0 5040 	ubfx	r0, r0, #21, #1
				OTG_FS_DOEPCTL0_STALL) ? 1 : 0;
	}
}
 8001f46:	4770      	bx	lr

08001f48 <stm32fx07_ep_nak_set>:

void stm32fx07_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001f48:	060b      	lsls	r3, r1, #24
 8001f4a:	d410      	bmi.n	8001f6e <stm32fx07_ep_nak_set+0x26>
		return;
	}

	usbd_dev->force_nak[addr] = nak;
 8001f4c:	1843      	adds	r3, r0, r1
 8001f4e:	3158      	adds	r1, #88	; 0x58
 8001f50:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001f54:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

	if (nak) {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 8001f58:	0149      	lsls	r1, r1, #5
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		return;
	}

	usbd_dev->force_nak[addr] = nak;

	if (nak) {
 8001f5c:	b11a      	cbz	r2, 8001f66 <stm32fx07_ep_nak_set+0x1e>
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 8001f5e:	58ca      	ldr	r2, [r1, r3]
 8001f60:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001f64:	e002      	b.n	8001f6c <stm32fx07_ep_nak_set+0x24>
	} else {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_CNAK;
 8001f66:	58ca      	ldr	r2, [r1, r3]
 8001f68:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f6c:	50ca      	str	r2, [r1, r3]
 8001f6e:	4770      	bx	lr

08001f70 <stm32fx07_ep_write_packet>:
	}
}

uint16_t stm32fx07_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			      const void *buf, uint16_t len)
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
	int i;

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 8001f72:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001f76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			      const void *buf, uint16_t len)
{
	const uint32_t *buf32 = buf;
	int i;

	addr &= 0x7F;
 8001f78:	f001 017f 	and.w	r1, r1, #127	; 0x7f

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 8001f7c:	2520      	movs	r5, #32
 8001f7e:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 8001f82:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001f86:	6806      	ldr	r6, [r0, #0]
 8001f88:	0336      	lsls	r6, r6, #12
 8001f8a:	d41b      	bmi.n	8001fc4 <stm32fx07_ep_write_packet+0x54>
		return 0;
	}

	/* Enable endpoint for transmission. */
	REBASE(OTG_DIEPTSIZ(addr)) = OTG_FS_DIEPSIZ0_PKTCNT | len;
 8001f8c:	f443 2600 	orr.w	r6, r3, #524288	; 0x80000
 8001f90:	6006      	str	r6, [r0, #0]
	REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_EPENA |
 8001f92:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f96:	fb15 0501 	smlabb	r5, r5, r1, r0
 8001f9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f9c:	582e      	ldr	r6, [r5, r0]
 8001f9e:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
 8001fa2:	502e      	str	r6, [r5, r0]
				     OTG_FS_DIEPCTL0_CNAK;
	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fa4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fa6:	3101      	adds	r1, #1
 8001fa8:	eb00 3001 	add.w	r0, r0, r1, lsl #12

	/* Copy buffer to endpoint FIFO, note - memcpy does not work */
	for (i = len; i > 0; i -= 4) {
 8001fac:	4601      	mov	r1, r0
 8001fae:	18c4      	adds	r4, r0, r3
 8001fb0:	1a64      	subs	r4, r4, r1
 8001fb2:	2c00      	cmp	r4, #0
 8001fb4:	dd04      	ble.n	8001fc0 <stm32fx07_ep_write_packet+0x50>
 8001fb6:	1a14      	subs	r4, r2, r0
		*fifo++ = *buf32++;
 8001fb8:	5864      	ldr	r4, [r4, r1]
 8001fba:	f841 4b04 	str.w	r4, [r1], #4
 8001fbe:	e7f6      	b.n	8001fae <stm32fx07_ep_write_packet+0x3e>
	}

	return len;
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
		return 0;
 8001fc4:	2000      	movs	r0, #0
	for (i = len; i > 0; i -= 4) {
		*fifo++ = *buf32++;
	}

	return len;
}
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}

08001fc8 <stm32fx07_ep_read_packet>:

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fca:	460d      	mov	r5, r1
 8001fcc:	4611      	mov	r1, r2
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
 8001fce:	f8b0 20e4 	ldrh.w	r2, [r0, #228]	; 0xe4
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bf34      	ite	cc
 8001fd6:	461e      	movcc	r6, r3
 8001fd8:	4616      	movcs	r6, r2
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fda:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 8001fe0:	1b92      	subs	r2, r2, r6

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fe2:	1c6f      	adds	r7, r5, #1
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 8001fe4:	f8a0 20e4 	strh.w	r2, [r0, #228]	; 0xe4
	return len;
}

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001fe8:	4604      	mov	r4, r0
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fea:	eb03 3707 	add.w	r7, r3, r7, lsl #12
	for (i = len; i >= 4; i -= 4) {
 8001fee:	4632      	mov	r2, r6

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
	int i;
	uint32_t *buf32 = buf;
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	1a7b      	subs	r3, r7, r1

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 8001ff4:	2a03      	cmp	r2, #3
 8001ff6:	4403      	add	r3, r0
 8001ff8:	dd04      	ble.n	8002004 <stm32fx07_ep_read_packet+0x3c>
		*buf32++ = *fifo++;
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f840 3b04 	str.w	r3, [r0], #4

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 8002000:	3a04      	subs	r2, #4
 8002002:	e7f6      	b.n	8001ff2 <stm32fx07_ep_read_packet+0x2a>
		*buf32++ = *fifo++;
	}

	if (i) {
 8002004:	b12a      	cbz	r2, 8002012 <stm32fx07_ep_read_packet+0x4a>
		extra = *fifo++;
 8002006:	a902      	add	r1, sp, #8
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(buf32, &extra, i);
 800200e:	f000 fc09 	bl	8002824 <memcpy>
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8002012:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002018:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 800201c:	2220      	movs	r2, #32
 800201e:	f501 6131 	add.w	r1, r1, #2832	; 0xb10
 8002022:	fb12 1105 	smlabb	r1, r2, r5, r1
 8002026:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 800202a:	6008      	str	r0, [r1, #0]
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
	    (usbd_dev->force_nak[addr] ?
 800202c:	442c      	add	r4, r5
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 800202e:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8002032:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	fb12 1205 	smlabb	r2, r2, r5, r1
 800203c:	2800      	cmp	r0, #0
 800203e:	58d1      	ldr	r1, [r2, r3]
 8002040:	bf0c      	ite	eq
 8002042:	f04f 4004 	moveq.w	r0, #2214592512	; 0x84000000
 8002046:	f04f 4008 	movne.w	r0, #2281701376	; 0x88000000
 800204a:	4301      	orrs	r1, r0
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 800204c:	4630      	mov	r0, r6
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 800204e:	50d1      	str	r1, [r2, r3]
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 8002050:	b003      	add	sp, #12
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002054 <stm32fx07_poll>:

void stm32fx07_poll(usbd_device *usbd_dev)
{
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 8002054:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 800205a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800205c:	695e      	ldr	r6, [r3, #20]
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 800205e:	04b5      	lsls	r5, r6, #18

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 8002060:	4604      	mov	r4, r0
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 8002062:	d509      	bpl.n	8002078 <stm32fx07_poll+0x24>
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
 8002064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002068:	6159      	str	r1, [r3, #20]
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 800206a:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 800206c:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		if (usbd_dev->user_callback_sof) {
			usbd_dev->user_callback_sof();
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
	}
}
 8002070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
		_usbd_reset(usbd_dev);
 8002074:	f7ff ba4f 	b.w	8001516 <_usbd_reset>
		return;
	}

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
 8002078:	06f0      	lsls	r0, r6, #27
 800207a:	d531      	bpl.n	80020e0 <stm32fx07_poll+0x8c>
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
 800207c:	6a1b      	ldr	r3, [r3, #32]
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
 800207e:	f403 12b0 	and.w	r2, r3, #1441792	; 0x160000
 8002082:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002086:	d167      	bne.n	8002158 <stm32fx07_poll+0x104>

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
 8002088:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
		    (pktsts != OTG_FS_GRXSTSP_PKTSTS_SETUP)) {
			return;
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
 800208c:	f003 050f 	and.w	r5, r3, #15
		uint8_t type;
		if (pktsts == OTG_FS_GRXSTSP_PKTSTS_SETUP) {
			type = USB_TRANSACTION_SETUP;
 8002090:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 8002094:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002098:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
		uint8_t type;
		if (pktsts == OTG_FS_GRXSTSP_PKTSTS_SETUP) {
			type = USB_TRANSACTION_SETUP;
 800209c:	bf14      	ite	ne
 800209e:	2201      	movne	r2, #1
 80020a0:	2202      	moveq	r2, #2
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
			__asm__("nop");
 80020a6:	bf00      	nop
		/*
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
 80020a8:	3b01      	subs	r3, #1
 80020aa:	d1fc      	bne.n	80020a6 <stm32fx07_poll+0x52>
			__asm__("nop");
		}

		if (usbd_dev->user_callback_ctr[ep][type]) {
 80020ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80020b0:	4413      	add	r3, r2
 80020b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80020b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b8:	b113      	cbz	r3, 80020c0 <stm32fx07_poll+0x6c>
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	4798      	blx	r3
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
			(void)*REBASE_FIFO(ep);
 80020c0:	3501      	adds	r5, #1
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020c2:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	; 0xe4
			(void)*REBASE_FIFO(ep);
 80020c6:	032d      	lsls	r5, r5, #12
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	428b      	cmp	r3, r1
 80020cc:	da05      	bge.n	80020da <stm32fx07_poll+0x86>
			(void)*REBASE_FIFO(ep);
 80020ce:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80020d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020d4:	3304      	adds	r3, #4
			(void)*REBASE_FIFO(ep);
 80020d6:	58aa      	ldr	r2, [r5, r2]
 80020d8:	e7f7      	b.n	80020ca <stm32fx07_poll+0x76>
		}

		usbd_dev->rxbcnt = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020e0:	2500      	movs	r5, #0
	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
 80020e2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	016f      	lsls	r7, r5, #5
 80020ea:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80020ee:	59db      	ldr	r3, [r3, r7]
 80020f0:	07d9      	lsls	r1, r3, #31
 80020f2:	d50e      	bpl.n	8002112 <stm32fx07_poll+0xbe>
 80020f4:	230c      	movs	r3, #12
 80020f6:	fb03 4305 	mla	r3, r3, r5, r4
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
						       [USB_TRANSACTION_IN]) {
 80020fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
 80020fc:	b113      	cbz	r3, 8002104 <stm32fx07_poll+0xb0>
						       [USB_TRANSACTION_IN]) {
				usbd_dev->user_callback_ctr[i]
					[USB_TRANSACTION_IN](usbd_dev, i);
 80020fe:	4620      	mov	r0, r4
 8002100:	b2e9      	uxtb	r1, r5
 8002102:	4798      	blx	r3
			}

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
 8002104:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800210e:	2201      	movs	r2, #1
 8002110:	51da      	str	r2, [r3, r7]

	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
 8002112:	3501      	adds	r5, #1
 8002114:	2d04      	cmp	r5, #4
 8002116:	d1e4      	bne.n	80020e2 <stm32fx07_poll+0x8e>

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
		}
	}

	if (intsts & OTG_FS_GINTSTS_USBSUSP) {
 8002118:	0532      	lsls	r2, r6, #20
 800211a:	d508      	bpl.n	800212e <stm32fx07_poll+0xda>
		if (usbd_dev->user_callback_suspend) {
 800211c:	6a23      	ldr	r3, [r4, #32]
 800211e:	b103      	cbz	r3, 8002122 <stm32fx07_poll+0xce>
			usbd_dev->user_callback_suspend();
 8002120:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_USBSUSP;
 8002122:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_WKUPINT) {
 800212e:	2e00      	cmp	r6, #0
 8002130:	da08      	bge.n	8002144 <stm32fx07_poll+0xf0>
		if (usbd_dev->user_callback_resume) {
 8002132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002134:	b103      	cbz	r3, 8002138 <stm32fx07_poll+0xe4>
			usbd_dev->user_callback_resume();
 8002136:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_WKUPINT;
 8002138:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002142:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_SOF) {
 8002144:	0733      	lsls	r3, r6, #28
 8002146:	d507      	bpl.n	8002158 <stm32fx07_poll+0x104>
		if (usbd_dev->user_callback_sof) {
 8002148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800214a:	b103      	cbz	r3, 800214e <stm32fx07_poll+0xfa>
			usbd_dev->user_callback_sof();
 800214c:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
 800214e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	2208      	movs	r2, #8
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800215a <stm32fx07_disconnect>:
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
 800215a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (disconnected) {
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	if (disconnected) {
 8002164:	b111      	cbz	r1, 800216c <stm32fx07_disconnect+0x12>
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 8002166:	f042 0202 	orr.w	r2, r2, #2
 800216a:	e001      	b.n	8002170 <stm32fx07_disconnect+0x16>
	} else {
		REBASE(OTG_DCTL) &= ~OTG_FS_DCTL_SDIS;
 800216c:	f022 0202 	bic.w	r2, r2, #2
 8002170:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002174:	4770      	bx	lr
	...

08002178 <abort>:
 8002178:	b508      	push	{r3, lr}
 800217a:	2006      	movs	r0, #6
 800217c:	f000 fc8c 	bl	8002a98 <raise>
 8002180:	2001      	movs	r0, #1
 8002182:	f004 fd0f 	bl	8006ba4 <_exit>
 8002186:	bf00      	nop

08002188 <_cleanup_r>:
 8002188:	4901      	ldr	r1, [pc, #4]	; (8002190 <_cleanup_r+0x8>)
 800218a:	f000 b881 	b.w	8002290 <_fwalk>
 800218e:	bf00      	nop
 8002190:	080054c1 	.word	0x080054c1

08002194 <__sinit>:
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800219a:	b083      	sub	sp, #12
 800219c:	4607      	mov	r7, r0
 800219e:	2c00      	cmp	r4, #0
 80021a0:	d165      	bne.n	800226e <__sinit+0xda>
 80021a2:	6845      	ldr	r5, [r0, #4]
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <__sinit+0xe0>)
 80021a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80021a8:	2304      	movs	r3, #4
 80021aa:	2103      	movs	r1, #3
 80021ac:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 80021b0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 80021b4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 80021b8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 80021bc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80021c0:	81ab      	strh	r3, [r5, #12]
 80021c2:	602c      	str	r4, [r5, #0]
 80021c4:	606c      	str	r4, [r5, #4]
 80021c6:	60ac      	str	r4, [r5, #8]
 80021c8:	666c      	str	r4, [r5, #100]	; 0x64
 80021ca:	81ec      	strh	r4, [r5, #14]
 80021cc:	612c      	str	r4, [r5, #16]
 80021ce:	616c      	str	r4, [r5, #20]
 80021d0:	61ac      	str	r4, [r5, #24]
 80021d2:	4621      	mov	r1, r4
 80021d4:	2208      	movs	r2, #8
 80021d6:	f000 fbbf 	bl	8002958 <memset>
 80021da:	68be      	ldr	r6, [r7, #8]
 80021dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002278 <__sinit+0xe4>
 80021e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800227c <__sinit+0xe8>
 80021e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002280 <__sinit+0xec>
 80021e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002284 <__sinit+0xf0>
 80021ec:	61ed      	str	r5, [r5, #28]
 80021ee:	2301      	movs	r3, #1
 80021f0:	2209      	movs	r2, #9
 80021f2:	f8c5 b020 	str.w	fp, [r5, #32]
 80021f6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80021fa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80021fe:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8002202:	4621      	mov	r1, r4
 8002204:	81f3      	strh	r3, [r6, #14]
 8002206:	81b2      	strh	r2, [r6, #12]
 8002208:	6034      	str	r4, [r6, #0]
 800220a:	6074      	str	r4, [r6, #4]
 800220c:	60b4      	str	r4, [r6, #8]
 800220e:	6674      	str	r4, [r6, #100]	; 0x64
 8002210:	6134      	str	r4, [r6, #16]
 8002212:	6174      	str	r4, [r6, #20]
 8002214:	61b4      	str	r4, [r6, #24]
 8002216:	2208      	movs	r2, #8
 8002218:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	f000 fb9b 	bl	8002958 <memset>
 8002222:	68fd      	ldr	r5, [r7, #12]
 8002224:	61f6      	str	r6, [r6, #28]
 8002226:	2012      	movs	r0, #18
 8002228:	2202      	movs	r2, #2
 800222a:	f8c6 b020 	str.w	fp, [r6, #32]
 800222e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8002232:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8002236:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800223a:	4621      	mov	r1, r4
 800223c:	81a8      	strh	r0, [r5, #12]
 800223e:	81ea      	strh	r2, [r5, #14]
 8002240:	602c      	str	r4, [r5, #0]
 8002242:	606c      	str	r4, [r5, #4]
 8002244:	60ac      	str	r4, [r5, #8]
 8002246:	666c      	str	r4, [r5, #100]	; 0x64
 8002248:	612c      	str	r4, [r5, #16]
 800224a:	616c      	str	r4, [r5, #20]
 800224c:	61ac      	str	r4, [r5, #24]
 800224e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002252:	2208      	movs	r2, #8
 8002254:	f000 fb80 	bl	8002958 <memset>
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	61ed      	str	r5, [r5, #28]
 800225c:	f8c5 b020 	str.w	fp, [r5, #32]
 8002260:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002264:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002268:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
 800226e:	b003      	add	sp, #12
 8002270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002274:	08002189 	.word	0x08002189
 8002278:	08002ad5 	.word	0x08002ad5
 800227c:	08002af9 	.word	0x08002af9
 8002280:	08002b31 	.word	0x08002b31
 8002284:	08002b51 	.word	0x08002b51

08002288 <__sfp_lock_acquire>:
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <__sfp_lock_release>:
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <_fwalk>:
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8002298:	4688      	mov	r8, r1
 800229a:	d01a      	beq.n	80022d2 <_fwalk+0x42>
 800229c:	2600      	movs	r6, #0
 800229e:	687d      	ldr	r5, [r7, #4]
 80022a0:	68bc      	ldr	r4, [r7, #8]
 80022a2:	3d01      	subs	r5, #1
 80022a4:	d40f      	bmi.n	80022c6 <_fwalk+0x36>
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80022ae:	d906      	bls.n	80022be <_fwalk+0x2e>
 80022b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4620      	mov	r0, r4
 80022b8:	d001      	beq.n	80022be <_fwalk+0x2e>
 80022ba:	47c0      	blx	r8
 80022bc:	4306      	orrs	r6, r0
 80022be:	1c6b      	adds	r3, r5, #1
 80022c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80022c4:	d1ef      	bne.n	80022a6 <_fwalk+0x16>
 80022c6:	683f      	ldr	r7, [r7, #0]
 80022c8:	2f00      	cmp	r7, #0
 80022ca:	d1e8      	bne.n	800229e <_fwalk+0xe>
 80022cc:	4630      	mov	r0, r6
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d2:	463e      	mov	r6, r7
 80022d4:	4630      	mov	r0, r6
 80022d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022da:	bf00      	nop

080022dc <malloc>:
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <malloc+0xc>)
 80022de:	4601      	mov	r1, r0
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	f000 b803 	b.w	80022ec <_malloc_r>
 80022e6:	bf00      	nop
 80022e8:	20000450 	.word	0x20000450

080022ec <_malloc_r>:
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	f101 050b 	add.w	r5, r1, #11
 80022f4:	2d16      	cmp	r5, #22
 80022f6:	b083      	sub	sp, #12
 80022f8:	4606      	mov	r6, r0
 80022fa:	d927      	bls.n	800234c <_malloc_r+0x60>
 80022fc:	f035 0507 	bics.w	r5, r5, #7
 8002300:	d427      	bmi.n	8002352 <_malloc_r+0x66>
 8002302:	42a9      	cmp	r1, r5
 8002304:	d825      	bhi.n	8002352 <_malloc_r+0x66>
 8002306:	4630      	mov	r0, r6
 8002308:	f000 fb70 	bl	80029ec <__malloc_lock>
 800230c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8002310:	d226      	bcs.n	8002360 <_malloc_r+0x74>
 8002312:	4fc1      	ldr	r7, [pc, #772]	; (8002618 <_malloc_r+0x32c>)
 8002314:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8002318:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 800231c:	68dc      	ldr	r4, [r3, #12]
 800231e:	429c      	cmp	r4, r3
 8002320:	f000 81d2 	beq.w	80026c8 <_malloc_r+0x3dc>
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	68e2      	ldr	r2, [r4, #12]
 8002328:	68a1      	ldr	r1, [r4, #8]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	4423      	add	r3, r4
 8002330:	4630      	mov	r0, r6
 8002332:	685d      	ldr	r5, [r3, #4]
 8002334:	60ca      	str	r2, [r1, #12]
 8002336:	f045 0501 	orr.w	r5, r5, #1
 800233a:	6091      	str	r1, [r2, #8]
 800233c:	605d      	str	r5, [r3, #4]
 800233e:	f000 fb57 	bl	80029f0 <__malloc_unlock>
 8002342:	3408      	adds	r4, #8
 8002344:	4620      	mov	r0, r4
 8002346:	b003      	add	sp, #12
 8002348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234c:	2510      	movs	r5, #16
 800234e:	42a9      	cmp	r1, r5
 8002350:	d9d9      	bls.n	8002306 <_malloc_r+0x1a>
 8002352:	2400      	movs	r4, #0
 8002354:	230c      	movs	r3, #12
 8002356:	4620      	mov	r0, r4
 8002358:	6033      	str	r3, [r6, #0]
 800235a:	b003      	add	sp, #12
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002360:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8002364:	f000 808a 	beq.w	800247c <_malloc_r+0x190>
 8002368:	f1bc 0f04 	cmp.w	ip, #4
 800236c:	f200 8160 	bhi.w	8002630 <_malloc_r+0x344>
 8002370:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8002374:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8002378:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800237c:	4fa6      	ldr	r7, [pc, #664]	; (8002618 <_malloc_r+0x32c>)
 800237e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8002382:	68cc      	ldr	r4, [r1, #12]
 8002384:	42a1      	cmp	r1, r4
 8002386:	d105      	bne.n	8002394 <_malloc_r+0xa8>
 8002388:	e00c      	b.n	80023a4 <_malloc_r+0xb8>
 800238a:	2b00      	cmp	r3, #0
 800238c:	da7a      	bge.n	8002484 <_malloc_r+0x198>
 800238e:	68e4      	ldr	r4, [r4, #12]
 8002390:	42a1      	cmp	r1, r4
 8002392:	d007      	beq.n	80023a4 <_malloc_r+0xb8>
 8002394:	6862      	ldr	r2, [r4, #4]
 8002396:	f022 0203 	bic.w	r2, r2, #3
 800239a:	1b53      	subs	r3, r2, r5
 800239c:	2b0f      	cmp	r3, #15
 800239e:	ddf4      	ble.n	800238a <_malloc_r+0x9e>
 80023a0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80023a4:	f10c 0c01 	add.w	ip, ip, #1
 80023a8:	4b9b      	ldr	r3, [pc, #620]	; (8002618 <_malloc_r+0x32c>)
 80023aa:	693c      	ldr	r4, [r7, #16]
 80023ac:	f103 0e08 	add.w	lr, r3, #8
 80023b0:	4574      	cmp	r4, lr
 80023b2:	f000 817e 	beq.w	80026b2 <_malloc_r+0x3c6>
 80023b6:	6861      	ldr	r1, [r4, #4]
 80023b8:	f021 0103 	bic.w	r1, r1, #3
 80023bc:	1b4a      	subs	r2, r1, r5
 80023be:	2a0f      	cmp	r2, #15
 80023c0:	f300 8164 	bgt.w	800268c <_malloc_r+0x3a0>
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	f8c3 e014 	str.w	lr, [r3, #20]
 80023ca:	f8c3 e010 	str.w	lr, [r3, #16]
 80023ce:	da6a      	bge.n	80024a6 <_malloc_r+0x1ba>
 80023d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80023d4:	f080 813a 	bcs.w	800264c <_malloc_r+0x360>
 80023d8:	08c9      	lsrs	r1, r1, #3
 80023da:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 80023de:	ea4f 08a1 	mov.w	r8, r1, asr #2
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	6881      	ldr	r1, [r0, #8]
 80023e6:	60a1      	str	r1, [r4, #8]
 80023e8:	f04f 0901 	mov.w	r9, #1
 80023ec:	fa09 f808 	lsl.w	r8, r9, r8
 80023f0:	ea48 0202 	orr.w	r2, r8, r2
 80023f4:	60e0      	str	r0, [r4, #12]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	6084      	str	r4, [r0, #8]
 80023fa:	60cc      	str	r4, [r1, #12]
 80023fc:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8002400:	2001      	movs	r0, #1
 8002402:	4098      	lsls	r0, r3
 8002404:	4290      	cmp	r0, r2
 8002406:	d85b      	bhi.n	80024c0 <_malloc_r+0x1d4>
 8002408:	4202      	tst	r2, r0
 800240a:	d106      	bne.n	800241a <_malloc_r+0x12e>
 800240c:	f02c 0c03 	bic.w	ip, ip, #3
 8002410:	0040      	lsls	r0, r0, #1
 8002412:	4202      	tst	r2, r0
 8002414:	f10c 0c04 	add.w	ip, ip, #4
 8002418:	d0fa      	beq.n	8002410 <_malloc_r+0x124>
 800241a:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 800241e:	4644      	mov	r4, r8
 8002420:	46e1      	mov	r9, ip
 8002422:	68e3      	ldr	r3, [r4, #12]
 8002424:	429c      	cmp	r4, r3
 8002426:	d107      	bne.n	8002438 <_malloc_r+0x14c>
 8002428:	e145      	b.n	80026b6 <_malloc_r+0x3ca>
 800242a:	2a00      	cmp	r2, #0
 800242c:	f280 8156 	bge.w	80026dc <_malloc_r+0x3f0>
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	429c      	cmp	r4, r3
 8002434:	f000 813f 	beq.w	80026b6 <_malloc_r+0x3ca>
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	f021 0103 	bic.w	r1, r1, #3
 800243e:	1b4a      	subs	r2, r1, r5
 8002440:	2a0f      	cmp	r2, #15
 8002442:	ddf2      	ble.n	800242a <_malloc_r+0x13e>
 8002444:	461c      	mov	r4, r3
 8002446:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800244a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800244e:	1959      	adds	r1, r3, r5
 8002450:	f045 0901 	orr.w	r9, r5, #1
 8002454:	f042 0501 	orr.w	r5, r2, #1
 8002458:	f8c3 9004 	str.w	r9, [r3, #4]
 800245c:	4630      	mov	r0, r6
 800245e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8002462:	f8cc 8008 	str.w	r8, [ip, #8]
 8002466:	6179      	str	r1, [r7, #20]
 8002468:	6139      	str	r1, [r7, #16]
 800246a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800246e:	f8c1 e008 	str.w	lr, [r1, #8]
 8002472:	604d      	str	r5, [r1, #4]
 8002474:	508a      	str	r2, [r1, r2]
 8002476:	f000 fabb 	bl	80029f0 <__malloc_unlock>
 800247a:	e763      	b.n	8002344 <_malloc_r+0x58>
 800247c:	217e      	movs	r1, #126	; 0x7e
 800247e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8002482:	e77b      	b.n	800237c <_malloc_r+0x90>
 8002484:	4422      	add	r2, r4
 8002486:	68e3      	ldr	r3, [r4, #12]
 8002488:	6850      	ldr	r0, [r2, #4]
 800248a:	68a1      	ldr	r1, [r4, #8]
 800248c:	f040 0501 	orr.w	r5, r0, #1
 8002490:	60cb      	str	r3, [r1, #12]
 8002492:	4630      	mov	r0, r6
 8002494:	6099      	str	r1, [r3, #8]
 8002496:	6055      	str	r5, [r2, #4]
 8002498:	f000 faaa 	bl	80029f0 <__malloc_unlock>
 800249c:	3408      	adds	r4, #8
 800249e:	4620      	mov	r0, r4
 80024a0:	b003      	add	sp, #12
 80024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a6:	4421      	add	r1, r4
 80024a8:	4630      	mov	r0, r6
 80024aa:	684b      	ldr	r3, [r1, #4]
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	604b      	str	r3, [r1, #4]
 80024b2:	f000 fa9d 	bl	80029f0 <__malloc_unlock>
 80024b6:	3408      	adds	r4, #8
 80024b8:	4620      	mov	r0, r4
 80024ba:	b003      	add	sp, #12
 80024bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c0:	68bc      	ldr	r4, [r7, #8]
 80024c2:	6863      	ldr	r3, [r4, #4]
 80024c4:	f023 0903 	bic.w	r9, r3, #3
 80024c8:	45a9      	cmp	r9, r5
 80024ca:	d304      	bcc.n	80024d6 <_malloc_r+0x1ea>
 80024cc:	ebc5 0309 	rsb	r3, r5, r9
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	f300 8091 	bgt.w	80025f8 <_malloc_r+0x30c>
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <_malloc_r+0x330>)
 80024d8:	4a51      	ldr	r2, [pc, #324]	; (8002620 <_malloc_r+0x334>)
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	eb05 0a01 	add.w	sl, r5, r1
 80024e4:	eb04 0b09 	add.w	fp, r4, r9
 80024e8:	f000 8161 	beq.w	80027ae <_malloc_r+0x4c2>
 80024ec:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 80024f0:	f10a 0a0f 	add.w	sl, sl, #15
 80024f4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 80024f8:	f02a 0a0f 	bic.w	sl, sl, #15
 80024fc:	4630      	mov	r0, r6
 80024fe:	4651      	mov	r1, sl
 8002500:	9201      	str	r2, [sp, #4]
 8002502:	f000 fa8b 	bl	8002a1c <_sbrk_r>
 8002506:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800250a:	4680      	mov	r8, r0
 800250c:	9a01      	ldr	r2, [sp, #4]
 800250e:	f000 8100 	beq.w	8002712 <_malloc_r+0x426>
 8002512:	4583      	cmp	fp, r0
 8002514:	f200 80fa 	bhi.w	800270c <_malloc_r+0x420>
 8002518:	f8df c110 	ldr.w	ip, [pc, #272]	; 800262c <_malloc_r+0x340>
 800251c:	f8dc 3000 	ldr.w	r3, [ip]
 8002520:	45c3      	cmp	fp, r8
 8002522:	4453      	add	r3, sl
 8002524:	f8cc 3000 	str.w	r3, [ip]
 8002528:	f000 814a 	beq.w	80027c0 <_malloc_r+0x4d4>
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	493c      	ldr	r1, [pc, #240]	; (8002620 <_malloc_r+0x334>)
 8002530:	3201      	adds	r2, #1
 8002532:	bf1b      	ittet	ne
 8002534:	ebcb 0b08 	rsbne	fp, fp, r8
 8002538:	445b      	addne	r3, fp
 800253a:	f8c1 8000 	streq.w	r8, [r1]
 800253e:	f8cc 3000 	strne.w	r3, [ip]
 8002542:	f018 0307 	ands.w	r3, r8, #7
 8002546:	f000 8113 	beq.w	8002770 <_malloc_r+0x484>
 800254a:	f1c3 0208 	rsb	r2, r3, #8
 800254e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002552:	4490      	add	r8, r2
 8002554:	3308      	adds	r3, #8
 8002556:	44c2      	add	sl, r8
 8002558:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 800255c:	ebca 0a03 	rsb	sl, sl, r3
 8002560:	4651      	mov	r1, sl
 8002562:	4630      	mov	r0, r6
 8002564:	f8cd c004 	str.w	ip, [sp, #4]
 8002568:	f000 fa58 	bl	8002a1c <_sbrk_r>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002572:	f000 8135 	beq.w	80027e0 <_malloc_r+0x4f4>
 8002576:	ebc8 0200 	rsb	r2, r8, r0
 800257a:	4452      	add	r2, sl
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	f8dc 3000 	ldr.w	r3, [ip]
 8002584:	f8c7 8008 	str.w	r8, [r7, #8]
 8002588:	4453      	add	r3, sl
 800258a:	42bc      	cmp	r4, r7
 800258c:	f8c8 2004 	str.w	r2, [r8, #4]
 8002590:	f8cc 3000 	str.w	r3, [ip]
 8002594:	f8df a094 	ldr.w	sl, [pc, #148]	; 800262c <_malloc_r+0x340>
 8002598:	d015      	beq.n	80025c6 <_malloc_r+0x2da>
 800259a:	f1b9 0f0f 	cmp.w	r9, #15
 800259e:	f240 80ea 	bls.w	8002776 <_malloc_r+0x48a>
 80025a2:	6861      	ldr	r1, [r4, #4]
 80025a4:	f1a9 020c 	sub.w	r2, r9, #12
 80025a8:	f022 0207 	bic.w	r2, r2, #7
 80025ac:	f001 0e01 	and.w	lr, r1, #1
 80025b0:	18a1      	adds	r1, r4, r2
 80025b2:	2005      	movs	r0, #5
 80025b4:	ea42 0e0e 	orr.w	lr, r2, lr
 80025b8:	2a0f      	cmp	r2, #15
 80025ba:	f8c4 e004 	str.w	lr, [r4, #4]
 80025be:	6048      	str	r0, [r1, #4]
 80025c0:	6088      	str	r0, [r1, #8]
 80025c2:	f200 8111 	bhi.w	80027e8 <_malloc_r+0x4fc>
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <_malloc_r+0x338>)
 80025c8:	68bc      	ldr	r4, [r7, #8]
 80025ca:	6811      	ldr	r1, [r2, #0]
 80025cc:	428b      	cmp	r3, r1
 80025ce:	bf88      	it	hi
 80025d0:	6013      	strhi	r3, [r2, #0]
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <_malloc_r+0x33c>)
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	428b      	cmp	r3, r1
 80025d8:	bf88      	it	hi
 80025da:	6013      	strhi	r3, [r2, #0]
 80025dc:	6862      	ldr	r2, [r4, #4]
 80025de:	f022 0203 	bic.w	r2, r2, #3
 80025e2:	4295      	cmp	r5, r2
 80025e4:	ebc5 0302 	rsb	r3, r5, r2
 80025e8:	d801      	bhi.n	80025ee <_malloc_r+0x302>
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	dc04      	bgt.n	80025f8 <_malloc_r+0x30c>
 80025ee:	4630      	mov	r0, r6
 80025f0:	f000 f9fe 	bl	80029f0 <__malloc_unlock>
 80025f4:	2400      	movs	r4, #0
 80025f6:	e6a5      	b.n	8002344 <_malloc_r+0x58>
 80025f8:	1962      	adds	r2, r4, r5
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f045 0501 	orr.w	r5, r5, #1
 8002602:	6065      	str	r5, [r4, #4]
 8002604:	4630      	mov	r0, r6
 8002606:	60ba      	str	r2, [r7, #8]
 8002608:	6053      	str	r3, [r2, #4]
 800260a:	f000 f9f1 	bl	80029f0 <__malloc_unlock>
 800260e:	3408      	adds	r4, #8
 8002610:	4620      	mov	r0, r4
 8002612:	b003      	add	sp, #12
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002618:	20000454 	.word	0x20000454
 800261c:	20008af4 	.word	0x20008af4
 8002620:	20000860 	.word	0x20000860
 8002624:	20008af0 	.word	0x20008af0
 8002628:	20008aec 	.word	0x20008aec
 800262c:	20008af8 	.word	0x20008af8
 8002630:	f1bc 0f14 	cmp.w	ip, #20
 8002634:	d961      	bls.n	80026fa <_malloc_r+0x40e>
 8002636:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800263a:	f200 808f 	bhi.w	800275c <_malloc_r+0x470>
 800263e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8002642:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8002646:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800264a:	e697      	b.n	800237c <_malloc_r+0x90>
 800264c:	0a4b      	lsrs	r3, r1, #9
 800264e:	2b04      	cmp	r3, #4
 8002650:	d958      	bls.n	8002704 <_malloc_r+0x418>
 8002652:	2b14      	cmp	r3, #20
 8002654:	f200 80ae 	bhi.w	80027b4 <_malloc_r+0x4c8>
 8002658:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800265c:	0050      	lsls	r0, r2, #1
 800265e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002662:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002820 <_malloc_r+0x534>
 8002666:	6883      	ldr	r3, [r0, #8]
 8002668:	4283      	cmp	r3, r0
 800266a:	f000 808a 	beq.w	8002782 <_malloc_r+0x496>
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	f022 0203 	bic.w	r2, r2, #3
 8002674:	4291      	cmp	r1, r2
 8002676:	d202      	bcs.n	800267e <_malloc_r+0x392>
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4298      	cmp	r0, r3
 800267c:	d1f7      	bne.n	800266e <_malloc_r+0x382>
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	60e1      	str	r1, [r4, #12]
 8002684:	60a3      	str	r3, [r4, #8]
 8002686:	608c      	str	r4, [r1, #8]
 8002688:	60dc      	str	r4, [r3, #12]
 800268a:	e6b7      	b.n	80023fc <_malloc_r+0x110>
 800268c:	1961      	adds	r1, r4, r5
 800268e:	f042 0701 	orr.w	r7, r2, #1
 8002692:	f045 0501 	orr.w	r5, r5, #1
 8002696:	6065      	str	r5, [r4, #4]
 8002698:	4630      	mov	r0, r6
 800269a:	6159      	str	r1, [r3, #20]
 800269c:	6119      	str	r1, [r3, #16]
 800269e:	f8c1 e00c 	str.w	lr, [r1, #12]
 80026a2:	f8c1 e008 	str.w	lr, [r1, #8]
 80026a6:	604f      	str	r7, [r1, #4]
 80026a8:	508a      	str	r2, [r1, r2]
 80026aa:	3408      	adds	r4, #8
 80026ac:	f000 f9a0 	bl	80029f0 <__malloc_unlock>
 80026b0:	e648      	b.n	8002344 <_malloc_r+0x58>
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	e6a2      	b.n	80023fc <_malloc_r+0x110>
 80026b6:	f109 0901 	add.w	r9, r9, #1
 80026ba:	f019 0f03 	tst.w	r9, #3
 80026be:	f104 0408 	add.w	r4, r4, #8
 80026c2:	f47f aeae 	bne.w	8002422 <_malloc_r+0x136>
 80026c6:	e02d      	b.n	8002724 <_malloc_r+0x438>
 80026c8:	f104 0308 	add.w	r3, r4, #8
 80026cc:	6964      	ldr	r4, [r4, #20]
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	bf08      	it	eq
 80026d2:	f10c 0c02 	addeq.w	ip, ip, #2
 80026d6:	f43f ae67 	beq.w	80023a8 <_malloc_r+0xbc>
 80026da:	e623      	b.n	8002324 <_malloc_r+0x38>
 80026dc:	4419      	add	r1, r3
 80026de:	461c      	mov	r4, r3
 80026e0:	6848      	ldr	r0, [r1, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80026e8:	f040 0501 	orr.w	r5, r0, #1
 80026ec:	604d      	str	r5, [r1, #4]
 80026ee:	4630      	mov	r0, r6
 80026f0:	60d3      	str	r3, [r2, #12]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	f000 f97c 	bl	80029f0 <__malloc_unlock>
 80026f8:	e624      	b.n	8002344 <_malloc_r+0x58>
 80026fa:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 80026fe:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8002702:	e63b      	b.n	800237c <_malloc_r+0x90>
 8002704:	098a      	lsrs	r2, r1, #6
 8002706:	3238      	adds	r2, #56	; 0x38
 8002708:	0050      	lsls	r0, r2, #1
 800270a:	e7a8      	b.n	800265e <_malloc_r+0x372>
 800270c:	42bc      	cmp	r4, r7
 800270e:	f43f af03 	beq.w	8002518 <_malloc_r+0x22c>
 8002712:	68bc      	ldr	r4, [r7, #8]
 8002714:	6862      	ldr	r2, [r4, #4]
 8002716:	f022 0203 	bic.w	r2, r2, #3
 800271a:	e762      	b.n	80025e2 <_malloc_r+0x2f6>
 800271c:	f8d8 8000 	ldr.w	r8, [r8]
 8002720:	4598      	cmp	r8, r3
 8002722:	d17b      	bne.n	800281c <_malloc_r+0x530>
 8002724:	f01c 0f03 	tst.w	ip, #3
 8002728:	f1a8 0308 	sub.w	r3, r8, #8
 800272c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002730:	d1f4      	bne.n	800271c <_malloc_r+0x430>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	ea23 0300 	bic.w	r3, r3, r0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	0040      	lsls	r0, r0, #1
 800273c:	4298      	cmp	r0, r3
 800273e:	f63f aebf 	bhi.w	80024c0 <_malloc_r+0x1d4>
 8002742:	2800      	cmp	r0, #0
 8002744:	f43f aebc 	beq.w	80024c0 <_malloc_r+0x1d4>
 8002748:	4203      	tst	r3, r0
 800274a:	46cc      	mov	ip, r9
 800274c:	f47f ae65 	bne.w	800241a <_malloc_r+0x12e>
 8002750:	0040      	lsls	r0, r0, #1
 8002752:	4203      	tst	r3, r0
 8002754:	f10c 0c04 	add.w	ip, ip, #4
 8002758:	d0fa      	beq.n	8002750 <_malloc_r+0x464>
 800275a:	e65e      	b.n	800241a <_malloc_r+0x12e>
 800275c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8002760:	d81a      	bhi.n	8002798 <_malloc_r+0x4ac>
 8002762:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8002766:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800276a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800276e:	e605      	b.n	800237c <_malloc_r+0x90>
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	e6ef      	b.n	8002556 <_malloc_r+0x26a>
 8002776:	2301      	movs	r3, #1
 8002778:	f8c8 3004 	str.w	r3, [r8, #4]
 800277c:	4644      	mov	r4, r8
 800277e:	2200      	movs	r2, #0
 8002780:	e72f      	b.n	80025e2 <_malloc_r+0x2f6>
 8002782:	1091      	asrs	r1, r2, #2
 8002784:	2001      	movs	r0, #1
 8002786:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800278a:	fa00 f101 	lsl.w	r1, r0, r1
 800278e:	430a      	orrs	r2, r1
 8002790:	f8c8 2004 	str.w	r2, [r8, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	e774      	b.n	8002682 <_malloc_r+0x396>
 8002798:	f240 5354 	movw	r3, #1364	; 0x554
 800279c:	459c      	cmp	ip, r3
 800279e:	d81b      	bhi.n	80027d8 <_malloc_r+0x4ec>
 80027a0:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 80027a4:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 80027a8:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80027ac:	e5e6      	b.n	800237c <_malloc_r+0x90>
 80027ae:	f10a 0a10 	add.w	sl, sl, #16
 80027b2:	e6a3      	b.n	80024fc <_malloc_r+0x210>
 80027b4:	2b54      	cmp	r3, #84	; 0x54
 80027b6:	d81f      	bhi.n	80027f8 <_malloc_r+0x50c>
 80027b8:	0b0a      	lsrs	r2, r1, #12
 80027ba:	326e      	adds	r2, #110	; 0x6e
 80027bc:	0050      	lsls	r0, r2, #1
 80027be:	e74e      	b.n	800265e <_malloc_r+0x372>
 80027c0:	f3cb 010b 	ubfx	r1, fp, #0, #12
 80027c4:	2900      	cmp	r1, #0
 80027c6:	f47f aeb1 	bne.w	800252c <_malloc_r+0x240>
 80027ca:	eb0a 0109 	add.w	r1, sl, r9
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f041 0101 	orr.w	r1, r1, #1
 80027d4:	6051      	str	r1, [r2, #4]
 80027d6:	e6f6      	b.n	80025c6 <_malloc_r+0x2da>
 80027d8:	21fc      	movs	r1, #252	; 0xfc
 80027da:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80027de:	e5cd      	b.n	800237c <_malloc_r+0x90>
 80027e0:	2201      	movs	r2, #1
 80027e2:	f04f 0a00 	mov.w	sl, #0
 80027e6:	e6cb      	b.n	8002580 <_malloc_r+0x294>
 80027e8:	f104 0108 	add.w	r1, r4, #8
 80027ec:	4630      	mov	r0, r6
 80027ee:	f002 ff7d 	bl	80056ec <_free_r>
 80027f2:	f8da 3000 	ldr.w	r3, [sl]
 80027f6:	e6e6      	b.n	80025c6 <_malloc_r+0x2da>
 80027f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80027fc:	d803      	bhi.n	8002806 <_malloc_r+0x51a>
 80027fe:	0bca      	lsrs	r2, r1, #15
 8002800:	3277      	adds	r2, #119	; 0x77
 8002802:	0050      	lsls	r0, r2, #1
 8002804:	e72b      	b.n	800265e <_malloc_r+0x372>
 8002806:	f240 5254 	movw	r2, #1364	; 0x554
 800280a:	4293      	cmp	r3, r2
 800280c:	d803      	bhi.n	8002816 <_malloc_r+0x52a>
 800280e:	0c8a      	lsrs	r2, r1, #18
 8002810:	327c      	adds	r2, #124	; 0x7c
 8002812:	0050      	lsls	r0, r2, #1
 8002814:	e723      	b.n	800265e <_malloc_r+0x372>
 8002816:	20fc      	movs	r0, #252	; 0xfc
 8002818:	227e      	movs	r2, #126	; 0x7e
 800281a:	e720      	b.n	800265e <_malloc_r+0x372>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	e78c      	b.n	800273a <_malloc_r+0x44e>
 8002820:	20000454 	.word	0x20000454

08002824 <memcpy>:
 8002824:	4684      	mov	ip, r0
 8002826:	ea41 0300 	orr.w	r3, r1, r0
 800282a:	f013 0303 	ands.w	r3, r3, #3
 800282e:	d16d      	bne.n	800290c <memcpy+0xe8>
 8002830:	3a40      	subs	r2, #64	; 0x40
 8002832:	d341      	bcc.n	80028b8 <memcpy+0x94>
 8002834:	f851 3b04 	ldr.w	r3, [r1], #4
 8002838:	f840 3b04 	str.w	r3, [r0], #4
 800283c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002840:	f840 3b04 	str.w	r3, [r0], #4
 8002844:	f851 3b04 	ldr.w	r3, [r1], #4
 8002848:	f840 3b04 	str.w	r3, [r0], #4
 800284c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002850:	f840 3b04 	str.w	r3, [r0], #4
 8002854:	f851 3b04 	ldr.w	r3, [r1], #4
 8002858:	f840 3b04 	str.w	r3, [r0], #4
 800285c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002860:	f840 3b04 	str.w	r3, [r0], #4
 8002864:	f851 3b04 	ldr.w	r3, [r1], #4
 8002868:	f840 3b04 	str.w	r3, [r0], #4
 800286c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002870:	f840 3b04 	str.w	r3, [r0], #4
 8002874:	f851 3b04 	ldr.w	r3, [r1], #4
 8002878:	f840 3b04 	str.w	r3, [r0], #4
 800287c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002880:	f840 3b04 	str.w	r3, [r0], #4
 8002884:	f851 3b04 	ldr.w	r3, [r1], #4
 8002888:	f840 3b04 	str.w	r3, [r0], #4
 800288c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002890:	f840 3b04 	str.w	r3, [r0], #4
 8002894:	f851 3b04 	ldr.w	r3, [r1], #4
 8002898:	f840 3b04 	str.w	r3, [r0], #4
 800289c:	f851 3b04 	ldr.w	r3, [r1], #4
 80028a0:	f840 3b04 	str.w	r3, [r0], #4
 80028a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80028a8:	f840 3b04 	str.w	r3, [r0], #4
 80028ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80028b0:	f840 3b04 	str.w	r3, [r0], #4
 80028b4:	3a40      	subs	r2, #64	; 0x40
 80028b6:	d2bd      	bcs.n	8002834 <memcpy+0x10>
 80028b8:	3230      	adds	r2, #48	; 0x30
 80028ba:	d311      	bcc.n	80028e0 <memcpy+0xbc>
 80028bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80028c0:	f840 3b04 	str.w	r3, [r0], #4
 80028c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80028c8:	f840 3b04 	str.w	r3, [r0], #4
 80028cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80028d0:	f840 3b04 	str.w	r3, [r0], #4
 80028d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80028d8:	f840 3b04 	str.w	r3, [r0], #4
 80028dc:	3a10      	subs	r2, #16
 80028de:	d2ed      	bcs.n	80028bc <memcpy+0x98>
 80028e0:	320c      	adds	r2, #12
 80028e2:	d305      	bcc.n	80028f0 <memcpy+0xcc>
 80028e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80028e8:	f840 3b04 	str.w	r3, [r0], #4
 80028ec:	3a04      	subs	r2, #4
 80028ee:	d2f9      	bcs.n	80028e4 <memcpy+0xc0>
 80028f0:	3204      	adds	r2, #4
 80028f2:	d008      	beq.n	8002906 <memcpy+0xe2>
 80028f4:	07d2      	lsls	r2, r2, #31
 80028f6:	bf1c      	itt	ne
 80028f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80028fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8002900:	d301      	bcc.n	8002906 <memcpy+0xe2>
 8002902:	880b      	ldrh	r3, [r1, #0]
 8002904:	8003      	strh	r3, [r0, #0]
 8002906:	4660      	mov	r0, ip
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2a08      	cmp	r2, #8
 800290e:	d313      	bcc.n	8002938 <memcpy+0x114>
 8002910:	078b      	lsls	r3, r1, #30
 8002912:	d08d      	beq.n	8002830 <memcpy+0xc>
 8002914:	f010 0303 	ands.w	r3, r0, #3
 8002918:	d08a      	beq.n	8002830 <memcpy+0xc>
 800291a:	f1c3 0304 	rsb	r3, r3, #4
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	07db      	lsls	r3, r3, #31
 8002922:	bf1c      	itt	ne
 8002924:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002928:	f800 3b01 	strbne.w	r3, [r0], #1
 800292c:	d380      	bcc.n	8002830 <memcpy+0xc>
 800292e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002932:	f820 3b02 	strh.w	r3, [r0], #2
 8002936:	e77b      	b.n	8002830 <memcpy+0xc>
 8002938:	3a04      	subs	r2, #4
 800293a:	d3d9      	bcc.n	80028f0 <memcpy+0xcc>
 800293c:	3a01      	subs	r2, #1
 800293e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002942:	f800 3b01 	strb.w	r3, [r0], #1
 8002946:	d2f9      	bcs.n	800293c <memcpy+0x118>
 8002948:	780b      	ldrb	r3, [r1, #0]
 800294a:	7003      	strb	r3, [r0, #0]
 800294c:	784b      	ldrb	r3, [r1, #1]
 800294e:	7043      	strb	r3, [r0, #1]
 8002950:	788b      	ldrb	r3, [r1, #2]
 8002952:	7083      	strb	r3, [r0, #2]
 8002954:	4660      	mov	r0, ip
 8002956:	4770      	bx	lr

08002958 <memset>:
 8002958:	b4f0      	push	{r4, r5, r6, r7}
 800295a:	0784      	lsls	r4, r0, #30
 800295c:	d043      	beq.n	80029e6 <memset+0x8e>
 800295e:	1e54      	subs	r4, r2, #1
 8002960:	2a00      	cmp	r2, #0
 8002962:	d03e      	beq.n	80029e2 <memset+0x8a>
 8002964:	b2cd      	uxtb	r5, r1
 8002966:	4603      	mov	r3, r0
 8002968:	e003      	b.n	8002972 <memset+0x1a>
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	2c00      	cmp	r4, #0
 800296e:	d038      	beq.n	80029e2 <memset+0x8a>
 8002970:	4614      	mov	r4, r2
 8002972:	f803 5b01 	strb.w	r5, [r3], #1
 8002976:	079a      	lsls	r2, r3, #30
 8002978:	d1f7      	bne.n	800296a <memset+0x12>
 800297a:	2c03      	cmp	r4, #3
 800297c:	d92a      	bls.n	80029d4 <memset+0x7c>
 800297e:	b2cd      	uxtb	r5, r1
 8002980:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002984:	2c0f      	cmp	r4, #15
 8002986:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800298a:	d915      	bls.n	80029b8 <memset+0x60>
 800298c:	f1a4 0710 	sub.w	r7, r4, #16
 8002990:	093f      	lsrs	r7, r7, #4
 8002992:	f103 0610 	add.w	r6, r3, #16
 8002996:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800299a:	461a      	mov	r2, r3
 800299c:	6015      	str	r5, [r2, #0]
 800299e:	6055      	str	r5, [r2, #4]
 80029a0:	6095      	str	r5, [r2, #8]
 80029a2:	60d5      	str	r5, [r2, #12]
 80029a4:	3210      	adds	r2, #16
 80029a6:	42b2      	cmp	r2, r6
 80029a8:	d1f8      	bne.n	800299c <memset+0x44>
 80029aa:	f004 040f 	and.w	r4, r4, #15
 80029ae:	3701      	adds	r7, #1
 80029b0:	2c03      	cmp	r4, #3
 80029b2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80029b6:	d90d      	bls.n	80029d4 <memset+0x7c>
 80029b8:	461e      	mov	r6, r3
 80029ba:	4622      	mov	r2, r4
 80029bc:	3a04      	subs	r2, #4
 80029be:	2a03      	cmp	r2, #3
 80029c0:	f846 5b04 	str.w	r5, [r6], #4
 80029c4:	d8fa      	bhi.n	80029bc <memset+0x64>
 80029c6:	1f22      	subs	r2, r4, #4
 80029c8:	f022 0203 	bic.w	r2, r2, #3
 80029cc:	3204      	adds	r2, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	f004 0403 	and.w	r4, r4, #3
 80029d4:	b12c      	cbz	r4, 80029e2 <memset+0x8a>
 80029d6:	b2c9      	uxtb	r1, r1
 80029d8:	441c      	add	r4, r3
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	42a3      	cmp	r3, r4
 80029e0:	d1fb      	bne.n	80029da <memset+0x82>
 80029e2:	bcf0      	pop	{r4, r5, r6, r7}
 80029e4:	4770      	bx	lr
 80029e6:	4614      	mov	r4, r2
 80029e8:	4603      	mov	r3, r0
 80029ea:	e7c6      	b.n	800297a <memset+0x22>

080029ec <__malloc_lock>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <__malloc_unlock>:
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <printf>:
 80029f4:	b40f      	push	{r0, r1, r2, r3}
 80029f6:	b500      	push	{lr}
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <printf+0x24>)
 80029fa:	b083      	sub	sp, #12
 80029fc:	ab04      	add	r3, sp, #16
 80029fe:	6810      	ldr	r0, [r2, #0]
 8002a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a04:	6881      	ldr	r1, [r0, #8]
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	f000 f9f2 	bl	8002df0 <_vfprintf_r>
 8002a0c:	b003      	add	sp, #12
 8002a0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a12:	b004      	add	sp, #16
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000450 	.word	0x20000450

08002a1c <_sbrk_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4c07      	ldr	r4, [pc, #28]	; (8002a3c <_sbrk_r+0x20>)
 8002a20:	2300      	movs	r3, #0
 8002a22:	4605      	mov	r5, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	f7fd fe94 	bl	8000754 <_sbrk>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d000      	beq.n	8002a32 <_sbrk_r+0x16>
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0fb      	beq.n	8002a30 <_sbrk_r+0x14>
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	20008b20 	.word	0x20008b20

08002a40 <_raise_r>:
 8002a40:	291f      	cmp	r1, #31
 8002a42:	b538      	push	{r3, r4, r5, lr}
 8002a44:	460c      	mov	r4, r1
 8002a46:	4605      	mov	r5, r0
 8002a48:	d820      	bhi.n	8002a8c <_raise_r+0x4c>
 8002a4a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8002a4e:	b19a      	cbz	r2, 8002a78 <_raise_r+0x38>
 8002a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a54:	b183      	cbz	r3, 8002a78 <_raise_r+0x38>
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d00c      	beq.n	8002a74 <_raise_r+0x34>
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	d006      	beq.n	8002a6c <_raise_r+0x2c>
 8002a5e:	2500      	movs	r5, #0
 8002a60:	4620      	mov	r0, r4
 8002a62:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8002a66:	4798      	blx	r3
 8002a68:	4628      	mov	r0, r5
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	2316      	movs	r3, #22
 8002a6e:	6003      	str	r3, [r0, #0]
 8002a70:	2001      	movs	r0, #1
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	2000      	movs	r0, #0
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f000 f829 	bl	8002ad0 <_getpid_r>
 8002a7e:	4622      	mov	r2, r4
 8002a80:	4601      	mov	r1, r0
 8002a82:	4628      	mov	r0, r5
 8002a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a88:	f000 b80e 	b.w	8002aa8 <_kill_r>
 8002a8c:	2316      	movs	r3, #22
 8002a8e:	6003      	str	r3, [r0, #0]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a94:	bd38      	pop	{r3, r4, r5, pc}
 8002a96:	bf00      	nop

08002a98 <raise>:
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <raise+0xc>)
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	f7ff bfcf 	b.w	8002a40 <_raise_r>
 8002aa2:	bf00      	nop
 8002aa4:	20000450 	.word	0x20000450

08002aa8 <_kill_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4c08      	ldr	r4, [pc, #32]	; (8002acc <_kill_r+0x24>)
 8002aac:	2300      	movs	r3, #0
 8002aae:	4605      	mov	r5, r0
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	f004 f86d 	bl	8006b94 <_kill>
 8002aba:	1c43      	adds	r3, r0, #1
 8002abc:	d000      	beq.n	8002ac0 <_kill_r+0x18>
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0fb      	beq.n	8002abe <_kill_r+0x16>
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
 8002aca:	bf00      	nop
 8002acc:	20008b20 	.word	0x20008b20

08002ad0 <_getpid_r>:
 8002ad0:	f004 b850 	b.w	8006b74 <_getpid>

08002ad4 <__sread>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	f003 fab4 	bl	8006048 <_read_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	db03      	blt.n	8002aec <__sread+0x18>
 8002ae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ae6:	4403      	add	r3, r0
 8002ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8002aea:	bd10      	pop	{r4, pc}
 8002aec:	89a3      	ldrh	r3, [r4, #12]
 8002aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af2:	81a3      	strh	r3, [r4, #12]
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	bf00      	nop

08002af8 <__swrite>:
 8002af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afc:	460c      	mov	r4, r1
 8002afe:	8989      	ldrh	r1, [r1, #12]
 8002b00:	461d      	mov	r5, r3
 8002b02:	05cb      	lsls	r3, r1, #23
 8002b04:	4616      	mov	r6, r2
 8002b06:	4607      	mov	r7, r0
 8002b08:	d506      	bpl.n	8002b18 <__swrite+0x20>
 8002b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2302      	movs	r3, #2
 8002b12:	f002 fec7 	bl	80058a4 <_lseek_r>
 8002b16:	89a1      	ldrh	r1, [r4, #12]
 8002b18:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b1c:	81a1      	strh	r1, [r4, #12]
 8002b1e:	4638      	mov	r0, r7
 8002b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b24:	4632      	mov	r2, r6
 8002b26:	462b      	mov	r3, r5
 8002b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	f001 bc3c 	b.w	80043a8 <_write_r>

08002b30 <__sseek>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	460c      	mov	r4, r1
 8002b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b38:	f002 feb4 	bl	80058a4 <_lseek_r>
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	1c42      	adds	r2, r0, #1
 8002b40:	bf0e      	itee	eq
 8002b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b4a:	6520      	strne	r0, [r4, #80]	; 0x50
 8002b4c:	81a3      	strh	r3, [r4, #12]
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <__sclose>:
 8002b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b54:	f001 bc9e 	b.w	8004494 <_close_r>

08002b58 <strcmp>:
 8002b58:	ea40 0c01 	orr.w	ip, r0, r1
 8002b5c:	f01c 0f07 	tst.w	ip, #7
 8002b60:	d123      	bne.n	8002baa <strcmp+0x52>
 8002b62:	f1bd 0d10 	subs.w	sp, sp, #16
 8002b66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002b6a:	e9cd 6700 	strd	r6, r7, [sp]
 8002b6e:	f06f 0600 	mvn.w	r6, #0
 8002b72:	f04f 0700 	mov.w	r7, #0
 8002b76:	bf00      	nop
 8002b78:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002b7c:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002b80:	42a2      	cmp	r2, r4
 8002b82:	fa82 fc46 	uadd8	ip, r2, r6
 8002b86:	faa7 fc86 	sel	ip, r7, r6
 8002b8a:	bf08      	it	eq
 8002b8c:	f1bc 0f00 	cmpeq.w	ip, #0
 8002b90:	f040 80d7 	bne.w	8002d42 <strcmp+0x1ea>
 8002b94:	42ab      	cmp	r3, r5
 8002b96:	fa83 fc46 	uadd8	ip, r3, r6
 8002b9a:	faa7 fc86 	sel	ip, r7, r6
 8002b9e:	bf08      	it	eq
 8002ba0:	f1bc 0f00 	cmpeq.w	ip, #0
 8002ba4:	f040 80ca 	bne.w	8002d3c <strcmp+0x1e4>
 8002ba8:	e7e6      	b.n	8002b78 <strcmp+0x20>
 8002baa:	f010 0c03 	ands.w	ip, r0, #3
 8002bae:	d021      	beq.n	8002bf4 <strcmp+0x9c>
 8002bb0:	f020 0003 	bic.w	r0, r0, #3
 8002bb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8002bb8:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 8002bbc:	d008      	beq.n	8002bd0 <strcmp+0x78>
 8002bbe:	d20f      	bcs.n	8002be0 <strcmp+0x88>
 8002bc0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002bc4:	fa5f f392 	uxtb.w	r3, r2, ror #8
 8002bc8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bcc:	d110      	bne.n	8002bf0 <strcmp+0x98>
 8002bce:	b17b      	cbz	r3, 8002bf0 <strcmp+0x98>
 8002bd0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002bd4:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 8002bd8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bdc:	d108      	bne.n	8002bf0 <strcmp+0x98>
 8002bde:	b13b      	cbz	r3, 8002bf0 <strcmp+0x98>
 8002be0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002be4:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 8002be8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bec:	d100      	bne.n	8002bf0 <strcmp+0x98>
 8002bee:	b90b      	cbnz	r3, 8002bf4 <strcmp+0x9c>
 8002bf0:	4660      	mov	r0, ip
 8002bf2:	4770      	bx	lr
 8002bf4:	f1bd 0d10 	subs.w	sp, sp, #16
 8002bf8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bfc:	e9cd 6700 	strd	r6, r7, [sp]
 8002c00:	f06f 0600 	mvn.w	r6, #0
 8002c04:	f04f 0700 	mov.w	r7, #0
 8002c08:	f011 0c03 	ands.w	ip, r1, #3
 8002c0c:	d12d      	bne.n	8002c6a <strcmp+0x112>
 8002c0e:	f010 0f04 	tst.w	r0, #4
 8002c12:	d00d      	beq.n	8002c30 <strcmp+0xd8>
 8002c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8002c18:	f851 4b04 	ldr.w	r4, [r1], #4
 8002c1c:	42a2      	cmp	r2, r4
 8002c1e:	fa82 fc46 	uadd8	ip, r2, r6
 8002c22:	faa7 fc86 	sel	ip, r7, r6
 8002c26:	bf08      	it	eq
 8002c28:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c2c:	f040 8089 	bne.w	8002d42 <strcmp+0x1ea>
 8002c30:	f011 0f04 	tst.w	r1, #4
 8002c34:	d09f      	beq.n	8002b76 <strcmp+0x1e>
 8002c36:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c3a:	bf00      	nop
 8002c3c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002c40:	42aa      	cmp	r2, r5
 8002c42:	fa82 fc46 	uadd8	ip, r2, r6
 8002c46:	faa7 fc86 	sel	ip, r7, r6
 8002c4a:	bf08      	it	eq
 8002c4c:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c50:	d171      	bne.n	8002d36 <strcmp+0x1de>
 8002c52:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	fa83 fc46 	uadd8	ip, r3, r6
 8002c5c:	faa7 fc86 	sel	ip, r7, r6
 8002c60:	bf08      	it	eq
 8002c62:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c66:	d163      	bne.n	8002d30 <strcmp+0x1d8>
 8002c68:	e7e8      	b.n	8002c3c <strcmp+0xe4>
 8002c6a:	f021 0103 	bic.w	r1, r1, #3
 8002c6e:	f1bc 0f02 	cmp.w	ip, #2
 8002c72:	d01e      	beq.n	8002cb2 <strcmp+0x15a>
 8002c74:	da3b      	bge.n	8002cee <strcmp+0x196>
 8002c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c7a:	bf00      	nop
 8002c7c:	f850 3b04 	ldr.w	r3, [r0], #4
 8002c80:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8002c84:	fa83 fc46 	uadd8	ip, r3, r6
 8002c88:	faa7 fc86 	sel	ip, r7, r6
 8002c8c:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 8002c90:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 8002c94:	bf08      	it	eq
 8002c96:	42aa      	cmpeq	r2, r5
 8002c98:	d14d      	bne.n	8002d36 <strcmp+0x1de>
 8002c9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c9e:	f1bc 0f00 	cmp.w	ip, #0
 8002ca2:	ea82 0303 	eor.w	r3, r2, r3
 8002ca6:	ea4f 6205 	mov.w	r2, r5, lsl #24
 8002caa:	bf08      	it	eq
 8002cac:	4293      	cmpeq	r3, r2
 8002cae:	d13c      	bne.n	8002d2a <strcmp+0x1d2>
 8002cb0:	e7e4      	b.n	8002c7c <strcmp+0x124>
 8002cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cb6:	bf00      	nop
 8002cb8:	f850 3b04 	ldr.w	r3, [r0], #4
 8002cbc:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8002cc0:	fa83 fc46 	uadd8	ip, r3, r6
 8002cc4:	faa7 fc86 	sel	ip, r7, r6
 8002cc8:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 8002ccc:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 8002cd0:	bf08      	it	eq
 8002cd2:	42aa      	cmpeq	r2, r5
 8002cd4:	d12f      	bne.n	8002d36 <strcmp+0x1de>
 8002cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cda:	f1bc 0f00 	cmp.w	ip, #0
 8002cde:	ea82 0303 	eor.w	r3, r2, r3
 8002ce2:	ea4f 4205 	mov.w	r2, r5, lsl #16
 8002ce6:	bf08      	it	eq
 8002ce8:	4293      	cmpeq	r3, r2
 8002cea:	d11e      	bne.n	8002d2a <strcmp+0x1d2>
 8002cec:	e7e4      	b.n	8002cb8 <strcmp+0x160>
 8002cee:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cf2:	bf00      	nop
 8002cf4:	f850 3b04 	ldr.w	r3, [r0], #4
 8002cf8:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8002cfc:	fa83 fc46 	uadd8	ip, r3, r6
 8002d00:	faa7 fc86 	sel	ip, r7, r6
 8002d04:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 8002d08:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 8002d0c:	bf08      	it	eq
 8002d0e:	42aa      	cmpeq	r2, r5
 8002d10:	d111      	bne.n	8002d36 <strcmp+0x1de>
 8002d12:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d16:	f1bc 0f00 	cmp.w	ip, #0
 8002d1a:	ea82 0303 	eor.w	r3, r2, r3
 8002d1e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8002d22:	bf08      	it	eq
 8002d24:	4293      	cmpeq	r3, r2
 8002d26:	d100      	bne.n	8002d2a <strcmp+0x1d2>
 8002d28:	e7e4      	b.n	8002cf4 <strcmp+0x19c>
 8002d2a:	ba19      	rev	r1, r3
 8002d2c:	ba12      	rev	r2, r2
 8002d2e:	e00a      	b.n	8002d46 <strcmp+0x1ee>
 8002d30:	ba19      	rev	r1, r3
 8002d32:	ba22      	rev	r2, r4
 8002d34:	e007      	b.n	8002d46 <strcmp+0x1ee>
 8002d36:	ba11      	rev	r1, r2
 8002d38:	ba2a      	rev	r2, r5
 8002d3a:	e004      	b.n	8002d46 <strcmp+0x1ee>
 8002d3c:	ba19      	rev	r1, r3
 8002d3e:	ba2a      	rev	r2, r5
 8002d40:	e001      	b.n	8002d46 <strcmp+0x1ee>
 8002d42:	ba11      	rev	r1, r2
 8002d44:	ba22      	rev	r2, r4
 8002d46:	fa9c f08c 	rev.w	r0, ip
 8002d4a:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002d4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002d52:	f11d 0d10 	adds.w	sp, sp, #16
 8002d56:	b138      	cbz	r0, 8002d68 <strcmp+0x210>
 8002d58:	fab0 f080 	clz	r0, r0
 8002d5c:	f1c0 0018 	rsb	r0, r0, #24
 8002d60:	fa21 f100 	lsr.w	r1, r1, r0
 8002d64:	fa22 f200 	lsr.w	r2, r2, r0
 8002d68:	2001      	movs	r0, #1
 8002d6a:	4291      	cmp	r1, r2
 8002d6c:	bf98      	it	ls
 8002d6e:	4180      	sbcls	r0, r0
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <strlen>:
 8002d74:	f020 0103 	bic.w	r1, r0, #3
 8002d78:	f010 0003 	ands.w	r0, r0, #3
 8002d7c:	f1c0 0000 	rsb	r0, r0, #0
 8002d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8002d84:	f100 0c04 	add.w	ip, r0, #4
 8002d88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002d8c:	f06f 0200 	mvn.w	r2, #0
 8002d90:	bf1c      	itt	ne
 8002d92:	fa22 f20c 	lsrne.w	r2, r2, ip
 8002d96:	4313      	orrne	r3, r2
 8002d98:	f04f 0c01 	mov.w	ip, #1
 8002d9c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8002da0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8002da4:	eba3 020c 	sub.w	r2, r3, ip
 8002da8:	ea22 0203 	bic.w	r2, r2, r3
 8002dac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8002db0:	bf04      	itt	eq
 8002db2:	f851 3b04 	ldreq.w	r3, [r1], #4
 8002db6:	3004      	addeq	r0, #4
 8002db8:	d0f4      	beq.n	8002da4 <strlen+0x30>
 8002dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002dbe:	bf1f      	itttt	ne
 8002dc0:	3001      	addne	r0, #1
 8002dc2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8002dc6:	3001      	addne	r0, #1
 8002dc8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8002dcc:	bf18      	it	ne
 8002dce:	3001      	addne	r0, #1
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <write>:
 8002dd4:	b430      	push	{r4, r5}
 8002dd6:	4c04      	ldr	r4, [pc, #16]	; (8002de8 <write+0x14>)
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4613      	mov	r3, r2
 8002ddc:	4601      	mov	r1, r0
 8002dde:	462a      	mov	r2, r5
 8002de0:	6820      	ldr	r0, [r4, #0]
 8002de2:	bc30      	pop	{r4, r5}
 8002de4:	f001 bae0 	b.w	80043a8 <_write_r>
 8002de8:	20000450 	.word	0x20000450
 8002dec:	00000000 	.word	0x00000000

08002df0 <_vfprintf_r>:
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	b0c5      	sub	sp, #276	; 0x114
 8002df6:	461c      	mov	r4, r3
 8002df8:	4689      	mov	r9, r1
 8002dfa:	9206      	str	r2, [sp, #24]
 8002dfc:	9009      	str	r0, [sp, #36]	; 0x24
 8002dfe:	f002 fd4d 	bl	800589c <_localeconv_r>
 8002e02:	6800      	ldr	r0, [r0, #0]
 8002e04:	9011      	str	r0, [sp, #68]	; 0x44
 8002e06:	f7ff ffb5 	bl	8002d74 <strlen>
 8002e0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002e0c:	9014      	str	r0, [sp, #80]	; 0x50
 8002e0e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e10:	b11d      	cbz	r5, 8002e1a <_vfprintf_r+0x2a>
 8002e12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 810b 	beq.w	8003030 <_vfprintf_r+0x240>
 8002e1a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8002e1e:	b293      	uxth	r3, r2
 8002e20:	0499      	lsls	r1, r3, #18
 8002e22:	d40a      	bmi.n	8002e3a <_vfprintf_r+0x4a>
 8002e24:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8002e28:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8002e2c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002e30:	f8a9 300c 	strh.w	r3, [r9, #12]
 8002e34:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	071a      	lsls	r2, r3, #28
 8002e3c:	f140 80c2 	bpl.w	8002fc4 <_vfprintf_r+0x1d4>
 8002e40:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	f000 80bd 	beq.w	8002fc4 <_vfprintf_r+0x1d4>
 8002e4a:	f003 031a 	and.w	r3, r3, #26
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	f000 80c4 	beq.w	8002fdc <_vfprintf_r+0x1ec>
 8002e54:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 8003040 <_vfprintf_r+0x250>
 8002e58:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	ac34      	add	r4, sp, #208	; 0xd0
 8002e60:	930d      	str	r3, [sp, #52]	; 0x34
 8002e62:	9404      	str	r4, [sp, #16]
 8002e64:	9329      	str	r3, [sp, #164]	; 0xa4
 8002e66:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e68:	9316      	str	r3, [sp, #88]	; 0x58
 8002e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8002e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e6e:	9427      	str	r4, [sp, #156]	; 0x9c
 8002e70:	4626      	mov	r6, r4
 8002e72:	f8dd c018 	ldr.w	ip, [sp, #24]
 8002e76:	f89c 3000 	ldrb.w	r3, [ip]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80dc 	beq.w	8003038 <_vfprintf_r+0x248>
 8002e80:	2b25      	cmp	r3, #37	; 0x25
 8002e82:	f000 80d9 	beq.w	8003038 <_vfprintf_r+0x248>
 8002e86:	f10c 0201 	add.w	r2, ip, #1
 8002e8a:	e002      	b.n	8002e92 <_vfprintf_r+0xa2>
 8002e8c:	2b25      	cmp	r3, #37	; 0x25
 8002e8e:	f000 808b 	beq.w	8002fa8 <_vfprintf_r+0x1b8>
 8002e92:	4614      	mov	r4, r2
 8002e94:	3201      	adds	r2, #1
 8002e96:	7823      	ldrb	r3, [r4, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f7      	bne.n	8002e8c <_vfprintf_r+0x9c>
 8002e9c:	9806      	ldr	r0, [sp, #24]
 8002e9e:	1a25      	subs	r5, r4, r0
 8002ea0:	b17d      	cbz	r5, 8002ec2 <_vfprintf_r+0xd2>
 8002ea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ea4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002ea6:	9806      	ldr	r0, [sp, #24]
 8002ea8:	6030      	str	r0, [r6, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	442a      	add	r2, r5
 8002eae:	2b07      	cmp	r3, #7
 8002eb0:	6075      	str	r5, [r6, #4]
 8002eb2:	9229      	str	r2, [sp, #164]	; 0xa4
 8002eb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8002eb6:	f300 80a4 	bgt.w	8003002 <_vfprintf_r+0x212>
 8002eba:	3608      	adds	r6, #8
 8002ebc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ebe:	4429      	add	r1, r5
 8002ec0:	910c      	str	r1, [sp, #48]	; 0x30
 8002ec2:	7823      	ldrb	r3, [r4, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a4 	beq.w	8003012 <_vfprintf_r+0x222>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	1c65      	adds	r5, r4, #1
 8002ece:	f894 8001 	ldrb.w	r8, [r4, #1]
 8002ed2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002ed6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002eda:	461a      	mov	r2, r3
 8002edc:	930a      	str	r3, [sp, #40]	; 0x28
 8002ede:	9305      	str	r3, [sp, #20]
 8002ee0:	9506      	str	r5, [sp, #24]
 8002ee2:	9407      	str	r4, [sp, #28]
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f1a8 0120 	sub.w	r1, r8, #32
 8002eec:	2958      	cmp	r1, #88	; 0x58
 8002eee:	f200 83fe 	bhi.w	80036ee <_vfprintf_r+0x8fe>
 8002ef2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002ef6:	023d      	.short	0x023d
 8002ef8:	03fc03fc 	.word	0x03fc03fc
 8002efc:	03fc0309 	.word	0x03fc0309
 8002f00:	03fc03fc 	.word	0x03fc03fc
 8002f04:	03fc03fc 	.word	0x03fc03fc
 8002f08:	024403fc 	.word	0x024403fc
 8002f0c:	03fc0239 	.word	0x03fc0239
 8002f10:	033b0060 	.word	0x033b0060
 8002f14:	037b03fc 	.word	0x037b03fc
 8002f18:	03820382 	.word	0x03820382
 8002f1c:	03820382 	.word	0x03820382
 8002f20:	03820382 	.word	0x03820382
 8002f24:	03820382 	.word	0x03820382
 8002f28:	03fc0382 	.word	0x03fc0382
 8002f2c:	03fc03fc 	.word	0x03fc03fc
 8002f30:	03fc03fc 	.word	0x03fc03fc
 8002f34:	03fc03fc 	.word	0x03fc03fc
 8002f38:	03fc03fc 	.word	0x03fc03fc
 8002f3c:	035903fc 	.word	0x035903fc
 8002f40:	03fc03a3 	.word	0x03fc03a3
 8002f44:	03fc03a3 	.word	0x03fc03a3
 8002f48:	03fc03fc 	.word	0x03fc03fc
 8002f4c:	039303fc 	.word	0x039303fc
 8002f50:	03fc03fc 	.word	0x03fc03fc
 8002f54:	03fc03da 	.word	0x03fc03da
 8002f58:	03fc03fc 	.word	0x03fc03fc
 8002f5c:	03fc03fc 	.word	0x03fc03fc
 8002f60:	03fc02a9 	.word	0x03fc02a9
 8002f64:	02c903fc 	.word	0x02c903fc
 8002f68:	03fc03fc 	.word	0x03fc03fc
 8002f6c:	03fc03fc 	.word	0x03fc03fc
 8002f70:	03fc03fc 	.word	0x03fc03fc
 8002f74:	03fc03fc 	.word	0x03fc03fc
 8002f78:	03fc03fc 	.word	0x03fc03fc
 8002f7c:	03220310 	.word	0x03220310
 8002f80:	03a303a3 	.word	0x03a303a3
 8002f84:	02df03a3 	.word	0x02df03a3
 8002f88:	03fc0322 	.word	0x03fc0322
 8002f8c:	02e803fc 	.word	0x02e803fc
 8002f90:	02f403fc 	.word	0x02f403fc
 8002f94:	02220210 	.word	0x02220210
 8002f98:	03fc0251 	.word	0x03fc0251
 8002f9c:	03fc025a 	.word	0x03fc025a
 8002fa0:	03fc00a9 	.word	0x03fc00a9
 8002fa4:	028103fc 	.word	0x028103fc
 8002fa8:	9906      	ldr	r1, [sp, #24]
 8002faa:	1a65      	subs	r5, r4, r1
 8002fac:	e778      	b.n	8002ea0 <_vfprintf_r+0xb0>
 8002fae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002fb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8002fb2:	4264      	negs	r4, r4
 8002fb4:	940a      	str	r4, [sp, #40]	; 0x28
 8002fb6:	9d05      	ldr	r5, [sp, #20]
 8002fb8:	f045 0504 	orr.w	r5, r5, #4
 8002fbc:	9505      	str	r5, [sp, #20]
 8002fbe:	f893 8000 	ldrb.w	r8, [r3]
 8002fc2:	e790      	b.n	8002ee6 <_vfprintf_r+0xf6>
 8002fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	f001 fa02 	bl	80043d0 <__swsetup_r>
 8002fcc:	b9a0      	cbnz	r0, 8002ff8 <_vfprintf_r+0x208>
 8002fce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002fd2:	f003 031a 	and.w	r3, r3, #26
 8002fd6:	2b0a      	cmp	r3, #10
 8002fd8:	f47f af3c 	bne.w	8002e54 <_vfprintf_r+0x64>
 8002fdc:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f6ff af37 	blt.w	8002e54 <_vfprintf_r+0x64>
 8002fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fe8:	9a06      	ldr	r2, [sp, #24]
 8002fea:	4649      	mov	r1, r9
 8002fec:	4623      	mov	r3, r4
 8002fee:	f001 f99f 	bl	8004330 <__sbprintf>
 8002ff2:	b045      	add	sp, #276	; 0x114
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffc:	b045      	add	sp, #276	; 0x114
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003004:	4649      	mov	r1, r9
 8003006:	aa27      	add	r2, sp, #156	; 0x9c
 8003008:	f003 f898 	bl	800613c <__sprint_r>
 800300c:	b940      	cbnz	r0, 8003020 <_vfprintf_r+0x230>
 800300e:	ae34      	add	r6, sp, #208	; 0xd0
 8003010:	e754      	b.n	8002ebc <_vfprintf_r+0xcc>
 8003012:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003014:	b123      	cbz	r3, 8003020 <_vfprintf_r+0x230>
 8003016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003018:	4649      	mov	r1, r9
 800301a:	aa27      	add	r2, sp, #156	; 0x9c
 800301c:	f003 f88e 	bl	800613c <__sprint_r>
 8003020:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003024:	065b      	lsls	r3, r3, #25
 8003026:	d4e7      	bmi.n	8002ff8 <_vfprintf_r+0x208>
 8003028:	980c      	ldr	r0, [sp, #48]	; 0x30
 800302a:	b045      	add	sp, #276	; 0x114
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003030:	4628      	mov	r0, r5
 8003032:	f7ff f8af 	bl	8002194 <__sinit>
 8003036:	e6f0      	b.n	8002e1a <_vfprintf_r+0x2a>
 8003038:	9c06      	ldr	r4, [sp, #24]
 800303a:	e742      	b.n	8002ec2 <_vfprintf_r+0xd2>
 800303c:	f3af 8000 	nop.w
	...
 8003048:	9c05      	ldr	r4, [sp, #20]
 800304a:	9306      	str	r3, [sp, #24]
 800304c:	06a2      	lsls	r2, r4, #26
 800304e:	f140 8206 	bpl.w	800345e <_vfprintf_r+0x66e>
 8003052:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003054:	1deb      	adds	r3, r5, #7
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	f103 0c08 	add.w	ip, r3, #8
 800305e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003062:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003066:	2301      	movs	r3, #1
 8003068:	f04f 0a00 	mov.w	sl, #0
 800306c:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8003070:	9907      	ldr	r1, [sp, #28]
 8003072:	2900      	cmp	r1, #0
 8003074:	db05      	blt.n	8003082 <_vfprintf_r+0x292>
 8003076:	f8dd c014 	ldr.w	ip, [sp, #20]
 800307a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 800307e:	f8cd c014 	str.w	ip, [sp, #20]
 8003082:	ea54 0005 	orrs.w	r0, r4, r5
 8003086:	f040 834b 	bne.w	8003720 <_vfprintf_r+0x930>
 800308a:	9907      	ldr	r1, [sp, #28]
 800308c:	2900      	cmp	r1, #0
 800308e:	f040 8347 	bne.w	8003720 <_vfprintf_r+0x930>
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 84bd 	bne.w	8003a12 <_vfprintf_r+0xc22>
 8003098:	f8dd c014 	ldr.w	ip, [sp, #20]
 800309c:	f01c 0f01 	tst.w	ip, #1
 80030a0:	f000 84b7 	beq.w	8003a12 <_vfprintf_r+0xc22>
 80030a4:	af44      	add	r7, sp, #272	; 0x110
 80030a6:	2330      	movs	r3, #48	; 0x30
 80030a8:	f807 3d41 	strb.w	r3, [r7, #-65]!
 80030ac:	9d04      	ldr	r5, [sp, #16]
 80030ae:	1bec      	subs	r4, r5, r7
 80030b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80030b4:	2500      	movs	r5, #0
 80030b6:	4564      	cmp	r4, ip
 80030b8:	bfa8      	it	ge
 80030ba:	46a4      	movge	ip, r4
 80030bc:	f8cd c020 	str.w	ip, [sp, #32]
 80030c0:	9510      	str	r5, [sp, #64]	; 0x40
 80030c2:	f1ba 0f00 	cmp.w	sl, #0
 80030c6:	d002      	beq.n	80030ce <_vfprintf_r+0x2de>
 80030c8:	9d08      	ldr	r5, [sp, #32]
 80030ca:	3501      	adds	r5, #1
 80030cc:	9508      	str	r5, [sp, #32]
 80030ce:	9b05      	ldr	r3, [sp, #20]
 80030d0:	f013 0302 	ands.w	r3, r3, #2
 80030d4:	930e      	str	r3, [sp, #56]	; 0x38
 80030d6:	d002      	beq.n	80030de <_vfprintf_r+0x2ee>
 80030d8:	9d08      	ldr	r5, [sp, #32]
 80030da:	3502      	adds	r5, #2
 80030dc:	9508      	str	r5, [sp, #32]
 80030de:	f8dd c014 	ldr.w	ip, [sp, #20]
 80030e2:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 80030e6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80030ea:	f040 8316 	bne.w	800371a <_vfprintf_r+0x92a>
 80030ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80030f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80030f4:	ebcc 0b05 	rsb	fp, ip, r5
 80030f8:	f1bb 0f00 	cmp.w	fp, #0
 80030fc:	f340 830d 	ble.w	800371a <_vfprintf_r+0x92a>
 8003100:	f1bb 0f10 	cmp.w	fp, #16
 8003104:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8003106:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003108:	f8df a528 	ldr.w	sl, [pc, #1320]	; 8003634 <_vfprintf_r+0x844>
 800310c:	dd27      	ble.n	800315e <_vfprintf_r+0x36e>
 800310e:	9717      	str	r7, [sp, #92]	; 0x5c
 8003110:	2510      	movs	r5, #16
 8003112:	4657      	mov	r7, sl
 8003114:	46a2      	mov	sl, r4
 8003116:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003118:	e006      	b.n	8003128 <_vfprintf_r+0x338>
 800311a:	f1ab 0b10 	sub.w	fp, fp, #16
 800311e:	f1bb 0f10 	cmp.w	fp, #16
 8003122:	f106 0608 	add.w	r6, r6, #8
 8003126:	dd17      	ble.n	8003158 <_vfprintf_r+0x368>
 8003128:	3201      	adds	r2, #1
 800312a:	3110      	adds	r1, #16
 800312c:	2a07      	cmp	r2, #7
 800312e:	9129      	str	r1, [sp, #164]	; 0xa4
 8003130:	9228      	str	r2, [sp, #160]	; 0xa0
 8003132:	6037      	str	r7, [r6, #0]
 8003134:	6075      	str	r5, [r6, #4]
 8003136:	ddf0      	ble.n	800311a <_vfprintf_r+0x32a>
 8003138:	4620      	mov	r0, r4
 800313a:	4649      	mov	r1, r9
 800313c:	aa27      	add	r2, sp, #156	; 0x9c
 800313e:	f002 fffd 	bl	800613c <__sprint_r>
 8003142:	2800      	cmp	r0, #0
 8003144:	f47f af6c 	bne.w	8003020 <_vfprintf_r+0x230>
 8003148:	f1ab 0b10 	sub.w	fp, fp, #16
 800314c:	f1bb 0f10 	cmp.w	fp, #16
 8003150:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8003152:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003154:	ae34      	add	r6, sp, #208	; 0xd0
 8003156:	dce7      	bgt.n	8003128 <_vfprintf_r+0x338>
 8003158:	4654      	mov	r4, sl
 800315a:	46ba      	mov	sl, r7
 800315c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800315e:	3201      	adds	r2, #1
 8003160:	eb0b 0c01 	add.w	ip, fp, r1
 8003164:	2a07      	cmp	r2, #7
 8003166:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800316a:	9228      	str	r2, [sp, #160]	; 0xa0
 800316c:	e886 0c00 	stmia.w	r6, {sl, fp}
 8003170:	f300 849e 	bgt.w	8003ab0 <_vfprintf_r+0xcc0>
 8003174:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003178:	3608      	adds	r6, #8
 800317a:	f1ba 0f00 	cmp.w	sl, #0
 800317e:	d00f      	beq.n	80031a0 <_vfprintf_r+0x3b0>
 8003180:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003182:	3301      	adds	r3, #1
 8003184:	f10c 0c01 	add.w	ip, ip, #1
 8003188:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 800318c:	2201      	movs	r2, #1
 800318e:	2b07      	cmp	r3, #7
 8003190:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003194:	9328      	str	r3, [sp, #160]	; 0xa0
 8003196:	e886 0006 	stmia.w	r6, {r1, r2}
 800319a:	f300 8420 	bgt.w	80039de <_vfprintf_r+0xbee>
 800319e:	3608      	adds	r6, #8
 80031a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031a2:	b173      	cbz	r3, 80031c2 <_vfprintf_r+0x3d2>
 80031a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80031a6:	3301      	adds	r3, #1
 80031a8:	f10c 0c02 	add.w	ip, ip, #2
 80031ac:	a920      	add	r1, sp, #128	; 0x80
 80031ae:	2202      	movs	r2, #2
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80031b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80031b8:	e886 0006 	stmia.w	r6, {r1, r2}
 80031bc:	f300 841c 	bgt.w	80039f8 <_vfprintf_r+0xc08>
 80031c0:	3608      	adds	r6, #8
 80031c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80031c4:	2d80      	cmp	r5, #128	; 0x80
 80031c6:	f000 834c 	beq.w	8003862 <_vfprintf_r+0xa72>
 80031ca:	9a07      	ldr	r2, [sp, #28]
 80031cc:	1b15      	subs	r5, r2, r4
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	dd3d      	ble.n	800324e <_vfprintf_r+0x45e>
 80031d2:	2d10      	cmp	r5, #16
 80031d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80031d6:	f8df a460 	ldr.w	sl, [pc, #1120]	; 8003638 <_vfprintf_r+0x848>
 80031da:	dd2c      	ble.n	8003236 <_vfprintf_r+0x446>
 80031dc:	4651      	mov	r1, sl
 80031de:	9407      	str	r4, [sp, #28]
 80031e0:	46aa      	mov	sl, r5
 80031e2:	f04f 0b10 	mov.w	fp, #16
 80031e6:	4662      	mov	r2, ip
 80031e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80031ea:	460d      	mov	r5, r1
 80031ec:	e006      	b.n	80031fc <_vfprintf_r+0x40c>
 80031ee:	f1aa 0a10 	sub.w	sl, sl, #16
 80031f2:	f1ba 0f10 	cmp.w	sl, #16
 80031f6:	f106 0608 	add.w	r6, r6, #8
 80031fa:	dd17      	ble.n	800322c <_vfprintf_r+0x43c>
 80031fc:	3301      	adds	r3, #1
 80031fe:	3210      	adds	r2, #16
 8003200:	2b07      	cmp	r3, #7
 8003202:	9229      	str	r2, [sp, #164]	; 0xa4
 8003204:	9328      	str	r3, [sp, #160]	; 0xa0
 8003206:	e886 0820 	stmia.w	r6, {r5, fp}
 800320a:	ddf0      	ble.n	80031ee <_vfprintf_r+0x3fe>
 800320c:	4620      	mov	r0, r4
 800320e:	4649      	mov	r1, r9
 8003210:	aa27      	add	r2, sp, #156	; 0x9c
 8003212:	f002 ff93 	bl	800613c <__sprint_r>
 8003216:	2800      	cmp	r0, #0
 8003218:	f47f af02 	bne.w	8003020 <_vfprintf_r+0x230>
 800321c:	f1aa 0a10 	sub.w	sl, sl, #16
 8003220:	f1ba 0f10 	cmp.w	sl, #16
 8003224:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003226:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003228:	ae34      	add	r6, sp, #208	; 0xd0
 800322a:	dce7      	bgt.n	80031fc <_vfprintf_r+0x40c>
 800322c:	4694      	mov	ip, r2
 800322e:	9c07      	ldr	r4, [sp, #28]
 8003230:	462a      	mov	r2, r5
 8003232:	4655      	mov	r5, sl
 8003234:	4692      	mov	sl, r2
 8003236:	3301      	adds	r3, #1
 8003238:	44ac      	add	ip, r5
 800323a:	2b07      	cmp	r3, #7
 800323c:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003240:	9328      	str	r3, [sp, #160]	; 0xa0
 8003242:	f8c6 a000 	str.w	sl, [r6]
 8003246:	6075      	str	r5, [r6, #4]
 8003248:	f300 83bd 	bgt.w	80039c6 <_vfprintf_r+0xbd6>
 800324c:	3608      	adds	r6, #8
 800324e:	9d05      	ldr	r5, [sp, #20]
 8003250:	05eb      	lsls	r3, r5, #23
 8003252:	f100 82a6 	bmi.w	80037a2 <_vfprintf_r+0x9b2>
 8003256:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003258:	6037      	str	r7, [r6, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	44a4      	add	ip, r4
 800325e:	2b07      	cmp	r3, #7
 8003260:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003264:	6074      	str	r4, [r6, #4]
 8003266:	9328      	str	r3, [sp, #160]	; 0xa0
 8003268:	f300 8397 	bgt.w	800399a <_vfprintf_r+0xbaa>
 800326c:	3608      	adds	r6, #8
 800326e:	9c05      	ldr	r4, [sp, #20]
 8003270:	0762      	lsls	r2, r4, #29
 8003272:	d540      	bpl.n	80032f6 <_vfprintf_r+0x506>
 8003274:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003276:	9808      	ldr	r0, [sp, #32]
 8003278:	1a2c      	subs	r4, r5, r0
 800327a:	2c00      	cmp	r4, #0
 800327c:	dd3b      	ble.n	80032f6 <_vfprintf_r+0x506>
 800327e:	2c10      	cmp	r4, #16
 8003280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003282:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 8003634 <_vfprintf_r+0x844>
 8003286:	dd22      	ble.n	80032ce <_vfprintf_r+0x4de>
 8003288:	2510      	movs	r5, #16
 800328a:	4662      	mov	r2, ip
 800328c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003290:	4657      	mov	r7, sl
 8003292:	e004      	b.n	800329e <_vfprintf_r+0x4ae>
 8003294:	3c10      	subs	r4, #16
 8003296:	2c10      	cmp	r4, #16
 8003298:	f106 0608 	add.w	r6, r6, #8
 800329c:	dd15      	ble.n	80032ca <_vfprintf_r+0x4da>
 800329e:	3301      	adds	r3, #1
 80032a0:	3210      	adds	r2, #16
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	9229      	str	r2, [sp, #164]	; 0xa4
 80032a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80032a8:	6037      	str	r7, [r6, #0]
 80032aa:	6075      	str	r5, [r6, #4]
 80032ac:	ddf2      	ble.n	8003294 <_vfprintf_r+0x4a4>
 80032ae:	4640      	mov	r0, r8
 80032b0:	4649      	mov	r1, r9
 80032b2:	aa27      	add	r2, sp, #156	; 0x9c
 80032b4:	f002 ff42 	bl	800613c <__sprint_r>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	f47f aeb1 	bne.w	8003020 <_vfprintf_r+0x230>
 80032be:	3c10      	subs	r4, #16
 80032c0:	2c10      	cmp	r4, #16
 80032c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80032c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032c6:	ae34      	add	r6, sp, #208	; 0xd0
 80032c8:	dce9      	bgt.n	800329e <_vfprintf_r+0x4ae>
 80032ca:	4694      	mov	ip, r2
 80032cc:	46ba      	mov	sl, r7
 80032ce:	3301      	adds	r3, #1
 80032d0:	44a4      	add	ip, r4
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80032d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80032da:	f8c6 a000 	str.w	sl, [r6]
 80032de:	6074      	str	r4, [r6, #4]
 80032e0:	dd09      	ble.n	80032f6 <_vfprintf_r+0x506>
 80032e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032e4:	4649      	mov	r1, r9
 80032e6:	aa27      	add	r2, sp, #156	; 0x9c
 80032e8:	f002 ff28 	bl	800613c <__sprint_r>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f47f ae97 	bne.w	8003020 <_vfprintf_r+0x230>
 80032f2:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80032f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80032f8:	9808      	ldr	r0, [sp, #32]
 80032fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80032fc:	42a8      	cmp	r0, r5
 80032fe:	bfac      	ite	ge
 8003300:	1824      	addge	r4, r4, r0
 8003302:	1964      	addlt	r4, r4, r5
 8003304:	940c      	str	r4, [sp, #48]	; 0x30
 8003306:	f1bc 0f00 	cmp.w	ip, #0
 800330a:	f040 8352 	bne.w	80039b2 <_vfprintf_r+0xbc2>
 800330e:	2300      	movs	r3, #0
 8003310:	9328      	str	r3, [sp, #160]	; 0xa0
 8003312:	ae34      	add	r6, sp, #208	; 0xd0
 8003314:	e5ad      	b.n	8002e72 <_vfprintf_r+0x82>
 8003316:	f8dd c014 	ldr.w	ip, [sp, #20]
 800331a:	9306      	str	r3, [sp, #24]
 800331c:	f01c 0320 	ands.w	r3, ip, #32
 8003320:	f000 81ce 	beq.w	80036c0 <_vfprintf_r+0x8d0>
 8003324:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003326:	1de3      	adds	r3, r4, #7
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	f103 0508 	add.w	r5, r3, #8
 8003330:	950b      	str	r5, [sp, #44]	; 0x2c
 8003332:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003336:	2300      	movs	r3, #0
 8003338:	e696      	b.n	8003068 <_vfprintf_r+0x278>
 800333a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800333c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003340:	9306      	str	r3, [sp, #24]
 8003342:	1d15      	adds	r5, r2, #4
 8003344:	2330      	movs	r3, #48	; 0x30
 8003346:	f04f 0878 	mov.w	r8, #120	; 0x78
 800334a:	f04c 0c02 	orr.w	ip, ip, #2
 800334e:	48b7      	ldr	r0, [pc, #732]	; (800362c <_vfprintf_r+0x83c>)
 8003350:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8003354:	950b      	str	r5, [sp, #44]	; 0x2c
 8003356:	6814      	ldr	r4, [r2, #0]
 8003358:	f8cd c014 	str.w	ip, [sp, #20]
 800335c:	2500      	movs	r5, #0
 800335e:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 8003362:	9016      	str	r0, [sp, #88]	; 0x58
 8003364:	2302      	movs	r3, #2
 8003366:	e67f      	b.n	8003068 <_vfprintf_r+0x278>
 8003368:	f893 8000 	ldrb.w	r8, [r3]
 800336c:	222b      	movs	r2, #43	; 0x2b
 800336e:	e5ba      	b.n	8002ee6 <_vfprintf_r+0xf6>
 8003370:	f893 8000 	ldrb.w	r8, [r3]
 8003374:	2a00      	cmp	r2, #0
 8003376:	f47f adb6 	bne.w	8002ee6 <_vfprintf_r+0xf6>
 800337a:	2220      	movs	r2, #32
 800337c:	e5b3      	b.n	8002ee6 <_vfprintf_r+0xf6>
 800337e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003380:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003382:	6824      	ldr	r4, [r4, #0]
 8003384:	940a      	str	r4, [sp, #40]	; 0x28
 8003386:	2c00      	cmp	r4, #0
 8003388:	f105 0104 	add.w	r1, r5, #4
 800338c:	f6ff ae0f 	blt.w	8002fae <_vfprintf_r+0x1be>
 8003390:	910b      	str	r1, [sp, #44]	; 0x2c
 8003392:	f893 8000 	ldrb.w	r8, [r3]
 8003396:	e5a6      	b.n	8002ee6 <_vfprintf_r+0xf6>
 8003398:	f8dd c014 	ldr.w	ip, [sp, #20]
 800339c:	f04c 0c20 	orr.w	ip, ip, #32
 80033a0:	f8cd c014 	str.w	ip, [sp, #20]
 80033a4:	f893 8000 	ldrb.w	r8, [r3]
 80033a8:	e59d      	b.n	8002ee6 <_vfprintf_r+0xf6>
 80033aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80033ac:	9306      	str	r3, [sp, #24]
 80033ae:	6827      	ldr	r7, [r4, #0]
 80033b0:	f04f 0a00 	mov.w	sl, #0
 80033b4:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80033b8:	1d25      	adds	r5, r4, #4
 80033ba:	2f00      	cmp	r7, #0
 80033bc:	f000 8679 	beq.w	80040b2 <_vfprintf_r+0x12c2>
 80033c0:	9c07      	ldr	r4, [sp, #28]
 80033c2:	2c00      	cmp	r4, #0
 80033c4:	4638      	mov	r0, r7
 80033c6:	f2c0 862e 	blt.w	8004026 <_vfprintf_r+0x1236>
 80033ca:	4651      	mov	r1, sl
 80033cc:	4622      	mov	r2, r4
 80033ce:	f002 faed 	bl	80059ac <memchr>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	f000 86b2 	beq.w	800413c <_vfprintf_r+0x134c>
 80033d8:	9c07      	ldr	r4, [sp, #28]
 80033da:	950b      	str	r5, [sp, #44]	; 0x2c
 80033dc:	1bc0      	subs	r0, r0, r7
 80033de:	42a0      	cmp	r0, r4
 80033e0:	bfb8      	it	lt
 80033e2:	4604      	movlt	r4, r0
 80033e4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80033e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80033ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80033f0:	9508      	str	r5, [sp, #32]
 80033f2:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80033f6:	e664      	b.n	80030c2 <_vfprintf_r+0x2d2>
 80033f8:	9d05      	ldr	r5, [sp, #20]
 80033fa:	4c8c      	ldr	r4, [pc, #560]	; (800362c <_vfprintf_r+0x83c>)
 80033fc:	9306      	str	r3, [sp, #24]
 80033fe:	06af      	lsls	r7, r5, #26
 8003400:	9416      	str	r4, [sp, #88]	; 0x58
 8003402:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003406:	d547      	bpl.n	8003498 <_vfprintf_r+0x6a8>
 8003408:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800340c:	f10c 0307 	add.w	r3, ip, #7
 8003410:	f023 0307 	bic.w	r3, r3, #7
 8003414:	f103 0408 	add.w	r4, r3, #8
 8003418:	940b      	str	r4, [sp, #44]	; 0x2c
 800341a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800341e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003422:	f01c 0f01 	tst.w	ip, #1
 8003426:	f000 82f8 	beq.w	8003a1a <_vfprintf_r+0xc2a>
 800342a:	ea54 0005 	orrs.w	r0, r4, r5
 800342e:	f000 82f4 	beq.w	8003a1a <_vfprintf_r+0xc2a>
 8003432:	2330      	movs	r3, #48	; 0x30
 8003434:	f04c 0c02 	orr.w	ip, ip, #2
 8003438:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800343c:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 8003440:	f8cd c014 	str.w	ip, [sp, #20]
 8003444:	2302      	movs	r3, #2
 8003446:	e60f      	b.n	8003068 <_vfprintf_r+0x278>
 8003448:	f8dd c014 	ldr.w	ip, [sp, #20]
 800344c:	9306      	str	r3, [sp, #24]
 800344e:	f04c 0c10 	orr.w	ip, ip, #16
 8003452:	f8cd c014 	str.w	ip, [sp, #20]
 8003456:	9c05      	ldr	r4, [sp, #20]
 8003458:	06a2      	lsls	r2, r4, #26
 800345a:	f53f adfa 	bmi.w	8003052 <_vfprintf_r+0x262>
 800345e:	9c05      	ldr	r4, [sp, #20]
 8003460:	06e3      	lsls	r3, r4, #27
 8003462:	f100 8334 	bmi.w	8003ace <_vfprintf_r+0xcde>
 8003466:	f8dd c014 	ldr.w	ip, [sp, #20]
 800346a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800346e:	f000 832e 	beq.w	8003ace <_vfprintf_r+0xcde>
 8003472:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003476:	f8bc 4000 	ldrh.w	r4, [ip]
 800347a:	f10c 0c04 	add.w	ip, ip, #4
 800347e:	2500      	movs	r5, #0
 8003480:	2301      	movs	r3, #1
 8003482:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003486:	e5ef      	b.n	8003068 <_vfprintf_r+0x278>
 8003488:	9d05      	ldr	r5, [sp, #20]
 800348a:	4c69      	ldr	r4, [pc, #420]	; (8003630 <_vfprintf_r+0x840>)
 800348c:	9306      	str	r3, [sp, #24]
 800348e:	06af      	lsls	r7, r5, #26
 8003490:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003494:	9416      	str	r4, [sp, #88]	; 0x58
 8003496:	d4b7      	bmi.n	8003408 <_vfprintf_r+0x618>
 8003498:	9d05      	ldr	r5, [sp, #20]
 800349a:	06ed      	lsls	r5, r5, #27
 800349c:	f140 84ef 	bpl.w	8003e7e <_vfprintf_r+0x108e>
 80034a0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80034a4:	f8dc 4000 	ldr.w	r4, [ip]
 80034a8:	f10c 0c04 	add.w	ip, ip, #4
 80034ac:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80034b0:	2500      	movs	r5, #0
 80034b2:	e7b4      	b.n	800341e <_vfprintf_r+0x62e>
 80034b4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80034b8:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 80034bc:	f8cd c014 	str.w	ip, [sp, #20]
 80034c0:	f893 8000 	ldrb.w	r8, [r3]
 80034c4:	e50f      	b.n	8002ee6 <_vfprintf_r+0xf6>
 80034c6:	f893 8000 	ldrb.w	r8, [r3]
 80034ca:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80034ce:	4619      	mov	r1, r3
 80034d0:	f000 857b 	beq.w	8003fca <_vfprintf_r+0x11da>
 80034d4:	9d05      	ldr	r5, [sp, #20]
 80034d6:	f045 0510 	orr.w	r5, r5, #16
 80034da:	9505      	str	r5, [sp, #20]
 80034dc:	e503      	b.n	8002ee6 <_vfprintf_r+0xf6>
 80034de:	f8dd c014 	ldr.w	ip, [sp, #20]
 80034e2:	9306      	str	r3, [sp, #24]
 80034e4:	f01c 0f20 	tst.w	ip, #32
 80034e8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80034ec:	f000 84a7 	beq.w	8003e3e <_vfprintf_r+0x104e>
 80034f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80034f2:	6821      	ldr	r1, [r4, #0]
 80034f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80034f6:	17e5      	asrs	r5, r4, #31
 80034f8:	462b      	mov	r3, r5
 80034fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80034fc:	4622      	mov	r2, r4
 80034fe:	3504      	adds	r5, #4
 8003500:	950b      	str	r5, [sp, #44]	; 0x2c
 8003502:	e9c1 2300 	strd	r2, r3, [r1]
 8003506:	e4b4      	b.n	8002e72 <_vfprintf_r+0x82>
 8003508:	9d05      	ldr	r5, [sp, #20]
 800350a:	f045 0501 	orr.w	r5, r5, #1
 800350e:	9505      	str	r5, [sp, #20]
 8003510:	f893 8000 	ldrb.w	r8, [r3]
 8003514:	e4e7      	b.n	8002ee6 <_vfprintf_r+0xf6>
 8003516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003518:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800351a:	9306      	str	r3, [sp, #24]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8003522:	2300      	movs	r3, #0
 8003524:	2401      	movs	r4, #1
 8003526:	3504      	adds	r5, #4
 8003528:	469a      	mov	sl, r3
 800352a:	9408      	str	r4, [sp, #32]
 800352c:	950b      	str	r5, [sp, #44]	; 0x2c
 800352e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003532:	9307      	str	r3, [sp, #28]
 8003534:	9310      	str	r3, [sp, #64]	; 0x40
 8003536:	af2a      	add	r7, sp, #168	; 0xa8
 8003538:	e5c9      	b.n	80030ce <_vfprintf_r+0x2de>
 800353a:	9c05      	ldr	r4, [sp, #20]
 800353c:	9306      	str	r3, [sp, #24]
 800353e:	06a3      	lsls	r3, r4, #26
 8003540:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003544:	d53c      	bpl.n	80035c0 <_vfprintf_r+0x7d0>
 8003546:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003548:	1de9      	adds	r1, r5, #7
 800354a:	f021 0107 	bic.w	r1, r1, #7
 800354e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003552:	3108      	adds	r1, #8
 8003554:	910b      	str	r1, [sp, #44]	; 0x2c
 8003556:	4614      	mov	r4, r2
 8003558:	461d      	mov	r5, r3
 800355a:	2a00      	cmp	r2, #0
 800355c:	f173 0000 	sbcs.w	r0, r3, #0
 8003560:	f2c0 83d1 	blt.w	8003d06 <_vfprintf_r+0xf16>
 8003564:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003568:	2301      	movs	r3, #1
 800356a:	e581      	b.n	8003070 <_vfprintf_r+0x280>
 800356c:	f893 8000 	ldrb.w	r8, [r3]
 8003570:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8003574:	f103 0001 	add.w	r0, r3, #1
 8003578:	f000 86b8 	beq.w	80042ec <_vfprintf_r+0x14fc>
 800357c:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8003580:	2909      	cmp	r1, #9
 8003582:	bf98      	it	ls
 8003584:	2300      	movls	r3, #0
 8003586:	f200 8629 	bhi.w	80041dc <_vfprintf_r+0x13ec>
 800358a:	f810 8b01 	ldrb.w	r8, [r0], #1
 800358e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003592:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003596:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 800359a:	2909      	cmp	r1, #9
 800359c:	d9f5      	bls.n	800358a <_vfprintf_r+0x79a>
 800359e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035a2:	9307      	str	r3, [sp, #28]
 80035a4:	4603      	mov	r3, r0
 80035a6:	e49f      	b.n	8002ee8 <_vfprintf_r+0xf8>
 80035a8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80035ac:	9306      	str	r3, [sp, #24]
 80035ae:	f04c 0c10 	orr.w	ip, ip, #16
 80035b2:	f8cd c014 	str.w	ip, [sp, #20]
 80035b6:	9c05      	ldr	r4, [sp, #20]
 80035b8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80035bc:	06a3      	lsls	r3, r4, #26
 80035be:	d4c2      	bmi.n	8003546 <_vfprintf_r+0x756>
 80035c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80035c4:	f01c 0f10 	tst.w	ip, #16
 80035c8:	f040 82b3 	bne.w	8003b32 <_vfprintf_r+0xd42>
 80035cc:	9c05      	ldr	r4, [sp, #20]
 80035ce:	0667      	lsls	r7, r4, #25
 80035d0:	f140 82af 	bpl.w	8003b32 <_vfprintf_r+0xd42>
 80035d4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80035d8:	f9bc 4000 	ldrsh.w	r4, [ip]
 80035dc:	f10c 0c04 	add.w	ip, ip, #4
 80035e0:	17e5      	asrs	r5, r4, #31
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80035ea:	e7b6      	b.n	800355a <_vfprintf_r+0x76a>
 80035ec:	9d05      	ldr	r5, [sp, #20]
 80035ee:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80035f2:	9505      	str	r5, [sp, #20]
 80035f4:	f893 8000 	ldrb.w	r8, [r3]
 80035f8:	e475      	b.n	8002ee6 <_vfprintf_r+0xf6>
 80035fa:	2400      	movs	r4, #0
 80035fc:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8003600:	940a      	str	r4, [sp, #40]	; 0x28
 8003602:	4620      	mov	r0, r4
 8003604:	f813 8b01 	ldrb.w	r8, [r3], #1
 8003608:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800360c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003610:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8003614:	2909      	cmp	r1, #9
 8003616:	d9f5      	bls.n	8003604 <_vfprintf_r+0x814>
 8003618:	900a      	str	r0, [sp, #40]	; 0x28
 800361a:	e465      	b.n	8002ee8 <_vfprintf_r+0xf8>
 800361c:	9d05      	ldr	r5, [sp, #20]
 800361e:	f045 0508 	orr.w	r5, r5, #8
 8003622:	9505      	str	r5, [sp, #20]
 8003624:	f893 8000 	ldrb.w	r8, [r3]
 8003628:	e45d      	b.n	8002ee6 <_vfprintf_r+0xf6>
 800362a:	bf00      	nop
 800362c:	08007c50 	.word	0x08007c50
 8003630:	08007c3c 	.word	0x08007c3c
 8003634:	08007c1c 	.word	0x08007c1c
 8003638:	08007c70 	.word	0x08007c70
 800363c:	9c05      	ldr	r4, [sp, #20]
 800363e:	9306      	str	r3, [sp, #24]
 8003640:	0725      	lsls	r5, r4, #28
 8003642:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003646:	f140 840e 	bpl.w	8003e66 <_vfprintf_r+0x1076>
 800364a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800364c:	1deb      	adds	r3, r5, #7
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	ed93 7b00 	vldr	d7, [r3]
 8003656:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800365a:	f103 0c08 	add.w	ip, r3, #8
 800365e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003662:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8003666:	f002 fd03 	bl	8006070 <__fpclassifyd>
 800366a:	2801      	cmp	r0, #1
 800366c:	f040 8355 	bne.w	8003d1a <_vfprintf_r+0xf2a>
 8003670:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003674:	2200      	movs	r2, #0
 8003676:	2300      	movs	r3, #0
 8003678:	f003 fec0 	bl	80073fc <__aeabi_dcmplt>
 800367c:	2800      	cmp	r0, #0
 800367e:	f040 8533 	bne.w	80040e8 <_vfprintf_r+0x12f8>
 8003682:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003686:	f8dd c014 	ldr.w	ip, [sp, #20]
 800368a:	4f9f      	ldr	r7, [pc, #636]	; (8003908 <_vfprintf_r+0xb18>)
 800368c:	4b9f      	ldr	r3, [pc, #636]	; (800390c <_vfprintf_r+0xb1c>)
 800368e:	2500      	movs	r5, #0
 8003690:	2403      	movs	r4, #3
 8003692:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 8003696:	9408      	str	r4, [sp, #32]
 8003698:	9507      	str	r5, [sp, #28]
 800369a:	f8cd c014 	str.w	ip, [sp, #20]
 800369e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036a2:	bfd8      	it	le
 80036a4:	461f      	movle	r7, r3
 80036a6:	9510      	str	r5, [sp, #64]	; 0x40
 80036a8:	e50b      	b.n	80030c2 <_vfprintf_r+0x2d2>
 80036aa:	9d05      	ldr	r5, [sp, #20]
 80036ac:	9306      	str	r3, [sp, #24]
 80036ae:	f045 0510 	orr.w	r5, r5, #16
 80036b2:	9505      	str	r5, [sp, #20]
 80036b4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80036b8:	f01c 0320 	ands.w	r3, ip, #32
 80036bc:	f47f ae32 	bne.w	8003324 <_vfprintf_r+0x534>
 80036c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80036c4:	f01c 0210 	ands.w	r2, ip, #16
 80036c8:	f040 823f 	bne.w	8003b4a <_vfprintf_r+0xd5a>
 80036cc:	f8dd c014 	ldr.w	ip, [sp, #20]
 80036d0:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 80036d4:	f000 8239 	beq.w	8003b4a <_vfprintf_r+0xd5a>
 80036d8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80036dc:	f8bc 4000 	ldrh.w	r4, [ip]
 80036e0:	f10c 0c04 	add.w	ip, ip, #4
 80036e4:	4613      	mov	r3, r2
 80036e6:	2500      	movs	r5, #0
 80036e8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80036ec:	e4bc      	b.n	8003068 <_vfprintf_r+0x278>
 80036ee:	9306      	str	r3, [sp, #24]
 80036f0:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80036f4:	f1b8 0f00 	cmp.w	r8, #0
 80036f8:	f43f ac8b 	beq.w	8003012 <_vfprintf_r+0x222>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f04f 0c01 	mov.w	ip, #1
 8003702:	469a      	mov	sl, r3
 8003704:	f8cd c020 	str.w	ip, [sp, #32]
 8003708:	f88d 80a8 	strb.w	r8, [sp, #168]	; 0xa8
 800370c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003710:	9307      	str	r3, [sp, #28]
 8003712:	9310      	str	r3, [sp, #64]	; 0x40
 8003714:	4664      	mov	r4, ip
 8003716:	af2a      	add	r7, sp, #168	; 0xa8
 8003718:	e4d9      	b.n	80030ce <_vfprintf_r+0x2de>
 800371a:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800371e:	e52c      	b.n	800317a <_vfprintf_r+0x38a>
 8003720:	2b01      	cmp	r3, #1
 8003722:	f000 80e3 	beq.w	80038ec <_vfprintf_r+0xafc>
 8003726:	2b02      	cmp	r3, #2
 8003728:	f10d 03cf 	add.w	r3, sp, #207	; 0xcf
 800372c:	d118      	bne.n	8003760 <_vfprintf_r+0x970>
 800372e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8003732:	4619      	mov	r1, r3
 8003734:	f004 000f 	and.w	r0, r4, #15
 8003738:	0922      	lsrs	r2, r4, #4
 800373a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 800373e:	460f      	mov	r7, r1
 8003740:	092b      	lsrs	r3, r5, #4
 8003742:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8003746:	7039      	strb	r1, [r7, #0]
 8003748:	ea52 0003 	orrs.w	r0, r2, r3
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8003754:	d1ee      	bne.n	8003734 <_vfprintf_r+0x944>
 8003756:	9d04      	ldr	r5, [sp, #16]
 8003758:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800375c:	1bec      	subs	r4, r5, r7
 800375e:	e4a7      	b.n	80030b0 <_vfprintf_r+0x2c0>
 8003760:	08e0      	lsrs	r0, r4, #3
 8003762:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 8003766:	f004 0207 	and.w	r2, r4, #7
 800376a:	08e9      	lsrs	r1, r5, #3
 800376c:	3230      	adds	r2, #48	; 0x30
 800376e:	ea50 0c01 	orrs.w	ip, r0, r1
 8003772:	461f      	mov	r7, r3
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	4604      	mov	r4, r0
 8003778:	460d      	mov	r5, r1
 800377a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800377e:	d1ef      	bne.n	8003760 <_vfprintf_r+0x970>
 8003780:	9c05      	ldr	r4, [sp, #20]
 8003782:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003786:	07e0      	lsls	r0, r4, #31
 8003788:	4639      	mov	r1, r7
 800378a:	f140 80b8 	bpl.w	80038fe <_vfprintf_r+0xb0e>
 800378e:	2a30      	cmp	r2, #48	; 0x30
 8003790:	f000 80b5 	beq.w	80038fe <_vfprintf_r+0xb0e>
 8003794:	9d04      	ldr	r5, [sp, #16]
 8003796:	461f      	mov	r7, r3
 8003798:	2330      	movs	r3, #48	; 0x30
 800379a:	1bec      	subs	r4, r5, r7
 800379c:	f801 3c01 	strb.w	r3, [r1, #-1]
 80037a0:	e486      	b.n	80030b0 <_vfprintf_r+0x2c0>
 80037a2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80037a6:	f340 80b7 	ble.w	8003918 <_vfprintf_r+0xb28>
 80037aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80037ae:	2200      	movs	r2, #0
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8cd c00c 	str.w	ip, [sp, #12]
 80037b6:	f003 fe17 	bl	80073e8 <__aeabi_dcmpeq>
 80037ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80037be:	2800      	cmp	r0, #0
 80037c0:	f000 812e 	beq.w	8003a20 <_vfprintf_r+0xc30>
 80037c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80037c6:	4a52      	ldr	r2, [pc, #328]	; (8003910 <_vfprintf_r+0xb20>)
 80037c8:	6032      	str	r2, [r6, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	f10c 0c01 	add.w	ip, ip, #1
 80037d0:	2201      	movs	r2, #1
 80037d2:	2b07      	cmp	r3, #7
 80037d4:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80037d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80037da:	6072      	str	r2, [r6, #4]
 80037dc:	f300 836f 	bgt.w	8003ebe <_vfprintf_r+0x10ce>
 80037e0:	3608      	adds	r6, #8
 80037e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	db03      	blt.n	80037f2 <_vfprintf_r+0xa02>
 80037ea:	9d05      	ldr	r5, [sp, #20]
 80037ec:	07ef      	lsls	r7, r5, #31
 80037ee:	f57f ad3e 	bpl.w	800326e <_vfprintf_r+0x47e>
 80037f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80037f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80037f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80037f8:	6034      	str	r4, [r6, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	44ac      	add	ip, r5
 80037fe:	2b07      	cmp	r3, #7
 8003800:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003804:	6075      	str	r5, [r6, #4]
 8003806:	9328      	str	r3, [sp, #160]	; 0xa0
 8003808:	f300 83e8 	bgt.w	8003fdc <_vfprintf_r+0x11ec>
 800380c:	3608      	adds	r6, #8
 800380e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003810:	1e6c      	subs	r4, r5, #1
 8003812:	2c00      	cmp	r4, #0
 8003814:	f77f ad2b 	ble.w	800326e <_vfprintf_r+0x47e>
 8003818:	2c10      	cmp	r4, #16
 800381a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800381c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8003914 <_vfprintf_r+0xb24>
 8003820:	f340 819c 	ble.w	8003b5c <_vfprintf_r+0xd6c>
 8003824:	2510      	movs	r5, #16
 8003826:	4662      	mov	r2, ip
 8003828:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800382c:	4657      	mov	r7, sl
 800382e:	e004      	b.n	800383a <_vfprintf_r+0xa4a>
 8003830:	3608      	adds	r6, #8
 8003832:	3c10      	subs	r4, #16
 8003834:	2c10      	cmp	r4, #16
 8003836:	f340 818f 	ble.w	8003b58 <_vfprintf_r+0xd68>
 800383a:	3301      	adds	r3, #1
 800383c:	3210      	adds	r2, #16
 800383e:	2b07      	cmp	r3, #7
 8003840:	9229      	str	r2, [sp, #164]	; 0xa4
 8003842:	9328      	str	r3, [sp, #160]	; 0xa0
 8003844:	6037      	str	r7, [r6, #0]
 8003846:	6075      	str	r5, [r6, #4]
 8003848:	ddf2      	ble.n	8003830 <_vfprintf_r+0xa40>
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	aa27      	add	r2, sp, #156	; 0x9c
 8003850:	f002 fc74 	bl	800613c <__sprint_r>
 8003854:	2800      	cmp	r0, #0
 8003856:	f47f abe3 	bne.w	8003020 <_vfprintf_r+0x230>
 800385a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800385c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800385e:	ae34      	add	r6, sp, #208	; 0xd0
 8003860:	e7e7      	b.n	8003832 <_vfprintf_r+0xa42>
 8003862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003864:	9908      	ldr	r1, [sp, #32]
 8003866:	1a45      	subs	r5, r0, r1
 8003868:	2d00      	cmp	r5, #0
 800386a:	f77f acae 	ble.w	80031ca <_vfprintf_r+0x3da>
 800386e:	2d10      	cmp	r5, #16
 8003870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003872:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8003914 <_vfprintf_r+0xb24>
 8003876:	dd2c      	ble.n	80038d2 <_vfprintf_r+0xae2>
 8003878:	4651      	mov	r1, sl
 800387a:	940e      	str	r4, [sp, #56]	; 0x38
 800387c:	46aa      	mov	sl, r5
 800387e:	f04f 0b10 	mov.w	fp, #16
 8003882:	4662      	mov	r2, ip
 8003884:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003886:	460d      	mov	r5, r1
 8003888:	e006      	b.n	8003898 <_vfprintf_r+0xaa8>
 800388a:	f1aa 0a10 	sub.w	sl, sl, #16
 800388e:	f1ba 0f10 	cmp.w	sl, #16
 8003892:	f106 0608 	add.w	r6, r6, #8
 8003896:	dd17      	ble.n	80038c8 <_vfprintf_r+0xad8>
 8003898:	3301      	adds	r3, #1
 800389a:	3210      	adds	r2, #16
 800389c:	2b07      	cmp	r3, #7
 800389e:	9229      	str	r2, [sp, #164]	; 0xa4
 80038a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80038a2:	e886 0820 	stmia.w	r6, {r5, fp}
 80038a6:	ddf0      	ble.n	800388a <_vfprintf_r+0xa9a>
 80038a8:	4620      	mov	r0, r4
 80038aa:	4649      	mov	r1, r9
 80038ac:	aa27      	add	r2, sp, #156	; 0x9c
 80038ae:	f002 fc45 	bl	800613c <__sprint_r>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	f47f abb4 	bne.w	8003020 <_vfprintf_r+0x230>
 80038b8:	f1aa 0a10 	sub.w	sl, sl, #16
 80038bc:	f1ba 0f10 	cmp.w	sl, #16
 80038c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80038c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80038c4:	ae34      	add	r6, sp, #208	; 0xd0
 80038c6:	dce7      	bgt.n	8003898 <_vfprintf_r+0xaa8>
 80038c8:	4694      	mov	ip, r2
 80038ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80038cc:	462a      	mov	r2, r5
 80038ce:	4655      	mov	r5, sl
 80038d0:	4692      	mov	sl, r2
 80038d2:	3301      	adds	r3, #1
 80038d4:	44ac      	add	ip, r5
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80038dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80038de:	f8c6 a000 	str.w	sl, [r6]
 80038e2:	6075      	str	r5, [r6, #4]
 80038e4:	f300 8202 	bgt.w	8003cec <_vfprintf_r+0xefc>
 80038e8:	3608      	adds	r6, #8
 80038ea:	e46e      	b.n	80031ca <_vfprintf_r+0x3da>
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	bf08      	it	eq
 80038f0:	2c0a      	cmpeq	r4, #10
 80038f2:	f080 813f 	bcs.w	8003b74 <_vfprintf_r+0xd84>
 80038f6:	af44      	add	r7, sp, #272	; 0x110
 80038f8:	3430      	adds	r4, #48	; 0x30
 80038fa:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80038fe:	9d04      	ldr	r5, [sp, #16]
 8003900:	1bec      	subs	r4, r5, r7
 8003902:	f7ff bbd5 	b.w	80030b0 <_vfprintf_r+0x2c0>
 8003906:	bf00      	nop
 8003908:	08007c30 	.word	0x08007c30
 800390c:	08007c2c 	.word	0x08007c2c
 8003910:	08007c6c 	.word	0x08007c6c
 8003914:	08007c70 	.word	0x08007c70
 8003918:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800391a:	2c01      	cmp	r4, #1
 800391c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800391e:	f340 81a7 	ble.w	8003c70 <_vfprintf_r+0xe80>
 8003922:	3401      	adds	r4, #1
 8003924:	f10c 0501 	add.w	r5, ip, #1
 8003928:	2301      	movs	r3, #1
 800392a:	2c07      	cmp	r4, #7
 800392c:	9529      	str	r5, [sp, #164]	; 0xa4
 800392e:	9428      	str	r4, [sp, #160]	; 0xa0
 8003930:	6037      	str	r7, [r6, #0]
 8003932:	6073      	str	r3, [r6, #4]
 8003934:	f300 81b7 	bgt.w	8003ca6 <_vfprintf_r+0xeb6>
 8003938:	3608      	adds	r6, #8
 800393a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800393c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800393e:	6031      	str	r1, [r6, #0]
 8003940:	3401      	adds	r4, #1
 8003942:	4405      	add	r5, r0
 8003944:	2c07      	cmp	r4, #7
 8003946:	9529      	str	r5, [sp, #164]	; 0xa4
 8003948:	9428      	str	r4, [sp, #160]	; 0xa0
 800394a:	6070      	str	r0, [r6, #4]
 800394c:	f300 81c2 	bgt.w	8003cd4 <_vfprintf_r+0xee4>
 8003950:	3608      	adds	r6, #8
 8003952:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003956:	2200      	movs	r2, #0
 8003958:	2300      	movs	r3, #0
 800395a:	f003 fd45 	bl	80073e8 <__aeabi_dcmpeq>
 800395e:	2800      	cmp	r0, #0
 8003960:	f040 80bd 	bne.w	8003ade <_vfprintf_r+0xcee>
 8003964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003966:	3401      	adds	r4, #1
 8003968:	1e53      	subs	r3, r2, #1
 800396a:	3701      	adds	r7, #1
 800396c:	441d      	add	r5, r3
 800396e:	2c07      	cmp	r4, #7
 8003970:	9428      	str	r4, [sp, #160]	; 0xa0
 8003972:	9529      	str	r5, [sp, #164]	; 0xa4
 8003974:	6037      	str	r7, [r6, #0]
 8003976:	6073      	str	r3, [r6, #4]
 8003978:	f300 8189 	bgt.w	8003c8e <_vfprintf_r+0xe9e>
 800397c:	3608      	adds	r6, #8
 800397e:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8003982:	3401      	adds	r4, #1
 8003984:	44ac      	add	ip, r5
 8003986:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003988:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800398c:	ab23      	add	r3, sp, #140	; 0x8c
 800398e:	2c07      	cmp	r4, #7
 8003990:	9428      	str	r4, [sp, #160]	; 0xa0
 8003992:	e886 0028 	stmia.w	r6, {r3, r5}
 8003996:	f77f ac69 	ble.w	800326c <_vfprintf_r+0x47c>
 800399a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800399c:	4649      	mov	r1, r9
 800399e:	aa27      	add	r2, sp, #156	; 0x9c
 80039a0:	f002 fbcc 	bl	800613c <__sprint_r>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f47f ab3b 	bne.w	8003020 <_vfprintf_r+0x230>
 80039aa:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80039ae:	ae34      	add	r6, sp, #208	; 0xd0
 80039b0:	e45d      	b.n	800326e <_vfprintf_r+0x47e>
 80039b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039b4:	4649      	mov	r1, r9
 80039b6:	aa27      	add	r2, sp, #156	; 0x9c
 80039b8:	f002 fbc0 	bl	800613c <__sprint_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	f43f aca6 	beq.w	800330e <_vfprintf_r+0x51e>
 80039c2:	f7ff bb2d 	b.w	8003020 <_vfprintf_r+0x230>
 80039c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c8:	4649      	mov	r1, r9
 80039ca:	aa27      	add	r2, sp, #156	; 0x9c
 80039cc:	f002 fbb6 	bl	800613c <__sprint_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f47f ab25 	bne.w	8003020 <_vfprintf_r+0x230>
 80039d6:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80039da:	ae34      	add	r6, sp, #208	; 0xd0
 80039dc:	e437      	b.n	800324e <_vfprintf_r+0x45e>
 80039de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039e0:	4649      	mov	r1, r9
 80039e2:	aa27      	add	r2, sp, #156	; 0x9c
 80039e4:	f002 fbaa 	bl	800613c <__sprint_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	f47f ab19 	bne.w	8003020 <_vfprintf_r+0x230>
 80039ee:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80039f2:	ae34      	add	r6, sp, #208	; 0xd0
 80039f4:	f7ff bbd4 	b.w	80031a0 <_vfprintf_r+0x3b0>
 80039f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039fa:	4649      	mov	r1, r9
 80039fc:	aa27      	add	r2, sp, #156	; 0x9c
 80039fe:	f002 fb9d 	bl	800613c <__sprint_r>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	f47f ab0c 	bne.w	8003020 <_vfprintf_r+0x230>
 8003a08:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003a0c:	ae34      	add	r6, sp, #208	; 0xd0
 8003a0e:	f7ff bbd8 	b.w	80031c2 <_vfprintf_r+0x3d2>
 8003a12:	9c07      	ldr	r4, [sp, #28]
 8003a14:	af34      	add	r7, sp, #208	; 0xd0
 8003a16:	f7ff bb4b 	b.w	80030b0 <_vfprintf_r+0x2c0>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f7ff bb24 	b.w	8003068 <_vfprintf_r+0x278>
 8003a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f340 8257 	ble.w	8003ed6 <_vfprintf_r+0x10e6>
 8003a28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003a2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a2c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	bfa8      	it	ge
 8003a34:	462c      	movge	r4, r5
 8003a36:	2c00      	cmp	r4, #0
 8003a38:	44b8      	add	r8, r7
 8003a3a:	dd0b      	ble.n	8003a54 <_vfprintf_r+0xc64>
 8003a3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a3e:	6037      	str	r7, [r6, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	44a4      	add	ip, r4
 8003a44:	2b07      	cmp	r3, #7
 8003a46:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003a4a:	6074      	str	r4, [r6, #4]
 8003a4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a4e:	f300 82fa 	bgt.w	8004046 <_vfprintf_r+0x1256>
 8003a52:	3608      	adds	r6, #8
 8003a54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003a5a:	1b2c      	subs	r4, r5, r4
 8003a5c:	2c00      	cmp	r4, #0
 8003a5e:	f340 80b1 	ble.w	8003bc4 <_vfprintf_r+0xdd4>
 8003a62:	2c10      	cmp	r4, #16
 8003a64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a66:	f8df a70c 	ldr.w	sl, [pc, #1804]	; 8004174 <_vfprintf_r+0x1384>
 8003a6a:	f340 821b 	ble.w	8003ea4 <_vfprintf_r+0x10b4>
 8003a6e:	4651      	mov	r1, sl
 8003a70:	2510      	movs	r5, #16
 8003a72:	46ba      	mov	sl, r7
 8003a74:	4662      	mov	r2, ip
 8003a76:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003a7a:	460f      	mov	r7, r1
 8003a7c:	e004      	b.n	8003a88 <_vfprintf_r+0xc98>
 8003a7e:	3608      	adds	r6, #8
 8003a80:	3c10      	subs	r4, #16
 8003a82:	2c10      	cmp	r4, #16
 8003a84:	f340 820a 	ble.w	8003e9c <_vfprintf_r+0x10ac>
 8003a88:	3301      	adds	r3, #1
 8003a8a:	3210      	adds	r2, #16
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	9229      	str	r2, [sp, #164]	; 0xa4
 8003a90:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a92:	6037      	str	r7, [r6, #0]
 8003a94:	6075      	str	r5, [r6, #4]
 8003a96:	ddf2      	ble.n	8003a7e <_vfprintf_r+0xc8e>
 8003a98:	4658      	mov	r0, fp
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	aa27      	add	r2, sp, #156	; 0x9c
 8003a9e:	f002 fb4d 	bl	800613c <__sprint_r>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	f47f aabc 	bne.w	8003020 <_vfprintf_r+0x230>
 8003aa8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003aaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003aac:	ae34      	add	r6, sp, #208	; 0xd0
 8003aae:	e7e7      	b.n	8003a80 <_vfprintf_r+0xc90>
 8003ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	aa27      	add	r2, sp, #156	; 0x9c
 8003ab6:	f002 fb41 	bl	800613c <__sprint_r>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f47f aab0 	bne.w	8003020 <_vfprintf_r+0x230>
 8003ac0:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003ac4:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003ac8:	ae34      	add	r6, sp, #208	; 0xd0
 8003aca:	f7ff bb56 	b.w	800317a <_vfprintf_r+0x38a>
 8003ace:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003ad0:	682c      	ldr	r4, [r5, #0]
 8003ad2:	3504      	adds	r5, #4
 8003ad4:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	2500      	movs	r5, #0
 8003ada:	f7ff bac5 	b.w	8003068 <_vfprintf_r+0x278>
 8003ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae0:	1e5f      	subs	r7, r3, #1
 8003ae2:	2f00      	cmp	r7, #0
 8003ae4:	f77f af4b 	ble.w	800397e <_vfprintf_r+0xb8e>
 8003ae8:	2f10      	cmp	r7, #16
 8003aea:	f8df a688 	ldr.w	sl, [pc, #1672]	; 8004174 <_vfprintf_r+0x1384>
 8003aee:	f340 80e6 	ble.w	8003cbe <_vfprintf_r+0xece>
 8003af2:	f04f 0810 	mov.w	r8, #16
 8003af6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003afa:	e004      	b.n	8003b06 <_vfprintf_r+0xd16>
 8003afc:	3608      	adds	r6, #8
 8003afe:	3f10      	subs	r7, #16
 8003b00:	2f10      	cmp	r7, #16
 8003b02:	f340 80dc 	ble.w	8003cbe <_vfprintf_r+0xece>
 8003b06:	3401      	adds	r4, #1
 8003b08:	3510      	adds	r5, #16
 8003b0a:	2c07      	cmp	r4, #7
 8003b0c:	9529      	str	r5, [sp, #164]	; 0xa4
 8003b0e:	9428      	str	r4, [sp, #160]	; 0xa0
 8003b10:	f8c6 a000 	str.w	sl, [r6]
 8003b14:	f8c6 8004 	str.w	r8, [r6, #4]
 8003b18:	ddf0      	ble.n	8003afc <_vfprintf_r+0xd0c>
 8003b1a:	4658      	mov	r0, fp
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	aa27      	add	r2, sp, #156	; 0x9c
 8003b20:	f002 fb0c 	bl	800613c <__sprint_r>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	f47f aa7b 	bne.w	8003020 <_vfprintf_r+0x230>
 8003b2a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003b2c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003b2e:	ae34      	add	r6, sp, #208	; 0xd0
 8003b30:	e7e5      	b.n	8003afe <_vfprintf_r+0xd0e>
 8003b32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b34:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003b38:	682c      	ldr	r4, [r5, #0]
 8003b3a:	f10c 0c04 	add.w	ip, ip, #4
 8003b3e:	17e5      	asrs	r5, r4, #31
 8003b40:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	e507      	b.n	800355a <_vfprintf_r+0x76a>
 8003b4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b4c:	682c      	ldr	r4, [r5, #0]
 8003b4e:	3504      	adds	r5, #4
 8003b50:	950b      	str	r5, [sp, #44]	; 0x2c
 8003b52:	2500      	movs	r5, #0
 8003b54:	f7ff ba88 	b.w	8003068 <_vfprintf_r+0x278>
 8003b58:	4694      	mov	ip, r2
 8003b5a:	46ba      	mov	sl, r7
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	44a4      	add	ip, r4
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003b66:	9328      	str	r3, [sp, #160]	; 0xa0
 8003b68:	f8c6 a000 	str.w	sl, [r6]
 8003b6c:	6074      	str	r4, [r6, #4]
 8003b6e:	f77f ab7d 	ble.w	800326c <_vfprintf_r+0x47c>
 8003b72:	e712      	b.n	800399a <_vfprintf_r+0xbaa>
 8003b74:	f10d 0bcf 	add.w	fp, sp, #207	; 0xcf
 8003b78:	4620      	mov	r0, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	220a      	movs	r2, #10
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f003 fc8c 	bl	800749c <__aeabi_uldivmod>
 8003b84:	3230      	adds	r2, #48	; 0x30
 8003b86:	f88b 2000 	strb.w	r2, [fp]
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	220a      	movs	r2, #10
 8003b90:	2300      	movs	r3, #0
 8003b92:	f003 fc83 	bl	800749c <__aeabi_uldivmod>
 8003b96:	4604      	mov	r4, r0
 8003b98:	460d      	mov	r5, r1
 8003b9a:	ea54 0c05 	orrs.w	ip, r4, r5
 8003b9e:	465f      	mov	r7, fp
 8003ba0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003ba4:	d1e8      	bne.n	8003b78 <_vfprintf_r+0xd88>
 8003ba6:	9d04      	ldr	r5, [sp, #16]
 8003ba8:	1bec      	subs	r4, r5, r7
 8003baa:	f7ff ba81 	b.w	80030b0 <_vfprintf_r+0x2c0>
 8003bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	aa27      	add	r2, sp, #156	; 0x9c
 8003bb4:	f002 fac2 	bl	800613c <__sprint_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f47f aa31 	bne.w	8003020 <_vfprintf_r+0x230>
 8003bbe:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003bc2:	ae34      	add	r6, sp, #208	; 0xd0
 8003bc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003bc6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003bc8:	442f      	add	r7, r5
 8003bca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003bcc:	42ac      	cmp	r4, r5
 8003bce:	db40      	blt.n	8003c52 <_vfprintf_r+0xe62>
 8003bd0:	9d05      	ldr	r5, [sp, #20]
 8003bd2:	07e8      	lsls	r0, r5, #31
 8003bd4:	d43d      	bmi.n	8003c52 <_vfprintf_r+0xe62>
 8003bd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003bd8:	ebc7 0508 	rsb	r5, r7, r8
 8003bdc:	1b04      	subs	r4, r0, r4
 8003bde:	42ac      	cmp	r4, r5
 8003be0:	bfb8      	it	lt
 8003be2:	4625      	movlt	r5, r4
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	dd0b      	ble.n	8003c00 <_vfprintf_r+0xe10>
 8003be8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003bea:	6037      	str	r7, [r6, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	44ac      	add	ip, r5
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003bf6:	6075      	str	r5, [r6, #4]
 8003bf8:	9328      	str	r3, [sp, #160]	; 0xa0
 8003bfa:	f300 824b 	bgt.w	8004094 <_vfprintf_r+0x12a4>
 8003bfe:	3608      	adds	r6, #8
 8003c00:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8003c04:	1b64      	subs	r4, r4, r5
 8003c06:	2c00      	cmp	r4, #0
 8003c08:	f77f ab31 	ble.w	800326e <_vfprintf_r+0x47e>
 8003c0c:	2c10      	cmp	r4, #16
 8003c0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c10:	f8df a560 	ldr.w	sl, [pc, #1376]	; 8004174 <_vfprintf_r+0x1384>
 8003c14:	dda2      	ble.n	8003b5c <_vfprintf_r+0xd6c>
 8003c16:	2510      	movs	r5, #16
 8003c18:	4662      	mov	r2, ip
 8003c1a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003c1e:	4657      	mov	r7, sl
 8003c20:	e003      	b.n	8003c2a <_vfprintf_r+0xe3a>
 8003c22:	3608      	adds	r6, #8
 8003c24:	3c10      	subs	r4, #16
 8003c26:	2c10      	cmp	r4, #16
 8003c28:	dd96      	ble.n	8003b58 <_vfprintf_r+0xd68>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	3210      	adds	r2, #16
 8003c2e:	2b07      	cmp	r3, #7
 8003c30:	9229      	str	r2, [sp, #164]	; 0xa4
 8003c32:	9328      	str	r3, [sp, #160]	; 0xa0
 8003c34:	6037      	str	r7, [r6, #0]
 8003c36:	6075      	str	r5, [r6, #4]
 8003c38:	ddf3      	ble.n	8003c22 <_vfprintf_r+0xe32>
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	aa27      	add	r2, sp, #156	; 0x9c
 8003c40:	f002 fa7c 	bl	800613c <__sprint_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f47f a9eb 	bne.w	8003020 <_vfprintf_r+0x230>
 8003c4a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003c4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c4e:	ae34      	add	r6, sp, #208	; 0xd0
 8003c50:	e7e8      	b.n	8003c24 <_vfprintf_r+0xe34>
 8003c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003c56:	6035      	str	r5, [r6, #0]
 8003c58:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003c5a:	6075      	str	r5, [r6, #4]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	44ac      	add	ip, r5
 8003c60:	2b07      	cmp	r3, #7
 8003c62:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003c66:	9328      	str	r3, [sp, #160]	; 0xa0
 8003c68:	f300 8207 	bgt.w	800407a <_vfprintf_r+0x128a>
 8003c6c:	3608      	adds	r6, #8
 8003c6e:	e7b2      	b.n	8003bd6 <_vfprintf_r+0xde6>
 8003c70:	9d05      	ldr	r5, [sp, #20]
 8003c72:	07e9      	lsls	r1, r5, #31
 8003c74:	f53f ae55 	bmi.w	8003922 <_vfprintf_r+0xb32>
 8003c78:	3401      	adds	r4, #1
 8003c7a:	f10c 0501 	add.w	r5, ip, #1
 8003c7e:	2301      	movs	r3, #1
 8003c80:	2c07      	cmp	r4, #7
 8003c82:	9529      	str	r5, [sp, #164]	; 0xa4
 8003c84:	9428      	str	r4, [sp, #160]	; 0xa0
 8003c86:	6037      	str	r7, [r6, #0]
 8003c88:	6073      	str	r3, [r6, #4]
 8003c8a:	f77f ae77 	ble.w	800397c <_vfprintf_r+0xb8c>
 8003c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c90:	4649      	mov	r1, r9
 8003c92:	aa27      	add	r2, sp, #156	; 0x9c
 8003c94:	f002 fa52 	bl	800613c <__sprint_r>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f47f a9c1 	bne.w	8003020 <_vfprintf_r+0x230>
 8003c9e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003ca0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003ca2:	ae34      	add	r6, sp, #208	; 0xd0
 8003ca4:	e66b      	b.n	800397e <_vfprintf_r+0xb8e>
 8003ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca8:	4649      	mov	r1, r9
 8003caa:	aa27      	add	r2, sp, #156	; 0x9c
 8003cac:	f002 fa46 	bl	800613c <__sprint_r>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f47f a9b5 	bne.w	8003020 <_vfprintf_r+0x230>
 8003cb6:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003cb8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003cba:	ae34      	add	r6, sp, #208	; 0xd0
 8003cbc:	e63d      	b.n	800393a <_vfprintf_r+0xb4a>
 8003cbe:	3401      	adds	r4, #1
 8003cc0:	443d      	add	r5, r7
 8003cc2:	2c07      	cmp	r4, #7
 8003cc4:	9529      	str	r5, [sp, #164]	; 0xa4
 8003cc6:	9428      	str	r4, [sp, #160]	; 0xa0
 8003cc8:	f8c6 a000 	str.w	sl, [r6]
 8003ccc:	6077      	str	r7, [r6, #4]
 8003cce:	f77f ae55 	ble.w	800397c <_vfprintf_r+0xb8c>
 8003cd2:	e7dc      	b.n	8003c8e <_vfprintf_r+0xe9e>
 8003cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	aa27      	add	r2, sp, #156	; 0x9c
 8003cda:	f002 fa2f 	bl	800613c <__sprint_r>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	f47f a99e 	bne.w	8003020 <_vfprintf_r+0x230>
 8003ce4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003ce6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003ce8:	ae34      	add	r6, sp, #208	; 0xd0
 8003cea:	e632      	b.n	8003952 <_vfprintf_r+0xb62>
 8003cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cee:	4649      	mov	r1, r9
 8003cf0:	aa27      	add	r2, sp, #156	; 0x9c
 8003cf2:	f002 fa23 	bl	800613c <__sprint_r>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f47f a992 	bne.w	8003020 <_vfprintf_r+0x230>
 8003cfc:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003d00:	ae34      	add	r6, sp, #208	; 0xd0
 8003d02:	f7ff ba62 	b.w	80031ca <_vfprintf_r+0x3da>
 8003d06:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8003d0a:	4264      	negs	r4, r4
 8003d0c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003d10:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8003d14:	2301      	movs	r3, #1
 8003d16:	f7ff b9ab 	b.w	8003070 <_vfprintf_r+0x280>
 8003d1a:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8003d1e:	f002 f9a7 	bl	8006070 <__fpclassifyd>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	f000 8123 	beq.w	8003f6e <_vfprintf_r+0x117e>
 8003d28:	9c07      	ldr	r4, [sp, #28]
 8003d2a:	3401      	adds	r4, #1
 8003d2c:	f028 0a20 	bic.w	sl, r8, #32
 8003d30:	f000 826f 	beq.w	8004212 <_vfprintf_r+0x1422>
 8003d34:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003d38:	d104      	bne.n	8003d44 <_vfprintf_r+0xf54>
 8003d3a:	9c07      	ldr	r4, [sp, #28]
 8003d3c:	2c00      	cmp	r4, #0
 8003d3e:	bf08      	it	eq
 8003d40:	2401      	moveq	r4, #1
 8003d42:	9407      	str	r4, [sp, #28]
 8003d44:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003d48:	9d05      	ldr	r5, [sp, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003d50:	950e      	str	r5, [sp, #56]	; 0x38
 8003d52:	f2c0 8255 	blt.w	8004200 <_vfprintf_r+0x1410>
 8003d56:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8003d5a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003d5e:	f04f 0b00 	mov.w	fp, #0
 8003d62:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003d66:	f000 81da 	beq.w	800411e <_vfprintf_r+0x132e>
 8003d6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d6e:	f000 81d6 	beq.w	800411e <_vfprintf_r+0x132e>
 8003d72:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8003d76:	bf0c      	ite	eq
 8003d78:	9c07      	ldreq	r4, [sp, #28]
 8003d7a:	9d07      	ldrne	r5, [sp, #28]
 8003d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d7e:	bf08      	it	eq
 8003d80:	1c65      	addeq	r5, r4, #1
 8003d82:	aa22      	add	r2, sp, #136	; 0x88
 8003d84:	ab25      	add	r3, sp, #148	; 0x94
 8003d86:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003d8a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 8003d8e:	2102      	movs	r1, #2
 8003d90:	462a      	mov	r2, r5
 8003d92:	ab21      	add	r3, sp, #132	; 0x84
 8003d94:	f000 fc28 	bl	80045e8 <_dtoa_r>
 8003d98:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	d002      	beq.n	8003da6 <_vfprintf_r+0xfb6>
 8003da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003da4:	d105      	bne.n	8003db2 <_vfprintf_r+0xfc2>
 8003da6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003daa:	f01c 0f01 	tst.w	ip, #1
 8003dae:	f000 8233 	beq.w	8004218 <_vfprintf_r+0x1428>
 8003db2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 8003db6:	eb07 0405 	add.w	r4, r7, r5
 8003dba:	f000 81cb 	beq.w	8004154 <_vfprintf_r+0x1364>
 8003dbe:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f003 fb0f 	bl	80073e8 <__aeabi_dcmpeq>
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	f040 81a5 	bne.w	800411a <_vfprintf_r+0x132a>
 8003dd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	d906      	bls.n	8003de4 <_vfprintf_r+0xff4>
 8003dd6:	2130      	movs	r1, #48	; 0x30
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	9225      	str	r2, [sp, #148]	; 0x94
 8003ddc:	7019      	strb	r1, [r3, #0]
 8003dde:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003de0:	429c      	cmp	r4, r3
 8003de2:	d8f9      	bhi.n	8003dd8 <_vfprintf_r+0xfe8>
 8003de4:	1bdb      	subs	r3, r3, r7
 8003de6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003dea:	930d      	str	r3, [sp, #52]	; 0x34
 8003dec:	f000 818d 	beq.w	800410a <_vfprintf_r+0x131a>
 8003df0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003df4:	f340 8292 	ble.w	800431c <_vfprintf_r+0x152c>
 8003df8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003dfc:	f000 823c 	beq.w	8004278 <_vfprintf_r+0x1488>
 8003e00:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003e02:	9410      	str	r4, [sp, #64]	; 0x40
 8003e04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e08:	42ac      	cmp	r4, r5
 8003e0a:	f300 81ec 	bgt.w	80041e6 <_vfprintf_r+0x13f6>
 8003e0e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003e12:	f01c 0f01 	tst.w	ip, #1
 8003e16:	f040 823c 	bne.w	8004292 <_vfprintf_r+0x14a2>
 8003e1a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003e1e:	462c      	mov	r4, r5
 8003e20:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003e24:	f1bb 0f00 	cmp.w	fp, #0
 8003e28:	f040 8164 	bne.w	80040f4 <_vfprintf_r+0x1304>
 8003e2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003e2e:	9308      	str	r3, [sp, #32]
 8003e30:	9505      	str	r5, [sp, #20]
 8003e32:	f8cd b01c 	str.w	fp, [sp, #28]
 8003e36:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003e3a:	f7ff b942 	b.w	80030c2 <_vfprintf_r+0x2d2>
 8003e3e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003e42:	f01c 0f10 	tst.w	ip, #16
 8003e46:	f040 80ab 	bne.w	8003fa0 <_vfprintf_r+0x11b0>
 8003e4a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003e4e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8003e52:	f000 813d 	beq.w	80040d0 <_vfprintf_r+0x12e0>
 8003e56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003e58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	3404      	adds	r4, #4
 8003e5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8003e60:	801d      	strh	r5, [r3, #0]
 8003e62:	f7ff b806 	b.w	8002e72 <_vfprintf_r+0x82>
 8003e66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003e68:	1de3      	adds	r3, r4, #7
 8003e6a:	f023 0307 	bic.w	r3, r3, #7
 8003e6e:	ed93 7b00 	vldr	d7, [r3]
 8003e72:	3308      	adds	r3, #8
 8003e74:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e7a:	f7ff bbf2 	b.w	8003662 <_vfprintf_r+0x872>
 8003e7e:	9c05      	ldr	r4, [sp, #20]
 8003e80:	0664      	lsls	r4, r4, #25
 8003e82:	f140 8086 	bpl.w	8003f92 <_vfprintf_r+0x11a2>
 8003e86:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003e8a:	f8bc 4000 	ldrh.w	r4, [ip]
 8003e8e:	f10c 0c04 	add.w	ip, ip, #4
 8003e92:	2500      	movs	r5, #0
 8003e94:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003e98:	f7ff bac1 	b.w	800341e <_vfprintf_r+0x62e>
 8003e9c:	4694      	mov	ip, r2
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	4657      	mov	r7, sl
 8003ea2:	4692      	mov	sl, r2
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	44a4      	add	ip, r4
 8003ea8:	2b07      	cmp	r3, #7
 8003eaa:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003eae:	9328      	str	r3, [sp, #160]	; 0xa0
 8003eb0:	f8c6 a000 	str.w	sl, [r6]
 8003eb4:	6074      	str	r4, [r6, #4]
 8003eb6:	f73f ae7a 	bgt.w	8003bae <_vfprintf_r+0xdbe>
 8003eba:	3608      	adds	r6, #8
 8003ebc:	e682      	b.n	8003bc4 <_vfprintf_r+0xdd4>
 8003ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	aa27      	add	r2, sp, #156	; 0x9c
 8003ec4:	f002 f93a 	bl	800613c <__sprint_r>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	f47f a8a9 	bne.w	8003020 <_vfprintf_r+0x230>
 8003ece:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003ed2:	ae34      	add	r6, sp, #208	; 0xd0
 8003ed4:	e485      	b.n	80037e2 <_vfprintf_r+0x9f2>
 8003ed6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003ed8:	49a2      	ldr	r1, [pc, #648]	; (8004164 <_vfprintf_r+0x1374>)
 8003eda:	6031      	str	r1, [r6, #0]
 8003edc:	3201      	adds	r2, #1
 8003ede:	f10c 0c01 	add.w	ip, ip, #1
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2a07      	cmp	r2, #7
 8003ee6:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003eea:	9228      	str	r2, [sp, #160]	; 0xa0
 8003eec:	6071      	str	r1, [r6, #4]
 8003eee:	dc5f      	bgt.n	8003fb0 <_vfprintf_r+0x11c0>
 8003ef0:	3608      	adds	r6, #8
 8003ef2:	461c      	mov	r4, r3
 8003ef4:	b92c      	cbnz	r4, 8003f02 <_vfprintf_r+0x1112>
 8003ef6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003ef8:	b91d      	cbnz	r5, 8003f02 <_vfprintf_r+0x1112>
 8003efa:	9d05      	ldr	r5, [sp, #20]
 8003efc:	07ed      	lsls	r5, r5, #31
 8003efe:	f57f a9b6 	bpl.w	800326e <_vfprintf_r+0x47e>
 8003f02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003f06:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003f08:	6035      	str	r5, [r6, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	4462      	add	r2, ip
 8003f0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003f10:	9229      	str	r2, [sp, #164]	; 0xa4
 8003f12:	2b07      	cmp	r3, #7
 8003f14:	6075      	str	r5, [r6, #4]
 8003f16:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f18:	f300 8153 	bgt.w	80041c2 <_vfprintf_r+0x13d2>
 8003f1c:	3608      	adds	r6, #8
 8003f1e:	4264      	negs	r4, r4
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	dd72      	ble.n	800400a <_vfprintf_r+0x121a>
 8003f24:	2c10      	cmp	r4, #16
 8003f26:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8004174 <_vfprintf_r+0x1384>
 8003f2a:	f340 809b 	ble.w	8004064 <_vfprintf_r+0x1274>
 8003f2e:	4651      	mov	r1, sl
 8003f30:	2510      	movs	r5, #16
 8003f32:	46ba      	mov	sl, r7
 8003f34:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003f38:	460f      	mov	r7, r1
 8003f3a:	e004      	b.n	8003f46 <_vfprintf_r+0x1156>
 8003f3c:	3608      	adds	r6, #8
 8003f3e:	3c10      	subs	r4, #16
 8003f40:	2c10      	cmp	r4, #16
 8003f42:	f340 808c 	ble.w	800405e <_vfprintf_r+0x126e>
 8003f46:	3301      	adds	r3, #1
 8003f48:	3210      	adds	r2, #16
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	9229      	str	r2, [sp, #164]	; 0xa4
 8003f4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f50:	6037      	str	r7, [r6, #0]
 8003f52:	6075      	str	r5, [r6, #4]
 8003f54:	ddf2      	ble.n	8003f3c <_vfprintf_r+0x114c>
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	aa27      	add	r2, sp, #156	; 0x9c
 8003f5c:	f002 f8ee 	bl	800613c <__sprint_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	f47f a85d 	bne.w	8003020 <_vfprintf_r+0x230>
 8003f66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003f68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003f6a:	ae34      	add	r6, sp, #208	; 0xd0
 8003f6c:	e7e7      	b.n	8003f3e <_vfprintf_r+0x114e>
 8003f6e:	9d05      	ldr	r5, [sp, #20]
 8003f70:	4f7d      	ldr	r7, [pc, #500]	; (8004168 <_vfprintf_r+0x1378>)
 8003f72:	4b7e      	ldr	r3, [pc, #504]	; (800416c <_vfprintf_r+0x137c>)
 8003f74:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003f78:	9007      	str	r0, [sp, #28]
 8003f7a:	2403      	movs	r4, #3
 8003f7c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003f80:	9408      	str	r4, [sp, #32]
 8003f82:	9505      	str	r5, [sp, #20]
 8003f84:	9010      	str	r0, [sp, #64]	; 0x40
 8003f86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f8a:	bfd8      	it	le
 8003f8c:	461f      	movle	r7, r3
 8003f8e:	f7ff b898 	b.w	80030c2 <_vfprintf_r+0x2d2>
 8003f92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003f94:	682c      	ldr	r4, [r5, #0]
 8003f96:	3504      	adds	r5, #4
 8003f98:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	f7ff ba3f 	b.w	800341e <_vfprintf_r+0x62e>
 8003fa0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003fa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	3404      	adds	r4, #4
 8003fa8:	940b      	str	r4, [sp, #44]	; 0x2c
 8003faa:	601d      	str	r5, [r3, #0]
 8003fac:	f7fe bf61 	b.w	8002e72 <_vfprintf_r+0x82>
 8003fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	aa27      	add	r2, sp, #156	; 0x9c
 8003fb6:	f002 f8c1 	bl	800613c <__sprint_r>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f47f a830 	bne.w	8003020 <_vfprintf_r+0x230>
 8003fc0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003fc2:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003fc6:	ae34      	add	r6, sp, #208	; 0xd0
 8003fc8:	e794      	b.n	8003ef4 <_vfprintf_r+0x1104>
 8003fca:	9c05      	ldr	r4, [sp, #20]
 8003fcc:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003fd0:	f044 0420 	orr.w	r4, r4, #32
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	9405      	str	r4, [sp, #20]
 8003fd8:	f7fe bf85 	b.w	8002ee6 <_vfprintf_r+0xf6>
 8003fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fde:	4649      	mov	r1, r9
 8003fe0:	aa27      	add	r2, sp, #156	; 0x9c
 8003fe2:	f002 f8ab 	bl	800613c <__sprint_r>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f47f a81a 	bne.w	8003020 <_vfprintf_r+0x230>
 8003fec:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003ff0:	ae34      	add	r6, sp, #208	; 0xd0
 8003ff2:	e40c      	b.n	800380e <_vfprintf_r+0xa1e>
 8003ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	aa27      	add	r2, sp, #156	; 0x9c
 8003ffa:	f002 f89f 	bl	800613c <__sprint_r>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f47f a80e 	bne.w	8003020 <_vfprintf_r+0x230>
 8004004:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004006:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004008:	ae34      	add	r6, sp, #208	; 0xd0
 800400a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800400e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004010:	6037      	str	r7, [r6, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	4494      	add	ip, r2
 8004016:	2b07      	cmp	r3, #7
 8004018:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800401c:	9328      	str	r3, [sp, #160]	; 0xa0
 800401e:	6074      	str	r4, [r6, #4]
 8004020:	f77f a924 	ble.w	800326c <_vfprintf_r+0x47c>
 8004024:	e4b9      	b.n	800399a <_vfprintf_r+0xbaa>
 8004026:	f8cd a01c 	str.w	sl, [sp, #28]
 800402a:	f7fe fea3 	bl	8002d74 <strlen>
 800402e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004030:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 8004034:	9d07      	ldr	r5, [sp, #28]
 8004036:	f8cd c020 	str.w	ip, [sp, #32]
 800403a:	4604      	mov	r4, r0
 800403c:	9510      	str	r5, [sp, #64]	; 0x40
 800403e:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8004042:	f7ff b83e 	b.w	80030c2 <_vfprintf_r+0x2d2>
 8004046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004048:	4649      	mov	r1, r9
 800404a:	aa27      	add	r2, sp, #156	; 0x9c
 800404c:	f002 f876 	bl	800613c <__sprint_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	f47e afe5 	bne.w	8003020 <_vfprintf_r+0x230>
 8004056:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800405a:	ae34      	add	r6, sp, #208	; 0xd0
 800405c:	e4fa      	b.n	8003a54 <_vfprintf_r+0xc64>
 800405e:	4639      	mov	r1, r7
 8004060:	4657      	mov	r7, sl
 8004062:	468a      	mov	sl, r1
 8004064:	3301      	adds	r3, #1
 8004066:	4422      	add	r2, r4
 8004068:	2b07      	cmp	r3, #7
 800406a:	9229      	str	r2, [sp, #164]	; 0xa4
 800406c:	9328      	str	r3, [sp, #160]	; 0xa0
 800406e:	f8c6 a000 	str.w	sl, [r6]
 8004072:	6074      	str	r4, [r6, #4]
 8004074:	dcbe      	bgt.n	8003ff4 <_vfprintf_r+0x1204>
 8004076:	3608      	adds	r6, #8
 8004078:	e7c7      	b.n	800400a <_vfprintf_r+0x121a>
 800407a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800407c:	4649      	mov	r1, r9
 800407e:	aa27      	add	r2, sp, #156	; 0x9c
 8004080:	f002 f85c 	bl	800613c <__sprint_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	f47e afcb 	bne.w	8003020 <_vfprintf_r+0x230>
 800408a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800408c:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8004090:	ae34      	add	r6, sp, #208	; 0xd0
 8004092:	e5a0      	b.n	8003bd6 <_vfprintf_r+0xde6>
 8004094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004096:	4649      	mov	r1, r9
 8004098:	aa27      	add	r2, sp, #156	; 0x9c
 800409a:	f002 f84f 	bl	800613c <__sprint_r>
 800409e:	2800      	cmp	r0, #0
 80040a0:	f47e afbe 	bne.w	8003020 <_vfprintf_r+0x230>
 80040a4:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80040a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040a8:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80040ac:	1b0c      	subs	r4, r1, r4
 80040ae:	ae34      	add	r6, sp, #208	; 0xd0
 80040b0:	e5a6      	b.n	8003c00 <_vfprintf_r+0xe10>
 80040b2:	9c07      	ldr	r4, [sp, #28]
 80040b4:	9710      	str	r7, [sp, #64]	; 0x40
 80040b6:	2c06      	cmp	r4, #6
 80040b8:	bf28      	it	cs
 80040ba:	2406      	movcs	r4, #6
 80040bc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 80040c0:	46ba      	mov	sl, r7
 80040c2:	9707      	str	r7, [sp, #28]
 80040c4:	950b      	str	r5, [sp, #44]	; 0x2c
 80040c6:	f8cd c020 	str.w	ip, [sp, #32]
 80040ca:	4f29      	ldr	r7, [pc, #164]	; (8004170 <_vfprintf_r+0x1380>)
 80040cc:	f7fe bff9 	b.w	80030c2 <_vfprintf_r+0x2d2>
 80040d0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80040d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80040d6:	f8dc 3000 	ldr.w	r3, [ip]
 80040da:	f10c 0c04 	add.w	ip, ip, #4
 80040de:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80040e2:	601c      	str	r4, [r3, #0]
 80040e4:	f7fe bec5 	b.w	8002e72 <_vfprintf_r+0x82>
 80040e8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80040ec:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80040f0:	f7ff bac9 	b.w	8003686 <_vfprintf_r+0x896>
 80040f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80040f6:	9505      	str	r5, [sp, #20]
 80040f8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80040fc:	2500      	movs	r5, #0
 80040fe:	9308      	str	r3, [sp, #32]
 8004100:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8004104:	9507      	str	r5, [sp, #28]
 8004106:	f7fe bfdf 	b.w	80030c8 <_vfprintf_r+0x2d8>
 800410a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800410c:	1cdc      	adds	r4, r3, #3
 800410e:	db33      	blt.n	8004178 <_vfprintf_r+0x1388>
 8004110:	9c07      	ldr	r4, [sp, #28]
 8004112:	429c      	cmp	r4, r3
 8004114:	db30      	blt.n	8004178 <_vfprintf_r+0x1388>
 8004116:	9310      	str	r3, [sp, #64]	; 0x40
 8004118:	e674      	b.n	8003e04 <_vfprintf_r+0x1014>
 800411a:	4623      	mov	r3, r4
 800411c:	e662      	b.n	8003de4 <_vfprintf_r+0xff4>
 800411e:	aa22      	add	r2, sp, #136	; 0x88
 8004120:	ab25      	add	r3, sp, #148	; 0x94
 8004122:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004128:	9a07      	ldr	r2, [sp, #28]
 800412a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 800412e:	2103      	movs	r1, #3
 8004130:	ab21      	add	r3, sp, #132	; 0x84
 8004132:	f000 fa59 	bl	80045e8 <_dtoa_r>
 8004136:	9d07      	ldr	r5, [sp, #28]
 8004138:	4607      	mov	r7, r0
 800413a:	e63a      	b.n	8003db2 <_vfprintf_r+0xfc2>
 800413c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8004140:	f8cd c020 	str.w	ip, [sp, #32]
 8004144:	9c07      	ldr	r4, [sp, #28]
 8004146:	950b      	str	r5, [sp, #44]	; 0x2c
 8004148:	9007      	str	r0, [sp, #28]
 800414a:	9010      	str	r0, [sp, #64]	; 0x40
 800414c:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8004150:	f7fe bfb7 	b.w	80030c2 <_vfprintf_r+0x2d2>
 8004154:	783b      	ldrb	r3, [r7, #0]
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	f000 80a2 	beq.w	80042a0 <_vfprintf_r+0x14b0>
 800415c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800415e:	442c      	add	r4, r5
 8004160:	e62d      	b.n	8003dbe <_vfprintf_r+0xfce>
 8004162:	bf00      	nop
 8004164:	08007c6c 	.word	0x08007c6c
 8004168:	08007c38 	.word	0x08007c38
 800416c:	08007c34 	.word	0x08007c34
 8004170:	08007c64 	.word	0x08007c64
 8004174:	08007c70 	.word	0x08007c70
 8004178:	f1a8 0802 	sub.w	r8, r8, #2
 800417c:	3b01      	subs	r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	9321      	str	r3, [sp, #132]	; 0x84
 8004182:	bfba      	itte	lt
 8004184:	425b      	neglt	r3, r3
 8004186:	222d      	movlt	r2, #45	; 0x2d
 8004188:	222b      	movge	r2, #43	; 0x2b
 800418a:	2b09      	cmp	r3, #9
 800418c:	f88d 808c 	strb.w	r8, [sp, #140]	; 0x8c
 8004190:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8004194:	dc42      	bgt.n	800421c <_vfprintf_r+0x142c>
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	2230      	movs	r2, #48	; 0x30
 800419a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800419e:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80041a2:	ab24      	add	r3, sp, #144	; 0x90
 80041a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80041a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80041a8:	aa23      	add	r2, sp, #140	; 0x8c
 80041aa:	1a9a      	subs	r2, r3, r2
 80041ac:	2d01      	cmp	r5, #1
 80041ae:	9215      	str	r2, [sp, #84]	; 0x54
 80041b0:	4414      	add	r4, r2
 80041b2:	f340 8091 	ble.w	80042d8 <_vfprintf_r+0x14e8>
 80041b6:	3401      	adds	r4, #1
 80041b8:	2500      	movs	r5, #0
 80041ba:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80041be:	9510      	str	r5, [sp, #64]	; 0x40
 80041c0:	e630      	b.n	8003e24 <_vfprintf_r+0x1034>
 80041c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c4:	4649      	mov	r1, r9
 80041c6:	aa27      	add	r2, sp, #156	; 0x9c
 80041c8:	f001 ffb8 	bl	800613c <__sprint_r>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	f47e af27 	bne.w	8003020 <_vfprintf_r+0x230>
 80041d2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80041d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80041d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80041d8:	ae34      	add	r6, sp, #208	; 0xd0
 80041da:	e6a0      	b.n	8003f1e <_vfprintf_r+0x112e>
 80041dc:	2400      	movs	r4, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	9407      	str	r4, [sp, #28]
 80041e2:	f7fe be81 	b.w	8002ee8 <_vfprintf_r+0xf8>
 80041e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80041e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80041ea:	2c00      	cmp	r4, #0
 80041ec:	bfd4      	ite	le
 80041ee:	f1c4 0402 	rsble	r4, r4, #2
 80041f2:	2401      	movgt	r4, #1
 80041f4:	442c      	add	r4, r5
 80041f6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80041fa:	f04f 0867 	mov.w	r8, #103	; 0x67
 80041fe:	e611      	b.n	8003e24 <_vfprintf_r+0x1034>
 8004200:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004202:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004204:	901c      	str	r0, [sp, #112]	; 0x70
 8004206:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800420a:	911d      	str	r1, [sp, #116]	; 0x74
 800420c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 8004210:	e5a7      	b.n	8003d62 <_vfprintf_r+0xf72>
 8004212:	2506      	movs	r5, #6
 8004214:	9507      	str	r5, [sp, #28]
 8004216:	e595      	b.n	8003d44 <_vfprintf_r+0xf54>
 8004218:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800421a:	e5e3      	b.n	8003de4 <_vfprintf_r+0xff4>
 800421c:	f10d 009a 	add.w	r0, sp, #154	; 0x9a
 8004220:	4d41      	ldr	r5, [pc, #260]	; (8004328 <_vfprintf_r+0x1538>)
 8004222:	17da      	asrs	r2, r3, #31
 8004224:	fb85 5103 	smull	r5, r1, r5, r3
 8004228:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 800422c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8004230:	4602      	mov	r2, r0
 8004232:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8004236:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800423a:	2909      	cmp	r1, #9
 800423c:	7010      	strb	r0, [r2, #0]
 800423e:	460b      	mov	r3, r1
 8004240:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8004244:	dcec      	bgt.n	8004220 <_vfprintf_r+0x1430>
 8004246:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800424a:	f10d 049b 	add.w	r4, sp, #155	; 0x9b
 800424e:	b2d9      	uxtb	r1, r3
 8004250:	4284      	cmp	r4, r0
 8004252:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004256:	d963      	bls.n	8004320 <_vfprintf_r+0x1530>
 8004258:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
 800425c:	4613      	mov	r3, r2
 800425e:	e001      	b.n	8004264 <_vfprintf_r+0x1474>
 8004260:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004264:	42a3      	cmp	r3, r4
 8004266:	f800 1f01 	strb.w	r1, [r0, #1]!
 800426a:	d1f9      	bne.n	8004260 <_vfprintf_r+0x1470>
 800426c:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 8004270:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8004274:	3bf6      	subs	r3, #246	; 0xf6
 8004276:	e795      	b.n	80041a4 <_vfprintf_r+0x13b4>
 8004278:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800427a:	9510      	str	r5, [sp, #64]	; 0x40
 800427c:	2d00      	cmp	r5, #0
 800427e:	9c07      	ldr	r4, [sp, #28]
 8004280:	dd23      	ble.n	80042ca <_vfprintf_r+0x14da>
 8004282:	b9dc      	cbnz	r4, 80042bc <_vfprintf_r+0x14cc>
 8004284:	9d05      	ldr	r5, [sp, #20]
 8004286:	07e8      	lsls	r0, r5, #31
 8004288:	d418      	bmi.n	80042bc <_vfprintf_r+0x14cc>
 800428a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800428c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004290:	e5c8      	b.n	8003e24 <_vfprintf_r+0x1034>
 8004292:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004294:	1c6c      	adds	r4, r5, #1
 8004296:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800429a:	f04f 0867 	mov.w	r8, #103	; 0x67
 800429e:	e5c1      	b.n	8003e24 <_vfprintf_r+0x1034>
 80042a0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80042a4:	2200      	movs	r2, #0
 80042a6:	2300      	movs	r3, #0
 80042a8:	f003 f89e 	bl	80073e8 <__aeabi_dcmpeq>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f47f af55 	bne.w	800415c <_vfprintf_r+0x136c>
 80042b2:	f1c5 0501 	rsb	r5, r5, #1
 80042b6:	9521      	str	r5, [sp, #132]	; 0x84
 80042b8:	442c      	add	r4, r5
 80042ba:	e580      	b.n	8003dbe <_vfprintf_r+0xfce>
 80042bc:	9d07      	ldr	r5, [sp, #28]
 80042be:	1c6c      	adds	r4, r5, #1
 80042c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80042c2:	442c      	add	r4, r5
 80042c4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80042c8:	e5ac      	b.n	8003e24 <_vfprintf_r+0x1034>
 80042ca:	bb14      	cbnz	r4, 8004312 <_vfprintf_r+0x1522>
 80042cc:	9d05      	ldr	r5, [sp, #20]
 80042ce:	07e9      	lsls	r1, r5, #31
 80042d0:	d41f      	bmi.n	8004312 <_vfprintf_r+0x1522>
 80042d2:	2301      	movs	r3, #1
 80042d4:	461c      	mov	r4, r3
 80042d6:	e5a5      	b.n	8003e24 <_vfprintf_r+0x1034>
 80042d8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80042dc:	f01c 0301 	ands.w	r3, ip, #1
 80042e0:	f47f af69 	bne.w	80041b6 <_vfprintf_r+0x13c6>
 80042e4:	9310      	str	r3, [sp, #64]	; 0x40
 80042e6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80042ea:	e59b      	b.n	8003e24 <_vfprintf_r+0x1034>
 80042ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80042ee:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80042f2:	682d      	ldr	r5, [r5, #0]
 80042f4:	f893 8001 	ldrb.w	r8, [r3, #1]
 80042f8:	9507      	str	r5, [sp, #28]
 80042fa:	f10c 0104 	add.w	r1, ip, #4
 80042fe:	2d00      	cmp	r5, #0
 8004300:	910b      	str	r1, [sp, #44]	; 0x2c
 8004302:	4603      	mov	r3, r0
 8004304:	f6be adef 	bge.w	8002ee6 <_vfprintf_r+0xf6>
 8004308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800430c:	9407      	str	r4, [sp, #28]
 800430e:	f7fe bdea 	b.w	8002ee6 <_vfprintf_r+0xf6>
 8004312:	9d07      	ldr	r5, [sp, #28]
 8004314:	1cac      	adds	r4, r5, #2
 8004316:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800431a:	e583      	b.n	8003e24 <_vfprintf_r+0x1034>
 800431c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800431e:	e72d      	b.n	800417c <_vfprintf_r+0x138c>
 8004320:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8004324:	e73e      	b.n	80041a4 <_vfprintf_r+0x13b4>
 8004326:	bf00      	nop
 8004328:	66666667 	.word	0x66666667
 800432c:	f3af 8000 	nop.w

08004330 <__sbprintf>:
 8004330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004334:	460c      	mov	r4, r1
 8004336:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800433a:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 800433e:	69e7      	ldr	r7, [r4, #28]
 8004340:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004342:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 8004346:	9119      	str	r1, [sp, #100]	; 0x64
 8004348:	ad1a      	add	r5, sp, #104	; 0x68
 800434a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800434e:	f04f 0e00 	mov.w	lr, #0
 8004352:	9707      	str	r7, [sp, #28]
 8004354:	f029 0902 	bic.w	r9, r9, #2
 8004358:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800435a:	9500      	str	r5, [sp, #0]
 800435c:	4669      	mov	r1, sp
 800435e:	9504      	str	r5, [sp, #16]
 8004360:	9602      	str	r6, [sp, #8]
 8004362:	9605      	str	r6, [sp, #20]
 8004364:	f8ad 900c 	strh.w	r9, [sp, #12]
 8004368:	f8ad 800e 	strh.w	r8, [sp, #14]
 800436c:	9709      	str	r7, [sp, #36]	; 0x24
 800436e:	f8cd e018 	str.w	lr, [sp, #24]
 8004372:	4606      	mov	r6, r0
 8004374:	f7fe fd3c 	bl	8002df0 <_vfprintf_r>
 8004378:	1e05      	subs	r5, r0, #0
 800437a:	db07      	blt.n	800438c <__sbprintf+0x5c>
 800437c:	4630      	mov	r0, r6
 800437e:	4669      	mov	r1, sp
 8004380:	f001 f950 	bl	8005624 <_fflush_r>
 8004384:	2800      	cmp	r0, #0
 8004386:	bf18      	it	ne
 8004388:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800438c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	d503      	bpl.n	800439c <__sbprintf+0x6c>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	4628      	mov	r0, r5
 800439e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80043a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043a6:	bf00      	nop

080043a8 <_write_r>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4c08      	ldr	r4, [pc, #32]	; (80043cc <_write_r+0x24>)
 80043ac:	4606      	mov	r6, r0
 80043ae:	2500      	movs	r5, #0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	f7fc f994 	bl	80006e4 <_write>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d000      	beq.n	80043c2 <_write_r+0x1a>
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0fb      	beq.n	80043c0 <_write_r+0x18>
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	20008b20 	.word	0x20008b20

080043d0 <__swsetup_r>:
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <__swsetup_r+0xc0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4606      	mov	r6, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	b113      	cbz	r3, 80043e2 <__swsetup_r+0x12>
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d036      	beq.n	8004450 <__swsetup_r+0x80>
 80043e2:	89a5      	ldrh	r5, [r4, #12]
 80043e4:	b2ab      	uxth	r3, r5
 80043e6:	0719      	lsls	r1, r3, #28
 80043e8:	d50c      	bpl.n	8004404 <__swsetup_r+0x34>
 80043ea:	6922      	ldr	r2, [r4, #16]
 80043ec:	b1aa      	cbz	r2, 800441a <__swsetup_r+0x4a>
 80043ee:	f013 0101 	ands.w	r1, r3, #1
 80043f2:	d01e      	beq.n	8004432 <__swsetup_r+0x62>
 80043f4:	6963      	ldr	r3, [r4, #20]
 80043f6:	2100      	movs	r1, #0
 80043f8:	425b      	negs	r3, r3
 80043fa:	61a3      	str	r3, [r4, #24]
 80043fc:	60a1      	str	r1, [r4, #8]
 80043fe:	b1f2      	cbz	r2, 800443e <__swsetup_r+0x6e>
 8004400:	2000      	movs	r0, #0
 8004402:	bd70      	pop	{r4, r5, r6, pc}
 8004404:	06da      	lsls	r2, r3, #27
 8004406:	d53b      	bpl.n	8004480 <__swsetup_r+0xb0>
 8004408:	075b      	lsls	r3, r3, #29
 800440a:	d425      	bmi.n	8004458 <__swsetup_r+0x88>
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	f045 0308 	orr.w	r3, r5, #8
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	b29b      	uxth	r3, r3
 8004416:	2a00      	cmp	r2, #0
 8004418:	d1e9      	bne.n	80043ee <__swsetup_r+0x1e>
 800441a:	f403 7120 	and.w	r1, r3, #640	; 0x280
 800441e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004422:	d0e4      	beq.n	80043ee <__swsetup_r+0x1e>
 8004424:	4630      	mov	r0, r6
 8004426:	4621      	mov	r1, r4
 8004428:	f001 fa50 	bl	80058cc <__smakebuf_r>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	e7dd      	b.n	80043ee <__swsetup_r+0x1e>
 8004432:	0798      	lsls	r0, r3, #30
 8004434:	bf58      	it	pl
 8004436:	6961      	ldrpl	r1, [r4, #20]
 8004438:	60a1      	str	r1, [r4, #8]
 800443a:	2a00      	cmp	r2, #0
 800443c:	d1e0      	bne.n	8004400 <__swsetup_r+0x30>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	061a      	lsls	r2, r3, #24
 8004442:	d5dd      	bpl.n	8004400 <__swsetup_r+0x30>
 8004444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004448:	81a3      	strh	r3, [r4, #12]
 800444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd fe9f 	bl	8002194 <__sinit>
 8004456:	e7c4      	b.n	80043e2 <__swsetup_r+0x12>
 8004458:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800445a:	b149      	cbz	r1, 8004470 <__swsetup_r+0xa0>
 800445c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004460:	4299      	cmp	r1, r3
 8004462:	d003      	beq.n	800446c <__swsetup_r+0x9c>
 8004464:	4630      	mov	r0, r6
 8004466:	f001 f941 	bl	80056ec <_free_r>
 800446a:	89a5      	ldrh	r5, [r4, #12]
 800446c:	2300      	movs	r3, #0
 800446e:	6323      	str	r3, [r4, #48]	; 0x30
 8004470:	f025 0524 	bic.w	r5, r5, #36	; 0x24
 8004474:	2300      	movs	r3, #0
 8004476:	6922      	ldr	r2, [r4, #16]
 8004478:	6063      	str	r3, [r4, #4]
 800447a:	b2ad      	uxth	r5, r5
 800447c:	6022      	str	r2, [r4, #0]
 800447e:	e7c6      	b.n	800440e <__swsetup_r+0x3e>
 8004480:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004484:	2309      	movs	r3, #9
 8004486:	6033      	str	r3, [r6, #0]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800448c:	81a5      	strh	r5, [r4, #12]
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	20000450 	.word	0x20000450

08004494 <_close_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4c07      	ldr	r4, [pc, #28]	; (80044b4 <_close_r+0x20>)
 8004498:	2300      	movs	r3, #0
 800449a:	4605      	mov	r5, r0
 800449c:	4608      	mov	r0, r1
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	f7fc f94e 	bl	8000740 <_close>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d000      	beq.n	80044aa <_close_r+0x16>
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0fb      	beq.n	80044a8 <_close_r+0x14>
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20008b20 	.word	0x20008b20

080044b8 <quorem>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	6903      	ldr	r3, [r0, #16]
 80044be:	690d      	ldr	r5, [r1, #16]
 80044c0:	429d      	cmp	r5, r3
 80044c2:	b083      	sub	sp, #12
 80044c4:	4683      	mov	fp, r0
 80044c6:	f300 808b 	bgt.w	80045e0 <quorem+0x128>
 80044ca:	3d01      	subs	r5, #1
 80044cc:	f101 0414 	add.w	r4, r1, #20
 80044d0:	f100 0a14 	add.w	sl, r0, #20
 80044d4:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 80044d8:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80044dc:	3201      	adds	r2, #1
 80044de:	fbb3 f8f2 	udiv	r8, r3, r2
 80044e2:	00aa      	lsls	r2, r5, #2
 80044e4:	4691      	mov	r9, r2
 80044e6:	9200      	str	r2, [sp, #0]
 80044e8:	4452      	add	r2, sl
 80044ea:	44a1      	add	r9, r4
 80044ec:	9201      	str	r2, [sp, #4]
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	d03d      	beq.n	8004570 <quorem+0xb8>
 80044f4:	f04f 0e00 	mov.w	lr, #0
 80044f8:	4670      	mov	r0, lr
 80044fa:	4622      	mov	r2, r4
 80044fc:	4653      	mov	r3, sl
 80044fe:	468c      	mov	ip, r1
 8004500:	f852 6b04 	ldr.w	r6, [r2], #4
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	b2b7      	uxth	r7, r6
 8004508:	0c36      	lsrs	r6, r6, #16
 800450a:	fb07 ee08 	mla	lr, r7, r8, lr
 800450e:	fb06 f608 	mul.w	r6, r6, r8
 8004512:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8004516:	fa1f f78e 	uxth.w	r7, lr
 800451a:	1bc7      	subs	r7, r0, r7
 800451c:	b2b0      	uxth	r0, r6
 800451e:	fa17 f781 	uxtah	r7, r7, r1
 8004522:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8004526:	eb00 4027 	add.w	r0, r0, r7, asr #16
 800452a:	b2bf      	uxth	r7, r7
 800452c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8004530:	4591      	cmp	r9, r2
 8004532:	f843 7b04 	str.w	r7, [r3], #4
 8004536:	ea4f 4020 	mov.w	r0, r0, asr #16
 800453a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800453e:	d2df      	bcs.n	8004500 <quorem+0x48>
 8004540:	9a00      	ldr	r2, [sp, #0]
 8004542:	f85a 3002 	ldr.w	r3, [sl, r2]
 8004546:	4661      	mov	r1, ip
 8004548:	b993      	cbnz	r3, 8004570 <quorem+0xb8>
 800454a:	9a01      	ldr	r2, [sp, #4]
 800454c:	1f13      	subs	r3, r2, #4
 800454e:	459a      	cmp	sl, r3
 8004550:	d20c      	bcs.n	800456c <quorem+0xb4>
 8004552:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8004556:	b94b      	cbnz	r3, 800456c <quorem+0xb4>
 8004558:	f1a2 0308 	sub.w	r3, r2, #8
 800455c:	e002      	b.n	8004564 <quorem+0xac>
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	3b04      	subs	r3, #4
 8004562:	b91a      	cbnz	r2, 800456c <quorem+0xb4>
 8004564:	459a      	cmp	sl, r3
 8004566:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800456a:	d3f8      	bcc.n	800455e <quorem+0xa6>
 800456c:	f8cb 5010 	str.w	r5, [fp, #16]
 8004570:	4658      	mov	r0, fp
 8004572:	f001 fc81 	bl	8005e78 <__mcmp>
 8004576:	2800      	cmp	r0, #0
 8004578:	db2e      	blt.n	80045d8 <quorem+0x120>
 800457a:	f108 0801 	add.w	r8, r8, #1
 800457e:	4653      	mov	r3, sl
 8004580:	2200      	movs	r2, #0
 8004582:	f854 6b04 	ldr.w	r6, [r4], #4
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	b2b1      	uxth	r1, r6
 800458a:	1a52      	subs	r2, r2, r1
 800458c:	0c36      	lsrs	r6, r6, #16
 800458e:	fa12 f180 	uxtah	r1, r2, r0
 8004592:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 8004596:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800459a:	b289      	uxth	r1, r1
 800459c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045a0:	45a1      	cmp	r9, r4
 80045a2:	f843 1b04 	str.w	r1, [r3], #4
 80045a6:	ea4f 4222 	mov.w	r2, r2, asr #16
 80045aa:	d2ea      	bcs.n	8004582 <quorem+0xca>
 80045ac:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 80045b0:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 80045b4:	b982      	cbnz	r2, 80045d8 <quorem+0x120>
 80045b6:	1f1a      	subs	r2, r3, #4
 80045b8:	4592      	cmp	sl, r2
 80045ba:	d20b      	bcs.n	80045d4 <quorem+0x11c>
 80045bc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80045c0:	b942      	cbnz	r2, 80045d4 <quorem+0x11c>
 80045c2:	3b08      	subs	r3, #8
 80045c4:	e002      	b.n	80045cc <quorem+0x114>
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	b91a      	cbnz	r2, 80045d4 <quorem+0x11c>
 80045cc:	459a      	cmp	sl, r3
 80045ce:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80045d2:	d3f8      	bcc.n	80045c6 <quorem+0x10e>
 80045d4:	f8cb 5010 	str.w	r5, [fp, #16]
 80045d8:	4640      	mov	r0, r8
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	2000      	movs	r0, #0
 80045e2:	b003      	add	sp, #12
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080045e8 <_dtoa_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	b09d      	sub	sp, #116	; 0x74
 80045ee:	4604      	mov	r4, r0
 80045f0:	9104      	str	r1, [sp, #16]
 80045f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80045f4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80045f6:	9206      	str	r2, [sp, #24]
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	ec5b ab10 	vmov	sl, fp, d0
 80045fe:	b149      	cbz	r1, 8004614 <_dtoa_r+0x2c>
 8004600:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	608b      	str	r3, [r1, #8]
 800460c:	f001 fa3c 	bl	8005a88 <_Bfree>
 8004610:	2300      	movs	r3, #0
 8004612:	6423      	str	r3, [r4, #64]	; 0x40
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	46d9      	mov	r9, fp
 800461a:	db35      	blt.n	8004688 <_dtoa_r+0xa0>
 800461c:	2300      	movs	r3, #0
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	4ba5      	ldr	r3, [pc, #660]	; (80048b8 <_dtoa_r+0x2d0>)
 8004622:	461a      	mov	r2, r3
 8004624:	ea09 0303 	and.w	r3, r9, r3
 8004628:	4293      	cmp	r3, r2
 800462a:	d016      	beq.n	800465a <_dtoa_r+0x72>
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4650      	mov	r0, sl
 8004632:	4659      	mov	r1, fp
 8004634:	f002 fed8 	bl	80073e8 <__aeabi_dcmpeq>
 8004638:	4656      	mov	r6, sl
 800463a:	465f      	mov	r7, fp
 800463c:	4680      	mov	r8, r0
 800463e:	b348      	cbz	r0, 8004694 <_dtoa_r+0xac>
 8004640:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004642:	2301      	movs	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8004648:	2e00      	cmp	r6, #0
 800464a:	f000 80c9 	beq.w	80047e0 <_dtoa_r+0x1f8>
 800464e:	489b      	ldr	r0, [pc, #620]	; (80048bc <_dtoa_r+0x2d4>)
 8004650:	6030      	str	r0, [r6, #0]
 8004652:	3801      	subs	r0, #1
 8004654:	b01d      	add	sp, #116	; 0x74
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800465c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004660:	6033      	str	r3, [r6, #0]
 8004662:	f1ba 0f00 	cmp.w	sl, #0
 8004666:	f000 80a4 	beq.w	80047b2 <_dtoa_r+0x1ca>
 800466a:	4895      	ldr	r0, [pc, #596]	; (80048c0 <_dtoa_r+0x2d8>)
 800466c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800466e:	2e00      	cmp	r6, #0
 8004670:	d0f0      	beq.n	8004654 <_dtoa_r+0x6c>
 8004672:	78c3      	ldrb	r3, [r0, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80b5 	beq.w	80047e4 <_dtoa_r+0x1fc>
 800467a:	f100 0308 	add.w	r3, r0, #8
 800467e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	b01d      	add	sp, #116	; 0x74
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004688:	2301      	movs	r3, #1
 800468a:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	46cb      	mov	fp, r9
 8004692:	e7c5      	b.n	8004620 <_dtoa_r+0x38>
 8004694:	4620      	mov	r0, r4
 8004696:	ec47 6b10 	vmov	d0, r6, r7
 800469a:	a91b      	add	r1, sp, #108	; 0x6c
 800469c:	aa1a      	add	r2, sp, #104	; 0x68
 800469e:	f001 fc79 	bl	8005f94 <__d2b>
 80046a2:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80046a6:	900c      	str	r0, [sp, #48]	; 0x30
 80046a8:	f040 808c 	bne.w	80047c4 <_dtoa_r+0x1dc>
 80046ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80046ae:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80046b0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80046b4:	443d      	add	r5, r7
 80046b6:	429d      	cmp	r5, r3
 80046b8:	f2c0 8297 	blt.w	8004bea <_dtoa_r+0x602>
 80046bc:	331f      	adds	r3, #31
 80046be:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80046c2:	1b5b      	subs	r3, r3, r5
 80046c4:	fa09 f303 	lsl.w	r3, r9, r3
 80046c8:	fa2a f202 	lsr.w	r2, sl, r2
 80046cc:	ea43 0002 	orr.w	r0, r3, r2
 80046d0:	f002 fbac 	bl	8006e2c <__aeabi_ui2d>
 80046d4:	2601      	movs	r6, #1
 80046d6:	3d01      	subs	r5, #1
 80046d8:	46b8      	mov	r8, r7
 80046da:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80046de:	9618      	str	r6, [sp, #96]	; 0x60
 80046e0:	2200      	movs	r2, #0
 80046e2:	4b78      	ldr	r3, [pc, #480]	; (80048c4 <_dtoa_r+0x2dc>)
 80046e4:	f002 fa64 	bl	8006bb0 <__aeabi_dsub>
 80046e8:	a36d      	add	r3, pc, #436	; (adr r3, 80048a0 <_dtoa_r+0x2b8>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f002 fc13 	bl	8006f18 <__aeabi_dmul>
 80046f2:	a36d      	add	r3, pc, #436	; (adr r3, 80048a8 <_dtoa_r+0x2c0>)
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 fa5c 	bl	8006bb4 <__adddf3>
 80046fc:	4606      	mov	r6, r0
 80046fe:	4628      	mov	r0, r5
 8004700:	460f      	mov	r7, r1
 8004702:	f002 fba3 	bl	8006e4c <__aeabi_i2d>
 8004706:	a36a      	add	r3, pc, #424	; (adr r3, 80048b0 <_dtoa_r+0x2c8>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f002 fc04 	bl	8006f18 <__aeabi_dmul>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f002 fa4c 	bl	8006bb4 <__adddf3>
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	f002 fe94 	bl	800744c <__aeabi_d2iz>
 8004724:	4639      	mov	r1, r7
 8004726:	9008      	str	r0, [sp, #32]
 8004728:	2200      	movs	r2, #0
 800472a:	4630      	mov	r0, r6
 800472c:	2300      	movs	r3, #0
 800472e:	f002 fe65 	bl	80073fc <__aeabi_dcmplt>
 8004732:	2800      	cmp	r0, #0
 8004734:	f040 822a 	bne.w	8004b8c <_dtoa_r+0x5a4>
 8004738:	9e08      	ldr	r6, [sp, #32]
 800473a:	2e16      	cmp	r6, #22
 800473c:	f200 8223 	bhi.w	8004b86 <_dtoa_r+0x59e>
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <_dtoa_r+0x2e0>)
 8004742:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800474a:	4652      	mov	r2, sl
 800474c:	465b      	mov	r3, fp
 800474e:	f002 fe73 	bl	8007438 <__aeabi_dcmpgt>
 8004752:	2800      	cmp	r0, #0
 8004754:	f000 824e 	beq.w	8004bf4 <_dtoa_r+0x60c>
 8004758:	3e01      	subs	r6, #1
 800475a:	9608      	str	r6, [sp, #32]
 800475c:	2600      	movs	r6, #0
 800475e:	9610      	str	r6, [sp, #64]	; 0x40
 8004760:	ebc5 0508 	rsb	r5, r5, r8
 8004764:	3d01      	subs	r5, #1
 8004766:	9507      	str	r5, [sp, #28]
 8004768:	f100 822a 	bmi.w	8004bc0 <_dtoa_r+0x5d8>
 800476c:	2600      	movs	r6, #0
 800476e:	960a      	str	r6, [sp, #40]	; 0x28
 8004770:	9e08      	ldr	r6, [sp, #32]
 8004772:	2e00      	cmp	r6, #0
 8004774:	f2c0 8218 	blt.w	8004ba8 <_dtoa_r+0x5c0>
 8004778:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800477c:	960f      	str	r6, [sp, #60]	; 0x3c
 800477e:	44b6      	add	lr, r6
 8004780:	2600      	movs	r6, #0
 8004782:	f8cd e01c 	str.w	lr, [sp, #28]
 8004786:	960e      	str	r6, [sp, #56]	; 0x38
 8004788:	9e04      	ldr	r6, [sp, #16]
 800478a:	2e09      	cmp	r6, #9
 800478c:	d82c      	bhi.n	80047e8 <_dtoa_r+0x200>
 800478e:	2e05      	cmp	r6, #5
 8004790:	bfc4      	itt	gt
 8004792:	3e04      	subgt	r6, #4
 8004794:	9604      	strgt	r6, [sp, #16]
 8004796:	9904      	ldr	r1, [sp, #16]
 8004798:	f1a1 0302 	sub.w	r3, r1, #2
 800479c:	bfcc      	ite	gt
 800479e:	2600      	movgt	r6, #0
 80047a0:	2601      	movle	r6, #1
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d822      	bhi.n	80047ec <_dtoa_r+0x204>
 80047a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80047aa:	03ae      	.short	0x03ae
 80047ac:	03b702a3 	.word	0x03b702a3
 80047b0:	04ab      	.short	0x04ab
 80047b2:	4a46      	ldr	r2, [pc, #280]	; (80048cc <_dtoa_r+0x2e4>)
 80047b4:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <_dtoa_r+0x2d8>)
 80047b6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80047ba:	2800      	cmp	r0, #0
 80047bc:	bf0c      	ite	eq
 80047be:	4610      	moveq	r0, r2
 80047c0:	4618      	movne	r0, r3
 80047c2:	e753      	b.n	800466c <_dtoa_r+0x84>
 80047c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047c8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047cc:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 80047d0:	4650      	mov	r0, sl
 80047d2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80047d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047da:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80047de:	e77f      	b.n	80046e0 <_dtoa_r+0xf8>
 80047e0:	483b      	ldr	r0, [pc, #236]	; (80048d0 <_dtoa_r+0x2e8>)
 80047e2:	e737      	b.n	8004654 <_dtoa_r+0x6c>
 80047e4:	1cc3      	adds	r3, r0, #3
 80047e6:	e74a      	b.n	800467e <_dtoa_r+0x96>
 80047e8:	2600      	movs	r6, #0
 80047ea:	9604      	str	r6, [sp, #16]
 80047ec:	2500      	movs	r5, #0
 80047ee:	6465      	str	r5, [r4, #68]	; 0x44
 80047f0:	4629      	mov	r1, r5
 80047f2:	4620      	mov	r0, r4
 80047f4:	f001 f922 	bl	8005a3c <_Balloc>
 80047f8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80047fc:	2601      	movs	r6, #1
 80047fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8004800:	9506      	str	r5, [sp, #24]
 8004802:	6420      	str	r0, [r4, #64]	; 0x40
 8004804:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8004808:	960d      	str	r6, [sp, #52]	; 0x34
 800480a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800480c:	2b00      	cmp	r3, #0
 800480e:	f2c0 80d1 	blt.w	80049b4 <_dtoa_r+0x3cc>
 8004812:	9e08      	ldr	r6, [sp, #32]
 8004814:	2e0e      	cmp	r6, #14
 8004816:	f300 80cd 	bgt.w	80049b4 <_dtoa_r+0x3cc>
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <_dtoa_r+0x2e0>)
 800481c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004820:	ed93 7b00 	vldr	d7, [r3]
 8004824:	9e06      	ldr	r6, [sp, #24]
 8004826:	2e00      	cmp	r6, #0
 8004828:	ed8d 7b04 	vstr	d7, [sp, #16]
 800482c:	f2c0 8377 	blt.w	8004f1e <_dtoa_r+0x936>
 8004830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004834:	4659      	mov	r1, fp
 8004836:	4650      	mov	r0, sl
 8004838:	f002 fc98 	bl	800716c <__aeabi_ddiv>
 800483c:	f002 fe06 	bl	800744c <__aeabi_d2iz>
 8004840:	4605      	mov	r5, r0
 8004842:	f002 fb03 	bl	8006e4c <__aeabi_i2d>
 8004846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484a:	f002 fb65 	bl	8006f18 <__aeabi_dmul>
 800484e:	460b      	mov	r3, r1
 8004850:	4602      	mov	r2, r0
 8004852:	4659      	mov	r1, fp
 8004854:	4650      	mov	r0, sl
 8004856:	f002 f9ab 	bl	8006bb0 <__aeabi_dsub>
 800485a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800485e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8004862:	f1b9 0f01 	cmp.w	r9, #1
 8004866:	4606      	mov	r6, r0
 8004868:	460f      	mov	r7, r1
 800486a:	f88e 3000 	strb.w	r3, [lr]
 800486e:	f10e 0b01 	add.w	fp, lr, #1
 8004872:	d061      	beq.n	8004938 <_dtoa_r+0x350>
 8004874:	2200      	movs	r2, #0
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <_dtoa_r+0x2ec>)
 8004878:	f002 fb4e 	bl	8006f18 <__aeabi_dmul>
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	4606      	mov	r6, r0
 8004882:	460f      	mov	r7, r1
 8004884:	f002 fdb0 	bl	80073e8 <__aeabi_dcmpeq>
 8004888:	2800      	cmp	r0, #0
 800488a:	d17e      	bne.n	800498a <_dtoa_r+0x3a2>
 800488c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004892:	9406      	str	r4, [sp, #24]
 8004894:	44c8      	add	r8, r9
 8004896:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800489a:	f103 0902 	add.w	r9, r3, #2
 800489e:	e026      	b.n	80048ee <_dtoa_r+0x306>
 80048a0:	636f4361 	.word	0x636f4361
 80048a4:	3fd287a7 	.word	0x3fd287a7
 80048a8:	8b60c8b3 	.word	0x8b60c8b3
 80048ac:	3fc68a28 	.word	0x3fc68a28
 80048b0:	509f79fb 	.word	0x509f79fb
 80048b4:	3fd34413 	.word	0x3fd34413
 80048b8:	7ff00000 	.word	0x7ff00000
 80048bc:	08007c6d 	.word	0x08007c6d
 80048c0:	08007c8c 	.word	0x08007c8c
 80048c4:	3ff80000 	.word	0x3ff80000
 80048c8:	08007ca0 	.word	0x08007ca0
 80048cc:	08007c80 	.word	0x08007c80
 80048d0:	08007c6c 	.word	0x08007c6c
 80048d4:	40240000 	.word	0x40240000
 80048d8:	f002 fb1e 	bl	8006f18 <__aeabi_dmul>
 80048dc:	2200      	movs	r2, #0
 80048de:	2300      	movs	r3, #0
 80048e0:	4606      	mov	r6, r0
 80048e2:	460f      	mov	r7, r1
 80048e4:	f002 fd80 	bl	80073e8 <__aeabi_dcmpeq>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f040 83d3 	bne.w	8005094 <_dtoa_r+0xaac>
 80048ee:	4652      	mov	r2, sl
 80048f0:	465b      	mov	r3, fp
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f002 fc39 	bl	800716c <__aeabi_ddiv>
 80048fa:	f002 fda7 	bl	800744c <__aeabi_d2iz>
 80048fe:	4605      	mov	r5, r0
 8004900:	f002 faa4 	bl	8006e4c <__aeabi_i2d>
 8004904:	4652      	mov	r2, sl
 8004906:	465b      	mov	r3, fp
 8004908:	f002 fb06 	bl	8006f18 <__aeabi_dmul>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f002 f94c 	bl	8006bb0 <__aeabi_dsub>
 8004918:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800491c:	45c1      	cmp	r9, r8
 800491e:	f809 ec01 	strb.w	lr, [r9, #-1]
 8004922:	464c      	mov	r4, r9
 8004924:	4606      	mov	r6, r0
 8004926:	460f      	mov	r7, r1
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4ba9      	ldr	r3, [pc, #676]	; (8004bd4 <_dtoa_r+0x5ec>)
 800492e:	f109 0901 	add.w	r9, r9, #1
 8004932:	d1d1      	bne.n	80048d8 <_dtoa_r+0x2f0>
 8004934:	46a3      	mov	fp, r4
 8004936:	9c06      	ldr	r4, [sp, #24]
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f002 f938 	bl	8006bb4 <__adddf3>
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	4632      	mov	r2, r6
 800494a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800494e:	463b      	mov	r3, r7
 8004950:	f002 fd54 	bl	80073fc <__aeabi_dcmplt>
 8004954:	b940      	cbnz	r0, 8004968 <_dtoa_r+0x380>
 8004956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800495a:	4632      	mov	r2, r6
 800495c:	463b      	mov	r3, r7
 800495e:	f002 fd43 	bl	80073e8 <__aeabi_dcmpeq>
 8004962:	b190      	cbz	r0, 800498a <_dtoa_r+0x3a2>
 8004964:	07eb      	lsls	r3, r5, #31
 8004966:	d510      	bpl.n	800498a <_dtoa_r+0x3a2>
 8004968:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 800496c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800496e:	e005      	b.n	800497c <_dtoa_r+0x394>
 8004970:	429a      	cmp	r2, r3
 8004972:	f000 8431 	beq.w	80051d8 <_dtoa_r+0xbf0>
 8004976:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800497a:	469b      	mov	fp, r3
 800497c:	2d39      	cmp	r5, #57	; 0x39
 800497e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004982:	d0f5      	beq.n	8004970 <_dtoa_r+0x388>
 8004984:	1c6a      	adds	r2, r5, #1
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	4620      	mov	r0, r4
 800498c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800498e:	f001 f87b 	bl	8005a88 <_Bfree>
 8004992:	9e08      	ldr	r6, [sp, #32]
 8004994:	1c73      	adds	r3, r6, #1
 8004996:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004998:	2200      	movs	r2, #0
 800499a:	f88b 2000 	strb.w	r2, [fp]
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	f000 831e 	beq.w	8004fe4 <_dtoa_r+0x9fc>
 80049a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80049aa:	f8c6 b000 	str.w	fp, [r6]
 80049ae:	b01d      	add	sp, #116	; 0x74
 80049b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	f000 8107 	beq.w	8004bca <_dtoa_r+0x5e2>
 80049bc:	9e04      	ldr	r6, [sp, #16]
 80049be:	2e01      	cmp	r6, #1
 80049c0:	f340 82d5 	ble.w	8004f6e <_dtoa_r+0x986>
 80049c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80049c6:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80049ca:	42be      	cmp	r6, r7
 80049cc:	f2c0 839b 	blt.w	8005106 <_dtoa_r+0xb1e>
 80049d0:	1bf7      	subs	r7, r6, r7
 80049d2:	f1b9 0f00 	cmp.w	r9, #0
 80049d6:	f2c0 8492 	blt.w	80052fe <_dtoa_r+0xd16>
 80049da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80049dc:	464b      	mov	r3, r9
 80049de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80049e0:	441e      	add	r6, r3
 80049e2:	960a      	str	r6, [sp, #40]	; 0x28
 80049e4:	9e07      	ldr	r6, [sp, #28]
 80049e6:	4620      	mov	r0, r4
 80049e8:	441e      	add	r6, r3
 80049ea:	2101      	movs	r1, #1
 80049ec:	9607      	str	r6, [sp, #28]
 80049ee:	f001 f8ef 	bl	8005bd0 <__i2b>
 80049f2:	4606      	mov	r6, r0
 80049f4:	b165      	cbz	r5, 8004a10 <_dtoa_r+0x428>
 80049f6:	9907      	ldr	r1, [sp, #28]
 80049f8:	2900      	cmp	r1, #0
 80049fa:	dd09      	ble.n	8004a10 <_dtoa_r+0x428>
 80049fc:	460b      	mov	r3, r1
 80049fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	bfa8      	it	ge
 8004a04:	462b      	movge	r3, r5
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	1ac9      	subs	r1, r1, r3
 8004a0a:	920a      	str	r2, [sp, #40]	; 0x28
 8004a0c:	1aed      	subs	r5, r5, r3
 8004a0e:	9107      	str	r1, [sp, #28]
 8004a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dd1b      	ble.n	8004a4e <_dtoa_r+0x466>
 8004a16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	f000 836a 	beq.w	80050f2 <_dtoa_r+0xb0a>
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	dd11      	ble.n	8004a46 <_dtoa_r+0x45e>
 8004a22:	4631      	mov	r1, r6
 8004a24:	463a      	mov	r2, r7
 8004a26:	4620      	mov	r0, r4
 8004a28:	f001 f97a 	bl	8005d20 <__pow5mult>
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	4631      	mov	r1, r6
 8004a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a32:	4620      	mov	r0, r4
 8004a34:	f001 f8d6 	bl	8005be4 <__multiply>
 8004a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f001 f823 	bl	8005a88 <_Bfree>
 8004a42:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a48:	1bda      	subs	r2, r3, r7
 8004a4a:	f040 828a 	bne.w	8004f62 <_dtoa_r+0x97a>
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4620      	mov	r0, r4
 8004a52:	f001 f8bd 	bl	8005bd0 <__i2b>
 8004a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	dd05      	ble.n	8004a6a <_dtoa_r+0x482>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a62:	4620      	mov	r0, r4
 8004a64:	f001 f95c 	bl	8005d20 <__pow5mult>
 8004a68:	4680      	mov	r8, r0
 8004a6a:	9a04      	ldr	r2, [sp, #16]
 8004a6c:	2a01      	cmp	r2, #1
 8004a6e:	f340 82cb 	ble.w	8005008 <_dtoa_r+0xa20>
 8004a72:	2700      	movs	r7, #0
 8004a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a76:	2900      	cmp	r1, #0
 8004a78:	f040 82aa 	bne.w	8004fd0 <_dtoa_r+0x9e8>
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	9b07      	ldr	r3, [sp, #28]
 8004a80:	4403      	add	r3, r0
 8004a82:	f013 031f 	ands.w	r3, r3, #31
 8004a86:	f000 80a7 	beq.w	8004bd8 <_dtoa_r+0x5f0>
 8004a8a:	f1c3 0220 	rsb	r2, r3, #32
 8004a8e:	2a04      	cmp	r2, #4
 8004a90:	f340 84c9 	ble.w	8005426 <_dtoa_r+0xe3e>
 8004a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a96:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8004a9a:	f1c3 031c 	rsb	r3, r3, #28
 8004a9e:	441a      	add	r2, r3
 8004aa0:	449e      	add	lr, r3
 8004aa2:	920a      	str	r2, [sp, #40]	; 0x28
 8004aa4:	441d      	add	r5, r3
 8004aa6:	f8cd e01c 	str.w	lr, [sp, #28]
 8004aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dd05      	ble.n	8004abc <_dtoa_r+0x4d4>
 8004ab0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f001 f981 	bl	8005dbc <__lshift>
 8004aba:	900c      	str	r0, [sp, #48]	; 0x30
 8004abc:	9907      	ldr	r1, [sp, #28]
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	dd05      	ble.n	8004ace <_dtoa_r+0x4e6>
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	9a07      	ldr	r2, [sp, #28]
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f001 f978 	bl	8005dbc <__lshift>
 8004acc:	4680      	mov	r8, r0
 8004ace:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	f040 8262 	bne.w	8004f9a <_dtoa_r+0x9b2>
 8004ad6:	f1b9 0f00 	cmp.w	r9, #0
 8004ada:	f340 82b0 	ble.w	800503e <_dtoa_r+0xa56>
 8004ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ae0:	2a00      	cmp	r2, #0
 8004ae2:	f040 8089 	bne.w	8004bf8 <_dtoa_r+0x610>
 8004ae6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004ae8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004aea:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004aee:	e006      	b.n	8004afe <_dtoa_r+0x516>
 8004af0:	4639      	mov	r1, r7
 8004af2:	4620      	mov	r0, r4
 8004af4:	220a      	movs	r2, #10
 8004af6:	2300      	movs	r3, #0
 8004af8:	f000 ffd0 	bl	8005a9c <__multadd>
 8004afc:	4607      	mov	r7, r0
 8004afe:	4638      	mov	r0, r7
 8004b00:	4641      	mov	r1, r8
 8004b02:	f7ff fcd9 	bl	80044b8 <quorem>
 8004b06:	3030      	adds	r0, #48	; 0x30
 8004b08:	f80b 0005 	strb.w	r0, [fp, r5]
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	45a9      	cmp	r9, r5
 8004b10:	dcee      	bgt.n	8004af0 <_dtoa_r+0x508>
 8004b12:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004b16:	970c      	str	r7, [sp, #48]	; 0x30
 8004b18:	4682      	mov	sl, r0
 8004b1a:	f1b9 0f01 	cmp.w	r9, #1
 8004b1e:	bfac      	ite	ge
 8004b20:	44cb      	addge	fp, r9
 8004b22:	f10b 0b01 	addlt.w	fp, fp, #1
 8004b26:	2500      	movs	r5, #0
 8004b28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f001 f945 	bl	8005dbc <__lshift>
 8004b32:	4641      	mov	r1, r8
 8004b34:	900c      	str	r0, [sp, #48]	; 0x30
 8004b36:	f001 f99f 	bl	8005e78 <__mcmp>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f340 8311 	ble.w	8005162 <_dtoa_r+0xb7a>
 8004b40:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8004b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b46:	e005      	b.n	8004b54 <_dtoa_r+0x56c>
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	f000 829a 	beq.w	8005082 <_dtoa_r+0xa9a>
 8004b4e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004b52:	469b      	mov	fp, r3
 8004b54:	2a39      	cmp	r2, #57	; 0x39
 8004b56:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004b5a:	d0f5      	beq.n	8004b48 <_dtoa_r+0x560>
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	4641      	mov	r1, r8
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 ff90 	bl	8005a88 <_Bfree>
 8004b68:	2e00      	cmp	r6, #0
 8004b6a:	f43f af0e 	beq.w	800498a <_dtoa_r+0x3a2>
 8004b6e:	b12d      	cbz	r5, 8004b7c <_dtoa_r+0x594>
 8004b70:	42b5      	cmp	r5, r6
 8004b72:	d003      	beq.n	8004b7c <_dtoa_r+0x594>
 8004b74:	4629      	mov	r1, r5
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 ff86 	bl	8005a88 <_Bfree>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 ff82 	bl	8005a88 <_Bfree>
 8004b84:	e701      	b.n	800498a <_dtoa_r+0x3a2>
 8004b86:	2601      	movs	r6, #1
 8004b88:	9610      	str	r6, [sp, #64]	; 0x40
 8004b8a:	e5e9      	b.n	8004760 <_dtoa_r+0x178>
 8004b8c:	9808      	ldr	r0, [sp, #32]
 8004b8e:	f002 f95d 	bl	8006e4c <__aeabi_i2d>
 8004b92:	4632      	mov	r2, r6
 8004b94:	463b      	mov	r3, r7
 8004b96:	f002 fc27 	bl	80073e8 <__aeabi_dcmpeq>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f47f adcc 	bne.w	8004738 <_dtoa_r+0x150>
 8004ba0:	9e08      	ldr	r6, [sp, #32]
 8004ba2:	3e01      	subs	r6, #1
 8004ba4:	9608      	str	r6, [sp, #32]
 8004ba6:	e5c7      	b.n	8004738 <_dtoa_r+0x150>
 8004ba8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004baa:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004bae:	ebce 0606 	rsb	r6, lr, r6
 8004bb2:	960a      	str	r6, [sp, #40]	; 0x28
 8004bb4:	f1ce 0600 	rsb	r6, lr, #0
 8004bb8:	960e      	str	r6, [sp, #56]	; 0x38
 8004bba:	2600      	movs	r6, #0
 8004bbc:	960f      	str	r6, [sp, #60]	; 0x3c
 8004bbe:	e5e3      	b.n	8004788 <_dtoa_r+0x1a0>
 8004bc0:	426e      	negs	r6, r5
 8004bc2:	960a      	str	r6, [sp, #40]	; 0x28
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	9607      	str	r6, [sp, #28]
 8004bc8:	e5d2      	b.n	8004770 <_dtoa_r+0x188>
 8004bca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004bcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004bce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004bd0:	e710      	b.n	80049f4 <_dtoa_r+0x40c>
 8004bd2:	bf00      	nop
 8004bd4:	40240000 	.word	0x40240000
 8004bd8:	231c      	movs	r3, #28
 8004bda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bdc:	9a07      	ldr	r2, [sp, #28]
 8004bde:	4419      	add	r1, r3
 8004be0:	441a      	add	r2, r3
 8004be2:	910a      	str	r1, [sp, #40]	; 0x28
 8004be4:	441d      	add	r5, r3
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e75f      	b.n	8004aaa <_dtoa_r+0x4c2>
 8004bea:	4840      	ldr	r0, [pc, #256]	; (8004cec <_dtoa_r+0x704>)
 8004bec:	1b40      	subs	r0, r0, r5
 8004bee:	fa0a f000 	lsl.w	r0, sl, r0
 8004bf2:	e56d      	b.n	80046d0 <_dtoa_r+0xe8>
 8004bf4:	9010      	str	r0, [sp, #64]	; 0x40
 8004bf6:	e5b3      	b.n	8004760 <_dtoa_r+0x178>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	dd05      	ble.n	8004c08 <_dtoa_r+0x620>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	f001 f8db 	bl	8005dbc <__lshift>
 8004c06:	4606      	mov	r6, r0
 8004c08:	2f00      	cmp	r7, #0
 8004c0a:	f040 82ef 	bne.w	80051ec <_dtoa_r+0xc04>
 8004c0e:	4637      	mov	r7, r6
 8004c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c14:	444b      	add	r3, r9
 8004c16:	f00a 0101 	and.w	r1, sl, #1
 8004c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c1c:	910d      	str	r1, [sp, #52]	; 0x34
 8004c1e:	1c55      	adds	r5, r2, #1
 8004c20:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004c24:	e00a      	b.n	8004c3c <_dtoa_r+0x654>
 8004c26:	f000 ff39 	bl	8005a9c <__multadd>
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	220a      	movs	r2, #10
 8004c30:	4620      	mov	r0, r4
 8004c32:	2300      	movs	r3, #0
 8004c34:	f000 ff32 	bl	8005a9c <__multadd>
 8004c38:	4607      	mov	r7, r0
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	4648      	mov	r0, r9
 8004c40:	f7ff fc3a 	bl	80044b8 <quorem>
 8004c44:	4631      	mov	r1, r6
 8004c46:	4683      	mov	fp, r0
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f001 f915 	bl	8005e78 <__mcmp>
 8004c4e:	463a      	mov	r2, r7
 8004c50:	9006      	str	r0, [sp, #24]
 8004c52:	4641      	mov	r1, r8
 8004c54:	4620      	mov	r0, r4
 8004c56:	f001 f933 	bl	8005ec0 <__mdiff>
 8004c5a:	68c2      	ldr	r2, [r0, #12]
 8004c5c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8004c60:	4603      	mov	r3, r0
 8004c62:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 8004c66:	f8cd e01c 	str.w	lr, [sp, #28]
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	f040 8188 	bne.w	8004f80 <_dtoa_r+0x998>
 8004c70:	4619      	mov	r1, r3
 8004c72:	4648      	mov	r0, r9
 8004c74:	9303      	str	r3, [sp, #12]
 8004c76:	f001 f8ff 	bl	8005e78 <__mcmp>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	9203      	str	r2, [sp, #12]
 8004c84:	f000 ff00 	bl	8005a88 <_Bfree>
 8004c88:	9a03      	ldr	r2, [sp, #12]
 8004c8a:	b92a      	cbnz	r2, 8004c98 <_dtoa_r+0x6b0>
 8004c8c:	9904      	ldr	r1, [sp, #16]
 8004c8e:	b919      	cbnz	r1, 8004c98 <_dtoa_r+0x6b0>
 8004c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 83a7 	beq.w	80053e6 <_dtoa_r+0xdfe>
 8004c98:	9b06      	ldr	r3, [sp, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f2c0 8242 	blt.w	8005124 <_dtoa_r+0xb3c>
 8004ca0:	d105      	bne.n	8004cae <_dtoa_r+0x6c6>
 8004ca2:	9904      	ldr	r1, [sp, #16]
 8004ca4:	b919      	cbnz	r1, 8004cae <_dtoa_r+0x6c6>
 8004ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 823b 	beq.w	8005124 <_dtoa_r+0xb3c>
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	f300 82b0 	bgt.w	8005214 <_dtoa_r+0xc2c>
 8004cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cb6:	f805 ac01 	strb.w	sl, [r5, #-1]
 8004cba:	428d      	cmp	r5, r1
 8004cbc:	46ab      	mov	fp, r5
 8004cbe:	f000 82ba 	beq.w	8005236 <_dtoa_r+0xc4e>
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	220a      	movs	r2, #10
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 fee7 	bl	8005a9c <__multadd>
 8004cce:	42be      	cmp	r6, r7
 8004cd0:	4681      	mov	r9, r0
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f04f 020a 	mov.w	r2, #10
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	d1a2      	bne.n	8004c26 <_dtoa_r+0x63e>
 8004ce0:	f000 fedc 	bl	8005a9c <__multadd>
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	e7a7      	b.n	8004c3a <_dtoa_r+0x652>
 8004cea:	bf00      	nop
 8004cec:	fffffbee 	.word	0xfffffbee
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	910d      	str	r1, [sp, #52]	; 0x34
 8004cf4:	9a06      	ldr	r2, [sp, #24]
 8004cf6:	9b08      	ldr	r3, [sp, #32]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	f102 0901 	add.w	r9, r2, #1
 8004cfe:	f1b9 0f00 	cmp.w	r9, #0
 8004d02:	9211      	str	r2, [sp, #68]	; 0x44
 8004d04:	464d      	mov	r5, r9
 8004d06:	f340 8145 	ble.w	8004f94 <_dtoa_r+0x9ac>
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2d17      	cmp	r5, #23
 8004d0e:	6461      	str	r1, [r4, #68]	; 0x44
 8004d10:	d90a      	bls.n	8004d28 <_dtoa_r+0x740>
 8004d12:	2201      	movs	r2, #1
 8004d14:	2304      	movs	r3, #4
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	f103 0014 	add.w	r0, r3, #20
 8004d1c:	42a8      	cmp	r0, r5
 8004d1e:	4611      	mov	r1, r2
 8004d20:	f102 0201 	add.w	r2, r2, #1
 8004d24:	d9f7      	bls.n	8004d16 <_dtoa_r+0x72e>
 8004d26:	6461      	str	r1, [r4, #68]	; 0x44
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fe87 	bl	8005a3c <_Balloc>
 8004d2e:	2d0e      	cmp	r5, #14
 8004d30:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d32:	6420      	str	r0, [r4, #64]	; 0x40
 8004d34:	f63f ad69 	bhi.w	800480a <_dtoa_r+0x222>
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	f43f ad66 	beq.w	800480a <_dtoa_r+0x222>
 8004d3e:	9e08      	ldr	r6, [sp, #32]
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8004d46:	f340 8220 	ble.w	800518a <_dtoa_r+0xba2>
 8004d4a:	4ba8      	ldr	r3, [pc, #672]	; (8004fec <_dtoa_r+0xa04>)
 8004d4c:	f006 020f 	and.w	r2, r6, #15
 8004d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d54:	1135      	asrs	r5, r6, #4
 8004d56:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004d5a:	06eb      	lsls	r3, r5, #27
 8004d5c:	f140 81db 	bpl.w	8005116 <_dtoa_r+0xb2e>
 8004d60:	4ba3      	ldr	r3, [pc, #652]	; (8004ff0 <_dtoa_r+0xa08>)
 8004d62:	4650      	mov	r0, sl
 8004d64:	4659      	mov	r1, fp
 8004d66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d6a:	f002 f9ff 	bl	800716c <__aeabi_ddiv>
 8004d6e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004d72:	f005 050f 	and.w	r5, r5, #15
 8004d76:	f04f 0803 	mov.w	r8, #3
 8004d7a:	b18d      	cbz	r5, 8004da0 <_dtoa_r+0x7b8>
 8004d7c:	f8df a270 	ldr.w	sl, [pc, #624]	; 8004ff0 <_dtoa_r+0xa08>
 8004d80:	4630      	mov	r0, r6
 8004d82:	4639      	mov	r1, r7
 8004d84:	07ee      	lsls	r6, r5, #31
 8004d86:	d505      	bpl.n	8004d94 <_dtoa_r+0x7ac>
 8004d88:	e9da 2300 	ldrd	r2, r3, [sl]
 8004d8c:	f002 f8c4 	bl	8006f18 <__aeabi_dmul>
 8004d90:	f108 0801 	add.w	r8, r8, #1
 8004d94:	106d      	asrs	r5, r5, #1
 8004d96:	f10a 0a08 	add.w	sl, sl, #8
 8004d9a:	d1f3      	bne.n	8004d84 <_dtoa_r+0x79c>
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004da4:	4632      	mov	r2, r6
 8004da6:	463b      	mov	r3, r7
 8004da8:	f002 f9e0 	bl	800716c <__aeabi_ddiv>
 8004dac:	4682      	mov	sl, r0
 8004dae:	468b      	mov	fp, r1
 8004db0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004db2:	b146      	cbz	r6, 8004dc6 <_dtoa_r+0x7de>
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	2200      	movs	r2, #0
 8004dba:	4b8e      	ldr	r3, [pc, #568]	; (8004ff4 <_dtoa_r+0xa0c>)
 8004dbc:	f002 fb1e 	bl	80073fc <__aeabi_dcmplt>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f040 82bd 	bne.w	8005340 <_dtoa_r+0xd58>
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f002 f840 	bl	8006e4c <__aeabi_i2d>
 8004dcc:	4652      	mov	r2, sl
 8004dce:	465b      	mov	r3, fp
 8004dd0:	f002 f8a2 	bl	8006f18 <__aeabi_dmul>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4b88      	ldr	r3, [pc, #544]	; (8004ff8 <_dtoa_r+0xa10>)
 8004dd8:	f001 feec 	bl	8006bb4 <__adddf3>
 8004ddc:	4606      	mov	r6, r0
 8004dde:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004de2:	f1b9 0f00 	cmp.w	r9, #0
 8004de6:	f000 8168 	beq.w	80050ba <_dtoa_r+0xad2>
 8004dea:	9908      	ldr	r1, [sp, #32]
 8004dec:	9119      	str	r1, [sp, #100]	; 0x64
 8004dee:	46c8      	mov	r8, r9
 8004df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	f000 8228 	beq.w	8005248 <_dtoa_r+0xc60>
 8004df8:	4b7c      	ldr	r3, [pc, #496]	; (8004fec <_dtoa_r+0xa04>)
 8004dfa:	4980      	ldr	r1, [pc, #512]	; (8004ffc <_dtoa_r+0xa14>)
 8004dfc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e04:	2000      	movs	r0, #0
 8004e06:	f002 f9b1 	bl	800716c <__aeabi_ddiv>
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	f001 fecf 	bl	8006bb0 <__aeabi_dsub>
 8004e12:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004e16:	4659      	mov	r1, fp
 8004e18:	4650      	mov	r0, sl
 8004e1a:	f002 fb17 	bl	800744c <__aeabi_d2iz>
 8004e1e:	4605      	mov	r5, r0
 8004e20:	f002 f814 	bl	8006e4c <__aeabi_i2d>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4650      	mov	r0, sl
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	f001 fec0 	bl	8006bb0 <__aeabi_dsub>
 8004e30:	3530      	adds	r5, #48	; 0x30
 8004e32:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e34:	e9cd 0100 	strd	r0, r1, [sp]
 8004e38:	b2ed      	uxtb	r5, r5
 8004e3a:	7035      	strb	r5, [r6, #0]
 8004e3c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e44:	f106 0b01 	add.w	fp, r6, #1
 8004e48:	f002 faf6 	bl	8007438 <__aeabi_dcmpgt>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	f040 82bf 	bne.w	80053d0 <_dtoa_r+0xde8>
 8004e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e56:	2000      	movs	r0, #0
 8004e58:	4966      	ldr	r1, [pc, #408]	; (8004ff4 <_dtoa_r+0xa0c>)
 8004e5a:	f001 fea9 	bl	8006bb0 <__aeabi_dsub>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004e66:	f002 fae7 	bl	8007438 <__aeabi_dcmpgt>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f040 82b6 	bne.w	80053dc <_dtoa_r+0xdf4>
 8004e70:	f1b8 0f01 	cmp.w	r8, #1
 8004e74:	f340 8185 	ble.w	8005182 <_dtoa_r+0xb9a>
 8004e78:	44b0      	add	r8, r6
 8004e7a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8004e7e:	46a2      	mov	sl, r4
 8004e80:	46c1      	mov	r9, r8
 8004e82:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e86:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8004e8a:	e00d      	b.n	8004ea8 <_dtoa_r+0x8c0>
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4959      	ldr	r1, [pc, #356]	; (8004ff4 <_dtoa_r+0xa0c>)
 8004e90:	f001 fe8e 	bl	8006bb0 <__aeabi_dsub>
 8004e94:	4622      	mov	r2, r4
 8004e96:	462b      	mov	r3, r5
 8004e98:	f002 fab0 	bl	80073fc <__aeabi_dcmplt>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f040 829b 	bne.w	80053d8 <_dtoa_r+0xdf0>
 8004ea2:	45cb      	cmp	fp, r9
 8004ea4:	f000 816a 	beq.w	800517c <_dtoa_r+0xb94>
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	2200      	movs	r2, #0
 8004eae:	4b54      	ldr	r3, [pc, #336]	; (8005000 <_dtoa_r+0xa18>)
 8004eb0:	f002 f832 	bl	8006f18 <__aeabi_dmul>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4b52      	ldr	r3, [pc, #328]	; (8005000 <_dtoa_r+0xa18>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f002 f82a 	bl	8006f18 <__aeabi_dmul>
 8004ec4:	460f      	mov	r7, r1
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	f002 fac0 	bl	800744c <__aeabi_d2iz>
 8004ecc:	4680      	mov	r8, r0
 8004ece:	f001 ffbd 	bl	8006e4c <__aeabi_i2d>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f001 fe69 	bl	8006bb0 <__aeabi_dsub>
 8004ede:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004ee2:	fa5f f888 	uxtb.w	r8, r8
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	462b      	mov	r3, r5
 8004eea:	f80b 8b01 	strb.w	r8, [fp], #1
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460f      	mov	r7, r1
 8004ef2:	f002 fa83 	bl	80073fc <__aeabi_dcmplt>
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	463b      	mov	r3, r7
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0c6      	beq.n	8004e8c <_dtoa_r+0x8a4>
 8004efe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004f00:	9608      	str	r6, [sp, #32]
 8004f02:	4654      	mov	r4, sl
 8004f04:	e541      	b.n	800498a <_dtoa_r+0x3a2>
 8004f06:	2200      	movs	r2, #0
 8004f08:	920d      	str	r2, [sp, #52]	; 0x34
 8004f0a:	9b06      	ldr	r3, [sp, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dd3d      	ble.n	8004f8c <_dtoa_r+0x9a4>
 8004f10:	461d      	mov	r5, r3
 8004f12:	9311      	str	r3, [sp, #68]	; 0x44
 8004f14:	4699      	mov	r9, r3
 8004f16:	e6f8      	b.n	8004d0a <_dtoa_r+0x722>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8004f1c:	e7f5      	b.n	8004f0a <_dtoa_r+0x922>
 8004f1e:	f1b9 0f00 	cmp.w	r9, #0
 8004f22:	f73f ac85 	bgt.w	8004830 <_dtoa_r+0x248>
 8004f26:	f040 80e0 	bne.w	80050ea <_dtoa_r+0xb02>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <_dtoa_r+0xa1c>)
 8004f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f32:	f001 fff1 	bl	8006f18 <__aeabi_dmul>
 8004f36:	4652      	mov	r2, sl
 8004f38:	465b      	mov	r3, fp
 8004f3a:	f002 fa73 	bl	8007424 <__aeabi_dcmpge>
 8004f3e:	46c8      	mov	r8, r9
 8004f40:	464e      	mov	r6, r9
 8004f42:	2800      	cmp	r0, #0
 8004f44:	f000 8091 	beq.w	800506a <_dtoa_r+0xa82>
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	9308      	str	r3, [sp, #32]
 8004f52:	4641      	mov	r1, r8
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 fd97 	bl	8005a88 <_Bfree>
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	f47f ae0e 	bne.w	8004b7c <_dtoa_r+0x594>
 8004f60:	e513      	b.n	800498a <_dtoa_r+0x3a2>
 8004f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f64:	4620      	mov	r0, r4
 8004f66:	f000 fedb 	bl	8005d20 <__pow5mult>
 8004f6a:	900c      	str	r0, [sp, #48]	; 0x30
 8004f6c:	e56f      	b.n	8004a4e <_dtoa_r+0x466>
 8004f6e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	f000 81ca 	beq.w	800530a <_dtoa_r+0xd22>
 8004f76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f7a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004f7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004f7e:	e52e      	b.n	80049de <_dtoa_r+0x3f6>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 fd80 	bl	8005a88 <_Bfree>
 8004f88:	2201      	movs	r2, #1
 8004f8a:	e685      	b.n	8004c98 <_dtoa_r+0x6b0>
 8004f8c:	2501      	movs	r5, #1
 8004f8e:	9511      	str	r5, [sp, #68]	; 0x44
 8004f90:	46a9      	mov	r9, r5
 8004f92:	9506      	str	r5, [sp, #24]
 8004f94:	2100      	movs	r1, #0
 8004f96:	6461      	str	r1, [r4, #68]	; 0x44
 8004f98:	e6c6      	b.n	8004d28 <_dtoa_r+0x740>
 8004f9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	f000 ff6b 	bl	8005e78 <__mcmp>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f6bf ad97 	bge.w	8004ad6 <_dtoa_r+0x4ee>
 8004fa8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004fac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fae:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8cd e020 	str.w	lr, [sp, #32]
 8004fbc:	f000 fd6e 	bl	8005a9c <__multadd>
 8004fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	f040 8220 	bne.w	800540a <_dtoa_r+0xe22>
 8004fca:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8004fce:	e582      	b.n	8004ad6 <_dtoa_r+0x4ee>
 8004fd0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004fd4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8004fd8:	6918      	ldr	r0, [r3, #16]
 8004fda:	f000 fdab 	bl	8005b34 <__hi0bits>
 8004fde:	f1c0 0020 	rsb	r0, r0, #32
 8004fe2:	e54c      	b.n	8004a7e <_dtoa_r+0x496>
 8004fe4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fe6:	f7ff bb35 	b.w	8004654 <_dtoa_r+0x6c>
 8004fea:	bf00      	nop
 8004fec:	08007ca0 	.word	0x08007ca0
 8004ff0:	08007d68 	.word	0x08007d68
 8004ff4:	3ff00000 	.word	0x3ff00000
 8004ff8:	401c0000 	.word	0x401c0000
 8004ffc:	3fe00000 	.word	0x3fe00000
 8005000:	40240000 	.word	0x40240000
 8005004:	40140000 	.word	0x40140000
 8005008:	f1ba 0f00 	cmp.w	sl, #0
 800500c:	f47f ad31 	bne.w	8004a72 <_dtoa_r+0x48a>
 8005010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 817f 	bne.w	8005318 <_dtoa_r+0xd30>
 800501a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800501e:	0d3f      	lsrs	r7, r7, #20
 8005020:	053f      	lsls	r7, r7, #20
 8005022:	2f00      	cmp	r7, #0
 8005024:	f43f ad26 	beq.w	8004a74 <_dtoa_r+0x48c>
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	f10e 0e01 	add.w	lr, lr, #1
 8005034:	930a      	str	r3, [sp, #40]	; 0x28
 8005036:	f8cd e01c 	str.w	lr, [sp, #28]
 800503a:	2701      	movs	r7, #1
 800503c:	e51a      	b.n	8004a74 <_dtoa_r+0x48c>
 800503e:	9a04      	ldr	r2, [sp, #16]
 8005040:	2a02      	cmp	r2, #2
 8005042:	f77f ad4c 	ble.w	8004ade <_dtoa_r+0x4f6>
 8005046:	f1b9 0f00 	cmp.w	r9, #0
 800504a:	f47f af7d 	bne.w	8004f48 <_dtoa_r+0x960>
 800504e:	4641      	mov	r1, r8
 8005050:	464b      	mov	r3, r9
 8005052:	2205      	movs	r2, #5
 8005054:	4620      	mov	r0, r4
 8005056:	f000 fd21 	bl	8005a9c <__multadd>
 800505a:	4680      	mov	r8, r0
 800505c:	4641      	mov	r1, r8
 800505e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005060:	f000 ff0a 	bl	8005e78 <__mcmp>
 8005064:	2800      	cmp	r0, #0
 8005066:	f77f af6f 	ble.w	8004f48 <_dtoa_r+0x960>
 800506a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800506e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005070:	2331      	movs	r3, #49	; 0x31
 8005072:	f10e 0e01 	add.w	lr, lr, #1
 8005076:	f8cd e020 	str.w	lr, [sp, #32]
 800507a:	700b      	strb	r3, [r1, #0]
 800507c:	f101 0b01 	add.w	fp, r1, #1
 8005080:	e767      	b.n	8004f52 <_dtoa_r+0x96a>
 8005082:	9a08      	ldr	r2, [sp, #32]
 8005084:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8005088:	2331      	movs	r3, #49	; 0x31
 800508a:	3201      	adds	r2, #1
 800508c:	9208      	str	r2, [sp, #32]
 800508e:	f88e 3000 	strb.w	r3, [lr]
 8005092:	e565      	b.n	8004b60 <_dtoa_r+0x578>
 8005094:	46a3      	mov	fp, r4
 8005096:	9c06      	ldr	r4, [sp, #24]
 8005098:	e477      	b.n	800498a <_dtoa_r+0x3a2>
 800509a:	4640      	mov	r0, r8
 800509c:	f001 fed6 	bl	8006e4c <__aeabi_i2d>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4650      	mov	r0, sl
 80050a6:	4659      	mov	r1, fp
 80050a8:	f001 ff36 	bl	8006f18 <__aeabi_dmul>
 80050ac:	2200      	movs	r2, #0
 80050ae:	4b9e      	ldr	r3, [pc, #632]	; (8005328 <_dtoa_r+0xd40>)
 80050b0:	f001 fd80 	bl	8006bb4 <__adddf3>
 80050b4:	4606      	mov	r6, r0
 80050b6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80050ba:	4650      	mov	r0, sl
 80050bc:	4659      	mov	r1, fp
 80050be:	2200      	movs	r2, #0
 80050c0:	4b9a      	ldr	r3, [pc, #616]	; (800532c <_dtoa_r+0xd44>)
 80050c2:	f001 fd75 	bl	8006bb0 <__aeabi_dsub>
 80050c6:	4632      	mov	r2, r6
 80050c8:	463b      	mov	r3, r7
 80050ca:	4682      	mov	sl, r0
 80050cc:	468b      	mov	fp, r1
 80050ce:	f002 f9b3 	bl	8007438 <__aeabi_dcmpgt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f040 80b4 	bne.w	8005240 <_dtoa_r+0xc58>
 80050d8:	4632      	mov	r2, r6
 80050da:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80050de:	4650      	mov	r0, sl
 80050e0:	4659      	mov	r1, fp
 80050e2:	f002 f98b 	bl	80073fc <__aeabi_dcmplt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d04b      	beq.n	8005182 <_dtoa_r+0xb9a>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	4646      	mov	r6, r8
 80050f0:	e72a      	b.n	8004f48 <_dtoa_r+0x960>
 80050f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 fe12 	bl	8005d20 <__pow5mult>
 80050fc:	900c      	str	r0, [sp, #48]	; 0x30
 80050fe:	e4a6      	b.n	8004a4e <_dtoa_r+0x466>
 8005100:	2101      	movs	r1, #1
 8005102:	910d      	str	r1, [sp, #52]	; 0x34
 8005104:	e5f6      	b.n	8004cf4 <_dtoa_r+0x70c>
 8005106:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005108:	970e      	str	r7, [sp, #56]	; 0x38
 800510a:	1bbb      	subs	r3, r7, r6
 800510c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800510e:	441e      	add	r6, r3
 8005110:	960f      	str	r6, [sp, #60]	; 0x3c
 8005112:	2700      	movs	r7, #0
 8005114:	e45d      	b.n	80049d2 <_dtoa_r+0x3ea>
 8005116:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800511a:	f04f 0802 	mov.w	r8, #2
 800511e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005122:	e62a      	b.n	8004d7a <_dtoa_r+0x792>
 8005124:	2a00      	cmp	r2, #0
 8005126:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800512a:	46d9      	mov	r9, fp
 800512c:	dd11      	ble.n	8005152 <_dtoa_r+0xb6a>
 800512e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005130:	2201      	movs	r2, #1
 8005132:	4620      	mov	r0, r4
 8005134:	f000 fe42 	bl	8005dbc <__lshift>
 8005138:	4641      	mov	r1, r8
 800513a:	900c      	str	r0, [sp, #48]	; 0x30
 800513c:	f000 fe9c 	bl	8005e78 <__mcmp>
 8005140:	2800      	cmp	r0, #0
 8005142:	f340 815b 	ble.w	80053fc <_dtoa_r+0xe14>
 8005146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800514a:	f000 8123 	beq.w	8005394 <_dtoa_r+0xdac>
 800514e:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 8005152:	4635      	mov	r5, r6
 8005154:	9e07      	ldr	r6, [sp, #28]
 8005156:	f886 a000 	strb.w	sl, [r6]
 800515a:	f106 0b01 	add.w	fp, r6, #1
 800515e:	463e      	mov	r6, r7
 8005160:	e4fe      	b.n	8004b60 <_dtoa_r+0x578>
 8005162:	d103      	bne.n	800516c <_dtoa_r+0xb84>
 8005164:	f01a 0f01 	tst.w	sl, #1
 8005168:	f47f acea 	bne.w	8004b40 <_dtoa_r+0x558>
 800516c:	465b      	mov	r3, fp
 800516e:	469b      	mov	fp, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8005176:	2a30      	cmp	r2, #48	; 0x30
 8005178:	d0f9      	beq.n	800516e <_dtoa_r+0xb86>
 800517a:	e4f1      	b.n	8004b60 <_dtoa_r+0x578>
 800517c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8005180:	4654      	mov	r4, sl
 8005182:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8005186:	f7ff bb40 	b.w	800480a <_dtoa_r+0x222>
 800518a:	9e08      	ldr	r6, [sp, #32]
 800518c:	4275      	negs	r5, r6
 800518e:	2d00      	cmp	r5, #0
 8005190:	f000 80c5 	beq.w	800531e <_dtoa_r+0xd36>
 8005194:	4b66      	ldr	r3, [pc, #408]	; (8005330 <_dtoa_r+0xd48>)
 8005196:	f005 020f 	and.w	r2, r5, #15
 800519a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80051a6:	f001 feb7 	bl	8006f18 <__aeabi_dmul>
 80051aa:	112d      	asrs	r5, r5, #4
 80051ac:	4682      	mov	sl, r0
 80051ae:	468b      	mov	fp, r1
 80051b0:	f000 8136 	beq.w	8005420 <_dtoa_r+0xe38>
 80051b4:	4e5f      	ldr	r6, [pc, #380]	; (8005334 <_dtoa_r+0xd4c>)
 80051b6:	f04f 0802 	mov.w	r8, #2
 80051ba:	07ea      	lsls	r2, r5, #31
 80051bc:	d505      	bpl.n	80051ca <_dtoa_r+0xbe2>
 80051be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051c2:	f001 fea9 	bl	8006f18 <__aeabi_dmul>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	106d      	asrs	r5, r5, #1
 80051cc:	f106 0608 	add.w	r6, r6, #8
 80051d0:	d1f3      	bne.n	80051ba <_dtoa_r+0xbd2>
 80051d2:	4682      	mov	sl, r0
 80051d4:	468b      	mov	fp, r1
 80051d6:	e5eb      	b.n	8004db0 <_dtoa_r+0x7c8>
 80051d8:	9e08      	ldr	r6, [sp, #32]
 80051da:	3601      	adds	r6, #1
 80051dc:	9608      	str	r6, [sp, #32]
 80051de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80051e0:	2230      	movs	r2, #48	; 0x30
 80051e2:	7032      	strb	r2, [r6, #0]
 80051e4:	2231      	movs	r2, #49	; 0x31
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	f7ff bbcf 	b.w	800498a <_dtoa_r+0x3a2>
 80051ec:	6871      	ldr	r1, [r6, #4]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fc24 	bl	8005a3c <_Balloc>
 80051f4:	6933      	ldr	r3, [r6, #16]
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	4605      	mov	r5, r0
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	f106 010c 	add.w	r1, r6, #12
 8005200:	300c      	adds	r0, #12
 8005202:	f7fd fb0f 	bl	8002824 <memcpy>
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	2201      	movs	r2, #1
 800520c:	f000 fdd6 	bl	8005dbc <__lshift>
 8005210:	4607      	mov	r7, r0
 8005212:	e4fd      	b.n	8004c10 <_dtoa_r+0x628>
 8005214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005218:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800521c:	f000 80ba 	beq.w	8005394 <_dtoa_r+0xdac>
 8005220:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8005224:	f10a 0301 	add.w	r3, sl, #1
 8005228:	4635      	mov	r5, r6
 800522a:	f88e 3000 	strb.w	r3, [lr]
 800522e:	f10e 0b01 	add.w	fp, lr, #1
 8005232:	463e      	mov	r6, r7
 8005234:	e494      	b.n	8004b60 <_dtoa_r+0x578>
 8005236:	4635      	mov	r5, r6
 8005238:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800523c:	463e      	mov	r6, r7
 800523e:	e473      	b.n	8004b28 <_dtoa_r+0x540>
 8005240:	f04f 0800 	mov.w	r8, #0
 8005244:	4646      	mov	r6, r8
 8005246:	e710      	b.n	800506a <_dtoa_r+0xa82>
 8005248:	4939      	ldr	r1, [pc, #228]	; (8005330 <_dtoa_r+0xd48>)
 800524a:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
 800524e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8005252:	4632      	mov	r2, r6
 8005254:	463b      	mov	r3, r7
 8005256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800525a:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800525e:	f001 fe5b 	bl	8006f18 <__aeabi_dmul>
 8005262:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8005266:	4659      	mov	r1, fp
 8005268:	4650      	mov	r0, sl
 800526a:	f002 f8ef 	bl	800744c <__aeabi_d2iz>
 800526e:	4605      	mov	r5, r0
 8005270:	f001 fdec 	bl	8006e4c <__aeabi_i2d>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4650      	mov	r0, sl
 800527a:	4659      	mov	r1, fp
 800527c:	f001 fc98 	bl	8006bb0 <__aeabi_dsub>
 8005280:	460f      	mov	r7, r1
 8005282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005284:	3530      	adds	r5, #48	; 0x30
 8005286:	f1b8 0f01 	cmp.w	r8, #1
 800528a:	4606      	mov	r6, r0
 800528c:	700d      	strb	r5, [r1, #0]
 800528e:	f101 0b01 	add.w	fp, r1, #1
 8005292:	d021      	beq.n	80052d8 <_dtoa_r+0xcf0>
 8005294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005296:	1e4b      	subs	r3, r1, #1
 8005298:	460d      	mov	r5, r1
 800529a:	eb03 0a08 	add.w	sl, r3, r8
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	2200      	movs	r2, #0
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <_dtoa_r+0xd50>)
 80052a6:	f001 fe37 	bl	8006f18 <__aeabi_dmul>
 80052aa:	460f      	mov	r7, r1
 80052ac:	4606      	mov	r6, r0
 80052ae:	f002 f8cd 	bl	800744c <__aeabi_d2iz>
 80052b2:	4680      	mov	r8, r0
 80052b4:	f001 fdca 	bl	8006e4c <__aeabi_i2d>
 80052b8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f001 fc74 	bl	8006bb0 <__aeabi_dsub>
 80052c8:	f805 8f01 	strb.w	r8, [r5, #1]!
 80052cc:	4555      	cmp	r5, sl
 80052ce:	d1e8      	bne.n	80052a2 <_dtoa_r+0xcba>
 80052d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052d2:	4606      	mov	r6, r0
 80052d4:	460f      	mov	r7, r1
 80052d6:	4493      	add	fp, r2
 80052d8:	2200      	movs	r2, #0
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <_dtoa_r+0xd54>)
 80052dc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80052e0:	f001 fc68 	bl	8006bb4 <__adddf3>
 80052e4:	4632      	mov	r2, r6
 80052e6:	463b      	mov	r3, r7
 80052e8:	f002 f888 	bl	80073fc <__aeabi_dcmplt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d05b      	beq.n	80053a8 <_dtoa_r+0xdc0>
 80052f0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80052f2:	9608      	str	r6, [sp, #32]
 80052f4:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 80052f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052fa:	f7ff bb3f 	b.w	800497c <_dtoa_r+0x394>
 80052fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005300:	2300      	movs	r3, #0
 8005302:	ebc9 0506 	rsb	r5, r9, r6
 8005306:	f7ff bb6a 	b.w	80049de <_dtoa_r+0x3f6>
 800530a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800530c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800530e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005310:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005314:	f7ff bb63 	b.w	80049de <_dtoa_r+0x3f6>
 8005318:	4657      	mov	r7, sl
 800531a:	f7ff bbab 	b.w	8004a74 <_dtoa_r+0x48c>
 800531e:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8005322:	f04f 0802 	mov.w	r8, #2
 8005326:	e543      	b.n	8004db0 <_dtoa_r+0x7c8>
 8005328:	401c0000 	.word	0x401c0000
 800532c:	40140000 	.word	0x40140000
 8005330:	08007ca0 	.word	0x08007ca0
 8005334:	08007d68 	.word	0x08007d68
 8005338:	40240000 	.word	0x40240000
 800533c:	3fe00000 	.word	0x3fe00000
 8005340:	f1b9 0f00 	cmp.w	r9, #0
 8005344:	f43f aea9 	beq.w	800509a <_dtoa_r+0xab2>
 8005348:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800534a:	2e00      	cmp	r6, #0
 800534c:	f77f af19 	ble.w	8005182 <_dtoa_r+0xb9a>
 8005350:	2200      	movs	r2, #0
 8005352:	4b38      	ldr	r3, [pc, #224]	; (8005434 <_dtoa_r+0xe4c>)
 8005354:	4650      	mov	r0, sl
 8005356:	4659      	mov	r1, fp
 8005358:	f001 fdde 	bl	8006f18 <__aeabi_dmul>
 800535c:	4682      	mov	sl, r0
 800535e:	f108 0001 	add.w	r0, r8, #1
 8005362:	468b      	mov	fp, r1
 8005364:	f001 fd72 	bl	8006e4c <__aeabi_i2d>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f001 fdd2 	bl	8006f18 <__aeabi_dmul>
 8005374:	2200      	movs	r2, #0
 8005376:	4b30      	ldr	r3, [pc, #192]	; (8005438 <_dtoa_r+0xe50>)
 8005378:	f001 fc1c 	bl	8006bb4 <__adddf3>
 800537c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005380:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8005384:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005388:	4606      	mov	r6, r0
 800538a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800538e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005392:	e52d      	b.n	8004df0 <_dtoa_r+0x808>
 8005394:	9b07      	ldr	r3, [sp, #28]
 8005396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005398:	2239      	movs	r2, #57	; 0x39
 800539a:	4635      	mov	r5, r6
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	463e      	mov	r6, r7
 80053a0:	f103 0b01 	add.w	fp, r3, #1
 80053a4:	f7ff bbd6 	b.w	8004b54 <_dtoa_r+0x56c>
 80053a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80053ac:	2000      	movs	r0, #0
 80053ae:	4923      	ldr	r1, [pc, #140]	; (800543c <_dtoa_r+0xe54>)
 80053b0:	f001 fbfe 	bl	8006bb0 <__aeabi_dsub>
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	f002 f83e 	bl	8007438 <__aeabi_dcmpgt>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f43f aee0 	beq.w	8005182 <_dtoa_r+0xb9a>
 80053c2:	465b      	mov	r3, fp
 80053c4:	469b      	mov	fp, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80053cc:	2a30      	cmp	r2, #48	; 0x30
 80053ce:	d0f9      	beq.n	80053c4 <_dtoa_r+0xddc>
 80053d0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80053d2:	9608      	str	r6, [sp, #32]
 80053d4:	f7ff bad9 	b.w	800498a <_dtoa_r+0x3a2>
 80053d8:	4645      	mov	r5, r8
 80053da:	4654      	mov	r4, sl
 80053dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80053de:	9608      	str	r6, [sp, #32]
 80053e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053e2:	f7ff bacb 	b.w	800497c <_dtoa_r+0x394>
 80053e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80053ee:	46d9      	mov	r9, fp
 80053f0:	d0d0      	beq.n	8005394 <_dtoa_r+0xdac>
 80053f2:	9b06      	ldr	r3, [sp, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f73f aeaa 	bgt.w	800514e <_dtoa_r+0xb66>
 80053fa:	e6aa      	b.n	8005152 <_dtoa_r+0xb6a>
 80053fc:	f47f aea9 	bne.w	8005152 <_dtoa_r+0xb6a>
 8005400:	f01a 0f01 	tst.w	sl, #1
 8005404:	f43f aea5 	beq.w	8005152 <_dtoa_r+0xb6a>
 8005408:	e69d      	b.n	8005146 <_dtoa_r+0xb5e>
 800540a:	4631      	mov	r1, r6
 800540c:	4620      	mov	r0, r4
 800540e:	220a      	movs	r2, #10
 8005410:	2300      	movs	r3, #0
 8005412:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8005416:	f000 fb41 	bl	8005a9c <__multadd>
 800541a:	4606      	mov	r6, r0
 800541c:	f7ff bb5b 	b.w	8004ad6 <_dtoa_r+0x4ee>
 8005420:	f04f 0802 	mov.w	r8, #2
 8005424:	e4c4      	b.n	8004db0 <_dtoa_r+0x7c8>
 8005426:	f43f ab40 	beq.w	8004aaa <_dtoa_r+0x4c2>
 800542a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800542e:	f7ff bbd4 	b.w	8004bda <_dtoa_r+0x5f2>
 8005432:	bf00      	nop
 8005434:	40240000 	.word	0x40240000
 8005438:	401c0000 	.word	0x401c0000
 800543c:	3fe00000 	.word	0x3fe00000

08005440 <_fclose_r>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	460c      	mov	r4, r1
 8005444:	4605      	mov	r5, r0
 8005446:	b131      	cbz	r1, 8005456 <_fclose_r+0x16>
 8005448:	b110      	cbz	r0, 8005450 <_fclose_r+0x10>
 800544a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02f      	beq.n	80054b0 <_fclose_r+0x70>
 8005450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005454:	b90b      	cbnz	r3, 800545a <_fclose_r+0x1a>
 8005456:	2000      	movs	r0, #0
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	4628      	mov	r0, r5
 800545c:	4621      	mov	r1, r4
 800545e:	f000 f8e1 	bl	8005624 <_fflush_r>
 8005462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005464:	4606      	mov	r6, r0
 8005466:	b133      	cbz	r3, 8005476 <_fclose_r+0x36>
 8005468:	4628      	mov	r0, r5
 800546a:	69e1      	ldr	r1, [r4, #28]
 800546c:	4798      	blx	r3
 800546e:	2800      	cmp	r0, #0
 8005470:	bfb8      	it	lt
 8005472:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	d41c      	bmi.n	80054b6 <_fclose_r+0x76>
 800547c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800547e:	b141      	cbz	r1, 8005492 <_fclose_r+0x52>
 8005480:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <_fclose_r+0x4e>
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f92f 	bl	80056ec <_free_r>
 800548e:	2300      	movs	r3, #0
 8005490:	6323      	str	r3, [r4, #48]	; 0x30
 8005492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005494:	b121      	cbz	r1, 80054a0 <_fclose_r+0x60>
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f928 	bl	80056ec <_free_r>
 800549c:	2300      	movs	r3, #0
 800549e:	6463      	str	r3, [r4, #68]	; 0x44
 80054a0:	f7fc fef2 	bl	8002288 <__sfp_lock_acquire>
 80054a4:	2300      	movs	r3, #0
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	f7fc fef0 	bl	800228c <__sfp_lock_release>
 80054ac:	4630      	mov	r0, r6
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f7fc fe70 	bl	8002194 <__sinit>
 80054b4:	e7cc      	b.n	8005450 <_fclose_r+0x10>
 80054b6:	4628      	mov	r0, r5
 80054b8:	6921      	ldr	r1, [r4, #16]
 80054ba:	f000 f917 	bl	80056ec <_free_r>
 80054be:	e7dd      	b.n	800547c <_fclose_r+0x3c>

080054c0 <fclose>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <fclose+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f7ff bfbb 	b.w	8005440 <_fclose_r>
 80054ca:	bf00      	nop
 80054cc:	20000450 	.word	0x20000450

080054d0 <__sflush_r>:
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d8:	460d      	mov	r5, r1
 80054da:	0711      	lsls	r1, r2, #28
 80054dc:	4680      	mov	r8, r0
 80054de:	d43c      	bmi.n	800555a <__sflush_r+0x8a>
 80054e0:	686a      	ldr	r2, [r5, #4]
 80054e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	81ab      	strh	r3, [r5, #12]
 80054ea:	dd59      	ble.n	80055a0 <__sflush_r+0xd0>
 80054ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80054ee:	2c00      	cmp	r4, #0
 80054f0:	d04b      	beq.n	800558a <__sflush_r+0xba>
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054f8:	2100      	movs	r1, #0
 80054fa:	b292      	uxth	r2, r2
 80054fc:	f8d8 6000 	ldr.w	r6, [r8]
 8005500:	f8c8 1000 	str.w	r1, [r8]
 8005504:	2a00      	cmp	r2, #0
 8005506:	d04f      	beq.n	80055a8 <__sflush_r+0xd8>
 8005508:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800550a:	075f      	lsls	r7, r3, #29
 800550c:	d505      	bpl.n	800551a <__sflush_r+0x4a>
 800550e:	6869      	ldr	r1, [r5, #4]
 8005510:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005512:	1a52      	subs	r2, r2, r1
 8005514:	b10b      	cbz	r3, 800551a <__sflush_r+0x4a>
 8005516:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005518:	1ad2      	subs	r2, r2, r3
 800551a:	4640      	mov	r0, r8
 800551c:	69e9      	ldr	r1, [r5, #28]
 800551e:	2300      	movs	r3, #0
 8005520:	47a0      	blx	r4
 8005522:	1c44      	adds	r4, r0, #1
 8005524:	d04a      	beq.n	80055bc <__sflush_r+0xec>
 8005526:	89aa      	ldrh	r2, [r5, #12]
 8005528:	692b      	ldr	r3, [r5, #16]
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8005530:	b29b      	uxth	r3, r3
 8005532:	2200      	movs	r2, #0
 8005534:	606a      	str	r2, [r5, #4]
 8005536:	04da      	lsls	r2, r3, #19
 8005538:	81ab      	strh	r3, [r5, #12]
 800553a:	d44c      	bmi.n	80055d6 <__sflush_r+0x106>
 800553c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800553e:	f8c8 6000 	str.w	r6, [r8]
 8005542:	b311      	cbz	r1, 800558a <__sflush_r+0xba>
 8005544:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__sflush_r+0x82>
 800554c:	4640      	mov	r0, r8
 800554e:	f000 f8cd 	bl	80056ec <_free_r>
 8005552:	2000      	movs	r0, #0
 8005554:	6328      	str	r0, [r5, #48]	; 0x30
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	692e      	ldr	r6, [r5, #16]
 800555c:	b1ae      	cbz	r6, 800558a <__sflush_r+0xba>
 800555e:	682c      	ldr	r4, [r5, #0]
 8005560:	602e      	str	r6, [r5, #0]
 8005562:	0791      	lsls	r1, r2, #30
 8005564:	bf0c      	ite	eq
 8005566:	696b      	ldreq	r3, [r5, #20]
 8005568:	2300      	movne	r3, #0
 800556a:	1ba4      	subs	r4, r4, r6
 800556c:	60ab      	str	r3, [r5, #8]
 800556e:	e00a      	b.n	8005586 <__sflush_r+0xb6>
 8005570:	4632      	mov	r2, r6
 8005572:	4623      	mov	r3, r4
 8005574:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005576:	69e9      	ldr	r1, [r5, #28]
 8005578:	4640      	mov	r0, r8
 800557a:	47b8      	blx	r7
 800557c:	2800      	cmp	r0, #0
 800557e:	ebc0 0404 	rsb	r4, r0, r4
 8005582:	4406      	add	r6, r0
 8005584:	dd04      	ble.n	8005590 <__sflush_r+0xc0>
 8005586:	2c00      	cmp	r4, #0
 8005588:	dcf2      	bgt.n	8005570 <__sflush_r+0xa0>
 800558a:	2000      	movs	r0, #0
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	89ab      	ldrh	r3, [r5, #12]
 8005592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005596:	81ab      	strh	r3, [r5, #12]
 8005598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	dca2      	bgt.n	80054ec <__sflush_r+0x1c>
 80055a6:	e7f0      	b.n	800558a <__sflush_r+0xba>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4640      	mov	r0, r8
 80055ac:	69e9      	ldr	r1, [r5, #28]
 80055ae:	47a0      	blx	r4
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	4602      	mov	r2, r0
 80055b4:	d01e      	beq.n	80055f4 <__sflush_r+0x124>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80055ba:	e7a6      	b.n	800550a <__sflush_r+0x3a>
 80055bc:	f8d8 3000 	ldr.w	r3, [r8]
 80055c0:	b95b      	cbnz	r3, 80055da <__sflush_r+0x10a>
 80055c2:	89a9      	ldrh	r1, [r5, #12]
 80055c4:	606b      	str	r3, [r5, #4]
 80055c6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	692a      	ldr	r2, [r5, #16]
 80055ce:	81ab      	strh	r3, [r5, #12]
 80055d0:	04db      	lsls	r3, r3, #19
 80055d2:	602a      	str	r2, [r5, #0]
 80055d4:	d5b2      	bpl.n	800553c <__sflush_r+0x6c>
 80055d6:	6528      	str	r0, [r5, #80]	; 0x50
 80055d8:	e7b0      	b.n	800553c <__sflush_r+0x6c>
 80055da:	2b1d      	cmp	r3, #29
 80055dc:	d001      	beq.n	80055e2 <__sflush_r+0x112>
 80055de:	2b16      	cmp	r3, #22
 80055e0:	d119      	bne.n	8005616 <__sflush_r+0x146>
 80055e2:	89aa      	ldrh	r2, [r5, #12]
 80055e4:	692b      	ldr	r3, [r5, #16]
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	2300      	movs	r3, #0
 80055ee:	81aa      	strh	r2, [r5, #12]
 80055f0:	606b      	str	r3, [r5, #4]
 80055f2:	e7a3      	b.n	800553c <__sflush_r+0x6c>
 80055f4:	f8d8 3000 	ldr.w	r3, [r8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0dc      	beq.n	80055b6 <__sflush_r+0xe6>
 80055fc:	2b1d      	cmp	r3, #29
 80055fe:	d007      	beq.n	8005610 <__sflush_r+0x140>
 8005600:	2b16      	cmp	r3, #22
 8005602:	d005      	beq.n	8005610 <__sflush_r+0x140>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560a:	81ab      	strh	r3, [r5, #12]
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	f8c8 6000 	str.w	r6, [r8]
 8005614:	e7b9      	b.n	800558a <__sflush_r+0xba>
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561c:	81ab      	strh	r3, [r5, #12]
 800561e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005622:	bf00      	nop

08005624 <_fflush_r>:
 8005624:	b510      	push	{r4, lr}
 8005626:	4604      	mov	r4, r0
 8005628:	b082      	sub	sp, #8
 800562a:	b108      	cbz	r0, 8005630 <_fflush_r+0xc>
 800562c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800562e:	b153      	cbz	r3, 8005646 <_fflush_r+0x22>
 8005630:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005634:	b908      	cbnz	r0, 800563a <_fflush_r+0x16>
 8005636:	b002      	add	sp, #8
 8005638:	bd10      	pop	{r4, pc}
 800563a:	4620      	mov	r0, r4
 800563c:	b002      	add	sp, #8
 800563e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005642:	f7ff bf45 	b.w	80054d0 <__sflush_r>
 8005646:	9101      	str	r1, [sp, #4]
 8005648:	f7fc fda4 	bl	8002194 <__sinit>
 800564c:	9901      	ldr	r1, [sp, #4]
 800564e:	e7ef      	b.n	8005630 <_fflush_r+0xc>

08005650 <_malloc_trim_r>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	4d23      	ldr	r5, [pc, #140]	; (80056e0 <_malloc_trim_r+0x90>)
 8005654:	460f      	mov	r7, r1
 8005656:	4604      	mov	r4, r0
 8005658:	f7fd f9c8 	bl	80029ec <__malloc_lock>
 800565c:	68ab      	ldr	r3, [r5, #8]
 800565e:	685e      	ldr	r6, [r3, #4]
 8005660:	f026 0603 	bic.w	r6, r6, #3
 8005664:	1bf1      	subs	r1, r6, r7
 8005666:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800566a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800566e:	f021 010f 	bic.w	r1, r1, #15
 8005672:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8005676:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800567a:	db07      	blt.n	800568c <_malloc_trim_r+0x3c>
 800567c:	4620      	mov	r0, r4
 800567e:	2100      	movs	r1, #0
 8005680:	f7fd f9cc 	bl	8002a1c <_sbrk_r>
 8005684:	68ab      	ldr	r3, [r5, #8]
 8005686:	4433      	add	r3, r6
 8005688:	4298      	cmp	r0, r3
 800568a:	d004      	beq.n	8005696 <_malloc_trim_r+0x46>
 800568c:	4620      	mov	r0, r4
 800568e:	f7fd f9af 	bl	80029f0 <__malloc_unlock>
 8005692:	2000      	movs	r0, #0
 8005694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005696:	4620      	mov	r0, r4
 8005698:	4279      	negs	r1, r7
 800569a:	f7fd f9bf 	bl	8002a1c <_sbrk_r>
 800569e:	3001      	adds	r0, #1
 80056a0:	d00d      	beq.n	80056be <_malloc_trim_r+0x6e>
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <_malloc_trim_r+0x94>)
 80056a4:	68aa      	ldr	r2, [r5, #8]
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	1bf6      	subs	r6, r6, r7
 80056aa:	f046 0601 	orr.w	r6, r6, #1
 80056ae:	4620      	mov	r0, r4
 80056b0:	1bc9      	subs	r1, r1, r7
 80056b2:	6056      	str	r6, [r2, #4]
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	f7fd f99b 	bl	80029f0 <__malloc_unlock>
 80056ba:	2001      	movs	r0, #1
 80056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056be:	4620      	mov	r0, r4
 80056c0:	2100      	movs	r1, #0
 80056c2:	f7fd f9ab 	bl	8002a1c <_sbrk_r>
 80056c6:	68ab      	ldr	r3, [r5, #8]
 80056c8:	1ac2      	subs	r2, r0, r3
 80056ca:	2a0f      	cmp	r2, #15
 80056cc:	ddde      	ble.n	800568c <_malloc_trim_r+0x3c>
 80056ce:	4d06      	ldr	r5, [pc, #24]	; (80056e8 <_malloc_trim_r+0x98>)
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <_malloc_trim_r+0x94>)
 80056d2:	682d      	ldr	r5, [r5, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	1b40      	subs	r0, r0, r5
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	6008      	str	r0, [r1, #0]
 80056de:	e7d5      	b.n	800568c <_malloc_trim_r+0x3c>
 80056e0:	20000454 	.word	0x20000454
 80056e4:	20008af8 	.word	0x20008af8
 80056e8:	20000860 	.word	0x20000860

080056ec <_free_r>:
 80056ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	460d      	mov	r5, r1
 80056f2:	4606      	mov	r6, r0
 80056f4:	2900      	cmp	r1, #0
 80056f6:	d055      	beq.n	80057a4 <_free_r+0xb8>
 80056f8:	f7fd f978 	bl	80029ec <__malloc_lock>
 80056fc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8005700:	f8df c174 	ldr.w	ip, [pc, #372]	; 8005878 <_free_r+0x18c>
 8005704:	f021 0301 	bic.w	r3, r1, #1
 8005708:	f1a5 0408 	sub.w	r4, r5, #8
 800570c:	18e2      	adds	r2, r4, r3
 800570e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8005712:	6857      	ldr	r7, [r2, #4]
 8005714:	4290      	cmp	r0, r2
 8005716:	f027 0703 	bic.w	r7, r7, #3
 800571a:	d069      	beq.n	80057f0 <_free_r+0x104>
 800571c:	f011 0101 	ands.w	r1, r1, #1
 8005720:	6057      	str	r7, [r2, #4]
 8005722:	d032      	beq.n	800578a <_free_r+0x9e>
 8005724:	2100      	movs	r1, #0
 8005726:	19d0      	adds	r0, r2, r7
 8005728:	6840      	ldr	r0, [r0, #4]
 800572a:	07c0      	lsls	r0, r0, #31
 800572c:	d406      	bmi.n	800573c <_free_r+0x50>
 800572e:	443b      	add	r3, r7
 8005730:	6890      	ldr	r0, [r2, #8]
 8005732:	2900      	cmp	r1, #0
 8005734:	d04e      	beq.n	80057d4 <_free_r+0xe8>
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	60c2      	str	r2, [r0, #12]
 800573a:	6090      	str	r0, [r2, #8]
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	6062      	str	r2, [r4, #4]
 8005742:	50e3      	str	r3, [r4, r3]
 8005744:	b9e1      	cbnz	r1, 8005780 <_free_r+0x94>
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	d32d      	bcc.n	80057a8 <_free_r+0xbc>
 800574c:	0a5a      	lsrs	r2, r3, #9
 800574e:	2a04      	cmp	r2, #4
 8005750:	d86a      	bhi.n	8005828 <_free_r+0x13c>
 8005752:	0998      	lsrs	r0, r3, #6
 8005754:	3038      	adds	r0, #56	; 0x38
 8005756:	0041      	lsls	r1, r0, #1
 8005758:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800575c:	4946      	ldr	r1, [pc, #280]	; (8005878 <_free_r+0x18c>)
 800575e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8005762:	4562      	cmp	r2, ip
 8005764:	d066      	beq.n	8005834 <_free_r+0x148>
 8005766:	6851      	ldr	r1, [r2, #4]
 8005768:	f021 0103 	bic.w	r1, r1, #3
 800576c:	428b      	cmp	r3, r1
 800576e:	d202      	bcs.n	8005776 <_free_r+0x8a>
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	4594      	cmp	ip, r2
 8005774:	d1f7      	bne.n	8005766 <_free_r+0x7a>
 8005776:	68d3      	ldr	r3, [r2, #12]
 8005778:	60e3      	str	r3, [r4, #12]
 800577a:	60a2      	str	r2, [r4, #8]
 800577c:	609c      	str	r4, [r3, #8]
 800577e:	60d4      	str	r4, [r2, #12]
 8005780:	4630      	mov	r0, r6
 8005782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005786:	f7fd b933 	b.w	80029f0 <__malloc_unlock>
 800578a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800578e:	1b64      	subs	r4, r4, r5
 8005790:	f10c 0808 	add.w	r8, ip, #8
 8005794:	68a0      	ldr	r0, [r4, #8]
 8005796:	4540      	cmp	r0, r8
 8005798:	442b      	add	r3, r5
 800579a:	d043      	beq.n	8005824 <_free_r+0x138>
 800579c:	68e5      	ldr	r5, [r4, #12]
 800579e:	60c5      	str	r5, [r0, #12]
 80057a0:	60a8      	str	r0, [r5, #8]
 80057a2:	e7c0      	b.n	8005726 <_free_r+0x3a>
 80057a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 80057ae:	2501      	movs	r5, #1
 80057b0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80057b4:	6891      	ldr	r1, [r2, #8]
 80057b6:	60a1      	str	r1, [r4, #8]
 80057b8:	109b      	asrs	r3, r3, #2
 80057ba:	fa05 f303 	lsl.w	r3, r5, r3
 80057be:	4318      	orrs	r0, r3
 80057c0:	60e2      	str	r2, [r4, #12]
 80057c2:	f8cc 0004 	str.w	r0, [ip, #4]
 80057c6:	6094      	str	r4, [r2, #8]
 80057c8:	4630      	mov	r0, r6
 80057ca:	60cc      	str	r4, [r1, #12]
 80057cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d0:	f7fd b90e 	b.w	80029f0 <__malloc_unlock>
 80057d4:	4d29      	ldr	r5, [pc, #164]	; (800587c <_free_r+0x190>)
 80057d6:	42a8      	cmp	r0, r5
 80057d8:	d1ad      	bne.n	8005736 <_free_r+0x4a>
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	f8cc 4014 	str.w	r4, [ip, #20]
 80057e2:	f8cc 4010 	str.w	r4, [ip, #16]
 80057e6:	60e0      	str	r0, [r4, #12]
 80057e8:	60a0      	str	r0, [r4, #8]
 80057ea:	6062      	str	r2, [r4, #4]
 80057ec:	50e3      	str	r3, [r4, r3]
 80057ee:	e7c7      	b.n	8005780 <_free_r+0x94>
 80057f0:	441f      	add	r7, r3
 80057f2:	07cb      	lsls	r3, r1, #31
 80057f4:	d407      	bmi.n	8005806 <_free_r+0x11a>
 80057f6:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80057fa:	1ae4      	subs	r4, r4, r3
 80057fc:	441f      	add	r7, r3
 80057fe:	68a2      	ldr	r2, [r4, #8]
 8005800:	68e3      	ldr	r3, [r4, #12]
 8005802:	60d3      	str	r3, [r2, #12]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <_free_r+0x194>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f047 0201 	orr.w	r2, r7, #1
 800580e:	429f      	cmp	r7, r3
 8005810:	6062      	str	r2, [r4, #4]
 8005812:	f8cc 4008 	str.w	r4, [ip, #8]
 8005816:	d3b3      	bcc.n	8005780 <_free_r+0x94>
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <_free_r+0x198>)
 800581a:	4630      	mov	r0, r6
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	f7ff ff17 	bl	8005650 <_malloc_trim_r>
 8005822:	e7ad      	b.n	8005780 <_free_r+0x94>
 8005824:	2101      	movs	r1, #1
 8005826:	e77e      	b.n	8005726 <_free_r+0x3a>
 8005828:	2a14      	cmp	r2, #20
 800582a:	d80c      	bhi.n	8005846 <_free_r+0x15a>
 800582c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005830:	0041      	lsls	r1, r0, #1
 8005832:	e791      	b.n	8005758 <_free_r+0x6c>
 8005834:	684b      	ldr	r3, [r1, #4]
 8005836:	1080      	asrs	r0, r0, #2
 8005838:	2501      	movs	r5, #1
 800583a:	fa05 f000 	lsl.w	r0, r5, r0
 800583e:	4303      	orrs	r3, r0
 8005840:	604b      	str	r3, [r1, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	e798      	b.n	8005778 <_free_r+0x8c>
 8005846:	2a54      	cmp	r2, #84	; 0x54
 8005848:	d803      	bhi.n	8005852 <_free_r+0x166>
 800584a:	0b18      	lsrs	r0, r3, #12
 800584c:	306e      	adds	r0, #110	; 0x6e
 800584e:	0041      	lsls	r1, r0, #1
 8005850:	e782      	b.n	8005758 <_free_r+0x6c>
 8005852:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005856:	d803      	bhi.n	8005860 <_free_r+0x174>
 8005858:	0bd8      	lsrs	r0, r3, #15
 800585a:	3077      	adds	r0, #119	; 0x77
 800585c:	0041      	lsls	r1, r0, #1
 800585e:	e77b      	b.n	8005758 <_free_r+0x6c>
 8005860:	f240 5154 	movw	r1, #1364	; 0x554
 8005864:	428a      	cmp	r2, r1
 8005866:	d803      	bhi.n	8005870 <_free_r+0x184>
 8005868:	0c98      	lsrs	r0, r3, #18
 800586a:	307c      	adds	r0, #124	; 0x7c
 800586c:	0041      	lsls	r1, r0, #1
 800586e:	e773      	b.n	8005758 <_free_r+0x6c>
 8005870:	21fc      	movs	r1, #252	; 0xfc
 8005872:	207e      	movs	r0, #126	; 0x7e
 8005874:	e770      	b.n	8005758 <_free_r+0x6c>
 8005876:	bf00      	nop
 8005878:	20000454 	.word	0x20000454
 800587c:	2000045c 	.word	0x2000045c
 8005880:	2000085c 	.word	0x2000085c
 8005884:	20008af4 	.word	0x20008af4

08005888 <__locale_charset>:
 8005888:	4800      	ldr	r0, [pc, #0]	; (800588c <__locale_charset+0x4>)
 800588a:	4770      	bx	lr
 800588c:	2000089c 	.word	0x2000089c

08005890 <__locale_mb_cur_max>:
 8005890:	4b01      	ldr	r3, [pc, #4]	; (8005898 <__locale_mb_cur_max+0x8>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	200008bc 	.word	0x200008bc

0800589c <_localeconv_r>:
 800589c:	4800      	ldr	r0, [pc, #0]	; (80058a0 <_localeconv_r+0x4>)
 800589e:	4770      	bx	lr
 80058a0:	20000864 	.word	0x20000864

080058a4 <_lseek_r>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4c08      	ldr	r4, [pc, #32]	; (80058c8 <_lseek_r+0x24>)
 80058a8:	4606      	mov	r6, r0
 80058aa:	2500      	movs	r5, #0
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	461a      	mov	r2, r3
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	f7fa ffa8 	bl	8000808 <_lseek>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d000      	beq.n	80058be <_lseek_r+0x1a>
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0fb      	beq.n	80058bc <_lseek_r+0x18>
 80058c4:	6033      	str	r3, [r6, #0]
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	20008b20 	.word	0x20008b20

080058cc <__smakebuf_r>:
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ce:	898b      	ldrh	r3, [r1, #12]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	0796      	lsls	r6, r2, #30
 80058d4:	b091      	sub	sp, #68	; 0x44
 80058d6:	460c      	mov	r4, r1
 80058d8:	4605      	mov	r5, r0
 80058da:	d437      	bmi.n	800594c <__smakebuf_r+0x80>
 80058dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e0:	2900      	cmp	r1, #0
 80058e2:	db17      	blt.n	8005914 <__smakebuf_r+0x48>
 80058e4:	aa01      	add	r2, sp, #4
 80058e6:	f000 fcc3 	bl	8006270 <_fstat_r>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	db10      	blt.n	8005910 <__smakebuf_r+0x44>
 80058ee:	9b02      	ldr	r3, [sp, #8]
 80058f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80058f4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 80058f8:	424f      	negs	r7, r1
 80058fa:	414f      	adcs	r7, r1
 80058fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005900:	d02c      	beq.n	800595c <__smakebuf_r+0x90>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800590e:	e00b      	b.n	8005928 <__smakebuf_r+0x5c>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	b29a      	uxth	r2, r3
 8005914:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	bf14      	ite	ne
 8005920:	2640      	movne	r6, #64	; 0x40
 8005922:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8005926:	2700      	movs	r7, #0
 8005928:	4628      	mov	r0, r5
 800592a:	4631      	mov	r1, r6
 800592c:	f7fc fcde 	bl	80022ec <_malloc_r>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	2800      	cmp	r0, #0
 8005934:	d029      	beq.n	800598a <__smakebuf_r+0xbe>
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <__smakebuf_r+0xd8>)
 8005938:	63ea      	str	r2, [r5, #60]	; 0x3c
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	6020      	str	r0, [r4, #0]
 8005942:	6120      	str	r0, [r4, #16]
 8005944:	6166      	str	r6, [r4, #20]
 8005946:	b9a7      	cbnz	r7, 8005972 <__smakebuf_r+0xa6>
 8005948:	b011      	add	sp, #68	; 0x44
 800594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8005950:	2201      	movs	r2, #1
 8005952:	600b      	str	r3, [r1, #0]
 8005954:	610b      	str	r3, [r1, #16]
 8005956:	614a      	str	r2, [r1, #20]
 8005958:	b011      	add	sp, #68	; 0x44
 800595a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595c:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <__smakebuf_r+0xdc>)
 800595e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005960:	4293      	cmp	r3, r2
 8005962:	d1ce      	bne.n	8005902 <__smakebuf_r+0x36>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800596a:	4333      	orrs	r3, r6
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005970:	e7da      	b.n	8005928 <__smakebuf_r+0x5c>
 8005972:	4628      	mov	r0, r5
 8005974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005978:	f000 fe1a 	bl	80065b0 <_isatty_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	d0e3      	beq.n	8005948 <__smakebuf_r+0x7c>
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	e7de      	b.n	8005948 <__smakebuf_r+0x7c>
 800598a:	059a      	lsls	r2, r3, #22
 800598c:	d4dc      	bmi.n	8005948 <__smakebuf_r+0x7c>
 800598e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005992:	f043 0302 	orr.w	r3, r3, #2
 8005996:	2101      	movs	r1, #1
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	6122      	str	r2, [r4, #16]
 800599e:	6161      	str	r1, [r4, #20]
 80059a0:	e7d2      	b.n	8005948 <__smakebuf_r+0x7c>
 80059a2:	bf00      	nop
 80059a4:	08002189 	.word	0x08002189
 80059a8:	08002b31 	.word	0x08002b31

080059ac <memchr>:
 80059ac:	0783      	lsls	r3, r0, #30
 80059ae:	b470      	push	{r4, r5, r6}
 80059b0:	b2c9      	uxtb	r1, r1
 80059b2:	d03f      	beq.n	8005a34 <memchr+0x88>
 80059b4:	1e54      	subs	r4, r2, #1
 80059b6:	b32a      	cbz	r2, 8005a04 <memchr+0x58>
 80059b8:	7803      	ldrb	r3, [r0, #0]
 80059ba:	428b      	cmp	r3, r1
 80059bc:	d023      	beq.n	8005a06 <memchr+0x5a>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	e004      	b.n	80059cc <memchr+0x20>
 80059c2:	b1fc      	cbz	r4, 8005a04 <memchr+0x58>
 80059c4:	7804      	ldrb	r4, [r0, #0]
 80059c6:	428c      	cmp	r4, r1
 80059c8:	d01d      	beq.n	8005a06 <memchr+0x5a>
 80059ca:	4614      	mov	r4, r2
 80059cc:	f013 0f03 	tst.w	r3, #3
 80059d0:	4618      	mov	r0, r3
 80059d2:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 80059d6:	f103 0301 	add.w	r3, r3, #1
 80059da:	d1f2      	bne.n	80059c2 <memchr+0x16>
 80059dc:	2c03      	cmp	r4, #3
 80059de:	d814      	bhi.n	8005a0a <memchr+0x5e>
 80059e0:	1e65      	subs	r5, r4, #1
 80059e2:	b34c      	cbz	r4, 8005a38 <memchr+0x8c>
 80059e4:	7803      	ldrb	r3, [r0, #0]
 80059e6:	428b      	cmp	r3, r1
 80059e8:	d00d      	beq.n	8005a06 <memchr+0x5a>
 80059ea:	1c42      	adds	r2, r0, #1
 80059ec:	2300      	movs	r3, #0
 80059ee:	e002      	b.n	80059f6 <memchr+0x4a>
 80059f0:	7804      	ldrb	r4, [r0, #0]
 80059f2:	428c      	cmp	r4, r1
 80059f4:	d007      	beq.n	8005a06 <memchr+0x5a>
 80059f6:	42ab      	cmp	r3, r5
 80059f8:	4610      	mov	r0, r2
 80059fa:	f103 0301 	add.w	r3, r3, #1
 80059fe:	f102 0201 	add.w	r2, r2, #1
 8005a02:	d1f5      	bne.n	80059f0 <memchr+0x44>
 8005a04:	2000      	movs	r0, #0
 8005a06:	bc70      	pop	{r4, r5, r6}
 8005a08:	4770      	bx	lr
 8005a0a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005a0e:	4603      	mov	r3, r0
 8005a10:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	3304      	adds	r3, #4
 8005a18:	6802      	ldr	r2, [r0, #0]
 8005a1a:	4072      	eors	r2, r6
 8005a1c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8005a20:	ea25 0202 	bic.w	r2, r5, r2
 8005a24:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005a28:	d1da      	bne.n	80059e0 <memchr+0x34>
 8005a2a:	3c04      	subs	r4, #4
 8005a2c:	2c03      	cmp	r4, #3
 8005a2e:	4618      	mov	r0, r3
 8005a30:	d8f0      	bhi.n	8005a14 <memchr+0x68>
 8005a32:	e7d5      	b.n	80059e0 <memchr+0x34>
 8005a34:	4614      	mov	r4, r2
 8005a36:	e7d1      	b.n	80059dc <memchr+0x30>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	e7e4      	b.n	8005a06 <memchr+0x5a>

08005a3c <_Balloc>:
 8005a3c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005a3e:	b570      	push	{r4, r5, r6, lr}
 8005a40:	4605      	mov	r5, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	b14a      	cbz	r2, 8005a5a <_Balloc+0x1e>
 8005a46:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8005a4a:	b180      	cbz	r0, 8005a6e <_Balloc+0x32>
 8005a4c:	6801      	ldr	r1, [r0, #0]
 8005a4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a52:	2200      	movs	r2, #0
 8005a54:	6102      	str	r2, [r0, #16]
 8005a56:	60c2      	str	r2, [r0, #12]
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	2221      	movs	r2, #33	; 0x21
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	f000 fb79 	bl	8006154 <_calloc_r>
 8005a62:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005a64:	4602      	mov	r2, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1ed      	bne.n	8005a46 <_Balloc+0xa>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f604 	lsl.w	r6, r1, r4
 8005a74:	1d72      	adds	r2, r6, #5
 8005a76:	4628      	mov	r0, r5
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	f000 fb6b 	bl	8006154 <_calloc_r>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0f3      	beq.n	8005a6a <_Balloc+0x2e>
 8005a82:	6044      	str	r4, [r0, #4]
 8005a84:	6086      	str	r6, [r0, #8]
 8005a86:	e7e4      	b.n	8005a52 <_Balloc+0x16>

08005a88 <_Bfree>:
 8005a88:	b131      	cbz	r1, 8005a98 <_Bfree+0x10>
 8005a8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005a8c:	684a      	ldr	r2, [r1, #4]
 8005a8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005a92:	6008      	str	r0, [r1, #0]
 8005a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <__multadd>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	4682      	mov	sl, r0
 8005aaa:	f101 0514 	add.w	r5, r1, #20
 8005aae:	2400      	movs	r4, #0
 8005ab0:	682f      	ldr	r7, [r5, #0]
 8005ab2:	b2be      	uxth	r6, r7
 8005ab4:	0c3f      	lsrs	r7, r7, #16
 8005ab6:	fb02 3606 	mla	r6, r2, r6, r3
 8005aba:	fb02 f307 	mul.w	r3, r2, r7
 8005abe:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8005ac2:	3401      	adds	r4, #1
 8005ac4:	b2b6      	uxth	r6, r6
 8005ac6:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8005aca:	45a0      	cmp	r8, r4
 8005acc:	f845 6b04 	str.w	r6, [r5], #4
 8005ad0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005ad4:	dcec      	bgt.n	8005ab0 <__multadd+0x14>
 8005ad6:	b153      	cbz	r3, 8005aee <__multadd+0x52>
 8005ad8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005adc:	4590      	cmp	r8, r2
 8005ade:	da0a      	bge.n	8005af6 <__multadd+0x5a>
 8005ae0:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8005ae4:	f108 0201 	add.w	r2, r8, #1
 8005ae8:	614b      	str	r3, [r1, #20]
 8005aea:	f8c9 2010 	str.w	r2, [r9, #16]
 8005aee:	4648      	mov	r0, r9
 8005af0:	b002      	add	sp, #8
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	3101      	adds	r1, #1
 8005afe:	4650      	mov	r0, sl
 8005b00:	f7ff ff9c 	bl	8005a3c <_Balloc>
 8005b04:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005b08:	3202      	adds	r2, #2
 8005b0a:	f109 010c 	add.w	r1, r9, #12
 8005b0e:	4604      	mov	r4, r0
 8005b10:	0092      	lsls	r2, r2, #2
 8005b12:	300c      	adds	r0, #12
 8005b14:	f7fc fe86 	bl	8002824 <memcpy>
 8005b18:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8005b1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b20:	9b01      	ldr	r3, [sp, #4]
 8005b22:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005b26:	f8c9 0000 	str.w	r0, [r9]
 8005b2a:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 8005b2e:	46a1      	mov	r9, r4
 8005b30:	e7d6      	b.n	8005ae0 <__multadd+0x44>
 8005b32:	bf00      	nop

08005b34 <__hi0bits>:
 8005b34:	0c03      	lsrs	r3, r0, #16
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	b9b3      	cbnz	r3, 8005b68 <__hi0bits+0x34>
 8005b3a:	0400      	lsls	r0, r0, #16
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b42:	bf04      	itt	eq
 8005b44:	0200      	lsleq	r0, r0, #8
 8005b46:	3308      	addeq	r3, #8
 8005b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b4c:	bf04      	itt	eq
 8005b4e:	0100      	lsleq	r0, r0, #4
 8005b50:	3304      	addeq	r3, #4
 8005b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b56:	bf04      	itt	eq
 8005b58:	0080      	lsleq	r0, r0, #2
 8005b5a:	3302      	addeq	r3, #2
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	db07      	blt.n	8005b70 <__hi0bits+0x3c>
 8005b60:	0042      	lsls	r2, r0, #1
 8005b62:	d403      	bmi.n	8005b6c <__hi0bits+0x38>
 8005b64:	2020      	movs	r0, #32
 8005b66:	4770      	bx	lr
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e7e8      	b.n	8005b3e <__hi0bits+0xa>
 8005b6c:	1c58      	adds	r0, r3, #1
 8005b6e:	4770      	bx	lr
 8005b70:	4618      	mov	r0, r3
 8005b72:	4770      	bx	lr

08005b74 <__lo0bits>:
 8005b74:	6803      	ldr	r3, [r0, #0]
 8005b76:	f013 0207 	ands.w	r2, r3, #7
 8005b7a:	d007      	beq.n	8005b8c <__lo0bits+0x18>
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	d420      	bmi.n	8005bc2 <__lo0bits+0x4e>
 8005b80:	079a      	lsls	r2, r3, #30
 8005b82:	d420      	bmi.n	8005bc6 <__lo0bits+0x52>
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	6003      	str	r3, [r0, #0]
 8005b88:	2002      	movs	r0, #2
 8005b8a:	4770      	bx	lr
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	b909      	cbnz	r1, 8005b94 <__lo0bits+0x20>
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	2210      	movs	r2, #16
 8005b94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b98:	bf04      	itt	eq
 8005b9a:	0a1b      	lsreq	r3, r3, #8
 8005b9c:	3208      	addeq	r2, #8
 8005b9e:	0719      	lsls	r1, r3, #28
 8005ba0:	bf04      	itt	eq
 8005ba2:	091b      	lsreq	r3, r3, #4
 8005ba4:	3204      	addeq	r2, #4
 8005ba6:	0799      	lsls	r1, r3, #30
 8005ba8:	bf04      	itt	eq
 8005baa:	089b      	lsreq	r3, r3, #2
 8005bac:	3202      	addeq	r2, #2
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	d404      	bmi.n	8005bbc <__lo0bits+0x48>
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	d101      	bne.n	8005bba <__lo0bits+0x46>
 8005bb6:	2020      	movs	r0, #32
 8005bb8:	4770      	bx	lr
 8005bba:	3201      	adds	r2, #1
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4770      	bx	lr
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	4770      	bx	lr
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	6003      	str	r3, [r0, #0]
 8005bca:	2001      	movs	r0, #1
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <__i2b>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	f7ff ff31 	bl	8005a3c <_Balloc>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	6144      	str	r4, [r0, #20]
 8005bde:	6102      	str	r2, [r0, #16]
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop

08005be4 <__multiply>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	690d      	ldr	r5, [r1, #16]
 8005bea:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8005bee:	454d      	cmp	r5, r9
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4692      	mov	sl, r2
 8005bf6:	da04      	bge.n	8005c02 <__multiply+0x1e>
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	464d      	mov	r5, r9
 8005bfe:	468a      	mov	sl, r1
 8005c00:	4691      	mov	r9, r2
 8005c02:	68a3      	ldr	r3, [r4, #8]
 8005c04:	6861      	ldr	r1, [r4, #4]
 8005c06:	eb05 0709 	add.w	r7, r5, r9
 8005c0a:	429f      	cmp	r7, r3
 8005c0c:	bfc8      	it	gt
 8005c0e:	3101      	addgt	r1, #1
 8005c10:	f7ff ff14 	bl	8005a3c <_Balloc>
 8005c14:	f100 0614 	add.w	r6, r0, #20
 8005c18:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c1c:	4546      	cmp	r6, r8
 8005c1e:	9001      	str	r0, [sp, #4]
 8005c20:	d205      	bcs.n	8005c2e <__multiply+0x4a>
 8005c22:	4633      	mov	r3, r6
 8005c24:	2000      	movs	r0, #0
 8005c26:	f843 0b04 	str.w	r0, [r3], #4
 8005c2a:	4598      	cmp	r8, r3
 8005c2c:	d8fb      	bhi.n	8005c26 <__multiply+0x42>
 8005c2e:	f10a 0c14 	add.w	ip, sl, #20
 8005c32:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 8005c36:	3414      	adds	r4, #20
 8005c38:	45cc      	cmp	ip, r9
 8005c3a:	9400      	str	r4, [sp, #0]
 8005c3c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c40:	d25b      	bcs.n	8005cfa <__multiply+0x116>
 8005c42:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c46:	9703      	str	r7, [sp, #12]
 8005c48:	46c8      	mov	r8, r9
 8005c4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c4e:	b29c      	uxth	r4, r3
 8005c50:	b324      	cbz	r4, 8005c9c <__multiply+0xb8>
 8005c52:	9a00      	ldr	r2, [sp, #0]
 8005c54:	4633      	mov	r3, r6
 8005c56:	f04f 0900 	mov.w	r9, #0
 8005c5a:	e000      	b.n	8005c5e <__multiply+0x7a>
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	f852 7b04 	ldr.w	r7, [r2], #4
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	fa1f fb87 	uxth.w	fp, r7
 8005c68:	fa1f fa81 	uxth.w	sl, r1
 8005c6c:	0c38      	lsrs	r0, r7, #16
 8005c6e:	0c09      	lsrs	r1, r1, #16
 8005c70:	fb04 a70b 	mla	r7, r4, fp, sl
 8005c74:	44b9      	add	r9, r7
 8005c76:	fb04 1000 	mla	r0, r4, r0, r1
 8005c7a:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 8005c7e:	4619      	mov	r1, r3
 8005c80:	fa1f f989 	uxth.w	r9, r9
 8005c84:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 8005c88:	4295      	cmp	r5, r2
 8005c8a:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8005c8e:	f841 7b04 	str.w	r7, [r1], #4
 8005c92:	d8e3      	bhi.n	8005c5c <__multiply+0x78>
 8005c94:	f8c3 9004 	str.w	r9, [r3, #4]
 8005c98:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8005c9c:	ea5f 4913 	movs.w	r9, r3, lsr #16
 8005ca0:	d024      	beq.n	8005cec <__multiply+0x108>
 8005ca2:	f8d6 a000 	ldr.w	sl, [r6]
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	4650      	mov	r0, sl
 8005caa:	4631      	mov	r1, r6
 8005cac:	f04f 0b00 	mov.w	fp, #0
 8005cb0:	e000      	b.n	8005cb4 <__multiply+0xd0>
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	0c00      	lsrs	r0, r0, #16
 8005cb8:	fb09 0002 	mla	r0, r9, r2, r0
 8005cbc:	4483      	add	fp, r0
 8005cbe:	fa1f fa8a 	uxth.w	sl, sl
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 8005cc8:	f842 0b04 	str.w	r0, [r2], #4
 8005ccc:	f853 7b04 	ldr.w	r7, [r3], #4
 8005cd0:	6848      	ldr	r0, [r1, #4]
 8005cd2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8005cd6:	b284      	uxth	r4, r0
 8005cd8:	fb09 4a0a 	mla	sl, r9, sl, r4
 8005cdc:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 8005ce0:	429d      	cmp	r5, r3
 8005ce2:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 8005ce6:	d8e4      	bhi.n	8005cb2 <__multiply+0xce>
 8005ce8:	f8c1 a004 	str.w	sl, [r1, #4]
 8005cec:	45e0      	cmp	r8, ip
 8005cee:	f106 0604 	add.w	r6, r6, #4
 8005cf2:	d8aa      	bhi.n	8005c4a <__multiply+0x66>
 8005cf4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cf8:	9f03      	ldr	r7, [sp, #12]
 8005cfa:	2f00      	cmp	r7, #0
 8005cfc:	dd0a      	ble.n	8005d14 <__multiply+0x130>
 8005cfe:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8005d02:	f1a8 0804 	sub.w	r8, r8, #4
 8005d06:	b11b      	cbz	r3, 8005d10 <__multiply+0x12c>
 8005d08:	e004      	b.n	8005d14 <__multiply+0x130>
 8005d0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d0e:	b90b      	cbnz	r3, 8005d14 <__multiply+0x130>
 8005d10:	3f01      	subs	r7, #1
 8005d12:	d1fa      	bne.n	8005d0a <__multiply+0x126>
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	611f      	str	r7, [r3, #16]
 8005d1a:	b005      	add	sp, #20
 8005d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d20 <__pow5mult>:
 8005d20:	f012 0303 	ands.w	r3, r2, #3
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	460e      	mov	r6, r1
 8005d2e:	d12c      	bne.n	8005d8a <__pow5mult+0x6a>
 8005d30:	10a4      	asrs	r4, r4, #2
 8005d32:	d01c      	beq.n	8005d6e <__pow5mult+0x4e>
 8005d34:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	d030      	beq.n	8005d9c <__pow5mult+0x7c>
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	e004      	b.n	8005d4a <__pow5mult+0x2a>
 8005d40:	1064      	asrs	r4, r4, #1
 8005d42:	d014      	beq.n	8005d6e <__pow5mult+0x4e>
 8005d44:	6828      	ldr	r0, [r5, #0]
 8005d46:	b1a8      	cbz	r0, 8005d74 <__pow5mult+0x54>
 8005d48:	4605      	mov	r5, r0
 8005d4a:	07e3      	lsls	r3, r4, #31
 8005d4c:	d5f8      	bpl.n	8005d40 <__pow5mult+0x20>
 8005d4e:	4638      	mov	r0, r7
 8005d50:	4631      	mov	r1, r6
 8005d52:	462a      	mov	r2, r5
 8005d54:	f7ff ff46 	bl	8005be4 <__multiply>
 8005d58:	b1ae      	cbz	r6, 8005d86 <__pow5mult+0x66>
 8005d5a:	6872      	ldr	r2, [r6, #4]
 8005d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5e:	1064      	asrs	r4, r4, #1
 8005d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d64:	6031      	str	r1, [r6, #0]
 8005d66:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	d1ea      	bne.n	8005d44 <__pow5mult+0x24>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d74:	4638      	mov	r0, r7
 8005d76:	4629      	mov	r1, r5
 8005d78:	462a      	mov	r2, r5
 8005d7a:	f7ff ff33 	bl	8005be4 <__multiply>
 8005d7e:	6028      	str	r0, [r5, #0]
 8005d80:	f8c0 8000 	str.w	r8, [r0]
 8005d84:	e7e0      	b.n	8005d48 <__pow5mult+0x28>
 8005d86:	4606      	mov	r6, r0
 8005d88:	e7da      	b.n	8005d40 <__pow5mult+0x20>
 8005d8a:	1e5d      	subs	r5, r3, #1
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <__pow5mult+0x98>)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8005d94:	f7ff fe82 	bl	8005a9c <__multadd>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	e7c9      	b.n	8005d30 <__pow5mult+0x10>
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff fe4c 	bl	8005a3c <_Balloc>
 8005da4:	f240 2171 	movw	r1, #625	; 0x271
 8005da8:	2201      	movs	r2, #1
 8005daa:	2300      	movs	r3, #0
 8005dac:	6141      	str	r1, [r0, #20]
 8005dae:	6102      	str	r2, [r0, #16]
 8005db0:	4605      	mov	r5, r0
 8005db2:	64b8      	str	r0, [r7, #72]	; 0x48
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	e7c0      	b.n	8005d3a <__pow5mult+0x1a>
 8005db8:	08007d90 	.word	0x08007d90

08005dbc <__lshift>:
 8005dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	4693      	mov	fp, r2
 8005dc2:	690a      	ldr	r2, [r1, #16]
 8005dc4:	688b      	ldr	r3, [r1, #8]
 8005dc6:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8005dca:	eb0a 0902 	add.w	r9, sl, r2
 8005dce:	f109 0601 	add.w	r6, r9, #1
 8005dd2:	429e      	cmp	r6, r3
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	6849      	ldr	r1, [r1, #4]
 8005dda:	dd04      	ble.n	8005de6 <__lshift+0x2a>
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	429e      	cmp	r6, r3
 8005de0:	f101 0101 	add.w	r1, r1, #1
 8005de4:	dcfa      	bgt.n	8005ddc <__lshift+0x20>
 8005de6:	4640      	mov	r0, r8
 8005de8:	f7ff fe28 	bl	8005a3c <_Balloc>
 8005dec:	f1ba 0f00 	cmp.w	sl, #0
 8005df0:	f100 0414 	add.w	r4, r0, #20
 8005df4:	dd09      	ble.n	8005e0a <__lshift+0x4e>
 8005df6:	2300      	movs	r3, #0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4625      	mov	r5, r4
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4553      	cmp	r3, sl
 8005e00:	f845 2b04 	str.w	r2, [r5], #4
 8005e04:	d1fa      	bne.n	8005dfc <__lshift+0x40>
 8005e06:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	f01b 0b1f 	ands.w	fp, fp, #31
 8005e14:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8005e18:	d021      	beq.n	8005e5e <__lshift+0xa2>
 8005e1a:	f1cb 0a20 	rsb	sl, fp, #32
 8005e1e:	2200      	movs	r2, #0
 8005e20:	e000      	b.n	8005e24 <__lshift+0x68>
 8005e22:	462c      	mov	r4, r5
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	4625      	mov	r5, r4
 8005e28:	fa01 f10b 	lsl.w	r1, r1, fp
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	f845 2b04 	str.w	r2, [r5], #4
 8005e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e36:	4563      	cmp	r3, ip
 8005e38:	fa22 f20a 	lsr.w	r2, r2, sl
 8005e3c:	d3f1      	bcc.n	8005e22 <__lshift+0x66>
 8005e3e:	6062      	str	r2, [r4, #4]
 8005e40:	b10a      	cbz	r2, 8005e46 <__lshift+0x8a>
 8005e42:	f109 0602 	add.w	r6, r9, #2
 8005e46:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	3e01      	subs	r6, #1
 8005e4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e52:	6106      	str	r6, [r0, #16]
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e62:	f844 2b04 	str.w	r2, [r4], #4
 8005e66:	459c      	cmp	ip, r3
 8005e68:	d9ed      	bls.n	8005e46 <__lshift+0x8a>
 8005e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6e:	f844 2b04 	str.w	r2, [r4], #4
 8005e72:	459c      	cmp	ip, r3
 8005e74:	d8f3      	bhi.n	8005e5e <__lshift+0xa2>
 8005e76:	e7e6      	b.n	8005e46 <__lshift+0x8a>

08005e78 <__mcmp>:
 8005e78:	6902      	ldr	r2, [r0, #16]
 8005e7a:	690b      	ldr	r3, [r1, #16]
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	b410      	push	{r4}
 8005e80:	d115      	bne.n	8005eae <__mcmp+0x36>
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	3014      	adds	r0, #20
 8005e86:	3114      	adds	r1, #20
 8005e88:	4419      	add	r1, r3
 8005e8a:	4403      	add	r3, r0
 8005e8c:	e001      	b.n	8005e92 <__mcmp+0x1a>
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d211      	bcs.n	8005eb6 <__mcmp+0x3e>
 8005e92:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005e96:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e9a:	42a2      	cmp	r2, r4
 8005e9c:	d0f7      	beq.n	8005e8e <__mcmp+0x16>
 8005e9e:	4294      	cmp	r4, r2
 8005ea0:	bf94      	ite	ls
 8005ea2:	2001      	movls	r0, #1
 8005ea4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop

08005ec0 <__mdiff>:
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4628      	mov	r0, r5
 8005ecc:	4616      	mov	r6, r2
 8005ece:	f7ff ffd3 	bl	8005e78 <__mcmp>
 8005ed2:	1e07      	subs	r7, r0, #0
 8005ed4:	d055      	beq.n	8005f82 <__mdiff+0xc2>
 8005ed6:	db4e      	blt.n	8005f76 <__mdiff+0xb6>
 8005ed8:	f04f 0800 	mov.w	r8, #0
 8005edc:	6869      	ldr	r1, [r5, #4]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7ff fdac 	bl	8005a3c <_Balloc>
 8005ee4:	692f      	ldr	r7, [r5, #16]
 8005ee6:	6932      	ldr	r2, [r6, #16]
 8005ee8:	f8c0 800c 	str.w	r8, [r0, #12]
 8005eec:	3514      	adds	r5, #20
 8005eee:	3614      	adds	r6, #20
 8005ef0:	f100 0314 	add.w	r3, r0, #20
 8005ef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ef8:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 8005efc:	2100      	movs	r1, #0
 8005efe:	f856 2b04 	ldr.w	r2, [r6], #4
 8005f02:	f855 4b04 	ldr.w	r4, [r5], #4
 8005f06:	fa1f f982 	uxth.w	r9, r2
 8005f0a:	fa11 fa84 	uxtah	sl, r1, r4
 8005f0e:	0c11      	lsrs	r1, r2, #16
 8005f10:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 8005f14:	ebc9 020a 	rsb	r2, r9, sl
 8005f18:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005f22:	45b0      	cmp	r8, r6
 8005f24:	f843 2b04 	str.w	r2, [r3], #4
 8005f28:	ea4f 4121 	mov.w	r1, r1, asr #16
 8005f2c:	462c      	mov	r4, r5
 8005f2e:	d8e6      	bhi.n	8005efe <__mdiff+0x3e>
 8005f30:	45ac      	cmp	ip, r5
 8005f32:	4698      	mov	r8, r3
 8005f34:	d915      	bls.n	8005f62 <__mdiff+0xa2>
 8005f36:	f854 6b04 	ldr.w	r6, [r4], #4
 8005f3a:	fa11 f186 	uxtah	r1, r1, r6
 8005f3e:	0c36      	lsrs	r6, r6, #16
 8005f40:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8005f44:	b289      	uxth	r1, r1
 8005f46:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 8005f4a:	45a4      	cmp	ip, r4
 8005f4c:	f843 2b04 	str.w	r2, [r3], #4
 8005f50:	ea4f 4126 	mov.w	r1, r6, asr #16
 8005f54:	d8ef      	bhi.n	8005f36 <__mdiff+0x76>
 8005f56:	43eb      	mvns	r3, r5
 8005f58:	4463      	add	r3, ip
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4443      	add	r3, r8
 8005f62:	3b04      	subs	r3, #4
 8005f64:	b922      	cbnz	r2, 8005f70 <__mdiff+0xb0>
 8005f66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f6a:	3f01      	subs	r7, #1
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d0fa      	beq.n	8005f66 <__mdiff+0xa6>
 8005f70:	6107      	str	r7, [r0, #16]
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	462b      	mov	r3, r5
 8005f78:	f04f 0801 	mov.w	r8, #1
 8005f7c:	4635      	mov	r5, r6
 8005f7e:	461e      	mov	r6, r3
 8005f80:	e7ac      	b.n	8005edc <__mdiff+0x1c>
 8005f82:	4620      	mov	r0, r4
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7ff fd59 	bl	8005a3c <_Balloc>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	6147      	str	r7, [r0, #20]
 8005f8e:	6103      	str	r3, [r0, #16]
 8005f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f94 <__d2b>:
 8005f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f98:	4689      	mov	r9, r1
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	ec55 4b10 	vmov	r4, r5, d0
 8005fa2:	4690      	mov	r8, r2
 8005fa4:	f7ff fd4a 	bl	8005a3c <_Balloc>
 8005fa8:	f3c5 570a 	ubfx	r7, r5, #20, #11
 8005fac:	4606      	mov	r6, r0
 8005fae:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fb2:	b10f      	cbz	r7, 8005fb8 <__d2b+0x24>
 8005fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	b314      	cbz	r4, 8006002 <__d2b+0x6e>
 8005fbc:	a802      	add	r0, sp, #8
 8005fbe:	f840 4d08 	str.w	r4, [r0, #-8]!
 8005fc2:	4668      	mov	r0, sp
 8005fc4:	f7ff fdd6 	bl	8005b74 <__lo0bits>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d131      	bne.n	8006030 <__d2b+0x9c>
 8005fcc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005fd0:	6172      	str	r2, [r6, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2401      	moveq	r4, #1
 8005fd8:	2402      	movne	r4, #2
 8005fda:	61b3      	str	r3, [r6, #24]
 8005fdc:	6134      	str	r4, [r6, #16]
 8005fde:	b9d7      	cbnz	r7, 8006016 <__d2b+0x82>
 8005fe0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005fe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fe8:	f8c9 0000 	str.w	r0, [r9]
 8005fec:	6918      	ldr	r0, [r3, #16]
 8005fee:	f7ff fda1 	bl	8005b34 <__hi0bits>
 8005ff2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005ff6:	f8c8 0000 	str.w	r0, [r8]
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	b003      	add	sp, #12
 8005ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006002:	a801      	add	r0, sp, #4
 8006004:	f7ff fdb6 	bl	8005b74 <__lo0bits>
 8006008:	2401      	movs	r4, #1
 800600a:	9b01      	ldr	r3, [sp, #4]
 800600c:	6173      	str	r3, [r6, #20]
 800600e:	3020      	adds	r0, #32
 8006010:	6134      	str	r4, [r6, #16]
 8006012:	2f00      	cmp	r7, #0
 8006014:	d0e4      	beq.n	8005fe0 <__d2b+0x4c>
 8006016:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800601a:	4407      	add	r7, r0
 800601c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006020:	f8c9 7000 	str.w	r7, [r9]
 8006024:	f8c8 0000 	str.w	r0, [r8]
 8006028:	4630      	mov	r0, r6
 800602a:	b003      	add	sp, #12
 800602c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006030:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006034:	f1c0 0120 	rsb	r1, r0, #32
 8006038:	fa03 f101 	lsl.w	r1, r3, r1
 800603c:	430a      	orrs	r2, r1
 800603e:	40c3      	lsrs	r3, r0
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	6172      	str	r2, [r6, #20]
 8006044:	e7c5      	b.n	8005fd2 <__d2b+0x3e>
 8006046:	bf00      	nop

08006048 <_read_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4c08      	ldr	r4, [pc, #32]	; (800606c <_read_r+0x24>)
 800604c:	4606      	mov	r6, r0
 800604e:	2500      	movs	r5, #0
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	461a      	mov	r2, r3
 8006056:	6025      	str	r5, [r4, #0]
 8006058:	f7fa fb4e 	bl	80006f8 <_read>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d000      	beq.n	8006062 <_read_r+0x1a>
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0fb      	beq.n	8006060 <_read_r+0x18>
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	20008b20 	.word	0x20008b20

08006070 <__fpclassifyd>:
 8006070:	ec53 2b10 	vmov	r2, r3, d0
 8006074:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8006078:	b410      	push	{r4}
 800607a:	d008      	beq.n	800608e <__fpclassifyd+0x1e>
 800607c:	480f      	ldr	r0, [pc, #60]	; (80060bc <__fpclassifyd+0x4c>)
 800607e:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8006082:	4284      	cmp	r4, r0
 8006084:	d80a      	bhi.n	800609c <__fpclassifyd+0x2c>
 8006086:	2004      	movs	r0, #4
 8006088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	2a00      	cmp	r2, #0
 8006090:	bf0c      	ite	eq
 8006092:	2002      	moveq	r0, #2
 8006094:	2003      	movne	r0, #3
 8006096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80060a0:	d201      	bcs.n	80060a6 <__fpclassifyd+0x36>
 80060a2:	2003      	movs	r0, #3
 80060a4:	e7f7      	b.n	8006096 <__fpclassifyd+0x26>
 80060a6:	4806      	ldr	r0, [pc, #24]	; (80060c0 <__fpclassifyd+0x50>)
 80060a8:	4281      	cmp	r1, r0
 80060aa:	d001      	beq.n	80060b0 <__fpclassifyd+0x40>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e7f2      	b.n	8006096 <__fpclassifyd+0x26>
 80060b0:	f1d2 0001 	rsbs	r0, r2, #1
 80060b4:	bf38      	it	cc
 80060b6:	2000      	movcc	r0, #0
 80060b8:	e7ed      	b.n	8006096 <__fpclassifyd+0x26>
 80060ba:	bf00      	nop
 80060bc:	7fdfffff 	.word	0x7fdfffff
 80060c0:	7ff00000 	.word	0x7ff00000

080060c4 <__sprint_r.part.0>:
 80060c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80060c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ca:	049c      	lsls	r4, r3, #18
 80060cc:	460e      	mov	r6, r1
 80060ce:	4680      	mov	r8, r0
 80060d0:	4691      	mov	r9, r2
 80060d2:	d52a      	bpl.n	800612a <__sprint_r.part.0+0x66>
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	f102 0a08 	add.w	sl, r2, #8
 80060dc:	b31b      	cbz	r3, 8006126 <__sprint_r.part.0+0x62>
 80060de:	e91a 00a0 	ldmdb	sl, {r5, r7}
 80060e2:	08bf      	lsrs	r7, r7, #2
 80060e4:	d017      	beq.n	8006116 <__sprint_r.part.0+0x52>
 80060e6:	3d04      	subs	r5, #4
 80060e8:	2400      	movs	r4, #0
 80060ea:	e001      	b.n	80060f0 <__sprint_r.part.0+0x2c>
 80060ec:	42a7      	cmp	r7, r4
 80060ee:	d010      	beq.n	8006112 <__sprint_r.part.0+0x4e>
 80060f0:	4640      	mov	r0, r8
 80060f2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80060f6:	4632      	mov	r2, r6
 80060f8:	f000 f85c 	bl	80061b4 <_fputwc_r>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	f104 0401 	add.w	r4, r4, #1
 8006102:	d1f3      	bne.n	80060ec <__sprint_r.part.0+0x28>
 8006104:	2300      	movs	r3, #0
 8006106:	f8c9 3008 	str.w	r3, [r9, #8]
 800610a:	f8c9 3004 	str.w	r3, [r9, #4]
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006116:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 800611a:	f8c9 3008 	str.w	r3, [r9, #8]
 800611e:	f10a 0a08 	add.w	sl, sl, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1db      	bne.n	80060de <__sprint_r.part.0+0x1a>
 8006126:	2000      	movs	r0, #0
 8006128:	e7ec      	b.n	8006104 <__sprint_r.part.0+0x40>
 800612a:	f000 f8b5 	bl	8006298 <__sfvwrite_r>
 800612e:	2300      	movs	r3, #0
 8006130:	f8c9 3008 	str.w	r3, [r9, #8]
 8006134:	f8c9 3004 	str.w	r3, [r9, #4]
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800613c <__sprint_r>:
 800613c:	6893      	ldr	r3, [r2, #8]
 800613e:	b410      	push	{r4}
 8006140:	b11b      	cbz	r3, 800614a <__sprint_r+0xe>
 8006142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006146:	f7ff bfbd 	b.w	80060c4 <__sprint_r.part.0>
 800614a:	4618      	mov	r0, r3
 800614c:	6053      	str	r3, [r2, #4]
 800614e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006152:	4770      	bx	lr

08006154 <_calloc_r>:
 8006154:	b510      	push	{r4, lr}
 8006156:	fb02 f101 	mul.w	r1, r2, r1
 800615a:	f7fc f8c7 	bl	80022ec <_malloc_r>
 800615e:	4604      	mov	r4, r0
 8006160:	b168      	cbz	r0, 800617e <_calloc_r+0x2a>
 8006162:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006166:	f022 0203 	bic.w	r2, r2, #3
 800616a:	3a04      	subs	r2, #4
 800616c:	2a24      	cmp	r2, #36	; 0x24
 800616e:	d818      	bhi.n	80061a2 <_calloc_r+0x4e>
 8006170:	2a13      	cmp	r2, #19
 8006172:	d806      	bhi.n	8006182 <_calloc_r+0x2e>
 8006174:	4603      	mov	r3, r0
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	4620      	mov	r0, r4
 8006180:	bd10      	pop	{r4, pc}
 8006182:	2300      	movs	r3, #0
 8006184:	2a1b      	cmp	r2, #27
 8006186:	6003      	str	r3, [r0, #0]
 8006188:	6043      	str	r3, [r0, #4]
 800618a:	d90f      	bls.n	80061ac <_calloc_r+0x58>
 800618c:	2a24      	cmp	r2, #36	; 0x24
 800618e:	6083      	str	r3, [r0, #8]
 8006190:	60c3      	str	r3, [r0, #12]
 8006192:	bf05      	ittet	eq
 8006194:	6103      	streq	r3, [r0, #16]
 8006196:	6143      	streq	r3, [r0, #20]
 8006198:	f100 0310 	addne.w	r3, r0, #16
 800619c:	f100 0318 	addeq.w	r3, r0, #24
 80061a0:	e7e9      	b.n	8006176 <_calloc_r+0x22>
 80061a2:	2100      	movs	r1, #0
 80061a4:	f7fc fbd8 	bl	8002958 <memset>
 80061a8:	4620      	mov	r0, r4
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	f100 0308 	add.w	r3, r0, #8
 80061b0:	e7e1      	b.n	8006176 <_calloc_r+0x22>
 80061b2:	bf00      	nop

080061b4 <_fputwc_r>:
 80061b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	8993      	ldrh	r3, [r2, #12]
 80061ba:	460f      	mov	r7, r1
 80061bc:	0499      	lsls	r1, r3, #18
 80061be:	b082      	sub	sp, #8
 80061c0:	4614      	mov	r4, r2
 80061c2:	4680      	mov	r8, r0
 80061c4:	d406      	bmi.n	80061d4 <_fputwc_r+0x20>
 80061c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80061c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	6662      	str	r2, [r4, #100]	; 0x64
 80061d4:	f7ff fb5c 	bl	8005890 <__locale_mb_cur_max>
 80061d8:	2801      	cmp	r0, #1
 80061da:	d03d      	beq.n	8006258 <_fputwc_r+0xa4>
 80061dc:	463a      	mov	r2, r7
 80061de:	4640      	mov	r0, r8
 80061e0:	a901      	add	r1, sp, #4
 80061e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80061e6:	f000 fc8f 	bl	8006b08 <_wcrtomb_r>
 80061ea:	1c42      	adds	r2, r0, #1
 80061ec:	4606      	mov	r6, r0
 80061ee:	d02c      	beq.n	800624a <_fputwc_r+0x96>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d039      	beq.n	8006268 <_fputwc_r+0xb4>
 80061f4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80061f8:	2500      	movs	r5, #0
 80061fa:	e009      	b.n	8006210 <_fputwc_r+0x5c>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	7019      	strb	r1, [r3, #0]
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	3501      	adds	r5, #1
 8006208:	42b5      	cmp	r5, r6
 800620a:	d22d      	bcs.n	8006268 <_fputwc_r+0xb4>
 800620c:	ab01      	add	r3, sp, #4
 800620e:	5ce9      	ldrb	r1, [r5, r3]
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	3b01      	subs	r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	daf0      	bge.n	80061fc <_fputwc_r+0x48>
 800621a:	69a2      	ldr	r2, [r4, #24]
 800621c:	4293      	cmp	r3, r2
 800621e:	db05      	blt.n	800622c <_fputwc_r+0x78>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	7019      	strb	r1, [r3, #0]
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	7819      	ldrb	r1, [r3, #0]
 8006228:	290a      	cmp	r1, #10
 800622a:	d1ea      	bne.n	8006202 <_fputwc_r+0x4e>
 800622c:	4640      	mov	r0, r8
 800622e:	4622      	mov	r2, r4
 8006230:	f000 fc16 	bl	8006a60 <__swbuf_r>
 8006234:	f1b0 33ff 	subs.w	r3, r0, #4294967295	; 0xffffffff
 8006238:	4258      	negs	r0, r3
 800623a:	4158      	adcs	r0, r3
 800623c:	2800      	cmp	r0, #0
 800623e:	d0e2      	beq.n	8006206 <_fputwc_r+0x52>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006244:	b002      	add	sp, #8
 8006246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	b002      	add	sp, #8
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	1e7b      	subs	r3, r7, #1
 800625a:	2bfe      	cmp	r3, #254	; 0xfe
 800625c:	d8be      	bhi.n	80061dc <_fputwc_r+0x28>
 800625e:	b2f9      	uxtb	r1, r7
 8006260:	4606      	mov	r6, r0
 8006262:	f88d 1004 	strb.w	r1, [sp, #4]
 8006266:	e7c7      	b.n	80061f8 <_fputwc_r+0x44>
 8006268:	4638      	mov	r0, r7
 800626a:	b002      	add	sp, #8
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006270 <_fstat_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4c08      	ldr	r4, [pc, #32]	; (8006294 <_fstat_r+0x24>)
 8006274:	2300      	movs	r3, #0
 8006276:	4605      	mov	r5, r0
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	f7fa fabe 	bl	80007fe <_fstat>
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	d000      	beq.n	8006288 <_fstat_r+0x18>
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0fb      	beq.n	8006286 <_fstat_r+0x16>
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	20008b20 	.word	0x20008b20

08006298 <__sfvwrite_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	6893      	ldr	r3, [r2, #8]
 800629e:	b083      	sub	sp, #12
 80062a0:	4616      	mov	r6, r2
 80062a2:	4681      	mov	r9, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	b32b      	cbz	r3, 80062f4 <__sfvwrite_r+0x5c>
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	0719      	lsls	r1, r3, #28
 80062ac:	d526      	bpl.n	80062fc <__sfvwrite_r+0x64>
 80062ae:	6922      	ldr	r2, [r4, #16]
 80062b0:	b322      	cbz	r2, 80062fc <__sfvwrite_r+0x64>
 80062b2:	f003 0202 	and.w	r2, r3, #2
 80062b6:	b292      	uxth	r2, r2
 80062b8:	6835      	ldr	r5, [r6, #0]
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d02c      	beq.n	8006318 <__sfvwrite_r+0x80>
 80062be:	f04f 0a00 	mov.w	sl, #0
 80062c2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80065ac <__sfvwrite_r+0x314>
 80062c6:	46d0      	mov	r8, sl
 80062c8:	45d8      	cmp	r8, fp
 80062ca:	bf34      	ite	cc
 80062cc:	4643      	movcc	r3, r8
 80062ce:	465b      	movcs	r3, fp
 80062d0:	4652      	mov	r2, sl
 80062d2:	4648      	mov	r0, r9
 80062d4:	f1b8 0f00 	cmp.w	r8, #0
 80062d8:	d04f      	beq.n	800637a <__sfvwrite_r+0xe2>
 80062da:	69e1      	ldr	r1, [r4, #28]
 80062dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80062de:	47b8      	blx	r7
 80062e0:	2800      	cmp	r0, #0
 80062e2:	dd56      	ble.n	8006392 <__sfvwrite_r+0xfa>
 80062e4:	68b3      	ldr	r3, [r6, #8]
 80062e6:	1a1b      	subs	r3, r3, r0
 80062e8:	4482      	add	sl, r0
 80062ea:	ebc0 0808 	rsb	r8, r0, r8
 80062ee:	60b3      	str	r3, [r6, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e9      	bne.n	80062c8 <__sfvwrite_r+0x30>
 80062f4:	2000      	movs	r0, #0
 80062f6:	b003      	add	sp, #12
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	4648      	mov	r0, r9
 80062fe:	4621      	mov	r1, r4
 8006300:	f7fe f866 	bl	80043d0 <__swsetup_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	f040 8148 	bne.w	800659a <__sfvwrite_r+0x302>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	6835      	ldr	r5, [r6, #0]
 800630e:	f003 0202 	and.w	r2, r3, #2
 8006312:	b292      	uxth	r2, r2
 8006314:	2a00      	cmp	r2, #0
 8006316:	d1d2      	bne.n	80062be <__sfvwrite_r+0x26>
 8006318:	f013 0a01 	ands.w	sl, r3, #1
 800631c:	d142      	bne.n	80063a4 <__sfvwrite_r+0x10c>
 800631e:	46d0      	mov	r8, sl
 8006320:	f1b8 0f00 	cmp.w	r8, #0
 8006324:	d023      	beq.n	800636e <__sfvwrite_r+0xd6>
 8006326:	059a      	lsls	r2, r3, #22
 8006328:	68a7      	ldr	r7, [r4, #8]
 800632a:	d576      	bpl.n	800641a <__sfvwrite_r+0x182>
 800632c:	45b8      	cmp	r8, r7
 800632e:	f0c0 80a4 	bcc.w	800647a <__sfvwrite_r+0x1e2>
 8006332:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006336:	f040 80b2 	bne.w	800649e <__sfvwrite_r+0x206>
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	46bb      	mov	fp, r7
 800633e:	4651      	mov	r1, sl
 8006340:	465a      	mov	r2, fp
 8006342:	f000 f947 	bl	80065d4 <memmove>
 8006346:	68a2      	ldr	r2, [r4, #8]
 8006348:	6821      	ldr	r1, [r4, #0]
 800634a:	1bd2      	subs	r2, r2, r7
 800634c:	eb01 030b 	add.w	r3, r1, fp
 8006350:	60a2      	str	r2, [r4, #8]
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	4642      	mov	r2, r8
 8006356:	68b3      	ldr	r3, [r6, #8]
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	4492      	add	sl, r2
 800635c:	ebc2 0808 	rsb	r8, r2, r8
 8006360:	60b3      	str	r3, [r6, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0c6      	beq.n	80062f4 <__sfvwrite_r+0x5c>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f1b8 0f00 	cmp.w	r8, #0
 800636c:	d1db      	bne.n	8006326 <__sfvwrite_r+0x8e>
 800636e:	f8d5 a000 	ldr.w	sl, [r5]
 8006372:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006376:	3508      	adds	r5, #8
 8006378:	e7d2      	b.n	8006320 <__sfvwrite_r+0x88>
 800637a:	f8d5 a000 	ldr.w	sl, [r5]
 800637e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006382:	3508      	adds	r5, #8
 8006384:	e7a0      	b.n	80062c8 <__sfvwrite_r+0x30>
 8006386:	4648      	mov	r0, r9
 8006388:	4621      	mov	r1, r4
 800638a:	f7ff f94b 	bl	8005624 <_fflush_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	d059      	beq.n	8006446 <__sfvwrite_r+0x1ae>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	b003      	add	sp, #12
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4692      	mov	sl, r2
 80063a6:	9201      	str	r2, [sp, #4]
 80063a8:	4693      	mov	fp, r2
 80063aa:	4690      	mov	r8, r2
 80063ac:	f1b8 0f00 	cmp.w	r8, #0
 80063b0:	d02b      	beq.n	800640a <__sfvwrite_r+0x172>
 80063b2:	9f01      	ldr	r7, [sp, #4]
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	d064      	beq.n	8006482 <__sfvwrite_r+0x1ea>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	6921      	ldr	r1, [r4, #16]
 80063bc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80063c0:	6962      	ldr	r2, [r4, #20]
 80063c2:	45c2      	cmp	sl, r8
 80063c4:	bf34      	ite	cc
 80063c6:	4653      	movcc	r3, sl
 80063c8:	4643      	movcs	r3, r8
 80063ca:	4288      	cmp	r0, r1
 80063cc:	461f      	mov	r7, r3
 80063ce:	d903      	bls.n	80063d8 <__sfvwrite_r+0x140>
 80063d0:	4494      	add	ip, r2
 80063d2:	4563      	cmp	r3, ip
 80063d4:	f300 80ae 	bgt.w	8006534 <__sfvwrite_r+0x29c>
 80063d8:	4293      	cmp	r3, r2
 80063da:	db36      	blt.n	800644a <__sfvwrite_r+0x1b2>
 80063dc:	4613      	mov	r3, r2
 80063de:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80063e0:	69e1      	ldr	r1, [r4, #28]
 80063e2:	4648      	mov	r0, r9
 80063e4:	465a      	mov	r2, fp
 80063e6:	47b8      	blx	r7
 80063e8:	1e07      	subs	r7, r0, #0
 80063ea:	ddd2      	ble.n	8006392 <__sfvwrite_r+0xfa>
 80063ec:	ebba 0a07 	subs.w	sl, sl, r7
 80063f0:	d03a      	beq.n	8006468 <__sfvwrite_r+0x1d0>
 80063f2:	68b3      	ldr	r3, [r6, #8]
 80063f4:	1bdb      	subs	r3, r3, r7
 80063f6:	44bb      	add	fp, r7
 80063f8:	ebc7 0808 	rsb	r8, r7, r8
 80063fc:	60b3      	str	r3, [r6, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f43f af78 	beq.w	80062f4 <__sfvwrite_r+0x5c>
 8006404:	f1b8 0f00 	cmp.w	r8, #0
 8006408:	d1d3      	bne.n	80063b2 <__sfvwrite_r+0x11a>
 800640a:	2700      	movs	r7, #0
 800640c:	f8d5 b000 	ldr.w	fp, [r5]
 8006410:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006414:	9701      	str	r7, [sp, #4]
 8006416:	3508      	adds	r5, #8
 8006418:	e7c8      	b.n	80063ac <__sfvwrite_r+0x114>
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	4298      	cmp	r0, r3
 8006420:	d802      	bhi.n	8006428 <__sfvwrite_r+0x190>
 8006422:	6963      	ldr	r3, [r4, #20]
 8006424:	4598      	cmp	r8, r3
 8006426:	d272      	bcs.n	800650e <__sfvwrite_r+0x276>
 8006428:	45b8      	cmp	r8, r7
 800642a:	bf38      	it	cc
 800642c:	4647      	movcc	r7, r8
 800642e:	463a      	mov	r2, r7
 8006430:	4651      	mov	r1, sl
 8006432:	f000 f8cf 	bl	80065d4 <memmove>
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	1bdb      	subs	r3, r3, r7
 800643c:	443a      	add	r2, r7
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d09f      	beq.n	8006386 <__sfvwrite_r+0xee>
 8006446:	463a      	mov	r2, r7
 8006448:	e785      	b.n	8006356 <__sfvwrite_r+0xbe>
 800644a:	461a      	mov	r2, r3
 800644c:	4659      	mov	r1, fp
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f000 f8c0 	bl	80065d4 <memmove>
 8006454:	9b00      	ldr	r3, [sp, #0]
 8006456:	68a1      	ldr	r1, [r4, #8]
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	1ac9      	subs	r1, r1, r3
 800645c:	ebba 0a07 	subs.w	sl, sl, r7
 8006460:	4413      	add	r3, r2
 8006462:	60a1      	str	r1, [r4, #8]
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	d1c4      	bne.n	80063f2 <__sfvwrite_r+0x15a>
 8006468:	4648      	mov	r0, r9
 800646a:	4621      	mov	r1, r4
 800646c:	f7ff f8da 	bl	8005624 <_fflush_r>
 8006470:	2800      	cmp	r0, #0
 8006472:	d18e      	bne.n	8006392 <__sfvwrite_r+0xfa>
 8006474:	f8cd a004 	str.w	sl, [sp, #4]
 8006478:	e7bb      	b.n	80063f2 <__sfvwrite_r+0x15a>
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	4647      	mov	r7, r8
 800647e:	46c3      	mov	fp, r8
 8006480:	e75d      	b.n	800633e <__sfvwrite_r+0xa6>
 8006482:	4658      	mov	r0, fp
 8006484:	210a      	movs	r1, #10
 8006486:	4642      	mov	r2, r8
 8006488:	f7ff fa90 	bl	80059ac <memchr>
 800648c:	2800      	cmp	r0, #0
 800648e:	d07f      	beq.n	8006590 <__sfvwrite_r+0x2f8>
 8006490:	f100 0a01 	add.w	sl, r0, #1
 8006494:	2701      	movs	r7, #1
 8006496:	ebcb 0a0a 	rsb	sl, fp, sl
 800649a:	9701      	str	r7, [sp, #4]
 800649c:	e78c      	b.n	80063b8 <__sfvwrite_r+0x120>
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	6921      	ldr	r1, [r4, #16]
 80064a2:	6967      	ldr	r7, [r4, #20]
 80064a4:	ebc1 0c02 	rsb	ip, r1, r2
 80064a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80064ac:	f10c 0201 	add.w	r2, ip, #1
 80064b0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80064b4:	4442      	add	r2, r8
 80064b6:	107f      	asrs	r7, r7, #1
 80064b8:	4297      	cmp	r7, r2
 80064ba:	bf34      	ite	cc
 80064bc:	4617      	movcc	r7, r2
 80064be:	463a      	movcs	r2, r7
 80064c0:	055b      	lsls	r3, r3, #21
 80064c2:	d54f      	bpl.n	8006564 <__sfvwrite_r+0x2cc>
 80064c4:	4611      	mov	r1, r2
 80064c6:	4648      	mov	r0, r9
 80064c8:	f8cd c000 	str.w	ip, [sp]
 80064cc:	f7fb ff0e 	bl	80022ec <_malloc_r>
 80064d0:	f8dd c000 	ldr.w	ip, [sp]
 80064d4:	4683      	mov	fp, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d062      	beq.n	80065a0 <__sfvwrite_r+0x308>
 80064da:	4662      	mov	r2, ip
 80064dc:	6921      	ldr	r1, [r4, #16]
 80064de:	f8cd c000 	str.w	ip, [sp]
 80064e2:	f7fc f99f 	bl	8002824 <memcpy>
 80064e6:	89a2      	ldrh	r2, [r4, #12]
 80064e8:	f8dd c000 	ldr.w	ip, [sp]
 80064ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80064f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064f4:	81a2      	strh	r2, [r4, #12]
 80064f6:	eb0b 000c 	add.w	r0, fp, ip
 80064fa:	ebcc 0207 	rsb	r2, ip, r7
 80064fe:	f8c4 b010 	str.w	fp, [r4, #16]
 8006502:	6167      	str	r7, [r4, #20]
 8006504:	6020      	str	r0, [r4, #0]
 8006506:	60a2      	str	r2, [r4, #8]
 8006508:	4647      	mov	r7, r8
 800650a:	46c3      	mov	fp, r8
 800650c:	e717      	b.n	800633e <__sfvwrite_r+0xa6>
 800650e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006512:	4590      	cmp	r8, r2
 8006514:	bf38      	it	cc
 8006516:	4642      	movcc	r2, r8
 8006518:	fb92 f2f3 	sdiv	r2, r2, r3
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006522:	69e1      	ldr	r1, [r4, #28]
 8006524:	4648      	mov	r0, r9
 8006526:	4652      	mov	r2, sl
 8006528:	47b8      	blx	r7
 800652a:	2800      	cmp	r0, #0
 800652c:	f77f af31 	ble.w	8006392 <__sfvwrite_r+0xfa>
 8006530:	4602      	mov	r2, r0
 8006532:	e710      	b.n	8006356 <__sfvwrite_r+0xbe>
 8006534:	4662      	mov	r2, ip
 8006536:	4659      	mov	r1, fp
 8006538:	f8cd c000 	str.w	ip, [sp]
 800653c:	f000 f84a 	bl	80065d4 <memmove>
 8006540:	f8dd c000 	ldr.w	ip, [sp]
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	4463      	add	r3, ip
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	4648      	mov	r0, r9
 800654c:	4621      	mov	r1, r4
 800654e:	f8cd c000 	str.w	ip, [sp]
 8006552:	f7ff f867 	bl	8005624 <_fflush_r>
 8006556:	f8dd c000 	ldr.w	ip, [sp]
 800655a:	2800      	cmp	r0, #0
 800655c:	f47f af19 	bne.w	8006392 <__sfvwrite_r+0xfa>
 8006560:	4667      	mov	r7, ip
 8006562:	e743      	b.n	80063ec <__sfvwrite_r+0x154>
 8006564:	4648      	mov	r0, r9
 8006566:	f8cd c000 	str.w	ip, [sp]
 800656a:	f000 f893 	bl	8006694 <_realloc_r>
 800656e:	f8dd c000 	ldr.w	ip, [sp]
 8006572:	4683      	mov	fp, r0
 8006574:	2800      	cmp	r0, #0
 8006576:	d1be      	bne.n	80064f6 <__sfvwrite_r+0x25e>
 8006578:	4648      	mov	r0, r9
 800657a:	6921      	ldr	r1, [r4, #16]
 800657c:	f7ff f8b6 	bl	80056ec <_free_r>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	220c      	movs	r2, #12
 8006584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	f8c9 2000 	str.w	r2, [r9]
 800658e:	e701      	b.n	8006394 <__sfvwrite_r+0xfc>
 8006590:	2701      	movs	r7, #1
 8006592:	f108 0a01 	add.w	sl, r8, #1
 8006596:	9701      	str	r7, [sp, #4]
 8006598:	e70e      	b.n	80063b8 <__sfvwrite_r+0x120>
 800659a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800659e:	e6aa      	b.n	80062f6 <__sfvwrite_r+0x5e>
 80065a0:	230c      	movs	r3, #12
 80065a2:	f8c9 3000 	str.w	r3, [r9]
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	e6f4      	b.n	8006394 <__sfvwrite_r+0xfc>
 80065aa:	bf00      	nop
 80065ac:	7ffffc00 	.word	0x7ffffc00

080065b0 <_isatty_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4c07      	ldr	r4, [pc, #28]	; (80065d0 <_isatty_r+0x20>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4605      	mov	r5, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	f000 fae2 	bl	8006b84 <_isatty>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d000      	beq.n	80065c6 <_isatty_r+0x16>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0fb      	beq.n	80065c4 <_isatty_r+0x14>
 80065cc:	602b      	str	r3, [r5, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20008b20 	.word	0x20008b20

080065d4 <memmove>:
 80065d4:	4288      	cmp	r0, r1
 80065d6:	b4f0      	push	{r4, r5, r6, r7}
 80065d8:	d910      	bls.n	80065fc <memmove+0x28>
 80065da:	188c      	adds	r4, r1, r2
 80065dc:	42a0      	cmp	r0, r4
 80065de:	d20d      	bcs.n	80065fc <memmove+0x28>
 80065e0:	1885      	adds	r5, r0, r2
 80065e2:	1e53      	subs	r3, r2, #1
 80065e4:	b142      	cbz	r2, 80065f8 <memmove+0x24>
 80065e6:	4621      	mov	r1, r4
 80065e8:	462a      	mov	r2, r5
 80065ea:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 80065ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065f2:	3b01      	subs	r3, #1
 80065f4:	1c5c      	adds	r4, r3, #1
 80065f6:	d1f8      	bne.n	80065ea <memmove+0x16>
 80065f8:	bcf0      	pop	{r4, r5, r6, r7}
 80065fa:	4770      	bx	lr
 80065fc:	2a0f      	cmp	r2, #15
 80065fe:	d93f      	bls.n	8006680 <memmove+0xac>
 8006600:	ea40 0301 	orr.w	r3, r0, r1
 8006604:	079b      	lsls	r3, r3, #30
 8006606:	d13f      	bne.n	8006688 <memmove+0xb4>
 8006608:	f1a2 0710 	sub.w	r7, r2, #16
 800660c:	093f      	lsrs	r7, r7, #4
 800660e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8006612:	3610      	adds	r6, #16
 8006614:	460c      	mov	r4, r1
 8006616:	4603      	mov	r3, r0
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	601d      	str	r5, [r3, #0]
 800661c:	6865      	ldr	r5, [r4, #4]
 800661e:	605d      	str	r5, [r3, #4]
 8006620:	68a5      	ldr	r5, [r4, #8]
 8006622:	609d      	str	r5, [r3, #8]
 8006624:	68e5      	ldr	r5, [r4, #12]
 8006626:	60dd      	str	r5, [r3, #12]
 8006628:	3310      	adds	r3, #16
 800662a:	42b3      	cmp	r3, r6
 800662c:	f104 0410 	add.w	r4, r4, #16
 8006630:	d1f2      	bne.n	8006618 <memmove+0x44>
 8006632:	1c7b      	adds	r3, r7, #1
 8006634:	f002 0c0f 	and.w	ip, r2, #15
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	f1bc 0f03 	cmp.w	ip, #3
 800663e:	4419      	add	r1, r3
 8006640:	4403      	add	r3, r0
 8006642:	d923      	bls.n	800668c <memmove+0xb8>
 8006644:	460e      	mov	r6, r1
 8006646:	461d      	mov	r5, r3
 8006648:	4664      	mov	r4, ip
 800664a:	3c04      	subs	r4, #4
 800664c:	f856 7b04 	ldr.w	r7, [r6], #4
 8006650:	f845 7b04 	str.w	r7, [r5], #4
 8006654:	2c03      	cmp	r4, #3
 8006656:	d8f8      	bhi.n	800664a <memmove+0x76>
 8006658:	f1ac 0404 	sub.w	r4, ip, #4
 800665c:	f024 0403 	bic.w	r4, r4, #3
 8006660:	3404      	adds	r4, #4
 8006662:	f002 0203 	and.w	r2, r2, #3
 8006666:	4423      	add	r3, r4
 8006668:	4421      	add	r1, r4
 800666a:	2a00      	cmp	r2, #0
 800666c:	d0c4      	beq.n	80065f8 <memmove+0x24>
 800666e:	441a      	add	r2, r3
 8006670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006674:	f803 4b01 	strb.w	r4, [r3], #1
 8006678:	4293      	cmp	r3, r2
 800667a:	d1f9      	bne.n	8006670 <memmove+0x9c>
 800667c:	bcf0      	pop	{r4, r5, r6, r7}
 800667e:	4770      	bx	lr
 8006680:	4603      	mov	r3, r0
 8006682:	2a00      	cmp	r2, #0
 8006684:	d1f3      	bne.n	800666e <memmove+0x9a>
 8006686:	e7b7      	b.n	80065f8 <memmove+0x24>
 8006688:	4603      	mov	r3, r0
 800668a:	e7f0      	b.n	800666e <memmove+0x9a>
 800668c:	4662      	mov	r2, ip
 800668e:	2a00      	cmp	r2, #0
 8006690:	d1ed      	bne.n	800666e <memmove+0x9a>
 8006692:	e7b1      	b.n	80065f8 <memmove+0x24>

08006694 <_realloc_r>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	b083      	sub	sp, #12
 800669c:	4690      	mov	r8, r2
 800669e:	4681      	mov	r9, r0
 80066a0:	2900      	cmp	r1, #0
 80066a2:	f000 80e2 	beq.w	800686a <_realloc_r+0x1d6>
 80066a6:	f7fc f9a1 	bl	80029ec <__malloc_lock>
 80066aa:	f108 060b 	add.w	r6, r8, #11
 80066ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80066b2:	2e16      	cmp	r6, #22
 80066b4:	f023 0503 	bic.w	r5, r3, #3
 80066b8:	f1a4 0708 	sub.w	r7, r4, #8
 80066bc:	d84b      	bhi.n	8006756 <_realloc_r+0xc2>
 80066be:	2110      	movs	r1, #16
 80066c0:	460e      	mov	r6, r1
 80066c2:	45b0      	cmp	r8, r6
 80066c4:	d84c      	bhi.n	8006760 <_realloc_r+0xcc>
 80066c6:	428d      	cmp	r5, r1
 80066c8:	da78      	bge.n	80067bc <_realloc_r+0x128>
 80066ca:	f8df b390 	ldr.w	fp, [pc, #912]	; 8006a5c <_realloc_r+0x3c8>
 80066ce:	f8db e008 	ldr.w	lr, [fp, #8]
 80066d2:	1978      	adds	r0, r7, r5
 80066d4:	4586      	cmp	lr, r0
 80066d6:	f000 80ce 	beq.w	8006876 <_realloc_r+0x1e2>
 80066da:	6842      	ldr	r2, [r0, #4]
 80066dc:	f022 0c01 	bic.w	ip, r2, #1
 80066e0:	4484      	add	ip, r0
 80066e2:	f8dc c004 	ldr.w	ip, [ip, #4]
 80066e6:	f01c 0f01 	tst.w	ip, #1
 80066ea:	d07a      	beq.n	80067e2 <_realloc_r+0x14e>
 80066ec:	2200      	movs	r2, #0
 80066ee:	4610      	mov	r0, r2
 80066f0:	07db      	lsls	r3, r3, #31
 80066f2:	f100 8092 	bmi.w	800681a <_realloc_r+0x186>
 80066f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80066fa:	ebc3 0a07 	rsb	sl, r3, r7
 80066fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	442b      	add	r3, r5
 8006708:	b388      	cbz	r0, 800676e <_realloc_r+0xda>
 800670a:	4570      	cmp	r0, lr
 800670c:	f000 80ed 	beq.w	80068ea <_realloc_r+0x256>
 8006710:	eb02 0e03 	add.w	lr, r2, r3
 8006714:	458e      	cmp	lr, r1
 8006716:	db2a      	blt.n	800676e <_realloc_r+0xda>
 8006718:	68c3      	ldr	r3, [r0, #12]
 800671a:	6882      	ldr	r2, [r0, #8]
 800671c:	4657      	mov	r7, sl
 800671e:	60d3      	str	r3, [r2, #12]
 8006720:	609a      	str	r2, [r3, #8]
 8006722:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006726:	f8da 300c 	ldr.w	r3, [sl, #12]
 800672a:	60cb      	str	r3, [r1, #12]
 800672c:	1f2a      	subs	r2, r5, #4
 800672e:	2a24      	cmp	r2, #36	; 0x24
 8006730:	6099      	str	r1, [r3, #8]
 8006732:	f200 8126 	bhi.w	8006982 <_realloc_r+0x2ee>
 8006736:	2a13      	cmp	r2, #19
 8006738:	f240 80b3 	bls.w	80068a2 <_realloc_r+0x20e>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	f8ca 3008 	str.w	r3, [sl, #8]
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	f8ca 300c 	str.w	r3, [sl, #12]
 8006748:	2a1b      	cmp	r2, #27
 800674a:	f200 8130 	bhi.w	80069ae <_realloc_r+0x31a>
 800674e:	3408      	adds	r4, #8
 8006750:	f10a 0310 	add.w	r3, sl, #16
 8006754:	e0a6      	b.n	80068a4 <_realloc_r+0x210>
 8006756:	f026 0607 	bic.w	r6, r6, #7
 800675a:	2e00      	cmp	r6, #0
 800675c:	4631      	mov	r1, r6
 800675e:	dab0      	bge.n	80066c2 <_realloc_r+0x2e>
 8006760:	230c      	movs	r3, #12
 8006762:	2000      	movs	r0, #0
 8006764:	f8c9 3000 	str.w	r3, [r9]
 8006768:	b003      	add	sp, #12
 800676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676e:	428b      	cmp	r3, r1
 8006770:	db53      	blt.n	800681a <_realloc_r+0x186>
 8006772:	4657      	mov	r7, sl
 8006774:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006778:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800677c:	1f2a      	subs	r2, r5, #4
 800677e:	2a24      	cmp	r2, #36	; 0x24
 8006780:	60c1      	str	r1, [r0, #12]
 8006782:	6088      	str	r0, [r1, #8]
 8006784:	f200 8109 	bhi.w	800699a <_realloc_r+0x306>
 8006788:	2a13      	cmp	r2, #19
 800678a:	f240 8104 	bls.w	8006996 <_realloc_r+0x302>
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	f8ca 1008 	str.w	r1, [sl, #8]
 8006794:	6861      	ldr	r1, [r4, #4]
 8006796:	f8ca 100c 	str.w	r1, [sl, #12]
 800679a:	2a1b      	cmp	r2, #27
 800679c:	f200 811c 	bhi.w	80069d8 <_realloc_r+0x344>
 80067a0:	3408      	adds	r4, #8
 80067a2:	f10a 0210 	add.w	r2, sl, #16
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	6861      	ldr	r1, [r4, #4]
 80067ac:	6051      	str	r1, [r2, #4]
 80067ae:	68a1      	ldr	r1, [r4, #8]
 80067b0:	6091      	str	r1, [r2, #8]
 80067b2:	461d      	mov	r5, r3
 80067b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80067b8:	463c      	mov	r4, r7
 80067ba:	4657      	mov	r7, sl
 80067bc:	1baa      	subs	r2, r5, r6
 80067be:	2a0f      	cmp	r2, #15
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	d819      	bhi.n	80067fa <_realloc_r+0x166>
 80067c6:	432b      	orrs	r3, r5
 80067c8:	443d      	add	r5, r7
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	686b      	ldr	r3, [r5, #4]
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	606b      	str	r3, [r5, #4]
 80067d4:	4648      	mov	r0, r9
 80067d6:	f7fc f90b 	bl	80029f0 <__malloc_unlock>
 80067da:	4620      	mov	r0, r4
 80067dc:	b003      	add	sp, #12
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	f022 0203 	bic.w	r2, r2, #3
 80067e6:	eb02 0c05 	add.w	ip, r2, r5
 80067ea:	458c      	cmp	ip, r1
 80067ec:	db80      	blt.n	80066f0 <_realloc_r+0x5c>
 80067ee:	68c2      	ldr	r2, [r0, #12]
 80067f0:	6881      	ldr	r1, [r0, #8]
 80067f2:	4665      	mov	r5, ip
 80067f4:	60ca      	str	r2, [r1, #12]
 80067f6:	6091      	str	r1, [r2, #8]
 80067f8:	e7e0      	b.n	80067bc <_realloc_r+0x128>
 80067fa:	19b9      	adds	r1, r7, r6
 80067fc:	f042 0001 	orr.w	r0, r2, #1
 8006800:	431e      	orrs	r6, r3
 8006802:	440a      	add	r2, r1
 8006804:	607e      	str	r6, [r7, #4]
 8006806:	6048      	str	r0, [r1, #4]
 8006808:	6853      	ldr	r3, [r2, #4]
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	3108      	adds	r1, #8
 8006810:	6053      	str	r3, [r2, #4]
 8006812:	4648      	mov	r0, r9
 8006814:	f7fe ff6a 	bl	80056ec <_free_r>
 8006818:	e7dc      	b.n	80067d4 <_realloc_r+0x140>
 800681a:	4641      	mov	r1, r8
 800681c:	4648      	mov	r0, r9
 800681e:	f7fb fd65 	bl	80022ec <_malloc_r>
 8006822:	4680      	mov	r8, r0
 8006824:	b1d0      	cbz	r0, 800685c <_realloc_r+0x1c8>
 8006826:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800682a:	f023 0201 	bic.w	r2, r3, #1
 800682e:	443a      	add	r2, r7
 8006830:	f1a0 0108 	sub.w	r1, r0, #8
 8006834:	4291      	cmp	r1, r2
 8006836:	f000 809e 	beq.w	8006976 <_realloc_r+0x2e2>
 800683a:	1f2a      	subs	r2, r5, #4
 800683c:	2a24      	cmp	r2, #36	; 0x24
 800683e:	d850      	bhi.n	80068e2 <_realloc_r+0x24e>
 8006840:	2a13      	cmp	r2, #19
 8006842:	d823      	bhi.n	800688c <_realloc_r+0x1f8>
 8006844:	4603      	mov	r3, r0
 8006846:	4622      	mov	r2, r4
 8006848:	6811      	ldr	r1, [r2, #0]
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	6851      	ldr	r1, [r2, #4]
 800684e:	6059      	str	r1, [r3, #4]
 8006850:	6892      	ldr	r2, [r2, #8]
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	4621      	mov	r1, r4
 8006856:	4648      	mov	r0, r9
 8006858:	f7fe ff48 	bl	80056ec <_free_r>
 800685c:	4648      	mov	r0, r9
 800685e:	f7fc f8c7 	bl	80029f0 <__malloc_unlock>
 8006862:	4640      	mov	r0, r8
 8006864:	b003      	add	sp, #12
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	4611      	mov	r1, r2
 800686c:	b003      	add	sp, #12
 800686e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006872:	f7fb bd3b 	b.w	80022ec <_malloc_r>
 8006876:	f8de 2004 	ldr.w	r2, [lr, #4]
 800687a:	f022 0203 	bic.w	r2, r2, #3
 800687e:	1950      	adds	r0, r2, r5
 8006880:	f106 0c10 	add.w	ip, r6, #16
 8006884:	4560      	cmp	r0, ip
 8006886:	da19      	bge.n	80068bc <_realloc_r+0x228>
 8006888:	4670      	mov	r0, lr
 800688a:	e731      	b.n	80066f0 <_realloc_r+0x5c>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	6003      	str	r3, [r0, #0]
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	6043      	str	r3, [r0, #4]
 8006894:	2a1b      	cmp	r2, #27
 8006896:	d863      	bhi.n	8006960 <_realloc_r+0x2cc>
 8006898:	f100 0308 	add.w	r3, r0, #8
 800689c:	f104 0208 	add.w	r2, r4, #8
 80068a0:	e7d2      	b.n	8006848 <_realloc_r+0x1b4>
 80068a2:	463b      	mov	r3, r7
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	6862      	ldr	r2, [r4, #4]
 80068aa:	605a      	str	r2, [r3, #4]
 80068ac:	68a2      	ldr	r2, [r4, #8]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	463c      	mov	r4, r7
 80068b2:	4675      	mov	r5, lr
 80068b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80068b8:	4657      	mov	r7, sl
 80068ba:	e77f      	b.n	80067bc <_realloc_r+0x128>
 80068bc:	4437      	add	r7, r6
 80068be:	1b83      	subs	r3, r0, r6
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	f8cb 7008 	str.w	r7, [fp, #8]
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	431e      	orrs	r6, r3
 80068d4:	4648      	mov	r0, r9
 80068d6:	f844 6c04 	str.w	r6, [r4, #-4]
 80068da:	f7fc f889 	bl	80029f0 <__malloc_unlock>
 80068de:	4620      	mov	r0, r4
 80068e0:	e77c      	b.n	80067dc <_realloc_r+0x148>
 80068e2:	4621      	mov	r1, r4
 80068e4:	f7ff fe76 	bl	80065d4 <memmove>
 80068e8:	e7b4      	b.n	8006854 <_realloc_r+0x1c0>
 80068ea:	eb02 0c03 	add.w	ip, r2, r3
 80068ee:	f106 0210 	add.w	r2, r6, #16
 80068f2:	4594      	cmp	ip, r2
 80068f4:	f6ff af3b 	blt.w	800676e <_realloc_r+0xda>
 80068f8:	4657      	mov	r7, sl
 80068fa:	f8da 300c 	ldr.w	r3, [sl, #12]
 80068fe:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006902:	1f2a      	subs	r2, r5, #4
 8006904:	2a24      	cmp	r2, #36	; 0x24
 8006906:	60cb      	str	r3, [r1, #12]
 8006908:	6099      	str	r1, [r3, #8]
 800690a:	f200 8087 	bhi.w	8006a1c <_realloc_r+0x388>
 800690e:	2a13      	cmp	r2, #19
 8006910:	d978      	bls.n	8006a04 <_realloc_r+0x370>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f8ca 3008 	str.w	r3, [sl, #8]
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	f8ca 300c 	str.w	r3, [sl, #12]
 800691e:	2a1b      	cmp	r2, #27
 8006920:	f200 8085 	bhi.w	8006a2e <_realloc_r+0x39a>
 8006924:	3408      	adds	r4, #8
 8006926:	f10a 0310 	add.w	r3, sl, #16
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	6862      	ldr	r2, [r4, #4]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	68a2      	ldr	r2, [r4, #8]
 8006934:	609a      	str	r2, [r3, #8]
 8006936:	eb0a 0306 	add.w	r3, sl, r6
 800693a:	ebc6 020c 	rsb	r2, r6, ip
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	f8cb 3008 	str.w	r3, [fp, #8]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	f8da 3004 	ldr.w	r3, [sl, #4]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	431e      	orrs	r6, r3
 8006952:	4648      	mov	r0, r9
 8006954:	f8ca 6004 	str.w	r6, [sl, #4]
 8006958:	f7fc f84a 	bl	80029f0 <__malloc_unlock>
 800695c:	4638      	mov	r0, r7
 800695e:	e73d      	b.n	80067dc <_realloc_r+0x148>
 8006960:	68a3      	ldr	r3, [r4, #8]
 8006962:	6083      	str	r3, [r0, #8]
 8006964:	68e3      	ldr	r3, [r4, #12]
 8006966:	60c3      	str	r3, [r0, #12]
 8006968:	2a24      	cmp	r2, #36	; 0x24
 800696a:	d02c      	beq.n	80069c6 <_realloc_r+0x332>
 800696c:	f100 0310 	add.w	r3, r0, #16
 8006970:	f104 0210 	add.w	r2, r4, #16
 8006974:	e768      	b.n	8006848 <_realloc_r+0x1b4>
 8006976:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800697a:	f022 0203 	bic.w	r2, r2, #3
 800697e:	4415      	add	r5, r2
 8006980:	e71c      	b.n	80067bc <_realloc_r+0x128>
 8006982:	4621      	mov	r1, r4
 8006984:	4638      	mov	r0, r7
 8006986:	4675      	mov	r5, lr
 8006988:	463c      	mov	r4, r7
 800698a:	f7ff fe23 	bl	80065d4 <memmove>
 800698e:	4657      	mov	r7, sl
 8006990:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006994:	e712      	b.n	80067bc <_realloc_r+0x128>
 8006996:	463a      	mov	r2, r7
 8006998:	e705      	b.n	80067a6 <_realloc_r+0x112>
 800699a:	4621      	mov	r1, r4
 800699c:	4638      	mov	r0, r7
 800699e:	461d      	mov	r5, r3
 80069a0:	463c      	mov	r4, r7
 80069a2:	f7ff fe17 	bl	80065d4 <memmove>
 80069a6:	4657      	mov	r7, sl
 80069a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80069ac:	e706      	b.n	80067bc <_realloc_r+0x128>
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	f8ca 3010 	str.w	r3, [sl, #16]
 80069b4:	68e3      	ldr	r3, [r4, #12]
 80069b6:	f8ca 3014 	str.w	r3, [sl, #20]
 80069ba:	2a24      	cmp	r2, #36	; 0x24
 80069bc:	d018      	beq.n	80069f0 <_realloc_r+0x35c>
 80069be:	3410      	adds	r4, #16
 80069c0:	f10a 0318 	add.w	r3, sl, #24
 80069c4:	e76e      	b.n	80068a4 <_realloc_r+0x210>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6103      	str	r3, [r0, #16]
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	6143      	str	r3, [r0, #20]
 80069ce:	f104 0218 	add.w	r2, r4, #24
 80069d2:	f100 0318 	add.w	r3, r0, #24
 80069d6:	e737      	b.n	8006848 <_realloc_r+0x1b4>
 80069d8:	68a1      	ldr	r1, [r4, #8]
 80069da:	f8ca 1010 	str.w	r1, [sl, #16]
 80069de:	68e1      	ldr	r1, [r4, #12]
 80069e0:	f8ca 1014 	str.w	r1, [sl, #20]
 80069e4:	2a24      	cmp	r2, #36	; 0x24
 80069e6:	d00f      	beq.n	8006a08 <_realloc_r+0x374>
 80069e8:	3410      	adds	r4, #16
 80069ea:	f10a 0218 	add.w	r2, sl, #24
 80069ee:	e6da      	b.n	80067a6 <_realloc_r+0x112>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	f8ca 3018 	str.w	r3, [sl, #24]
 80069f6:	6963      	ldr	r3, [r4, #20]
 80069f8:	f8ca 301c 	str.w	r3, [sl, #28]
 80069fc:	3418      	adds	r4, #24
 80069fe:	f10a 0320 	add.w	r3, sl, #32
 8006a02:	e74f      	b.n	80068a4 <_realloc_r+0x210>
 8006a04:	463b      	mov	r3, r7
 8006a06:	e790      	b.n	800692a <_realloc_r+0x296>
 8006a08:	6922      	ldr	r2, [r4, #16]
 8006a0a:	f8ca 2018 	str.w	r2, [sl, #24]
 8006a0e:	6962      	ldr	r2, [r4, #20]
 8006a10:	f8ca 201c 	str.w	r2, [sl, #28]
 8006a14:	3418      	adds	r4, #24
 8006a16:	f10a 0220 	add.w	r2, sl, #32
 8006a1a:	e6c4      	b.n	80067a6 <_realloc_r+0x112>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f8cd c004 	str.w	ip, [sp, #4]
 8006a24:	f7ff fdd6 	bl	80065d4 <memmove>
 8006a28:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006a2c:	e783      	b.n	8006936 <_realloc_r+0x2a2>
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	f8ca 3010 	str.w	r3, [sl, #16]
 8006a34:	68e3      	ldr	r3, [r4, #12]
 8006a36:	f8ca 3014 	str.w	r3, [sl, #20]
 8006a3a:	2a24      	cmp	r2, #36	; 0x24
 8006a3c:	d003      	beq.n	8006a46 <_realloc_r+0x3b2>
 8006a3e:	3410      	adds	r4, #16
 8006a40:	f10a 0318 	add.w	r3, sl, #24
 8006a44:	e771      	b.n	800692a <_realloc_r+0x296>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	f8ca 3018 	str.w	r3, [sl, #24]
 8006a4c:	6963      	ldr	r3, [r4, #20]
 8006a4e:	f8ca 301c 	str.w	r3, [sl, #28]
 8006a52:	3418      	adds	r4, #24
 8006a54:	f10a 0320 	add.w	r3, sl, #32
 8006a58:	e767      	b.n	800692a <_realloc_r+0x296>
 8006a5a:	bf00      	nop
 8006a5c:	20000454 	.word	0x20000454

08006a60 <__swbuf_r>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	460d      	mov	r5, r1
 8006a64:	4614      	mov	r4, r2
 8006a66:	4607      	mov	r7, r0
 8006a68:	b110      	cbz	r0, 8006a70 <__swbuf_r+0x10>
 8006a6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d048      	beq.n	8006b02 <__swbuf_r+0xa2>
 8006a70:	89a2      	ldrh	r2, [r4, #12]
 8006a72:	69a3      	ldr	r3, [r4, #24]
 8006a74:	60a3      	str	r3, [r4, #8]
 8006a76:	b293      	uxth	r3, r2
 8006a78:	0718      	lsls	r0, r3, #28
 8006a7a:	d538      	bpl.n	8006aee <__swbuf_r+0x8e>
 8006a7c:	6926      	ldr	r6, [r4, #16]
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d035      	beq.n	8006aee <__swbuf_r+0x8e>
 8006a82:	0499      	lsls	r1, r3, #18
 8006a84:	b2ed      	uxtb	r5, r5
 8006a86:	d515      	bpl.n	8006ab4 <__swbuf_r+0x54>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	6962      	ldr	r2, [r4, #20]
 8006a8c:	1b9e      	subs	r6, r3, r6
 8006a8e:	4296      	cmp	r6, r2
 8006a90:	da1c      	bge.n	8006acc <__swbuf_r+0x6c>
 8006a92:	3601      	adds	r6, #1
 8006a94:	68a2      	ldr	r2, [r4, #8]
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	60a2      	str	r2, [r4, #8]
 8006a9c:	6021      	str	r1, [r4, #0]
 8006a9e:	701d      	strb	r5, [r3, #0]
 8006aa0:	6963      	ldr	r3, [r4, #20]
 8006aa2:	42b3      	cmp	r3, r6
 8006aa4:	d01a      	beq.n	8006adc <__swbuf_r+0x7c>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d501      	bpl.n	8006ab0 <__swbuf_r+0x50>
 8006aac:	2d0a      	cmp	r5, #10
 8006aae:	d015      	beq.n	8006adc <__swbuf_r+0x7c>
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006abe:	6663      	str	r3, [r4, #100]	; 0x64
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	81a2      	strh	r2, [r4, #12]
 8006ac4:	6962      	ldr	r2, [r4, #20]
 8006ac6:	1b9e      	subs	r6, r3, r6
 8006ac8:	4296      	cmp	r6, r2
 8006aca:	dbe2      	blt.n	8006a92 <__swbuf_r+0x32>
 8006acc:	4638      	mov	r0, r7
 8006ace:	4621      	mov	r1, r4
 8006ad0:	f7fe fda8 	bl	8005624 <_fflush_r>
 8006ad4:	b940      	cbnz	r0, 8006ae8 <__swbuf_r+0x88>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	2601      	movs	r6, #1
 8006ada:	e7db      	b.n	8006a94 <__swbuf_r+0x34>
 8006adc:	4638      	mov	r0, r7
 8006ade:	4621      	mov	r1, r4
 8006ae0:	f7fe fda0 	bl	8005624 <_fflush_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d0e3      	beq.n	8006ab0 <__swbuf_r+0x50>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aee:	4638      	mov	r0, r7
 8006af0:	4621      	mov	r1, r4
 8006af2:	f7fd fc6d 	bl	80043d0 <__swsetup_r>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d1f6      	bne.n	8006ae8 <__swbuf_r+0x88>
 8006afa:	89a2      	ldrh	r2, [r4, #12]
 8006afc:	6926      	ldr	r6, [r4, #16]
 8006afe:	b293      	uxth	r3, r2
 8006b00:	e7bf      	b.n	8006a82 <__swbuf_r+0x22>
 8006b02:	f7fb fb47 	bl	8002194 <__sinit>
 8006b06:	e7b3      	b.n	8006a70 <__swbuf_r+0x10>

08006b08 <_wcrtomb_r>:
 8006b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	461e      	mov	r6, r3
 8006b0e:	b086      	sub	sp, #24
 8006b10:	460c      	mov	r4, r1
 8006b12:	4605      	mov	r5, r0
 8006b14:	4617      	mov	r7, r2
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <_wcrtomb_r+0x4c>)
 8006b18:	b191      	cbz	r1, 8006b40 <_wcrtomb_r+0x38>
 8006b1a:	f8d3 8000 	ldr.w	r8, [r3]
 8006b1e:	f7fe feb3 	bl	8005888 <__locale_charset>
 8006b22:	9600      	str	r6, [sp, #0]
 8006b24:	4603      	mov	r3, r0
 8006b26:	4621      	mov	r1, r4
 8006b28:	463a      	mov	r2, r7
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47c0      	blx	r8
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d103      	bne.n	8006b3a <_wcrtomb_r+0x32>
 8006b32:	2200      	movs	r2, #0
 8006b34:	238a      	movs	r3, #138	; 0x8a
 8006b36:	6032      	str	r2, [r6, #0]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	b006      	add	sp, #24
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b40:	681f      	ldr	r7, [r3, #0]
 8006b42:	f7fe fea1 	bl	8005888 <__locale_charset>
 8006b46:	9600      	str	r6, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	a903      	add	r1, sp, #12
 8006b50:	47b8      	blx	r7
 8006b52:	e7ec      	b.n	8006b2e <_wcrtomb_r+0x26>
 8006b54:	200008c0 	.word	0x200008c0

08006b58 <__ascii_wctomb>:
 8006b58:	b121      	cbz	r1, 8006b64 <__ascii_wctomb+0xc>
 8006b5a:	2aff      	cmp	r2, #255	; 0xff
 8006b5c:	d804      	bhi.n	8006b68 <__ascii_wctomb+0x10>
 8006b5e:	700a      	strb	r2, [r1, #0]
 8006b60:	2001      	movs	r0, #1
 8006b62:	4770      	bx	lr
 8006b64:	4608      	mov	r0, r1
 8006b66:	4770      	bx	lr
 8006b68:	238a      	movs	r3, #138	; 0x8a
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop

08006b74 <_getpid>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <_getpid+0xc>)
 8006b76:	2258      	movs	r2, #88	; 0x58
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7e:	4770      	bx	lr
 8006b80:	20008b20 	.word	0x20008b20

08006b84 <_isatty>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <_isatty+0xc>)
 8006b86:	2258      	movs	r2, #88	; 0x58
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20008b20 	.word	0x20008b20

08006b94 <_kill>:
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <_kill+0xc>)
 8006b96:	2258      	movs	r2, #88	; 0x58
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b9e:	4770      	bx	lr
 8006ba0:	20008b20 	.word	0x20008b20

08006ba4 <_exit>:
 8006ba4:	e7fe      	b.n	8006ba4 <_exit>
 8006ba6:	bf00      	nop

08006ba8 <__aeabi_drsub>:
 8006ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006bac:	e002      	b.n	8006bb4 <__adddf3>
 8006bae:	bf00      	nop

08006bb0 <__aeabi_dsub>:
 8006bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006bb4 <__adddf3>:
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006bba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006bbe:	ea94 0f05 	teq	r4, r5
 8006bc2:	bf08      	it	eq
 8006bc4:	ea90 0f02 	teqeq	r0, r2
 8006bc8:	bf1f      	itttt	ne
 8006bca:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006bce:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006bd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006bd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006bda:	f000 80e2 	beq.w	8006da2 <__adddf3+0x1ee>
 8006bde:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006be2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006be6:	bfb8      	it	lt
 8006be8:	426d      	neglt	r5, r5
 8006bea:	dd0c      	ble.n	8006c06 <__adddf3+0x52>
 8006bec:	442c      	add	r4, r5
 8006bee:	ea80 0202 	eor.w	r2, r0, r2
 8006bf2:	ea81 0303 	eor.w	r3, r1, r3
 8006bf6:	ea82 0000 	eor.w	r0, r2, r0
 8006bfa:	ea83 0101 	eor.w	r1, r3, r1
 8006bfe:	ea80 0202 	eor.w	r2, r0, r2
 8006c02:	ea81 0303 	eor.w	r3, r1, r3
 8006c06:	2d36      	cmp	r5, #54	; 0x36
 8006c08:	bf88      	it	hi
 8006c0a:	bd30      	pophi	{r4, r5, pc}
 8006c0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006c14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006c18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006c1c:	d002      	beq.n	8006c24 <__adddf3+0x70>
 8006c1e:	4240      	negs	r0, r0
 8006c20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006c28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006c2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006c30:	d002      	beq.n	8006c38 <__adddf3+0x84>
 8006c32:	4252      	negs	r2, r2
 8006c34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006c38:	ea94 0f05 	teq	r4, r5
 8006c3c:	f000 80a7 	beq.w	8006d8e <__adddf3+0x1da>
 8006c40:	f1a4 0401 	sub.w	r4, r4, #1
 8006c44:	f1d5 0e20 	rsbs	lr, r5, #32
 8006c48:	db0d      	blt.n	8006c66 <__adddf3+0xb2>
 8006c4a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006c4e:	fa22 f205 	lsr.w	r2, r2, r5
 8006c52:	1880      	adds	r0, r0, r2
 8006c54:	f141 0100 	adc.w	r1, r1, #0
 8006c58:	fa03 f20e 	lsl.w	r2, r3, lr
 8006c5c:	1880      	adds	r0, r0, r2
 8006c5e:	fa43 f305 	asr.w	r3, r3, r5
 8006c62:	4159      	adcs	r1, r3
 8006c64:	e00e      	b.n	8006c84 <__adddf3+0xd0>
 8006c66:	f1a5 0520 	sub.w	r5, r5, #32
 8006c6a:	f10e 0e20 	add.w	lr, lr, #32
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006c74:	bf28      	it	cs
 8006c76:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006c7a:	fa43 f305 	asr.w	r3, r3, r5
 8006c7e:	18c0      	adds	r0, r0, r3
 8006c80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c88:	d507      	bpl.n	8006c9a <__adddf3+0xe6>
 8006c8a:	f04f 0e00 	mov.w	lr, #0
 8006c8e:	f1dc 0c00 	rsbs	ip, ip, #0
 8006c92:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006c96:	eb6e 0101 	sbc.w	r1, lr, r1
 8006c9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006c9e:	d31b      	bcc.n	8006cd8 <__adddf3+0x124>
 8006ca0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006ca4:	d30c      	bcc.n	8006cc0 <__adddf3+0x10c>
 8006ca6:	0849      	lsrs	r1, r1, #1
 8006ca8:	ea5f 0030 	movs.w	r0, r0, rrx
 8006cac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006cb0:	f104 0401 	add.w	r4, r4, #1
 8006cb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006cb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006cbc:	f080 809a 	bcs.w	8006df4 <__adddf3+0x240>
 8006cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006cc4:	bf08      	it	eq
 8006cc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006cca:	f150 0000 	adcs.w	r0, r0, #0
 8006cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006cd2:	ea41 0105 	orr.w	r1, r1, r5
 8006cd6:	bd30      	pop	{r4, r5, pc}
 8006cd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006cdc:	4140      	adcs	r0, r0
 8006cde:	eb41 0101 	adc.w	r1, r1, r1
 8006ce2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ce6:	f1a4 0401 	sub.w	r4, r4, #1
 8006cea:	d1e9      	bne.n	8006cc0 <__adddf3+0x10c>
 8006cec:	f091 0f00 	teq	r1, #0
 8006cf0:	bf04      	itt	eq
 8006cf2:	4601      	moveq	r1, r0
 8006cf4:	2000      	moveq	r0, #0
 8006cf6:	fab1 f381 	clz	r3, r1
 8006cfa:	bf08      	it	eq
 8006cfc:	3320      	addeq	r3, #32
 8006cfe:	f1a3 030b 	sub.w	r3, r3, #11
 8006d02:	f1b3 0220 	subs.w	r2, r3, #32
 8006d06:	da0c      	bge.n	8006d22 <__adddf3+0x16e>
 8006d08:	320c      	adds	r2, #12
 8006d0a:	dd08      	ble.n	8006d1e <__adddf3+0x16a>
 8006d0c:	f102 0c14 	add.w	ip, r2, #20
 8006d10:	f1c2 020c 	rsb	r2, r2, #12
 8006d14:	fa01 f00c 	lsl.w	r0, r1, ip
 8006d18:	fa21 f102 	lsr.w	r1, r1, r2
 8006d1c:	e00c      	b.n	8006d38 <__adddf3+0x184>
 8006d1e:	f102 0214 	add.w	r2, r2, #20
 8006d22:	bfd8      	it	le
 8006d24:	f1c2 0c20 	rsble	ip, r2, #32
 8006d28:	fa01 f102 	lsl.w	r1, r1, r2
 8006d2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006d30:	bfdc      	itt	le
 8006d32:	ea41 010c 	orrle.w	r1, r1, ip
 8006d36:	4090      	lslle	r0, r2
 8006d38:	1ae4      	subs	r4, r4, r3
 8006d3a:	bfa2      	ittt	ge
 8006d3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006d40:	4329      	orrge	r1, r5
 8006d42:	bd30      	popge	{r4, r5, pc}
 8006d44:	ea6f 0404 	mvn.w	r4, r4
 8006d48:	3c1f      	subs	r4, #31
 8006d4a:	da1c      	bge.n	8006d86 <__adddf3+0x1d2>
 8006d4c:	340c      	adds	r4, #12
 8006d4e:	dc0e      	bgt.n	8006d6e <__adddf3+0x1ba>
 8006d50:	f104 0414 	add.w	r4, r4, #20
 8006d54:	f1c4 0220 	rsb	r2, r4, #32
 8006d58:	fa20 f004 	lsr.w	r0, r0, r4
 8006d5c:	fa01 f302 	lsl.w	r3, r1, r2
 8006d60:	ea40 0003 	orr.w	r0, r0, r3
 8006d64:	fa21 f304 	lsr.w	r3, r1, r4
 8006d68:	ea45 0103 	orr.w	r1, r5, r3
 8006d6c:	bd30      	pop	{r4, r5, pc}
 8006d6e:	f1c4 040c 	rsb	r4, r4, #12
 8006d72:	f1c4 0220 	rsb	r2, r4, #32
 8006d76:	fa20 f002 	lsr.w	r0, r0, r2
 8006d7a:	fa01 f304 	lsl.w	r3, r1, r4
 8006d7e:	ea40 0003 	orr.w	r0, r0, r3
 8006d82:	4629      	mov	r1, r5
 8006d84:	bd30      	pop	{r4, r5, pc}
 8006d86:	fa21 f004 	lsr.w	r0, r1, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	bd30      	pop	{r4, r5, pc}
 8006d8e:	f094 0f00 	teq	r4, #0
 8006d92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006d96:	bf06      	itte	eq
 8006d98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006d9c:	3401      	addeq	r4, #1
 8006d9e:	3d01      	subne	r5, #1
 8006da0:	e74e      	b.n	8006c40 <__adddf3+0x8c>
 8006da2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006da6:	bf18      	it	ne
 8006da8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006dac:	d029      	beq.n	8006e02 <__adddf3+0x24e>
 8006dae:	ea94 0f05 	teq	r4, r5
 8006db2:	bf08      	it	eq
 8006db4:	ea90 0f02 	teqeq	r0, r2
 8006db8:	d005      	beq.n	8006dc6 <__adddf3+0x212>
 8006dba:	ea54 0c00 	orrs.w	ip, r4, r0
 8006dbe:	bf04      	itt	eq
 8006dc0:	4619      	moveq	r1, r3
 8006dc2:	4610      	moveq	r0, r2
 8006dc4:	bd30      	pop	{r4, r5, pc}
 8006dc6:	ea91 0f03 	teq	r1, r3
 8006dca:	bf1e      	ittt	ne
 8006dcc:	2100      	movne	r1, #0
 8006dce:	2000      	movne	r0, #0
 8006dd0:	bd30      	popne	{r4, r5, pc}
 8006dd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006dd6:	d105      	bne.n	8006de4 <__adddf3+0x230>
 8006dd8:	0040      	lsls	r0, r0, #1
 8006dda:	4149      	adcs	r1, r1
 8006ddc:	bf28      	it	cs
 8006dde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006de2:	bd30      	pop	{r4, r5, pc}
 8006de4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006de8:	bf3c      	itt	cc
 8006dea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006dee:	bd30      	popcc	{r4, r5, pc}
 8006df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006df4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006df8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dfc:	f04f 0000 	mov.w	r0, #0
 8006e00:	bd30      	pop	{r4, r5, pc}
 8006e02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006e06:	bf1a      	itte	ne
 8006e08:	4619      	movne	r1, r3
 8006e0a:	4610      	movne	r0, r2
 8006e0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006e10:	bf1c      	itt	ne
 8006e12:	460b      	movne	r3, r1
 8006e14:	4602      	movne	r2, r0
 8006e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006e1a:	bf06      	itte	eq
 8006e1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006e20:	ea91 0f03 	teqeq	r1, r3
 8006e24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006e28:	bd30      	pop	{r4, r5, pc}
 8006e2a:	bf00      	nop

08006e2c <__aeabi_ui2d>:
 8006e2c:	f090 0f00 	teq	r0, #0
 8006e30:	bf04      	itt	eq
 8006e32:	2100      	moveq	r1, #0
 8006e34:	4770      	bxeq	lr
 8006e36:	b530      	push	{r4, r5, lr}
 8006e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006e40:	f04f 0500 	mov.w	r5, #0
 8006e44:	f04f 0100 	mov.w	r1, #0
 8006e48:	e750      	b.n	8006cec <__adddf3+0x138>
 8006e4a:	bf00      	nop

08006e4c <__aeabi_i2d>:
 8006e4c:	f090 0f00 	teq	r0, #0
 8006e50:	bf04      	itt	eq
 8006e52:	2100      	moveq	r1, #0
 8006e54:	4770      	bxeq	lr
 8006e56:	b530      	push	{r4, r5, lr}
 8006e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006e60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006e64:	bf48      	it	mi
 8006e66:	4240      	negmi	r0, r0
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	e73e      	b.n	8006cec <__adddf3+0x138>
 8006e6e:	bf00      	nop

08006e70 <__aeabi_f2d>:
 8006e70:	0042      	lsls	r2, r0, #1
 8006e72:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006e76:	ea4f 0131 	mov.w	r1, r1, rrx
 8006e7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006e7e:	bf1f      	itttt	ne
 8006e80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006e84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006e88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006e8c:	4770      	bxne	lr
 8006e8e:	f092 0f00 	teq	r2, #0
 8006e92:	bf14      	ite	ne
 8006e94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006e98:	4770      	bxeq	lr
 8006e9a:	b530      	push	{r4, r5, lr}
 8006e9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ea8:	e720      	b.n	8006cec <__adddf3+0x138>
 8006eaa:	bf00      	nop

08006eac <__aeabi_ul2d>:
 8006eac:	ea50 0201 	orrs.w	r2, r0, r1
 8006eb0:	bf08      	it	eq
 8006eb2:	4770      	bxeq	lr
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	f04f 0500 	mov.w	r5, #0
 8006eba:	e00a      	b.n	8006ed2 <__aeabi_l2d+0x16>

08006ebc <__aeabi_l2d>:
 8006ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8006ec0:	bf08      	it	eq
 8006ec2:	4770      	bxeq	lr
 8006ec4:	b530      	push	{r4, r5, lr}
 8006ec6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006eca:	d502      	bpl.n	8006ed2 <__aeabi_l2d+0x16>
 8006ecc:	4240      	negs	r0, r0
 8006ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006ed2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ed6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006eda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006ede:	f43f aedc 	beq.w	8006c9a <__adddf3+0xe6>
 8006ee2:	f04f 0203 	mov.w	r2, #3
 8006ee6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006eea:	bf18      	it	ne
 8006eec:	3203      	addne	r2, #3
 8006eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006ef2:	bf18      	it	ne
 8006ef4:	3203      	addne	r2, #3
 8006ef6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006efa:	f1c2 0320 	rsb	r3, r2, #32
 8006efe:	fa00 fc03 	lsl.w	ip, r0, r3
 8006f02:	fa20 f002 	lsr.w	r0, r0, r2
 8006f06:	fa01 fe03 	lsl.w	lr, r1, r3
 8006f0a:	ea40 000e 	orr.w	r0, r0, lr
 8006f0e:	fa21 f102 	lsr.w	r1, r1, r2
 8006f12:	4414      	add	r4, r2
 8006f14:	e6c1      	b.n	8006c9a <__adddf3+0xe6>
 8006f16:	bf00      	nop

08006f18 <__aeabi_dmul>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f26:	bf1d      	ittte	ne
 8006f28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f2c:	ea94 0f0c 	teqne	r4, ip
 8006f30:	ea95 0f0c 	teqne	r5, ip
 8006f34:	f000 f8de 	bleq	80070f4 <__aeabi_dmul+0x1dc>
 8006f38:	442c      	add	r4, r5
 8006f3a:	ea81 0603 	eor.w	r6, r1, r3
 8006f3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006f42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006f46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006f4a:	bf18      	it	ne
 8006f4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006f50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f58:	d038      	beq.n	8006fcc <__aeabi_dmul+0xb4>
 8006f5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8006f5e:	f04f 0500 	mov.w	r5, #0
 8006f62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006f66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006f6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006f6e:	f04f 0600 	mov.w	r6, #0
 8006f72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006f76:	f09c 0f00 	teq	ip, #0
 8006f7a:	bf18      	it	ne
 8006f7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006f80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006f84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006f88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006f8c:	d204      	bcs.n	8006f98 <__aeabi_dmul+0x80>
 8006f8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006f92:	416d      	adcs	r5, r5
 8006f94:	eb46 0606 	adc.w	r6, r6, r6
 8006f98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006f9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006fa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006fa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006fa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006fac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006fb0:	bf88      	it	hi
 8006fb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006fb6:	d81e      	bhi.n	8006ff6 <__aeabi_dmul+0xde>
 8006fb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006fbc:	bf08      	it	eq
 8006fbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006fc2:	f150 0000 	adcs.w	r0, r0, #0
 8006fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006fd0:	ea46 0101 	orr.w	r1, r6, r1
 8006fd4:	ea40 0002 	orr.w	r0, r0, r2
 8006fd8:	ea81 0103 	eor.w	r1, r1, r3
 8006fdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006fe0:	bfc2      	ittt	gt
 8006fe2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006fe6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006fea:	bd70      	popgt	{r4, r5, r6, pc}
 8006fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ff0:	f04f 0e00 	mov.w	lr, #0
 8006ff4:	3c01      	subs	r4, #1
 8006ff6:	f300 80ab 	bgt.w	8007150 <__aeabi_dmul+0x238>
 8006ffa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006ffe:	bfde      	ittt	le
 8007000:	2000      	movle	r0, #0
 8007002:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007006:	bd70      	pople	{r4, r5, r6, pc}
 8007008:	f1c4 0400 	rsb	r4, r4, #0
 800700c:	3c20      	subs	r4, #32
 800700e:	da35      	bge.n	800707c <__aeabi_dmul+0x164>
 8007010:	340c      	adds	r4, #12
 8007012:	dc1b      	bgt.n	800704c <__aeabi_dmul+0x134>
 8007014:	f104 0414 	add.w	r4, r4, #20
 8007018:	f1c4 0520 	rsb	r5, r4, #32
 800701c:	fa00 f305 	lsl.w	r3, r0, r5
 8007020:	fa20 f004 	lsr.w	r0, r0, r4
 8007024:	fa01 f205 	lsl.w	r2, r1, r5
 8007028:	ea40 0002 	orr.w	r0, r0, r2
 800702c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007038:	fa21 f604 	lsr.w	r6, r1, r4
 800703c:	eb42 0106 	adc.w	r1, r2, r6
 8007040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007044:	bf08      	it	eq
 8007046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f1c4 040c 	rsb	r4, r4, #12
 8007050:	f1c4 0520 	rsb	r5, r4, #32
 8007054:	fa00 f304 	lsl.w	r3, r0, r4
 8007058:	fa20 f005 	lsr.w	r0, r0, r5
 800705c:	fa01 f204 	lsl.w	r2, r1, r4
 8007060:	ea40 0002 	orr.w	r0, r0, r2
 8007064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007068:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800706c:	f141 0100 	adc.w	r1, r1, #0
 8007070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007074:	bf08      	it	eq
 8007076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f1c4 0520 	rsb	r5, r4, #32
 8007080:	fa00 f205 	lsl.w	r2, r0, r5
 8007084:	ea4e 0e02 	orr.w	lr, lr, r2
 8007088:	fa20 f304 	lsr.w	r3, r0, r4
 800708c:	fa01 f205 	lsl.w	r2, r1, r5
 8007090:	ea43 0302 	orr.w	r3, r3, r2
 8007094:	fa21 f004 	lsr.w	r0, r1, r4
 8007098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800709c:	fa21 f204 	lsr.w	r2, r1, r4
 80070a0:	ea20 0002 	bic.w	r0, r0, r2
 80070a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80070a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80070ac:	bf08      	it	eq
 80070ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	f094 0f00 	teq	r4, #0
 80070b8:	d10f      	bne.n	80070da <__aeabi_dmul+0x1c2>
 80070ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80070be:	0040      	lsls	r0, r0, #1
 80070c0:	eb41 0101 	adc.w	r1, r1, r1
 80070c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80070c8:	bf08      	it	eq
 80070ca:	3c01      	subeq	r4, #1
 80070cc:	d0f7      	beq.n	80070be <__aeabi_dmul+0x1a6>
 80070ce:	ea41 0106 	orr.w	r1, r1, r6
 80070d2:	f095 0f00 	teq	r5, #0
 80070d6:	bf18      	it	ne
 80070d8:	4770      	bxne	lr
 80070da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80070de:	0052      	lsls	r2, r2, #1
 80070e0:	eb43 0303 	adc.w	r3, r3, r3
 80070e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80070e8:	bf08      	it	eq
 80070ea:	3d01      	subeq	r5, #1
 80070ec:	d0f7      	beq.n	80070de <__aeabi_dmul+0x1c6>
 80070ee:	ea43 0306 	orr.w	r3, r3, r6
 80070f2:	4770      	bx	lr
 80070f4:	ea94 0f0c 	teq	r4, ip
 80070f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80070fc:	bf18      	it	ne
 80070fe:	ea95 0f0c 	teqne	r5, ip
 8007102:	d00c      	beq.n	800711e <__aeabi_dmul+0x206>
 8007104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007108:	bf18      	it	ne
 800710a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800710e:	d1d1      	bne.n	80070b4 <__aeabi_dmul+0x19c>
 8007110:	ea81 0103 	eor.w	r1, r1, r3
 8007114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007118:	f04f 0000 	mov.w	r0, #0
 800711c:	bd70      	pop	{r4, r5, r6, pc}
 800711e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007122:	bf06      	itte	eq
 8007124:	4610      	moveq	r0, r2
 8007126:	4619      	moveq	r1, r3
 8007128:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800712c:	d019      	beq.n	8007162 <__aeabi_dmul+0x24a>
 800712e:	ea94 0f0c 	teq	r4, ip
 8007132:	d102      	bne.n	800713a <__aeabi_dmul+0x222>
 8007134:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007138:	d113      	bne.n	8007162 <__aeabi_dmul+0x24a>
 800713a:	ea95 0f0c 	teq	r5, ip
 800713e:	d105      	bne.n	800714c <__aeabi_dmul+0x234>
 8007140:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007144:	bf1c      	itt	ne
 8007146:	4610      	movne	r0, r2
 8007148:	4619      	movne	r1, r3
 800714a:	d10a      	bne.n	8007162 <__aeabi_dmul+0x24a>
 800714c:	ea81 0103 	eor.w	r1, r1, r3
 8007150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007154:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007158:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800715c:	f04f 0000 	mov.w	r0, #0
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007166:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800716a:	bd70      	pop	{r4, r5, r6, pc}

0800716c <__aeabi_ddiv>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007172:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007176:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800717a:	bf1d      	ittte	ne
 800717c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007180:	ea94 0f0c 	teqne	r4, ip
 8007184:	ea95 0f0c 	teqne	r5, ip
 8007188:	f000 f8a7 	bleq	80072da <__aeabi_ddiv+0x16e>
 800718c:	eba4 0405 	sub.w	r4, r4, r5
 8007190:	ea81 0e03 	eor.w	lr, r1, r3
 8007194:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007198:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800719c:	f000 8088 	beq.w	80072b0 <__aeabi_ddiv+0x144>
 80071a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80071a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80071a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80071ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80071b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80071b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80071b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80071bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80071c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80071c4:	429d      	cmp	r5, r3
 80071c6:	bf08      	it	eq
 80071c8:	4296      	cmpeq	r6, r2
 80071ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80071ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80071d2:	d202      	bcs.n	80071da <__aeabi_ddiv+0x6e>
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80071da:	1ab6      	subs	r6, r6, r2
 80071dc:	eb65 0503 	sbc.w	r5, r5, r3
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80071e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80071ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80071ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80071f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80071f6:	bf22      	ittt	cs
 80071f8:	1ab6      	subcs	r6, r6, r2
 80071fa:	4675      	movcs	r5, lr
 80071fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	ea4f 0232 	mov.w	r2, r2, rrx
 8007206:	ebb6 0e02 	subs.w	lr, r6, r2
 800720a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800720e:	bf22      	ittt	cs
 8007210:	1ab6      	subcs	r6, r6, r2
 8007212:	4675      	movcs	r5, lr
 8007214:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	ea4f 0232 	mov.w	r2, r2, rrx
 800721e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007222:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007226:	bf22      	ittt	cs
 8007228:	1ab6      	subcs	r6, r6, r2
 800722a:	4675      	movcs	r5, lr
 800722c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	ea4f 0232 	mov.w	r2, r2, rrx
 8007236:	ebb6 0e02 	subs.w	lr, r6, r2
 800723a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800723e:	bf22      	ittt	cs
 8007240:	1ab6      	subcs	r6, r6, r2
 8007242:	4675      	movcs	r5, lr
 8007244:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007248:	ea55 0e06 	orrs.w	lr, r5, r6
 800724c:	d018      	beq.n	8007280 <__aeabi_ddiv+0x114>
 800724e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007252:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007256:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800725a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800725e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007262:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007266:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800726a:	d1c0      	bne.n	80071ee <__aeabi_ddiv+0x82>
 800726c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007270:	d10b      	bne.n	800728a <__aeabi_ddiv+0x11e>
 8007272:	ea41 0100 	orr.w	r1, r1, r0
 8007276:	f04f 0000 	mov.w	r0, #0
 800727a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800727e:	e7b6      	b.n	80071ee <__aeabi_ddiv+0x82>
 8007280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007284:	bf04      	itt	eq
 8007286:	4301      	orreq	r1, r0
 8007288:	2000      	moveq	r0, #0
 800728a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800728e:	bf88      	it	hi
 8007290:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007294:	f63f aeaf 	bhi.w	8006ff6 <__aeabi_dmul+0xde>
 8007298:	ebb5 0c03 	subs.w	ip, r5, r3
 800729c:	bf04      	itt	eq
 800729e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80072a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80072a6:	f150 0000 	adcs.w	r0, r0, #0
 80072aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80072b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80072b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80072bc:	bfc2      	ittt	gt
 80072be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80072c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80072c6:	bd70      	popgt	{r4, r5, r6, pc}
 80072c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072cc:	f04f 0e00 	mov.w	lr, #0
 80072d0:	3c01      	subs	r4, #1
 80072d2:	e690      	b.n	8006ff6 <__aeabi_dmul+0xde>
 80072d4:	ea45 0e06 	orr.w	lr, r5, r6
 80072d8:	e68d      	b.n	8006ff6 <__aeabi_dmul+0xde>
 80072da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072de:	ea94 0f0c 	teq	r4, ip
 80072e2:	bf08      	it	eq
 80072e4:	ea95 0f0c 	teqeq	r5, ip
 80072e8:	f43f af3b 	beq.w	8007162 <__aeabi_dmul+0x24a>
 80072ec:	ea94 0f0c 	teq	r4, ip
 80072f0:	d10a      	bne.n	8007308 <__aeabi_ddiv+0x19c>
 80072f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80072f6:	f47f af34 	bne.w	8007162 <__aeabi_dmul+0x24a>
 80072fa:	ea95 0f0c 	teq	r5, ip
 80072fe:	f47f af25 	bne.w	800714c <__aeabi_dmul+0x234>
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	e72c      	b.n	8007162 <__aeabi_dmul+0x24a>
 8007308:	ea95 0f0c 	teq	r5, ip
 800730c:	d106      	bne.n	800731c <__aeabi_ddiv+0x1b0>
 800730e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007312:	f43f aefd 	beq.w	8007110 <__aeabi_dmul+0x1f8>
 8007316:	4610      	mov	r0, r2
 8007318:	4619      	mov	r1, r3
 800731a:	e722      	b.n	8007162 <__aeabi_dmul+0x24a>
 800731c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007320:	bf18      	it	ne
 8007322:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007326:	f47f aec5 	bne.w	80070b4 <__aeabi_dmul+0x19c>
 800732a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800732e:	f47f af0d 	bne.w	800714c <__aeabi_dmul+0x234>
 8007332:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007336:	f47f aeeb 	bne.w	8007110 <__aeabi_dmul+0x1f8>
 800733a:	e712      	b.n	8007162 <__aeabi_dmul+0x24a>

0800733c <__gedf2>:
 800733c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007340:	e006      	b.n	8007350 <__cmpdf2+0x4>
 8007342:	bf00      	nop

08007344 <__ledf2>:
 8007344:	f04f 0c01 	mov.w	ip, #1
 8007348:	e002      	b.n	8007350 <__cmpdf2+0x4>
 800734a:	bf00      	nop

0800734c <__cmpdf2>:
 800734c:	f04f 0c01 	mov.w	ip, #1
 8007350:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007354:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800735c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007360:	bf18      	it	ne
 8007362:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007366:	d01b      	beq.n	80073a0 <__cmpdf2+0x54>
 8007368:	b001      	add	sp, #4
 800736a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800736e:	bf0c      	ite	eq
 8007370:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007374:	ea91 0f03 	teqne	r1, r3
 8007378:	bf02      	ittt	eq
 800737a:	ea90 0f02 	teqeq	r0, r2
 800737e:	2000      	moveq	r0, #0
 8007380:	4770      	bxeq	lr
 8007382:	f110 0f00 	cmn.w	r0, #0
 8007386:	ea91 0f03 	teq	r1, r3
 800738a:	bf58      	it	pl
 800738c:	4299      	cmppl	r1, r3
 800738e:	bf08      	it	eq
 8007390:	4290      	cmpeq	r0, r2
 8007392:	bf2c      	ite	cs
 8007394:	17d8      	asrcs	r0, r3, #31
 8007396:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800739a:	f040 0001 	orr.w	r0, r0, #1
 800739e:	4770      	bx	lr
 80073a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80073a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80073a8:	d102      	bne.n	80073b0 <__cmpdf2+0x64>
 80073aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80073ae:	d107      	bne.n	80073c0 <__cmpdf2+0x74>
 80073b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80073b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80073b8:	d1d6      	bne.n	8007368 <__cmpdf2+0x1c>
 80073ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80073be:	d0d3      	beq.n	8007368 <__cmpdf2+0x1c>
 80073c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop

080073c8 <__aeabi_cdrcmple>:
 80073c8:	4684      	mov	ip, r0
 80073ca:	4610      	mov	r0, r2
 80073cc:	4662      	mov	r2, ip
 80073ce:	468c      	mov	ip, r1
 80073d0:	4619      	mov	r1, r3
 80073d2:	4663      	mov	r3, ip
 80073d4:	e000      	b.n	80073d8 <__aeabi_cdcmpeq>
 80073d6:	bf00      	nop

080073d8 <__aeabi_cdcmpeq>:
 80073d8:	b501      	push	{r0, lr}
 80073da:	f7ff ffb7 	bl	800734c <__cmpdf2>
 80073de:	2800      	cmp	r0, #0
 80073e0:	bf48      	it	mi
 80073e2:	f110 0f00 	cmnmi.w	r0, #0
 80073e6:	bd01      	pop	{r0, pc}

080073e8 <__aeabi_dcmpeq>:
 80073e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80073ec:	f7ff fff4 	bl	80073d8 <__aeabi_cdcmpeq>
 80073f0:	bf0c      	ite	eq
 80073f2:	2001      	moveq	r0, #1
 80073f4:	2000      	movne	r0, #0
 80073f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80073fa:	bf00      	nop

080073fc <__aeabi_dcmplt>:
 80073fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007400:	f7ff ffea 	bl	80073d8 <__aeabi_cdcmpeq>
 8007404:	bf34      	ite	cc
 8007406:	2001      	movcc	r0, #1
 8007408:	2000      	movcs	r0, #0
 800740a:	f85d fb08 	ldr.w	pc, [sp], #8
 800740e:	bf00      	nop

08007410 <__aeabi_dcmple>:
 8007410:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007414:	f7ff ffe0 	bl	80073d8 <__aeabi_cdcmpeq>
 8007418:	bf94      	ite	ls
 800741a:	2001      	movls	r0, #1
 800741c:	2000      	movhi	r0, #0
 800741e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007422:	bf00      	nop

08007424 <__aeabi_dcmpge>:
 8007424:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007428:	f7ff ffce 	bl	80073c8 <__aeabi_cdrcmple>
 800742c:	bf94      	ite	ls
 800742e:	2001      	movls	r0, #1
 8007430:	2000      	movhi	r0, #0
 8007432:	f85d fb08 	ldr.w	pc, [sp], #8
 8007436:	bf00      	nop

08007438 <__aeabi_dcmpgt>:
 8007438:	f84d ed08 	str.w	lr, [sp, #-8]!
 800743c:	f7ff ffc4 	bl	80073c8 <__aeabi_cdrcmple>
 8007440:	bf34      	ite	cc
 8007442:	2001      	movcc	r0, #1
 8007444:	2000      	movcs	r0, #0
 8007446:	f85d fb08 	ldr.w	pc, [sp], #8
 800744a:	bf00      	nop

0800744c <__aeabi_d2iz>:
 800744c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007450:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007454:	d215      	bcs.n	8007482 <__aeabi_d2iz+0x36>
 8007456:	d511      	bpl.n	800747c <__aeabi_d2iz+0x30>
 8007458:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800745c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007460:	d912      	bls.n	8007488 <__aeabi_d2iz+0x3c>
 8007462:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800746a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800746e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007472:	fa23 f002 	lsr.w	r0, r3, r2
 8007476:	bf18      	it	ne
 8007478:	4240      	negne	r0, r0
 800747a:	4770      	bx	lr
 800747c:	f04f 0000 	mov.w	r0, #0
 8007480:	4770      	bx	lr
 8007482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007486:	d105      	bne.n	8007494 <__aeabi_d2iz+0x48>
 8007488:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800748c:	bf08      	it	eq
 800748e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007492:	4770      	bx	lr
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop

0800749c <__aeabi_uldivmod>:
 800749c:	b94b      	cbnz	r3, 80074b2 <__aeabi_uldivmod+0x16>
 800749e:	b942      	cbnz	r2, 80074b2 <__aeabi_uldivmod+0x16>
 80074a0:	2900      	cmp	r1, #0
 80074a2:	bf08      	it	eq
 80074a4:	2800      	cmpeq	r0, #0
 80074a6:	d002      	beq.n	80074ae <__aeabi_uldivmod+0x12>
 80074a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074ac:	4608      	mov	r0, r1
 80074ae:	f000 b83b 	b.w	8007528 <__aeabi_idiv0>
 80074b2:	b082      	sub	sp, #8
 80074b4:	46ec      	mov	ip, sp
 80074b6:	e92d 5000 	stmdb	sp!, {ip, lr}
 80074ba:	f000 f81d 	bl	80074f8 <__gnu_uldivmod_helper>
 80074be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80074c2:	b002      	add	sp, #8
 80074c4:	bc0c      	pop	{r2, r3}
 80074c6:	4770      	bx	lr

080074c8 <__gnu_ldivmod_helper>:
 80074c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80074cc:	9e06      	ldr	r6, [sp, #24]
 80074ce:	4614      	mov	r4, r2
 80074d0:	461d      	mov	r5, r3
 80074d2:	4680      	mov	r8, r0
 80074d4:	4689      	mov	r9, r1
 80074d6:	f000 f829 	bl	800752c <__divdi3>
 80074da:	fb04 f301 	mul.w	r3, r4, r1
 80074de:	fb00 3305 	mla	r3, r0, r5, r3
 80074e2:	fba4 4500 	umull	r4, r5, r4, r0
 80074e6:	441d      	add	r5, r3
 80074e8:	ebb8 0404 	subs.w	r4, r8, r4
 80074ec:	eb69 0505 	sbc.w	r5, r9, r5
 80074f0:	e9c6 4500 	strd	r4, r5, [r6]
 80074f4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080074f8 <__gnu_uldivmod_helper>:
 80074f8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80074fc:	9e06      	ldr	r6, [sp, #24]
 80074fe:	4614      	mov	r4, r2
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	461d      	mov	r5, r3
 8007506:	f000 f95d 	bl	80077c4 <__udivdi3>
 800750a:	fb00 f505 	mul.w	r5, r0, r5
 800750e:	fb04 5301 	mla	r3, r4, r1, r5
 8007512:	fba0 4504 	umull	r4, r5, r0, r4
 8007516:	441d      	add	r5, r3
 8007518:	ebb8 0404 	subs.w	r4, r8, r4
 800751c:	eb69 0505 	sbc.w	r5, r9, r5
 8007520:	e9c6 4500 	strd	r4, r5, [r6]
 8007524:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08007528 <__aeabi_idiv0>:
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop

0800752c <__divdi3>:
 800752c:	2900      	cmp	r1, #0
 800752e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007532:	f2c0 809f 	blt.w	8007674 <__divdi3+0x148>
 8007536:	2400      	movs	r4, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	f2c0 8096 	blt.w	800766a <__divdi3+0x13e>
 800753e:	4615      	mov	r5, r2
 8007540:	4606      	mov	r6, r0
 8007542:	460f      	mov	r7, r1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d13e      	bne.n	80075c6 <__divdi3+0x9a>
 8007548:	428a      	cmp	r2, r1
 800754a:	d957      	bls.n	80075fc <__divdi3+0xd0>
 800754c:	fab2 f382 	clz	r3, r2
 8007550:	b14b      	cbz	r3, 8007566 <__divdi3+0x3a>
 8007552:	f1c3 0220 	rsb	r2, r3, #32
 8007556:	fa01 f703 	lsl.w	r7, r1, r3
 800755a:	fa20 f202 	lsr.w	r2, r0, r2
 800755e:	409d      	lsls	r5, r3
 8007560:	4317      	orrs	r7, r2
 8007562:	fa00 f603 	lsl.w	r6, r0, r3
 8007566:	0c29      	lsrs	r1, r5, #16
 8007568:	fbb7 f2f1 	udiv	r2, r7, r1
 800756c:	0c33      	lsrs	r3, r6, #16
 800756e:	fb01 7c12 	mls	ip, r1, r2, r7
 8007572:	b2a8      	uxth	r0, r5
 8007574:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8007578:	fb00 f302 	mul.w	r3, r0, r2
 800757c:	42bb      	cmp	r3, r7
 800757e:	d909      	bls.n	8007594 <__divdi3+0x68>
 8007580:	197f      	adds	r7, r7, r5
 8007582:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8007586:	f080 8101 	bcs.w	800778c <__divdi3+0x260>
 800758a:	42bb      	cmp	r3, r7
 800758c:	f240 80fe 	bls.w	800778c <__divdi3+0x260>
 8007590:	3a02      	subs	r2, #2
 8007592:	442f      	add	r7, r5
 8007594:	1aff      	subs	r7, r7, r3
 8007596:	fbb7 f3f1 	udiv	r3, r7, r1
 800759a:	b2b6      	uxth	r6, r6
 800759c:	fb01 7113 	mls	r1, r1, r3, r7
 80075a0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80075a4:	fb00 f003 	mul.w	r0, r0, r3
 80075a8:	4288      	cmp	r0, r1
 80075aa:	d908      	bls.n	80075be <__divdi3+0x92>
 80075ac:	1949      	adds	r1, r1, r5
 80075ae:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 80075b2:	f080 80ed 	bcs.w	8007790 <__divdi3+0x264>
 80075b6:	4288      	cmp	r0, r1
 80075b8:	f240 80ea 	bls.w	8007790 <__divdi3+0x264>
 80075bc:	3b02      	subs	r3, #2
 80075be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80075c2:	2300      	movs	r3, #0
 80075c4:	e003      	b.n	80075ce <__divdi3+0xa2>
 80075c6:	428b      	cmp	r3, r1
 80075c8:	d90a      	bls.n	80075e0 <__divdi3+0xb4>
 80075ca:	2300      	movs	r3, #0
 80075cc:	461a      	mov	r2, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	b114      	cbz	r4, 80075da <__divdi3+0xae>
 80075d4:	4240      	negs	r0, r0
 80075d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80075da:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075de:	4770      	bx	lr
 80075e0:	fab3 f883 	clz	r8, r3
 80075e4:	f1b8 0f00 	cmp.w	r8, #0
 80075e8:	f040 8084 	bne.w	80076f4 <__divdi3+0x1c8>
 80075ec:	428b      	cmp	r3, r1
 80075ee:	d302      	bcc.n	80075f6 <__divdi3+0xca>
 80075f0:	4282      	cmp	r2, r0
 80075f2:	f200 80de 	bhi.w	80077b2 <__divdi3+0x286>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2201      	movs	r2, #1
 80075fa:	e7e8      	b.n	80075ce <__divdi3+0xa2>
 80075fc:	b912      	cbnz	r2, 8007604 <__divdi3+0xd8>
 80075fe:	2301      	movs	r3, #1
 8007600:	fbb3 f5f2 	udiv	r5, r3, r2
 8007604:	fab5 f285 	clz	r2, r5
 8007608:	2a00      	cmp	r2, #0
 800760a:	d139      	bne.n	8007680 <__divdi3+0x154>
 800760c:	1b7f      	subs	r7, r7, r5
 800760e:	0c28      	lsrs	r0, r5, #16
 8007610:	fa1f fc85 	uxth.w	ip, r5
 8007614:	2301      	movs	r3, #1
 8007616:	fbb7 f1f0 	udiv	r1, r7, r0
 800761a:	0c32      	lsrs	r2, r6, #16
 800761c:	fb00 7711 	mls	r7, r0, r1, r7
 8007620:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8007624:	fb0c f201 	mul.w	r2, ip, r1
 8007628:	42ba      	cmp	r2, r7
 800762a:	d907      	bls.n	800763c <__divdi3+0x110>
 800762c:	197f      	adds	r7, r7, r5
 800762e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8007632:	d202      	bcs.n	800763a <__divdi3+0x10e>
 8007634:	42ba      	cmp	r2, r7
 8007636:	f200 80c1 	bhi.w	80077bc <__divdi3+0x290>
 800763a:	4641      	mov	r1, r8
 800763c:	1abf      	subs	r7, r7, r2
 800763e:	fbb7 f2f0 	udiv	r2, r7, r0
 8007642:	b2b6      	uxth	r6, r6
 8007644:	fb00 7012 	mls	r0, r0, r2, r7
 8007648:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 800764c:	fb0c fc02 	mul.w	ip, ip, r2
 8007650:	4584      	cmp	ip, r0
 8007652:	d907      	bls.n	8007664 <__divdi3+0x138>
 8007654:	1940      	adds	r0, r0, r5
 8007656:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 800765a:	d202      	bcs.n	8007662 <__divdi3+0x136>
 800765c:	4584      	cmp	ip, r0
 800765e:	f200 80ab 	bhi.w	80077b8 <__divdi3+0x28c>
 8007662:	463a      	mov	r2, r7
 8007664:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007668:	e7b1      	b.n	80075ce <__divdi3+0xa2>
 800766a:	43e4      	mvns	r4, r4
 800766c:	4252      	negs	r2, r2
 800766e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007672:	e764      	b.n	800753e <__divdi3+0x12>
 8007674:	4240      	negs	r0, r0
 8007676:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800767a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800767e:	e75b      	b.n	8007538 <__divdi3+0xc>
 8007680:	4095      	lsls	r5, r2
 8007682:	f1c2 0320 	rsb	r3, r2, #32
 8007686:	fa27 f103 	lsr.w	r1, r7, r3
 800768a:	0c28      	lsrs	r0, r5, #16
 800768c:	fa26 f303 	lsr.w	r3, r6, r3
 8007690:	4097      	lsls	r7, r2
 8007692:	fbb1 f8f0 	udiv	r8, r1, r0
 8007696:	431f      	orrs	r7, r3
 8007698:	0c3b      	lsrs	r3, r7, #16
 800769a:	fb00 1118 	mls	r1, r0, r8, r1
 800769e:	fa1f fc85 	uxth.w	ip, r5
 80076a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80076a6:	fb0c f308 	mul.w	r3, ip, r8
 80076aa:	428b      	cmp	r3, r1
 80076ac:	fa06 f602 	lsl.w	r6, r6, r2
 80076b0:	d908      	bls.n	80076c4 <__divdi3+0x198>
 80076b2:	1949      	adds	r1, r1, r5
 80076b4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80076b8:	d279      	bcs.n	80077ae <__divdi3+0x282>
 80076ba:	428b      	cmp	r3, r1
 80076bc:	d977      	bls.n	80077ae <__divdi3+0x282>
 80076be:	f1a8 0802 	sub.w	r8, r8, #2
 80076c2:	4429      	add	r1, r5
 80076c4:	1ac9      	subs	r1, r1, r3
 80076c6:	fbb1 f3f0 	udiv	r3, r1, r0
 80076ca:	b2bf      	uxth	r7, r7
 80076cc:	fb00 1113 	mls	r1, r0, r3, r1
 80076d0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80076d4:	fb0c f203 	mul.w	r2, ip, r3
 80076d8:	42ba      	cmp	r2, r7
 80076da:	d907      	bls.n	80076ec <__divdi3+0x1c0>
 80076dc:	197f      	adds	r7, r7, r5
 80076de:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80076e2:	d260      	bcs.n	80077a6 <__divdi3+0x27a>
 80076e4:	42ba      	cmp	r2, r7
 80076e6:	d95e      	bls.n	80077a6 <__divdi3+0x27a>
 80076e8:	3b02      	subs	r3, #2
 80076ea:	442f      	add	r7, r5
 80076ec:	1abf      	subs	r7, r7, r2
 80076ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80076f2:	e790      	b.n	8007616 <__divdi3+0xea>
 80076f4:	f1c8 0220 	rsb	r2, r8, #32
 80076f8:	fa03 fc08 	lsl.w	ip, r3, r8
 80076fc:	fa25 f302 	lsr.w	r3, r5, r2
 8007700:	ea43 0c0c 	orr.w	ip, r3, ip
 8007704:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007708:	fa21 f302 	lsr.w	r3, r1, r2
 800770c:	fa01 f708 	lsl.w	r7, r1, r8
 8007710:	fa20 f202 	lsr.w	r2, r0, r2
 8007714:	fbb3 f1f9 	udiv	r1, r3, r9
 8007718:	4317      	orrs	r7, r2
 800771a:	fb09 3311 	mls	r3, r9, r1, r3
 800771e:	0c3a      	lsrs	r2, r7, #16
 8007720:	fa1f fb8c 	uxth.w	fp, ip
 8007724:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007728:	fb0b fa01 	mul.w	sl, fp, r1
 800772c:	459a      	cmp	sl, r3
 800772e:	fa05 f008 	lsl.w	r0, r5, r8
 8007732:	d908      	bls.n	8007746 <__divdi3+0x21a>
 8007734:	eb13 030c 	adds.w	r3, r3, ip
 8007738:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800773c:	d235      	bcs.n	80077aa <__divdi3+0x27e>
 800773e:	459a      	cmp	sl, r3
 8007740:	d933      	bls.n	80077aa <__divdi3+0x27e>
 8007742:	3902      	subs	r1, #2
 8007744:	4463      	add	r3, ip
 8007746:	ebca 0303 	rsb	r3, sl, r3
 800774a:	fbb3 f2f9 	udiv	r2, r3, r9
 800774e:	fb09 3312 	mls	r3, r9, r2, r3
 8007752:	b2bf      	uxth	r7, r7
 8007754:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8007758:	fb0b f902 	mul.w	r9, fp, r2
 800775c:	45b9      	cmp	r9, r7
 800775e:	d908      	bls.n	8007772 <__divdi3+0x246>
 8007760:	eb17 070c 	adds.w	r7, r7, ip
 8007764:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8007768:	d21b      	bcs.n	80077a2 <__divdi3+0x276>
 800776a:	45b9      	cmp	r9, r7
 800776c:	d919      	bls.n	80077a2 <__divdi3+0x276>
 800776e:	3a02      	subs	r2, #2
 8007770:	4467      	add	r7, ip
 8007772:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8007776:	fba5 0100 	umull	r0, r1, r5, r0
 800777a:	ebc9 0707 	rsb	r7, r9, r7
 800777e:	428f      	cmp	r7, r1
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	d30a      	bcc.n	800779c <__divdi3+0x270>
 8007786:	d005      	beq.n	8007794 <__divdi3+0x268>
 8007788:	462a      	mov	r2, r5
 800778a:	e720      	b.n	80075ce <__divdi3+0xa2>
 800778c:	4662      	mov	r2, ip
 800778e:	e701      	b.n	8007594 <__divdi3+0x68>
 8007790:	463b      	mov	r3, r7
 8007792:	e714      	b.n	80075be <__divdi3+0x92>
 8007794:	fa06 f608 	lsl.w	r6, r6, r8
 8007798:	4286      	cmp	r6, r0
 800779a:	d2f5      	bcs.n	8007788 <__divdi3+0x25c>
 800779c:	1e6a      	subs	r2, r5, #1
 800779e:	2300      	movs	r3, #0
 80077a0:	e715      	b.n	80075ce <__divdi3+0xa2>
 80077a2:	461a      	mov	r2, r3
 80077a4:	e7e5      	b.n	8007772 <__divdi3+0x246>
 80077a6:	460b      	mov	r3, r1
 80077a8:	e7a0      	b.n	80076ec <__divdi3+0x1c0>
 80077aa:	4611      	mov	r1, r2
 80077ac:	e7cb      	b.n	8007746 <__divdi3+0x21a>
 80077ae:	4690      	mov	r8, r2
 80077b0:	e788      	b.n	80076c4 <__divdi3+0x198>
 80077b2:	4643      	mov	r3, r8
 80077b4:	4642      	mov	r2, r8
 80077b6:	e70a      	b.n	80075ce <__divdi3+0xa2>
 80077b8:	3a02      	subs	r2, #2
 80077ba:	e753      	b.n	8007664 <__divdi3+0x138>
 80077bc:	3902      	subs	r1, #2
 80077be:	442f      	add	r7, r5
 80077c0:	e73c      	b.n	800763c <__divdi3+0x110>
 80077c2:	bf00      	nop

080077c4 <__udivdi3>:
 80077c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	460e      	mov	r6, r1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d143      	bne.n	800785a <__udivdi3+0x96>
 80077d2:	428a      	cmp	r2, r1
 80077d4:	d953      	bls.n	800787e <__udivdi3+0xba>
 80077d6:	fab2 f782 	clz	r7, r2
 80077da:	b157      	cbz	r7, 80077f2 <__udivdi3+0x2e>
 80077dc:	f1c7 0620 	rsb	r6, r7, #32
 80077e0:	fa20 f606 	lsr.w	r6, r0, r6
 80077e4:	fa01 f307 	lsl.w	r3, r1, r7
 80077e8:	fa02 f407 	lsl.w	r4, r2, r7
 80077ec:	431e      	orrs	r6, r3
 80077ee:	fa00 f507 	lsl.w	r5, r0, r7
 80077f2:	0c21      	lsrs	r1, r4, #16
 80077f4:	fbb6 f2f1 	udiv	r2, r6, r1
 80077f8:	0c2b      	lsrs	r3, r5, #16
 80077fa:	fb01 6712 	mls	r7, r1, r2, r6
 80077fe:	b2a0      	uxth	r0, r4
 8007800:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8007804:	fb00 f302 	mul.w	r3, r0, r2
 8007808:	42b3      	cmp	r3, r6
 800780a:	d909      	bls.n	8007820 <__udivdi3+0x5c>
 800780c:	1936      	adds	r6, r6, r4
 800780e:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 8007812:	f080 80f6 	bcs.w	8007a02 <__udivdi3+0x23e>
 8007816:	42b3      	cmp	r3, r6
 8007818:	f240 80f3 	bls.w	8007a02 <__udivdi3+0x23e>
 800781c:	3a02      	subs	r2, #2
 800781e:	4426      	add	r6, r4
 8007820:	1af6      	subs	r6, r6, r3
 8007822:	fbb6 f3f1 	udiv	r3, r6, r1
 8007826:	b2ad      	uxth	r5, r5
 8007828:	fb01 6113 	mls	r1, r1, r3, r6
 800782c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8007830:	fb00 f003 	mul.w	r0, r0, r3
 8007834:	4288      	cmp	r0, r1
 8007836:	d908      	bls.n	800784a <__udivdi3+0x86>
 8007838:	1909      	adds	r1, r1, r4
 800783a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800783e:	f080 80e2 	bcs.w	8007a06 <__udivdi3+0x242>
 8007842:	4288      	cmp	r0, r1
 8007844:	f240 80df 	bls.w	8007a06 <__udivdi3+0x242>
 8007848:	3b02      	subs	r3, #2
 800784a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800784e:	2300      	movs	r3, #0
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007858:	4770      	bx	lr
 800785a:	428b      	cmp	r3, r1
 800785c:	d84a      	bhi.n	80078f4 <__udivdi3+0x130>
 800785e:	fab3 f683 	clz	r6, r3
 8007862:	2e00      	cmp	r6, #0
 8007864:	d14d      	bne.n	8007902 <__udivdi3+0x13e>
 8007866:	428b      	cmp	r3, r1
 8007868:	d302      	bcc.n	8007870 <__udivdi3+0xac>
 800786a:	4282      	cmp	r2, r0
 800786c:	f200 80d6 	bhi.w	8007a1c <__udivdi3+0x258>
 8007870:	2300      	movs	r3, #0
 8007872:	2201      	movs	r2, #1
 8007874:	4610      	mov	r0, r2
 8007876:	4619      	mov	r1, r3
 8007878:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800787c:	4770      	bx	lr
 800787e:	b912      	cbnz	r2, 8007886 <__udivdi3+0xc2>
 8007880:	2401      	movs	r4, #1
 8007882:	fbb4 f4f2 	udiv	r4, r4, r2
 8007886:	fab4 f284 	clz	r2, r4
 800788a:	2a00      	cmp	r2, #0
 800788c:	d17c      	bne.n	8007988 <__udivdi3+0x1c4>
 800788e:	1b09      	subs	r1, r1, r4
 8007890:	0c26      	lsrs	r6, r4, #16
 8007892:	b2a7      	uxth	r7, r4
 8007894:	2301      	movs	r3, #1
 8007896:	fbb1 f0f6 	udiv	r0, r1, r6
 800789a:	0c2a      	lsrs	r2, r5, #16
 800789c:	fb06 1110 	mls	r1, r6, r0, r1
 80078a0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80078a4:	fb07 f200 	mul.w	r2, r7, r0
 80078a8:	428a      	cmp	r2, r1
 80078aa:	d907      	bls.n	80078bc <__udivdi3+0xf8>
 80078ac:	1909      	adds	r1, r1, r4
 80078ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80078b2:	d202      	bcs.n	80078ba <__udivdi3+0xf6>
 80078b4:	428a      	cmp	r2, r1
 80078b6:	f200 80c3 	bhi.w	8007a40 <__udivdi3+0x27c>
 80078ba:	4660      	mov	r0, ip
 80078bc:	1a89      	subs	r1, r1, r2
 80078be:	fbb1 f2f6 	udiv	r2, r1, r6
 80078c2:	b2ad      	uxth	r5, r5
 80078c4:	fb06 1112 	mls	r1, r6, r2, r1
 80078c8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80078cc:	fb07 f702 	mul.w	r7, r7, r2
 80078d0:	42af      	cmp	r7, r5
 80078d2:	d908      	bls.n	80078e6 <__udivdi3+0x122>
 80078d4:	192c      	adds	r4, r5, r4
 80078d6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80078da:	f080 8096 	bcs.w	8007a0a <__udivdi3+0x246>
 80078de:	42a7      	cmp	r7, r4
 80078e0:	f240 8093 	bls.w	8007a0a <__udivdi3+0x246>
 80078e4:	3a02      	subs	r2, #2
 80078e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078f2:	4770      	bx	lr
 80078f4:	2300      	movs	r3, #0
 80078f6:	461a      	mov	r2, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007900:	4770      	bx	lr
 8007902:	f1c6 0520 	rsb	r5, r6, #32
 8007906:	fa22 f405 	lsr.w	r4, r2, r5
 800790a:	40b3      	lsls	r3, r6
 800790c:	431c      	orrs	r4, r3
 800790e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007912:	fa21 f305 	lsr.w	r3, r1, r5
 8007916:	fa01 f706 	lsl.w	r7, r1, r6
 800791a:	fa20 f505 	lsr.w	r5, r0, r5
 800791e:	fbb3 fcf8 	udiv	ip, r3, r8
 8007922:	432f      	orrs	r7, r5
 8007924:	fb08 331c 	mls	r3, r8, ip, r3
 8007928:	0c3d      	lsrs	r5, r7, #16
 800792a:	fa1f fa84 	uxth.w	sl, r4
 800792e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007932:	fb0a f90c 	mul.w	r9, sl, ip
 8007936:	4599      	cmp	r9, r3
 8007938:	fa02 fb06 	lsl.w	fp, r2, r6
 800793c:	d904      	bls.n	8007948 <__udivdi3+0x184>
 800793e:	191b      	adds	r3, r3, r4
 8007940:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8007944:	d36d      	bcc.n	8007a22 <__udivdi3+0x25e>
 8007946:	4694      	mov	ip, r2
 8007948:	ebc9 0303 	rsb	r3, r9, r3
 800794c:	fbb3 f5f8 	udiv	r5, r3, r8
 8007950:	fb08 3315 	mls	r3, r8, r5, r3
 8007954:	b2bf      	uxth	r7, r7
 8007956:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800795a:	fb0a f805 	mul.w	r8, sl, r5
 800795e:	45b8      	cmp	r8, r7
 8007960:	d904      	bls.n	800796c <__udivdi3+0x1a8>
 8007962:	193f      	adds	r7, r7, r4
 8007964:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007968:	d361      	bcc.n	8007a2e <__udivdi3+0x26a>
 800796a:	461d      	mov	r5, r3
 800796c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8007970:	fbac 230b 	umull	r2, r3, ip, fp
 8007974:	ebc8 0707 	rsb	r7, r8, r7
 8007978:	429f      	cmp	r7, r3
 800797a:	f04f 0500 	mov.w	r5, #0
 800797e:	d349      	bcc.n	8007a14 <__udivdi3+0x250>
 8007980:	d045      	beq.n	8007a0e <__udivdi3+0x24a>
 8007982:	4662      	mov	r2, ip
 8007984:	462b      	mov	r3, r5
 8007986:	e763      	b.n	8007850 <__udivdi3+0x8c>
 8007988:	4094      	lsls	r4, r2
 800798a:	f1c2 0320 	rsb	r3, r2, #32
 800798e:	fa21 fc03 	lsr.w	ip, r1, r3
 8007992:	0c26      	lsrs	r6, r4, #16
 8007994:	fa20 f303 	lsr.w	r3, r0, r3
 8007998:	fa01 f502 	lsl.w	r5, r1, r2
 800799c:	fbbc f8f6 	udiv	r8, ip, r6
 80079a0:	ea43 0105 	orr.w	r1, r3, r5
 80079a4:	0c0b      	lsrs	r3, r1, #16
 80079a6:	fb06 cc18 	mls	ip, r6, r8, ip
 80079aa:	b2a7      	uxth	r7, r4
 80079ac:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80079b0:	fb07 f308 	mul.w	r3, r7, r8
 80079b4:	4563      	cmp	r3, ip
 80079b6:	fa00 f502 	lsl.w	r5, r0, r2
 80079ba:	d909      	bls.n	80079d0 <__udivdi3+0x20c>
 80079bc:	eb1c 0c04 	adds.w	ip, ip, r4
 80079c0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80079c4:	d23a      	bcs.n	8007a3c <__udivdi3+0x278>
 80079c6:	4563      	cmp	r3, ip
 80079c8:	d938      	bls.n	8007a3c <__udivdi3+0x278>
 80079ca:	f1a8 0802 	sub.w	r8, r8, #2
 80079ce:	44a4      	add	ip, r4
 80079d0:	ebc3 0c0c 	rsb	ip, r3, ip
 80079d4:	fbbc f3f6 	udiv	r3, ip, r6
 80079d8:	b289      	uxth	r1, r1
 80079da:	fb06 cc13 	mls	ip, r6, r3, ip
 80079de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80079e2:	fb07 f203 	mul.w	r2, r7, r3
 80079e6:	428a      	cmp	r2, r1
 80079e8:	d907      	bls.n	80079fa <__udivdi3+0x236>
 80079ea:	1909      	adds	r1, r1, r4
 80079ec:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80079f0:	d222      	bcs.n	8007a38 <__udivdi3+0x274>
 80079f2:	428a      	cmp	r2, r1
 80079f4:	d920      	bls.n	8007a38 <__udivdi3+0x274>
 80079f6:	3b02      	subs	r3, #2
 80079f8:	4421      	add	r1, r4
 80079fa:	1a89      	subs	r1, r1, r2
 80079fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007a00:	e749      	b.n	8007896 <__udivdi3+0xd2>
 8007a02:	463a      	mov	r2, r7
 8007a04:	e70c      	b.n	8007820 <__udivdi3+0x5c>
 8007a06:	4633      	mov	r3, r6
 8007a08:	e71f      	b.n	800784a <__udivdi3+0x86>
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	e76b      	b.n	80078e6 <__udivdi3+0x122>
 8007a0e:	40b0      	lsls	r0, r6
 8007a10:	4290      	cmp	r0, r2
 8007a12:	d2b6      	bcs.n	8007982 <__udivdi3+0x1be>
 8007a14:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e719      	b.n	8007850 <__udivdi3+0x8c>
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	4632      	mov	r2, r6
 8007a20:	e716      	b.n	8007850 <__udivdi3+0x8c>
 8007a22:	4599      	cmp	r9, r3
 8007a24:	d98f      	bls.n	8007946 <__udivdi3+0x182>
 8007a26:	f1ac 0c02 	sub.w	ip, ip, #2
 8007a2a:	4423      	add	r3, r4
 8007a2c:	e78c      	b.n	8007948 <__udivdi3+0x184>
 8007a2e:	45b8      	cmp	r8, r7
 8007a30:	d99b      	bls.n	800796a <__udivdi3+0x1a6>
 8007a32:	3d02      	subs	r5, #2
 8007a34:	4427      	add	r7, r4
 8007a36:	e799      	b.n	800796c <__udivdi3+0x1a8>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	e7de      	b.n	80079fa <__udivdi3+0x236>
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	e7c7      	b.n	80079d0 <__udivdi3+0x20c>
 8007a40:	3802      	subs	r0, #2
 8007a42:	4421      	add	r1, r4
 8007a44:	e73a      	b.n	80078bc <__udivdi3+0xf8>
 8007a46:	bf00      	nop
 8007a48:	322e3625 	.word	0x322e3625
 8007a4c:	000a2066 	.word	0x000a2066
 8007a50:	696b7341 	.word	0x696b7341
 8007a54:	6620676e 	.word	0x6620676e
 8007a58:	203a726f 	.word	0x203a726f
 8007a5c:	79622000 	.word	0x79622000
 8007a60:	2e736574 	.word	0x2e736574
 8007a64:	6548000a 	.word	0x6548000a
 8007a68:	6f207061 	.word	0x6f207061
 8007a6c:	66726576 	.word	0x66726576
 8007a70:	21776f6c 	.word	0x21776f6c
 8007a74:	6463000a 	.word	0x6463000a
 8007a78:	6d636163 	.word	0x6d636163
 8007a7c:	00000000 	.word	0x00000000

08007a80 <dotab_cdcacm>:
 8007a80:	08007a76 080008f5 080008f9 0800091d     vz..............
 8007a90:	08000979                                y...

08007a94 <data_endp>:
 8007a94:	02010507 07010040 40028205 05070100              ....@......@..

08007aa2 <comm_endp>:
 8007aa2:	03830507 09ff0010                                .......

08007aa9 <comm_iface>:
 8007aa9:	00000409 01020201 007aa200 007b1708     ..........z...{.
 8007ab9:	00001308 43524100 6c2d534f 55206261     .....ARCOS-lab U
 8007ac9:	43005243 412d4344 55204d43 20545241     CR.CDC-ACM UART 
 8007ad9:	65746e49 63616672 01120065                       Interface.

08007ae3 <dev>:
 8007ae3:	02000112 40000002 57400483 02010200     .......@..@W....
 8007af3:	04090103                                         ..

08007af5 <data_iface>:
 8007af5:	00010409 00000a02 007a9400 00000008     ..........z.....
 8007b05:	00000000 00020900                                .....

08007b0a <config>:
 8007b0a:	00000209 80000102 007b2c32 00240508              ........2,{..

08007b17 <cdcacm_functional_descriptors>:
 8007b17:	10002405 01240501 24040100 24050202     .$....$....$...$
 8007b27:	00010006 00000100                                .....

08007b2c <ifaces>:
 8007b2c:	00000001 00000000 08007aa9 00000001     .........z......
 8007b3c:	00000000 08007af5                       .....z..

08007b44 <hse_8mhz_3v3>:
 8007b44:	00600008 00000202 00000603 01040500     ..`.............
 8007b54:	00b71b00 016e3600 00f00008 00000502     .....6n.........
 8007b64:	00000603 01040500 01c9c380 03938700     ................
 8007b74:	01500008 00000702 00000605 00040500     ..P.............
 8007b84:	0280de80 0501bd00                       ........

08007b8c <CSWTCH.22>:
 8007b8c:	080015d3 00000000 00000000 00000000     ................
 8007b9c:	00000000 0800164d 08001675 00000000     ....M...u.......
 8007bac:	080015a5 08001573                       ....s...

08007bb4 <CSWTCH.24>:
 8007bb4:	080015eb 00000000 00000000 00000000     ................
	...
 8007bdc:	080015c7 080015b9                       ........

08007be4 <stm32f107_usb_driver>:
 8007be4:	08001bfd 08001d85 08001d9d 08001ed3     ................
 8007bf4:	08001edd 08001f49 08001f2b 08001f71     ....I...+...q...
 8007c04:	08001fc9 08002055 0800215b 50000000     ....U ..[!.....P
 8007c14:	00800001 00000043                       ....C...

08007c1c <blanks.6777>:
 8007c1c:	20202020 20202020 20202020 20202020                     
 8007c2c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8007c3c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8007c4c:	00000000 33323130 37363534 62613938     ....0123456789ab
 8007c5c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8007c6c:	00000030                                0...

08007c70 <zeroes.6778>:
 8007c70:	30303030 30303030 30303030 30303030     0000000000000000
 8007c80:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8007c90:	49534f50 00000058 0000002e 00000000     POSIX...........

08007ca0 <__mprec_tens>:
 8007ca0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007cb0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007cc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007cd0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007ce0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007cf0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8007d00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8007d10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8007d20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8007d30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8007d40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8007d50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007d60:	79d99db4 44ea7843                       ...yCx.D

08007d68 <__mprec_bigtens>:
 8007d68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007d78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8007d88:	7f73bf3c 75154fdd                       <.s..O.u

08007d90 <p05.5269>:
 8007d90:	00000005 00000019 0000007d              ........}...
