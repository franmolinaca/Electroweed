
glove.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 f1 1d 00 08 ef 1d 00 08 ed 1d 00 08     ... ............
 8000010:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 00 00 00 00     ................
	...
 800002c:	ef 1d 00 08 ef 1d 00 08 00 00 00 00 ef 1d 00 08     ................
 800003c:	ef 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800004c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800005c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800006c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800007c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800008c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800009c:	ed 1d 00 08 ed 1d 00 08 39 05 00 08 ed 1d 00 08     ........9.......
 80000ac:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 80000bc:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 80000cc:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 80000dc:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 80000ec:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 80000fc:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800010c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800011c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800012c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800013c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800014c:	59 07 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     Y...............
 800015c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800016c:	ed 1d 00 08 ed 1d 00 08 ed 1d 00 08 ed 1d 00 08     ................
 800017c:	ed 1d 00 08 ed 1d 00 08                             ........

08000184 <leds_init>:




void leds_init(void) 
{
 8000184:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 8000186:	4c11      	ldr	r4, [pc, #68]	; (80001cc <leds_init+0x48>)



void leds_init(void) 
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
 8000188:	4811      	ldr	r0, [pc, #68]	; (80001d0 <leds_init+0x4c>)
 800018a:	2108      	movs	r1, #8
 800018c:	f001 fa2e 	bl	80015ec <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 8000190:	4620      	mov	r0, r4
 8000192:	2101      	movs	r1, #1
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800019a:	f000 ff24 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
 800019e:	4620      	mov	r0, r4
 80001a0:	2101      	movs	r1, #1
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001a8:	f000 ff1d 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
 80001ac:	4620      	mov	r0, r4
 80001ae:	2101      	movs	r1, #1
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001b6:	f000 ff16 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80001ba:	4620      	mov	r0, r4
 80001bc:	2101      	movs	r1, #1
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
 80001c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80001c8:	f000 bf0d 	b.w	8000fe6 <gpio_mode_setup>
 80001cc:	40020c00 	.word	0x40020c00
 80001d0:	40023830 	.word	0x40023830

080001d4 <adc_init>:




void adc_init (void)
{
 80001d4:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80001d6:	4c33      	ldr	r4, [pc, #204]	; (80002a4 <adc_init+0xd0>)



void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
 80001d8:	4833      	ldr	r0, [pc, #204]	; (80002a8 <adc_init+0xd4>)
 80001da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001de:	f001 fa05 	bl	80015ec <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80001e2:	4620      	mov	r0, r4
 80001e4:	2101      	movs	r1, #1
 80001e6:	f001 fa01 	bl	80015ec <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80001ea:	4620      	mov	r0, r4



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80001ec:	4c2f      	ldr	r4, [pc, #188]	; (80002ac <adc_init+0xd8>)

void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80001ee:	2104      	movs	r1, #4
 80001f0:	f001 f9fc 	bl	80015ec <rcc_peripheral_enable_clock>



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80001f4:	4620      	mov	r0, r4
 80001f6:	2103      	movs	r1, #3
 80001f8:	2200      	movs	r2, #0
 80001fa:	2302      	movs	r3, #2
 80001fc:	f000 fef3 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
 8000200:	4620      	mov	r0, r4
 8000202:	2103      	movs	r1, #3
 8000204:	2200      	movs	r2, #0
 8000206:	2304      	movs	r3, #4
 8000208:	f000 feed 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 800020c:	4620      	mov	r0, r4
 800020e:	2103      	movs	r1, #3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 8000210:	f504 6400 	add.w	r4, r4, #2048	; 0x800



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 8000214:	2200      	movs	r2, #0
 8000216:	2308      	movs	r3, #8
 8000218:	f000 fee5 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 800021c:	4620      	mov	r0, r4
 800021e:	2103      	movs	r1, #3
 8000220:	2200      	movs	r2, #0
 8000222:	2302      	movs	r3, #2
 8000224:	f000 fedf 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
 8000228:	4620      	mov	r0, r4
 800022a:	2103      	movs	r1, #3
 800022c:	2200      	movs	r2, #0
 800022e:	2304      	movs	r3, #4
 8000230:	f000 fed9 	bl	8000fe6 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6
 8000234:	2320      	movs	r3, #32
 8000236:	2103      	movs	r1, #3
 8000238:	2200      	movs	r2, #0
 800023a:	4620      	mov	r0, r4
 800023c:	f000 fed3 	bl	8000fe6 <gpio_mode_setup>

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
  adc_disable_scan_mode(ADC1);
 8000240:	f5a4 4468 	sub.w	r4, r4, #59392	; 0xe800
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fdad 	bl	8000da4 <adc_set_clk_prescale>
  adc_disable_scan_mode(ADC1);
 800024a:	4620      	mov	r0, r4
 800024c:	f000 fd2e 	bl	8000cac <adc_disable_scan_mode>
  adc_set_single_conversion_mode(ADC1);
 8000250:	4620      	mov	r0, r4
 8000252:	f000 fd3a 	bl	8000cca <adc_set_single_conversion_mode>

  adc_set_sample_time(ADC1, ADC_CHANNEL1, ADC_SMPR_SMP_3CYC);   //joint_1
 8000256:	4620      	mov	r0, r4
 8000258:	2101      	movs	r1, #1
 800025a:	2200      	movs	r2, #0
 800025c:	f000 fd3a 	bl	8000cd4 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL2, ADC_SMPR_SMP_3CYC);   //joint_2
 8000260:	4620      	mov	r0, r4
 8000262:	2102      	movs	r1, #2
 8000264:	2200      	movs	r2, #0
 8000266:	f000 fd35 	bl	8000cd4 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL3, ADC_SMPR_SMP_3CYC);   //joint_3
 800026a:	4620      	mov	r0, r4
 800026c:	2103      	movs	r1, #3
 800026e:	2200      	movs	r2, #0
 8000270:	f000 fd30 	bl	8000cd4 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
 8000274:	4620      	mov	r0, r4
 8000276:	210b      	movs	r1, #11
 8000278:	2200      	movs	r2, #0
 800027a:	f000 fd2b 	bl	8000cd4 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
 800027e:	4620      	mov	r0, r4
 8000280:	210c      	movs	r1, #12
 8000282:	2200      	movs	r2, #0
 8000284:	f000 fd26 	bl	8000cd4 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6
 8000288:	4620      	mov	r0, r4
 800028a:	210f      	movs	r1, #15
 800028c:	2200      	movs	r2, #0
 800028e:	f000 fd21 	bl	8000cd4 <adc_set_sample_time>

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fd90 	bl	8000db8 <adc_set_multi_mode>
  adc_power_on(ADC1);
 8000298:	4620      	mov	r0, r4

  //nvic_enable_irq(NVIC_ADC_IRQ);
  //adc_enable_eoc_interrupt(ADC1);
  //adc_disable_eoc_interrupt(ADC1);
}
 800029a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
  adc_power_on(ADC1);
 800029e:	f000 bd7b 	b.w	8000d98 <adc_power_on>
 80002a2:	bf00      	nop
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40023844 	.word	0x40023844
 80002ac:	40020000 	.word	0x40020000

080002b0 <voltage_measure>:




float voltage_measure (uint32_t adc,uint8_t channel)
{
 80002b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80002b2:	aa04      	add	r2, sp, #16




float voltage_measure (uint32_t adc,uint8_t channel)
{
 80002b4:	4604      	mov	r4, r0
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80002b6:	f802 1d10 	strb.w	r1, [r2, #-16]!
    adc_set_regular_sequence(adc, 1, channels);	
 80002ba:	2101      	movs	r1, #1
 80002bc:	466a      	mov	r2, sp
 80002be:	f000 fd25 	bl	8000d0c <adc_set_regular_sequence>
    adc_start_conversion_regular(adc);
 80002c2:	4620      	mov	r0, r4
 80002c4:	f000 fcf7 	bl	8000cb6 <adc_start_conversion_regular>
    gpio_toggle (GPIOD,GPIO15);
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <voltage_measure+0x48>)
 80002ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ce:	f000 fe86 	bl	8000fde <gpio_toggle>

    while (!adc_eoc(adc));
 80002d2:	4620      	mov	r0, r4
 80002d4:	f000 fd5a 	bl	8000d8c <adc_eoc>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d0fa      	beq.n	80002d2 <voltage_measure+0x22>
    voltage=adc_read_regular(adc)*(VREF/ADC_CONVERSION_FACTOR);
 80002dc:	4620      	mov	r0, r4
 80002de:	f000 fd59 	bl	8000d94 <adc_read_regular>
 80002e2:	ee07 0a90 	vmov	s15, r0
 80002e6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    return voltage;
}
 80002ea:	eddf 7a04 	vldr	s15, [pc, #16]	; 80002fc <voltage_measure+0x4c>
 80002ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80002f2:	b004      	add	sp, #16
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	bf00      	nop
 80002f8:	40020c00 	.word	0x40020c00
 80002fc:	3a3dd2f2 	.word	0x3a3dd2f2

08000300 <DTC_SVM_tim_init>:




void DTC_SVM_tim_init(void)
{
 8000300:	b510      	push	{r4, lr}
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 8000302:	487e      	ldr	r0, [pc, #504]	; (80004fc <DTC_SVM_tim_init+0x1fc>)
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000304:	4c7e      	ldr	r4, [pc, #504]	; (8000500 <DTC_SVM_tim_init+0x200>)


void DTC_SVM_tim_init(void)
{
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 8000306:	2101      	movs	r1, #1
 8000308:	f001 f970 	bl	80015ec <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);
 800030c:	487d      	ldr	r0, [pc, #500]	; (8000504 <DTC_SVM_tim_init+0x204>)
 800030e:	2110      	movs	r1, #16
 8000310:	f001 f96c 	bl	80015ec <rcc_peripheral_enable_clock>

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000314:	4620      	mov	r0, r4
 8000316:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800031a:	2102      	movs	r1, #2
 800031c:	2200      	movs	r2, #0
 800031e:	f000 fe62 	bl	8000fe6 <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
 8000322:	4620      	mov	r0, r4
 8000324:	2101      	movs	r1, #1
 8000326:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800032a:	f000 fe7e 	bl	800102a <gpio_set_af>
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
 800032e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000332:	4620      	mov	r0, r4
 8000334:	2102      	movs	r1, #2
 8000336:	2200      	movs	r2, #0
 8000338:	f000 fe55 	bl	8000fe6 <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 800033c:	4620      	mov	r0, r4
 800033e:	2101      	movs	r1, #1

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 8000340:	f5a4 3488 	sub.w	r4, r4, #69632	; 0x11000
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 8000344:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8000348:	f000 fe6f 	bl	800102a <gpio_set_af>

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 800034c:	4620      	mov	r0, r4
 800034e:	f000 fe95 	bl	800107c <timer_reset>
	/* Timer global mode:
	 * - No divider
	 * - Alignment edge
	 * - Direction up
	 */
	timer_set_mode(TIM1, TIM_CR1_CKD_CK_INT, //For dead time and filter sampling, not important for now.
 8000352:	2100      	movs	r1, #0
 8000354:	460b      	mov	r3, r1
 8000356:	2220      	movs	r2, #32
 8000358:	4620      	mov	r0, r4
 800035a:	f000 fefe 	bl	800115a <timer_set_mode>
						//TIM_CR1_CMS_CENTER_1
						//TIM_CR1_CMS_CENTER_2
						//TIM_CR1_CMS_CENTER_3 la frequencia del pwm se divide a la mitad. (frecuencia senoidal)
			 TIM_CR1_DIR_UP);

	timer_set_prescaler(TIM1, PRESCALE); //1 = disabled (max speed)
 800035e:	4620      	mov	r0, r4
 8000360:	211e      	movs	r1, #30
 8000362:	f000 ff23 	bl	80011ac <timer_set_prescaler>
	timer_set_repetition_counter(TIM1, 0); //disabled
 8000366:	2100      	movs	r1, #0
 8000368:	4620      	mov	r0, r4
 800036a:	f000 ff21 	bl	80011b0 <timer_set_repetition_counter>
	timer_enable_preload(TIM1);
 800036e:	4620      	mov	r0, r4
 8000370:	f000 fefc 	bl	800116c <timer_enable_preload>
	timer_continuous_mode(TIM1);
 8000374:	4620      	mov	r0, r4
 8000376:	f000 fefe 	bl	8001176 <timer_continuous_mode>

	/* Period (32kHz). */
	timer_set_period(TIM1, PWM_PERIOD_ARR); //ARR (value compared against main counter to reload counter aka: period of counter)
 800037a:	f24d 31b1 	movw	r1, #54193	; 0xd3b1
 800037e:	4620      	mov	r0, r4
 8000380:	f000 ff20 	bl	80011c4 <timer_set_period>

	/* Configure break and deadtime. */
	//timer_set_deadtime(TIM1, deadtime_percentage*pwm_period_ARR);
    //timer_set_deadtime(TIM1, 1100.0f*PWM_PERIOD_ARR);
    //timer_set_deadtime(TIM1, DEAD_TIME_PERCENTAGE*PWM_PERIOD_ARR);
	timer_set_enabled_off_state_in_idle_mode(TIM1);
 8000384:	4620      	mov	r0, r4
 8000386:	f001 f90b 	bl	80015a0 <timer_set_enabled_off_state_in_idle_mode>
	timer_set_enabled_off_state_in_run_mode(TIM1);
 800038a:	4620      	mov	r0, r4
 800038c:	f001 f8fc 	bl	8001588 <timer_set_enabled_off_state_in_run_mode>
	timer_disable_break(TIM1);
 8000390:	4620      	mov	r0, r4
 8000392:	f001 f8ed 	bl	8001570 <timer_disable_break>
	timer_set_break_polarity_high(TIM1);
 8000396:	4620      	mov	r0, r4
 8000398:	f001 f8de 	bl	8001558 <timer_set_break_polarity_high>
	timer_disable_break_automatic_output(TIM1);
 800039c:	4620      	mov	r0, r4
 800039e:	f001 f8cf 	bl	8001540 <timer_disable_break_automatic_output>
	timer_set_break_lock(TIM1, TIM_BDTR_LOCK_OFF);
 80003a2:	4620      	mov	r0, r4
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 f907 	bl	80015b8 <timer_set_break_lock>

	/* Disable outputs. */
	timer_disable_oc_output(TIM1, TIM_OC1);
 80003aa:	4620      	mov	r0, r4
 80003ac:	2100      	movs	r1, #0
 80003ae:	f001 f84d 	bl	800144c <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC1N);
 80003b2:	4620      	mov	r0, r4
 80003b4:	2101      	movs	r1, #1
 80003b6:	f001 f849 	bl	800144c <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2);
 80003ba:	4620      	mov	r0, r4
 80003bc:	2102      	movs	r1, #2
 80003be:	f001 f845 	bl	800144c <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2N);
 80003c2:	4620      	mov	r0, r4
 80003c4:	2103      	movs	r1, #3
 80003c6:	f001 f841 	bl	800144c <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3);
 80003ca:	4620      	mov	r0, r4
 80003cc:	2104      	movs	r1, #4
 80003ce:	f001 f83d 	bl	800144c <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3N);
 80003d2:	4620      	mov	r0, r4
 80003d4:	2105      	movs	r1, #5
 80003d6:	f001 f839 	bl	800144c <timer_disable_oc_output>

	/* -- OC1 and OC1N configuration -- */
	/* Configure global mode of line 1. */
	timer_enable_oc_preload(TIM1, TIM_OC1);
 80003da:	4620      	mov	r0, r4
 80003dc:	2100      	movs	r1, #0
 80003de:	f000 ffb6 	bl	800134e <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC1, TIM_OCM_PWM1);
 80003e2:	2206      	movs	r2, #6
 80003e4:	4620      	mov	r0, r4
 80003e6:	2100      	movs	r1, #0
 80003e8:	f000 feee 	bl	80011c8 <timer_set_oc_mode>
	/* Configure OC1. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1);
 80003ec:	4620      	mov	r0, r4
 80003ee:	2100      	movs	r1, #0
 80003f0:	f000 ffc8 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1); //When idle (braked) put 0 on output
 80003f4:	4620      	mov	r0, r4
 80003f6:	2100      	movs	r1, #0
 80003f8:	f001 f85a 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Configure OC1N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1N);
 80003fc:	4620      	mov	r0, r4
 80003fe:	2101      	movs	r1, #1
 8000400:	f000 ffc0 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1N);
 8000404:	4620      	mov	r0, r4
 8000406:	2101      	movs	r1, #1
 8000408:	f001 f852 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC1. */
	timer_set_oc_value(TIM1, TIM_OC1, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 800040c:	4620      	mov	r0, r4
 800040e:	f646 12d8 	movw	r2, #27096	; 0x69d8
 8000412:	2100      	movs	r1, #0
 8000414:	f001 f878 	bl	8001508 <timer_set_oc_value>

	/* -- OC2 and OC2N configuration -- */
	/* Configure global mode of line 2. */
	timer_enable_oc_preload(TIM1, TIM_OC2);
 8000418:	4620      	mov	r0, r4
 800041a:	2102      	movs	r1, #2
 800041c:	f000 ff97 	bl	800134e <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC2, TIM_OCM_PWM1);
 8000420:	2206      	movs	r2, #6
 8000422:	4620      	mov	r0, r4
 8000424:	2102      	movs	r1, #2
 8000426:	f000 fecf 	bl	80011c8 <timer_set_oc_mode>
	/* Configure OC2. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2);
 800042a:	4620      	mov	r0, r4
 800042c:	2102      	movs	r1, #2
 800042e:	f000 ffa9 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2);
 8000432:	4620      	mov	r0, r4
 8000434:	2102      	movs	r1, #2
 8000436:	f001 f83b 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Configure OC2N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2N);
 800043a:	4620      	mov	r0, r4
 800043c:	2103      	movs	r1, #3
 800043e:	f000 ffa1 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2N);
 8000442:	4620      	mov	r0, r4
 8000444:	2103      	movs	r1, #3
 8000446:	f001 f833 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC2. */
	timer_set_oc_value(TIM1, TIM_OC2, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 800044a:	4620      	mov	r0, r4
 800044c:	f646 12d8 	movw	r2, #27096	; 0x69d8
 8000450:	2102      	movs	r1, #2
 8000452:	f001 f859 	bl	8001508 <timer_set_oc_value>

	/* -- OC3 and OC3N configuration -- */
	/* Configure global mode of line 3. */
	timer_enable_oc_preload(TIM1, TIM_OC3);
 8000456:	4620      	mov	r0, r4
 8000458:	2104      	movs	r1, #4
 800045a:	f000 ff78 	bl	800134e <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
 800045e:	2206      	movs	r2, #6
 8000460:	4620      	mov	r0, r4
 8000462:	2104      	movs	r1, #4
 8000464:	f000 feb0 	bl	80011c8 <timer_set_oc_mode>
	/* Configure OC3. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3);
 8000468:	4620      	mov	r0, r4
 800046a:	2104      	movs	r1, #4
 800046c:	f000 ff8a 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3);
 8000470:	4620      	mov	r0, r4
 8000472:	2104      	movs	r1, #4
 8000474:	f001 f81c 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Configure OC3N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3N);
 8000478:	4620      	mov	r0, r4
 800047a:	2105      	movs	r1, #5
 800047c:	f000 ff82 	bl	8001384 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3N);
 8000480:	4620      	mov	r0, r4
 8000482:	2105      	movs	r1, #5
 8000484:	f001 f814 	bl	80014b0 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC3. */
	timer_set_oc_value(TIM1, TIM_OC3, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);//100);
 8000488:	f646 12d8 	movw	r2, #27096	; 0x69d8
 800048c:	4620      	mov	r0, r4
 800048e:	2104      	movs	r1, #4
 8000490:	f001 f83a 	bl	8001508 <timer_set_oc_value>

	/* Reenable outputs. */
	timer_enable_oc_output(TIM1, TIM_OC1);
 8000494:	4620      	mov	r0, r4
 8000496:	2100      	movs	r1, #0
 8000498:	f000 ffa6 	bl	80013e8 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC1N);
 800049c:	4620      	mov	r0, r4
 800049e:	2101      	movs	r1, #1
 80004a0:	f000 ffa2 	bl	80013e8 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2);
 80004a4:	4620      	mov	r0, r4
 80004a6:	2102      	movs	r1, #2
 80004a8:	f000 ff9e 	bl	80013e8 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2N);
 80004ac:	4620      	mov	r0, r4
 80004ae:	2103      	movs	r1, #3
 80004b0:	f000 ff9a 	bl	80013e8 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3);
 80004b4:	4620      	mov	r0, r4
 80004b6:	2104      	movs	r1, #4
 80004b8:	f000 ff96 	bl	80013e8 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3N);
 80004bc:	2105      	movs	r1, #5
 80004be:	4620      	mov	r0, r4
 80004c0:	f000 ff92 	bl	80013e8 <timer_enable_oc_output>

	/* ---- */

	/* ARR reload enable. */
	timer_enable_preload(TIM1);
 80004c4:	4620      	mov	r0, r4
 80004c6:	f000 fe51 	bl	800116c <timer_enable_preload>
	/*
	 * Enable preload of complementary channel configurations and
	 * update on COM event.
	 */
	//timer_enable_preload_complementry_enable_bits(TIM1);
	timer_disable_preload_complementry_enable_bits(TIM1);
 80004ca:	4620      	mov	r0, r4
 80004cc:	f000 fe62 	bl	8001194 <timer_disable_preload_complementry_enable_bits>

	/* Enable outputs in the break subsystem. */
	timer_enable_break_main_output(TIM1);
 80004d0:	4620      	mov	r0, r4
 80004d2:	f001 f829 	bl	8001528 <timer_enable_break_main_output>

	/* Generate update event to reload all registers before starting*/
	timer_generate_event(TIM1, TIM_EGR_UG);
 80004d6:	2101      	movs	r1, #1
 80004d8:	4620      	mov	r0, r4
 80004da:	f001 f879 	bl	80015d0 <timer_generate_event>

	/* Counter enable. */
	timer_enable_counter(TIM1);
 80004de:	4620      	mov	r0, r4
 80004e0:	f000 fe53 	bl	800118a <timer_enable_counter>

	/*********/
	/*Capture compare interrupt*/

	//enable capture compare interrupt
	timer_enable_update_event(TIM1);
 80004e4:	4620      	mov	r0, r4
 80004e6:	f000 fe4b 	bl	8001180 <timer_enable_update_event>

	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
 80004ea:	4620      	mov	r0, r4
 80004ec:	2101      	movs	r1, #1
 80004ee:	f000 fe2b 	bl	8001148 <timer_enable_irq>
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 80004f2:	2019      	movs	r0, #25
}
 80004f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 80004f8:	f001 bcc2 	b.w	8001e80 <nvic_enable_irq>
 80004fc:	40023844 	.word	0x40023844
 8000500:	40021000 	.word	0x40021000
 8000504:	40023830 	.word	0x40023830

08000508 <system_init>:

float joint_2_angle = 0.0f;
float counter2 = 1.0f;

void system_init(void) 
{
 8000508:	b508      	push	{r3, lr}
  rcc_clock_setup_hse_3v3(&hse_8mhz_3v3[CLOCK_3V3_168MHZ]);
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <system_init+0x28>)
 800050c:	f000 fd1a 	bl	8000f44 <rcc_clock_setup_hse_3v3>
  leds_init();
 8000510:	f7ff fe38 	bl	8000184 <leds_init>
  adc_init();
 8000514:	f7ff fe5e 	bl	80001d4 <adc_init>
  cdcacm_init();
 8000518:	f000 f8f0 	bl	80006fc <cdcacm_init>
  DTC_SVM_tim_init();
 800051c:	f7ff fef0 	bl	8000300 <DTC_SVM_tim_init>
 //tim1_up_tim10_isr();
  printled(4, LRED);
 8000520:	2004      	movs	r0, #4
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <system_init+0x2c>)
 8000524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  
}
 8000528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  leds_init();
  adc_init();
  cdcacm_init();
  DTC_SVM_tim_init();
 //tim1_up_tim10_isr();
  printled(4, LRED);
 800052c:	f000 b926 	b.w	800077c <printled>
 8000530:	08007ccc 	.word	0x08007ccc
 8000534:	40020c00 	.word	0x40020c00

08000538 <tim1_up_tim10_isr>:




void tim1_up_tim10_isr(void) 
{
 8000538:	b510      	push	{r4, lr}
    float joint_0_angle = 0.0f;
    //float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 800053a:	4c12      	ldr	r4, [pc, #72]	; (8000584 <tim1_up_tim10_isr+0x4c>)


void tim1_up_tim10_isr(void) 
{
  //Clear the update interrupt flag
  timer_clear_flag(TIM1,TIM_SR_UIF);
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <tim1_up_tim10_isr+0x50>)
 800053e:	2101      	movs	r1, #1
 8000540:	f000 fe06 	bl	8001150 <timer_clear_flag>
    float joint_0_angle = 0.0f;
    //float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	3301      	adds	r3, #1

	if(counter >=2000)// Print frequency each n cycles
 8000548:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    float joint_0_angle = 0.0f;
    //float joint_1_angle = 0.0f;
    //float joint_2_angle = 0.0f;

	static int counter = 0;
	counter +=1 ;
 800054c:	6023      	str	r3, [r4, #0]

	if(counter >=2000)// Print frequency each n cycles
 800054e:	db17      	blt.n	8000580 <tim1_up_tim10_isr+0x48>
	{
		counter2+=1;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <tim1_up_tim10_isr+0x54>)
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <tim1_up_tim10_isr+0x58>)
	static int counter = 0;
	counter +=1 ;

	if(counter >=2000)// Print frequency each n cycles
	{
		counter2+=1;
 8000554:	ed93 7a00 	vldr	s14, [r3]
 8000558:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 800055c:	ee77 7a27 	vadd.f32	s15, s14, s15
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 8000560:	2101      	movs	r1, #1
	static int counter = 0;
	counter +=1 ;

	if(counter >=2000)// Print frequency each n cycles
	{
		counter2+=1;
 8000562:	edc3 7a00 	vstr	s15, [r3]
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 8000566:	f7ff fea3 	bl	80002b0 <voltage_measure>
        //voltage_joint_2 = voltage_measure (ADC1,ADC_CHANNEL3);

        joint_0_angle = CONVERSION_FACTOR_JOINT_0*voltage_joint_0;
        //joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        //joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;  
        printf("%6.2f \n",joint_0_angle); 
 800056a:	ee10 0a10 	vmov	r0, s0
 800056e:	f006 fd2b 	bl	8006fc8 <__aeabi_f2d>
 8000572:	4602      	mov	r2, r0
 8000574:	460b      	mov	r3, r1
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <tim1_up_tim10_isr+0x5c>)
 8000578:	f002 fae8 	bl	8002b4c <printf>
		counter=0;
 800057c:	2300      	movs	r3, #0
 800057e:	6023      	str	r3, [r4, #0]
 8000580:	bd10      	pop	{r4, pc}
 8000582:	bf00      	nop
 8000584:	200008cc 	.word	0x200008cc
 8000588:	40010000 	.word	0x40010000
 800058c:	20000000 	.word	0x20000000
 8000590:	40012000 	.word	0x40012000
 8000594:	08007ba0 	.word	0x08007ba0

08000598 <SVM_voltage_switch_inverter_VSI>:




void  SVM_voltage_switch_inverter_VSI(float duty_A,float duty_B,float duty_C,bool shutdown)
{
 8000598:	b510      	push	{r4, lr}
  //DTC-SVM switching selection
  float Attenuation;

  if (shutdown==false)
 800059a:	4604      	mov	r4, r0




void  SVM_voltage_switch_inverter_VSI(float duty_A,float duty_B,float duty_C,bool shutdown)
{
 800059c:	ed2d 8b06 	vpush	{d8-d10}
  if (shutdown==false)
  {
    Attenuation=1.0f;

    //-------------SA: S1 and S4------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC1, TIM_OCM_PWM1);
 80005a0:	4848      	ldr	r0, [pc, #288]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)




void  SVM_voltage_switch_inverter_VSI(float duty_A,float duty_B,float duty_C,bool shutdown)
{
 80005a2:	eef0 8a40 	vmov.f32	s17, s0
 80005a6:	eeb0 aa60 	vmov.f32	s20, s1
 80005aa:	eef0 9a41 	vmov.f32	s19, s2
  //DTC-SVM switching selection
  float Attenuation;

  if (shutdown==false)
 80005ae:	bb44      	cbnz	r4, 8000602 <SVM_voltage_switch_inverter_VSI+0x6a>
  {
    Attenuation=1.0f;

    //-------------SA: S1 and S4------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC1, TIM_OCM_PWM1);
 80005b0:	2206      	movs	r2, #6
 80005b2:	4621      	mov	r1, r4
 80005b4:	f000 fe08 	bl	80011c8 <timer_set_oc_mode>
    timer_enable_oc_output (TIM1, TIM_OC1 );  //S1
 80005b8:	4842      	ldr	r0, [pc, #264]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005ba:	4621      	mov	r1, r4
 80005bc:	f000 ff14 	bl	80013e8 <timer_enable_oc_output>
    timer_enable_oc_output (TIM1, TIM_OC1N);  //S4}
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	f000 ff10 	bl	80013e8 <timer_enable_oc_output>

    //-------------SB: S3 and S6------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC2, TIM_OCM_PWM1);
 80005c8:	2206      	movs	r2, #6
 80005ca:	483e      	ldr	r0, [pc, #248]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	f000 fdfb 	bl	80011c8 <timer_set_oc_mode>
    timer_enable_oc_output (TIM1, TIM_OC2 );  //S3
 80005d2:	483c      	ldr	r0, [pc, #240]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	f000 ff07 	bl	80013e8 <timer_enable_oc_output>
    timer_enable_oc_output (TIM1, TIM_OC2N);  //S6
 80005da:	483a      	ldr	r0, [pc, #232]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005dc:	2103      	movs	r1, #3
 80005de:	f000 ff03 	bl	80013e8 <timer_enable_oc_output>


    //-------------SC: S5 and S2-------------------------------------
    timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
 80005e2:	2206      	movs	r2, #6
 80005e4:	4837      	ldr	r0, [pc, #220]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005e6:	2104      	movs	r1, #4
 80005e8:	f000 fdee 	bl	80011c8 <timer_set_oc_mode>
    timer_enable_oc_output (TIM1, TIM_OC3 );  //S5 on
 80005ec:	4835      	ldr	r0, [pc, #212]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005ee:	2104      	movs	r1, #4
 80005f0:	f000 fefa 	bl	80013e8 <timer_enable_oc_output>
    timer_enable_oc_output (TIM1, TIM_OC3N);  //S2 off
 80005f4:	4833      	ldr	r0, [pc, #204]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80005f6:	2105      	movs	r1, #5
 80005f8:	f000 fef6 	bl	80013e8 <timer_enable_oc_output>
  //DTC-SVM switching selection
  float Attenuation;

  if (shutdown==false)
  {
    Attenuation=1.0f;
 80005fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x70
 8000600:	e02d      	b.n	800065e <SVM_voltage_switch_inverter_VSI+0xc6>
    duty_A=0.0f;
    duty_B=0.0f;
    duty_C=0.0f;

    //-------------SA: S1 and S4------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC1, TIM_OCM_PWM1);
 8000602:	2206      	movs	r2, #6
 8000604:	2100      	movs	r1, #0
 8000606:	f000 fddf 	bl	80011c8 <timer_set_oc_mode>
    timer_disable_oc_output (TIM1, TIM_OC1 );  //S1
 800060a:	482e      	ldr	r0, [pc, #184]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
    timer_enable_oc_output (TIM1, TIM_OC3N);  //S2 off
  }  

  else
  {
    Attenuation=0.0f;
 800060c:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 80006c8 <SVM_voltage_switch_inverter_VSI+0x130>
    duty_B=0.0f;
    duty_C=0.0f;

    //-------------SA: S1 and S4------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC1, TIM_OCM_PWM1);
    timer_disable_oc_output (TIM1, TIM_OC1 );  //S1
 8000610:	2100      	movs	r1, #0
 8000612:	f000 ff1b 	bl	800144c <timer_disable_oc_output>
    timer_disable_oc_output (TIM1, TIM_OC1N);  //S4}
 8000616:	482b      	ldr	r0, [pc, #172]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 8000618:	2101      	movs	r1, #1
 800061a:	f000 ff17 	bl	800144c <timer_disable_oc_output>

    //-------------SB: S3 and S6------------------------------------
    timer_set_oc_mode      (TIM1, TIM_OC2, TIM_OCM_PWM1);
 800061e:	2206      	movs	r2, #6
 8000620:	4828      	ldr	r0, [pc, #160]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 8000622:	2102      	movs	r1, #2
 8000624:	f000 fdd0 	bl	80011c8 <timer_set_oc_mode>
    timer_disable_oc_output (TIM1, TIM_OC2 );  //S3
 8000628:	4826      	ldr	r0, [pc, #152]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 800062a:	2102      	movs	r1, #2
 800062c:	f000 ff0e 	bl	800144c <timer_disable_oc_output>
    timer_disable_oc_output (TIM1, TIM_OC2N);  //S6
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 8000632:	2103      	movs	r1, #3
 8000634:	f000 ff0a 	bl	800144c <timer_disable_oc_output>


    //-------------SC: S5 and S2-------------------------------------
    timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
 8000638:	2206      	movs	r2, #6
 800063a:	4822      	ldr	r0, [pc, #136]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 800063c:	2104      	movs	r1, #4
 800063e:	f000 fdc3 	bl	80011c8 <timer_set_oc_mode>
    timer_disable_oc_output (TIM1, TIM_OC3 );  //S5 on
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 8000644:	2104      	movs	r1, #4
 8000646:	f000 ff01 	bl	800144c <timer_disable_oc_output>
    timer_disable_oc_output (TIM1, TIM_OC3N);  //S2 off
 800064a:	481e      	ldr	r0, [pc, #120]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 800064c:	2105      	movs	r1, #5
 800064e:	f000 fefd 	bl	800144c <timer_disable_oc_output>
  else
  {
    Attenuation=0.0f;
    duty_A=0.0f;
    duty_B=0.0f;
    duty_C=0.0f;
 8000652:	eef0 9a48 	vmov.f32	s19, s16

  else
  {
    Attenuation=0.0f;
    duty_A=0.0f;
    duty_B=0.0f;
 8000656:	eeb0 aa48 	vmov.f32	s20, s16
  }  

  else
  {
    Attenuation=0.0f;
    duty_A=0.0f;
 800065a:	eef0 8a48 	vmov.f32	s17, s16
    timer_disable_oc_output (TIM1, TIM_OC3 );  //S5 on
    timer_disable_oc_output (TIM1, TIM_OC3N);  //S2 off
  }  

  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC1, duty_A*Attenuation*PWM_PERIOD_ARR);
 800065e:	ee68 7a88 	vmul.f32	s15, s17, s16
 8000662:	ed9f 9a1a 	vldr	s18, [pc, #104]	; 80006cc <SVM_voltage_switch_inverter_VSI+0x134>
 8000666:	eddf 8a1a 	vldr	s17, [pc, #104]	; 80006d0 <SVM_voltage_switch_inverter_VSI+0x138>
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 800066c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000670:	2100      	movs	r1, #0
 8000672:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 8000676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067a:	ee17 2a90 	vmov	r2, s15
 800067e:	f000 ff43 	bl	8001508 <timer_set_oc_value>
  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC2, duty_B*Attenuation*PWM_PERIOD_ARR);
 8000682:	ee2a aa08 	vmul.f32	s20, s20, s16
 8000686:	480f      	ldr	r0, [pc, #60]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 8000688:	ee2a aa09 	vmul.f32	s20, s20, s18
 800068c:	2102      	movs	r1, #2
 800068e:	ee8a aa28 	vdiv.f32	s20, s20, s17
 8000692:	eebc aaca 	vcvt.u32.f32	s20, s20
 8000696:	ee1a 2a10 	vmov	r2, s20
 800069a:	f000 ff35 	bl	8001508 <timer_set_oc_value>
  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC3, duty_C*Attenuation*PWM_PERIOD_ARR);
 800069e:	ee29 8a88 	vmul.f32	s16, s19, s16
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <SVM_voltage_switch_inverter_VSI+0x12c>)
 80006a4:	ee28 9a09 	vmul.f32	s18, s16, s18
 80006a8:	2104      	movs	r1, #4
 80006aa:	eec9 8a28 	vdiv.f32	s17, s18, s17
 80006ae:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 80006b2:	ee18 2a90 	vmov	r2, s17
}
 80006b6:	ecbd 8b06 	vpop	{d8-d10}
 80006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC1, duty_A*Attenuation*PWM_PERIOD_ARR);
  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC2, duty_B*Attenuation*PWM_PERIOD_ARR);
  //Set the capture compare value for OC1.
  timer_set_oc_value(TIM1, TIM_OC3, duty_C*Attenuation*PWM_PERIOD_ARR);
 80006be:	f000 bf23 	b.w	8001508 <timer_set_oc_value>
 80006c2:	bf00      	nop
 80006c4:	40010000 	.word	0x40010000
 80006c8:	00000000 	.word	0x00000000
 80006cc:	4d2037a0 	.word	0x4d2037a0
 80006d0:	4541c000 	.word	0x4541c000

080006d4 <main>:




int main(void)
{
 80006d4:	b508      	push	{r3, lr}
    system_init();
 80006d6:	f7ff ff17 	bl	8000508 <system_init>


    while (1)
    {
    	SVM_voltage_switch_inverter_VSI(0.2f,0.5f,counter2*0.5f,false);
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <main+0x20>)
 80006dc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80006f8 <main+0x24>
 80006e0:	ed93 1a00 	vldr	s2, [r3]
 80006e4:	eef6 0a00 	vmov.f32	s1, #96	; 0x60
 80006e8:	ee21 1a20 	vmul.f32	s2, s2, s1
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff53 	bl	8000598 <SVM_voltage_switch_inverter_VSI>
 80006f2:	e7f2      	b.n	80006da <main+0x6>
 80006f4:	20000000 	.word	0x20000000
 80006f8:	3e4ccccd 	.word	0x3e4ccccd

080006fc <cdcacm_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm.h>
#include <libopencm3-plus/utils/common.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm_common.h>

void cdcacm_init(void) {
 80006fc:	b508      	push	{r3, lr}
  //system setup
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <cdcacm_init+0x50>)
 8000700:	2101      	movs	r1, #1
 8000702:	f000 ff73 	bl	80015ec <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <cdcacm_init+0x54>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	f000 ff6f 	bl	80015ec <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE,
 800070e:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <cdcacm_init+0x58>)
 8000714:	2102      	movs	r1, #2
 8000716:	2200      	movs	r2, #0
 8000718:	f000 fc65 	bl	8000fe6 <gpio_mode_setup>
			GPIO9 | GPIO11 | GPIO12);
  gpio_set_af(GPIOA, GPIO_AF10, GPIO9 | GPIO11 | GPIO12);
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <cdcacm_init+0x58>)
 800071e:	210a      	movs	r1, #10
 8000720:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 8000724:	f000 fc81 	bl	800102a <gpio_set_af>

  cdcacm_usb_init();
 8000728:	f000 f9e4 	bl	8000af4 <cdcacm_usb_init>
  nvic_set_priority(NVIC_OTG_FS_IRQ, IRQ_PRI_USB);
 800072c:	2043      	movs	r0, #67	; 0x43
 800072e:	2120      	movs	r1, #32
 8000730:	f001 fbb4 	bl	8001e9c <nvic_set_priority>
  nvic_enable_irq(NVIC_OTG_FS_IRQ);
 8000734:	2043      	movs	r0, #67	; 0x43
 8000736:	f001 fba3 	bl	8001e80 <nvic_enable_irq>
  while (cdcacm_get_config() != 1) { wait(1); }; //wait until usb is configured
 800073a:	f000 f981 	bl	8000a40 <cdcacm_get_config>
 800073e:	2801      	cmp	r0, #1
 8000740:	d003      	beq.n	800074a <cdcacm_init+0x4e>
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f80e 	bl	8000764 <wait>
 8000748:	e7f7      	b.n	800073a <cdcacm_init+0x3e>
}
 800074a:	bd08      	pop	{r3, pc}
 800074c:	40023830 	.word	0x40023830
 8000750:	40023834 	.word	0x40023834
 8000754:	40020000 	.word	0x40020000

08000758 <otg_fs_isr>:

void otg_fs_isr(void)
{
  usbd_poll(usbdev);
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <otg_fs_isr+0x8>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	f000 bf78 	b.w	8001650 <usbd_poll>
 8000760:	2000891c 	.word	0x2000891c

08000764 <wait>:
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 8000764:	2200      	movs	r2, #0
 8000766:	4282      	cmp	r2, r0
 8000768:	da05      	bge.n	8000776 <wait+0x12>
 800076a:	4b03      	ldr	r3, [pc, #12]	; (8000778 <wait+0x14>)
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
 800076c:	bf00      	nop
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
 800076e:	3b01      	subs	r3, #1
 8000770:	d1fc      	bne.n	800076c <wait+0x8>
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 8000772:	3201      	adds	r2, #1
 8000774:	e7f7      	b.n	8000766 <wait+0x2>
 8000776:	4770      	bx	lr
 8000778:	000186a0 	.word	0x000186a0

0800077c <printled>:
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
}

void printled(int rep, int gpiop, int pin) {
 800077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000780:	230a      	movs	r3, #10
 8000782:	4606      	mov	r6, r0
 8000784:	460d      	mov	r5, r1
 8000786:	4617      	mov	r7, r2
 8000788:	4c0f      	ldr	r4, [pc, #60]	; (80007c8 <printled+0x4c>)
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
 800078a:	bf00      	nop
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
 800078c:	3c01      	subs	r4, #1
 800078e:	d1fc      	bne.n	800078a <printled+0xe>
  }
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
 8000790:	3b01      	subs	r3, #1
 8000792:	d1f9      	bne.n	8000788 <printled+0xc>
 8000794:	461c      	mov	r4, r3
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 8000796:	42b4      	cmp	r4, r6
 8000798:	da13      	bge.n	80007c2 <printled+0x46>
    gpio_set(gpiop, pin);
 800079a:	fa1f f887 	uxth.w	r8, r7
 800079e:	4628      	mov	r0, r5
 80007a0:	4641      	mov	r1, r8
 80007a2:	f000 fc17 	bl	8000fd4 <gpio_set>
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 80007a8:	bf00      	nop
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 80007aa:	3b01      	subs	r3, #1
 80007ac:	d1fc      	bne.n	80007a8 <printled+0x2c>
      __asm__("nop");
    gpio_clear(gpiop, pin);
 80007ae:	4628      	mov	r0, r5
 80007b0:	4641      	mov	r1, r8
 80007b2:	f000 fc11 	bl	8000fd8 <gpio_clear>
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 80007b8:	bf00      	nop
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 80007ba:	3b01      	subs	r3, #1
 80007bc:	d1fc      	bne.n	80007b8 <printled+0x3c>
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 80007be:	3401      	adds	r4, #1
 80007c0:	e7e9      	b.n	8000796 <printled+0x1a>
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
  }
}
 80007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007c6:	bf00      	nop
 80007c8:	000f4240 	.word	0x000f4240
 80007cc:	007a1200 	.word	0x007a1200

080007d0 <strlen2>:
      __asm__("nop");
  }
}

int strlen2(char s[]) {
  int i=0;
 80007d0:	2300      	movs	r3, #0
  while (s[i] != '\0') {
 80007d2:	5cc2      	ldrb	r2, [r0, r3]
 80007d4:	3301      	adds	r3, #1
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d1fb      	bne.n	80007d2 <strlen2+0x2>
    i++;
  }
  return(i+1);
}
 80007da:	4618      	mov	r0, r3
 80007dc:	4770      	bx	lr

080007de <reverse>:

void reverse(char s[])
{
 80007de:	b510      	push	{r4, lr}
 80007e0:	4604      	mov	r4, r0
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 80007e2:	f7ff fff5 	bl	80007d0 <strlen2>
 80007e6:	2200      	movs	r2, #0
 80007e8:	1e83      	subs	r3, r0, #2
 80007ea:	429a      	cmp	r2, r3
 80007ec:	da06      	bge.n	80007fc <reverse+0x1e>
    c = s[i];
 80007ee:	5ca1      	ldrb	r1, [r4, r2]
    s[i] = s[j];
 80007f0:	5ce0      	ldrb	r0, [r4, r3]
 80007f2:	54a0      	strb	r0, [r4, r2]
    s[j] = c;
 80007f4:	54e1      	strb	r1, [r4, r3]

void reverse(char s[])
{
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 80007f6:	3201      	adds	r2, #1
 80007f8:	3b01      	subs	r3, #1
 80007fa:	e7f6      	b.n	80007ea <reverse+0xc>
    c = s[i];
    s[i] = s[j];
    s[j] = c;
  }
}
 80007fc:	bd10      	pop	{r4, pc}

080007fe <itoa>:

void itoa(int n, char s[])
{
 80007fe:	b570      	push	{r4, r5, r6, lr}
 8000800:	2200      	movs	r2, #0
 8000802:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8000806:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 800080a:	260a      	movs	r6, #10
 800080c:	fb94 f5f6 	sdiv	r5, r4, r6
 8000810:	fb06 4415 	mls	r4, r6, r5, r4
 8000814:	3430      	adds	r4, #48	; 0x30
 8000816:	548c      	strb	r4, [r1, r2]
 8000818:	1c53      	adds	r3, r2, #1
  } while ((n /= 10) > 0);     /* delete it */
 800081a:	462c      	mov	r4, r5
 800081c:	b10d      	cbz	r5, 8000822 <itoa+0x24>
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 800081e:	461a      	mov	r2, r3
 8000820:	e7f3      	b.n	800080a <itoa+0xc>
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 8000822:	2800      	cmp	r0, #0
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 8000824:	461c      	mov	r4, r3
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 8000826:	da02      	bge.n	800082e <itoa+0x30>
    s[i++] = '-';
 8000828:	1c93      	adds	r3, r2, #2
 800082a:	222d      	movs	r2, #45	; 0x2d
 800082c:	550a      	strb	r2, [r1, r4]
  s[i] = '\0';
 800082e:	2200      	movs	r2, #0
 8000830:	54ca      	strb	r2, [r1, r3]
  reverse(s);
 8000832:	4608      	mov	r0, r1
}
 8000834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    s[i++] = n % 10 + '0';   /* get next digit */
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
    s[i++] = '-';
  s[i] = '\0';
  reverse(s);
 8000838:	f7ff bfd1 	b.w	80007de <reverse>

0800083c <_write>:
   &dotab_cdcacm,  /* standard error */
   0             /* terminates the list */
};

long _write(int fd, const void *buf, size_t cnt);
long _write(int fd, const void *buf, size_t cnt) {
 800083c:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).write(fd, buf, cnt);
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <_write+0x10>)
 8000840:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4798      	blx	r3
}
 8000848:	bd08      	pop	{r3, pc}
 800084a:	bf00      	nop
 800084c:	20000004 	.word	0x20000004

08000850 <_read>:

long _read(int fd, char *buf, size_t cnt);
long _read(int fd, char *buf, size_t cnt) {
 8000850:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).read(fd, buf, cnt);
 8000852:	4b03      	ldr	r3, [pc, #12]	; (8000860 <_read+0x10>)
 8000854:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	4798      	blx	r3
}
 800085c:	bd08      	pop	{r3, pc}
 800085e:	bf00      	nop
 8000860:	20000004 	.word	0x20000004

08000864 <_open>:

int _open(const char *file, int flags, int mode);
int _open(const char *file, int flags, int mode) {
 8000864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000868:	4605      	mov	r5, r0
 800086a:	460f      	mov	r7, r1
 800086c:	4690      	mov	r8, r2
  int which_devoptab = 0;
 800086e:	2400      	movs	r4, #0
  int fd = -1;
  /* search for "file" in dotab_list[].name */
  do {
    if( strcmp( (*devoptab_list[which_devoptab]).name, file ) == 0 ) {
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_open+0x30>)
 8000872:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000876:	4629      	mov	r1, r5
 8000878:	6830      	ldr	r0, [r6, #0]
 800087a:	f002 fa19 	bl	8002cb0 <strcmp>
 800087e:	b108      	cbz	r0, 8000884 <_open+0x20>
      fd = which_devoptab;
      break;
    }
  } while( devoptab_list[which_devoptab++] );
 8000880:	3401      	adds	r4, #1
 8000882:	e7f5      	b.n	8000870 <_open+0xc>
  /* if we found the requested file/device,
     then invoke the device's open_r() method */
  if( fd != -1 ) (*devoptab_list[fd]).open(file, flags, mode );
 8000884:	6873      	ldr	r3, [r6, #4]
 8000886:	4628      	mov	r0, r5
 8000888:	4639      	mov	r1, r7
 800088a:	4642      	mov	r2, r8
 800088c:	4798      	blx	r3
  /* it doesn't exist! */
  else errno = ENODEV;
  return fd;
}
 800088e:	4620      	mov	r0, r4
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000894:	20000004 	.word	0x20000004

08000898 <_close>:

long _close(int fd);
long _close(int fd) {
 8000898:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).close(fd);
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <_close+0x10>)
 800089c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4798      	blx	r3
}
 80008a4:	bd08      	pop	{r3, pc}
 80008a6:	bf00      	nop
 80008a8:	20000004 	.word	0x20000004

080008ac <_sbrk>:

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 80008ac:	b530      	push	{r4, r5, lr}
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <_sbrk+0x84>)
 80008b0:	681c      	ldr	r4, [r3, #0]
 80008b2:	2c02      	cmp	r4, #2
}

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 80008b4:	b085      	sub	sp, #20
 80008b6:	4605      	mov	r5, r0
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 80008b8:	d116      	bne.n	80008e8 <_sbrk+0x3c>
    write( 2, "Asking for: ", 12);
 80008ba:	220c      	movs	r2, #12
 80008bc:	4620      	mov	r0, r4
 80008be:	491d      	ldr	r1, [pc, #116]	; (8000934 <_sbrk+0x88>)
 80008c0:	f002 fb34 	bl	8002f2c <write>
    char incr_c[15];
    itoa(incr, incr_c);
 80008c4:	4669      	mov	r1, sp
 80008c6:	4628      	mov	r0, r5
 80008c8:	f7ff ff99 	bl	80007fe <itoa>
    write( 2, incr_c, strlen2(incr_c));
 80008cc:	4668      	mov	r0, sp
 80008ce:	f7ff ff7f 	bl	80007d0 <strlen2>
 80008d2:	4669      	mov	r1, sp
 80008d4:	4602      	mov	r2, r0
 80008d6:	4620      	mov	r0, r4
 80008d8:	f002 fb28 	bl	8002f2c <write>
    write( 2, " bytes.\n", 8);
 80008dc:	4620      	mov	r0, r4
 80008de:	4916      	ldr	r1, [pc, #88]	; (8000938 <_sbrk+0x8c>)
 80008e0:	2208      	movs	r2, #8
 80008e2:	f002 fb23 	bl	8002f2c <write>
 80008e6:	e001      	b.n	80008ec <_sbrk+0x40>
  } else {
    first++;
 80008e8:	3401      	adds	r4, #1
 80008ea:	601c      	str	r4, [r3, #0]
  }
  //*/
  //
/* initialize */
  if( heap_end == 0 ) heap_end = _heap;
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <_sbrk+0x90>)
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <_sbrk+0x94>)
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	b901      	cbnz	r1, 80008f6 <_sbrk+0x4a>
 80008f4:	6013      	str	r3, [r2, #0]
  prev_heap_end = heap_end;
 80008f6:	6810      	ldr	r0, [r2, #0]
  if( heap_end + incr -_heap > HEAPSIZE ) {
 80008f8:	4405      	add	r5, r0
 80008fa:	1aeb      	subs	r3, r5, r3
 80008fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000900:	dd12      	ble.n	8000928 <_sbrk+0x7c>
/* heap overflow—announce on stderr */
    printled(10, LRED);
 8000902:	200a      	movs	r0, #10
 8000904:	490f      	ldr	r1, [pc, #60]	; (8000944 <_sbrk+0x98>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	f7ff ff37 	bl	800077c <printled>
    printled(10, LORANGE);
 800090e:	200a      	movs	r0, #10
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <_sbrk+0x98>)
 8000912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000916:	f7ff ff31 	bl	800077c <printled>
    write( 2, "Heap overflow!\n", 15 );
 800091a:	490b      	ldr	r1, [pc, #44]	; (8000948 <_sbrk+0x9c>)
 800091c:	220f      	movs	r2, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f002 fb04 	bl	8002f2c <write>
    abort();
 8000924:	f001 fcd4 	bl	80022d0 <abort>
  }
  heap_end += incr;
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <_sbrk+0x90>)
 800092a:	601d      	str	r5, [r3, #0]
  return (caddr_t) prev_heap_end;
}
 800092c:	b005      	add	sp, #20
 800092e:	bd30      	pop	{r4, r5, pc}
 8000930:	200088d4 	.word	0x200088d4
 8000934:	08007ba8 	.word	0x08007ba8
 8000938:	08007bb5 	.word	0x08007bb5
 800093c:	200088d8 	.word	0x200088d8
 8000940:	200008d4 	.word	0x200008d4
 8000944:	40020c00 	.word	0x40020c00
 8000948:	08007bbe 	.word	0x08007bbe

0800094c <_stat>:

int _stat(const char *file, struct stat *pstat);
int _stat(NOT_USED const char *file, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000952:	2000      	movs	r0, #0
 8000954:	4770      	bx	lr

08000956 <_fstat>:

int _fstat(int fd, struct stat *pstat);
int _fstat(NOT_USED int fd, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 8000956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800095c:	2000      	movs	r0, #0
 800095e:	4770      	bx	lr

08000960 <_lseek>:

off_t _lseek(int fd, off_t pos, int whence);
off_t _lseek(NOT_USED int fd, NOT_USED off_t pos, NOT_USED int whence) {
   return 0;
}
 8000960:	2000      	movs	r0, #0
 8000962:	4770      	bx	lr

08000964 <cdcacm_control_request>:
	(void)complete;
	(void)buf;
	(void)usbd_dev;
	(void)len;

	switch (req->bRequest) {
 8000964:	7848      	ldrb	r0, [r1, #1]
 8000966:	2820      	cmp	r0, #32
 8000968:	d004      	beq.n	8000974 <cdcacm_control_request+0x10>
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
			return 0;
		return 1;
	}
	return 0;
 800096a:	f1b0 0322 	subs.w	r3, r0, #34	; 0x22
 800096e:	4258      	negs	r0, r3
 8000970:	4158      	adcs	r0, r3
 8000972:	4770      	bx	lr
		 * advertise it in the ACM functional descriptor.
		 */
		return 1;
		}
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
 8000974:	8818      	ldrh	r0, [r3, #0]
 8000976:	2806      	cmp	r0, #6
 8000978:	bf94      	ite	ls
 800097a:	2000      	movls	r0, #0
 800097c:	2001      	movhi	r0, #1
			return 0;
		return 1;
	}
	return 0;
}
 800097e:	4770      	bx	lr

08000980 <cdcacm_callback_out>:
int cdcacm_sent=true;

static void cdcacm_callback_out(NOT_USED usbd_device* usbd_dev,NOT_USED uint8_t ep)
{
  //printled(1, LORANGE);
  cdcacm_sent=true;
 8000980:	4b01      	ldr	r3, [pc, #4]	; (8000988 <cdcacm_callback_out+0x8>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	4770      	bx	lr
 8000988:	20000020 	.word	0x20000020

0800098c <cdcacm_reset>:
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
}

void cdcacm_reset(void);
void cdcacm_reset(void) {
 800098c:	4770      	bx	lr
	...

08000990 <cdcacm_set_config>:
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 8000990:	b530      	push	{r4, r5, lr}
	configured = wValue;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <cdcacm_set_config+0x78>)
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 8000994:	b087      	sub	sp, #28
	configured = wValue;
 8000996:	6019      	str	r1, [r3, #0]
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <cdcacm_set_config+0x7c>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	2202      	movs	r2, #2
 80009a0:	2340      	movs	r3, #64	; 0x40
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 80009a2:	4604      	mov	r4, r0
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 80009a4:	f000 fe5a 	bl	800165c <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <cdcacm_set_config+0x80>)
 80009aa:	9300      	str	r3, [sp, #0]
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 80009ac:	2500      	movs	r5, #0

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 80009ae:	4620      	mov	r0, r4
 80009b0:	2182      	movs	r1, #130	; 0x82
 80009b2:	2202      	movs	r2, #2
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	f000 fe51 	bl	800165c <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 80009ba:	4620      	mov	r0, r4
 80009bc:	9500      	str	r5, [sp, #0]
 80009be:	2183      	movs	r1, #131	; 0x83
 80009c0:	2203      	movs	r2, #3
 80009c2:	2310      	movs	r3, #16
 80009c4:	f000 fe4a 	bl	800165c <usbd_ep_setup>
	usbd_register_control_callback(
 80009c8:	4620      	mov	r0, r4
 80009ca:	2121      	movs	r1, #33	; 0x21
 80009cc:	227f      	movs	r2, #127	; 0x7f
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <cdcacm_set_config+0x84>)
 80009d0:	f001 f911 	bl	8001bf6 <usbd_register_control_callback>
	 * Allows the use of /dev/tty* devices on *BSD/MacOS
	 */
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
 80009d4:	23a1      	movs	r3, #161	; 0xa1
 80009d6:	f88d 300c 	strb.w	r3, [sp, #12]
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
 80009da:	2320      	movs	r3, #32
 80009dc:	f88d 300d 	strb.w	r3, [sp, #13]
	notif->wValue = 0;
	notif->wIndex = 0;
	notif->wLength = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	f8ad 3012 	strh.w	r3, [sp, #18]
	buf[8] = 3; /* DCD | DSR */
 80009e6:	2303      	movs	r3, #3
 80009e8:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[9] = 0;
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 80009ec:	4620      	mov	r0, r4
 80009ee:	2183      	movs	r1, #131	; 0x83
 80009f0:	aa03      	add	r2, sp, #12
 80009f2:	230a      	movs	r3, #10
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
	notif->wValue = 0;
 80009f4:	f8ad 500e 	strh.w	r5, [sp, #14]
	notif->wIndex = 0;
 80009f8:	f8ad 5010 	strh.w	r5, [sp, #16]
	notif->wLength = 2;
	buf[8] = 3; /* DCD | DSR */
	buf[9] = 0;
 80009fc:	f88d 5015 	strb.w	r5, [sp, #21]
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 8000a00:	f000 fe4b 	bl	800169a <usbd_ep_write_packet>
}
 8000a04:	b007      	add	sp, #28
 8000a06:	bd30      	pop	{r4, r5, pc}
 8000a08:	20008a08 	.word	0x20008a08
 8000a0c:	08000a19 	.word	0x08000a19
 8000a10:	08000981 	.word	0x08000981
 8000a14:	08000965 	.word	0x08000965

08000a18 <cdcacm_callback_in>:
	}
	return 0;
}

static void cdcacm_callback_in(usbd_device *usbd_dev, uint8_t ep)
{
 8000a18:	b508      	push	{r3, lr}
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <cdcacm_callback_in+0x20>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	f000 fe41 	bl	80016a6 <usbd_ep_read_packet>
  if (len > 0) {
 8000a24:	4602      	mov	r2, r0
 8000a26:	b128      	cbz	r0, 8000a34 <cdcacm_callback_in+0x1c>
    cbuf_append(&cdc_cbuf_in, buf,  len);
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <cdcacm_callback_in+0x24>)
 8000a2a:	4903      	ldr	r1, [pc, #12]	; (8000a38 <cdcacm_callback_in+0x20>)
  }
}
 8000a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
  if (len > 0) {
    cbuf_append(&cdc_cbuf_in, buf,  len);
 8000a30:	f000 b90e 	b.w	8000c50 <cbuf_append>
 8000a34:	bd08      	pop	{r3, pc}
 8000a36:	bf00      	nop
 8000a38:	200089b0 	.word	0x200089b0
 8000a3c:	200089f0 	.word	0x200089f0

08000a40 <cdcacm_get_config>:
}

int cdcacm_get_config(void)
{
	return configured;
}
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <cdcacm_get_config+0x8>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20008a08 	.word	0x20008a08

08000a4c <cdcacm_open>:
  return s;
}

int cdcacm_open(NOT_USED const char *path, NOT_USED int flags, NOT_USED int mode) {
  return(0);
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	4770      	bx	lr

08000a50 <cdcacm_close>:

int cdcacm_close(NOT_USED int fd) {
  return(0);
}
 8000a50:	2000      	movs	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <cdcacm_write_now>:

void cdcacm_write_now(char* buf, int len) {
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4605      	mov	r5, r0
 8000a58:	460c      	mov	r4, r1
  //printled(1, LGREEN);
  //while (cdcacm_sent == false) {};
  //nvic_disable_irq(NVIC_OTG_FS_IRQ);
  //cdcacm_sent=false;
  //__asm__("CPSID i;");
  while (usbd_ep_write_packet(usbdev, 0x82, buf, len) ==0);
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <cdcacm_write_now+0x1c>)
 8000a5c:	2182      	movs	r1, #130	; 0x82
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	462a      	mov	r2, r5
 8000a62:	b2a3      	uxth	r3, r4
 8000a64:	f000 fe19 	bl	800169a <usbd_ep_write_packet>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d0f6      	beq.n	8000a5a <cdcacm_write_now+0x6>
  //cdcacm_sent=false;
  //nvic_enable_irq(NVIC_OTG_FS_IRQ);
  //__asm__("CPSIE i;");
  //printled(2, LGREEN);
}
 8000a6c:	bd38      	pop	{r3, r4, r5, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000891c 	.word	0x2000891c

08000a74 <cdcacm_write>:

long cdcacm_write(NOT_USED int fd, const char *ptr, int len) {
 8000a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a78:	4688      	mov	r8, r1
 8000a7a:	4617      	mov	r7, r2
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 8000a7c:	2500      	movs	r5, #0
 8000a7e:	42bd      	cmp	r5, r7
 8000a80:	da1e      	bge.n	8000ac0 <cdcacm_write+0x4c>
    {
      buf[buf_pos]=ptr[index];
 8000a82:	4c11      	ldr	r4, [pc, #68]	; (8000ac8 <cdcacm_write+0x54>)
 8000a84:	4e11      	ldr	r6, [pc, #68]	; (8000acc <cdcacm_write+0x58>)
 8000a86:	6821      	ldr	r1, [r4, #0]
 8000a88:	f818 3005 	ldrb.w	r3, [r8, r5]
 8000a8c:	5473      	strb	r3, [r6, r1]
      buf_pos+=1;
 8000a8e:	3101      	adds	r1, #1
      if (buf_pos == 1) {
 8000a90:	2901      	cmp	r1, #1
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
    {
      buf[buf_pos]=ptr[index];
      buf_pos+=1;
 8000a92:	6021      	str	r1, [r4, #0]
 8000a94:	4630      	mov	r0, r6
      if (buf_pos == 1) {
 8000a96:	d103      	bne.n	8000aa0 <cdcacm_write+0x2c>
	//if (buf_pos == CDCACM_PACKET_SIZE/2) {
	cdcacm_write_now(buf, buf_pos);
 8000a98:	f7ff ffdc 	bl	8000a54 <cdcacm_write_now>
	buf_pos=0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6023      	str	r3, [r4, #0]
      }	
      if (ptr[index] == '\n')
 8000aa0:	f818 3005 	ldrb.w	r3, [r8, r5]
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d109      	bne.n	8000abc <cdcacm_write+0x48>
	{
	  buf[buf_pos]='\r';
 8000aa8:	6821      	ldr	r1, [r4, #0]
	  buf_pos+=1;
	  cdcacm_write_now(buf, buf_pos);
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <cdcacm_write+0x58>)
	cdcacm_write_now(buf, buf_pos);
	buf_pos=0;
      }	
      if (ptr[index] == '\n')
	{
	  buf[buf_pos]='\r';
 8000aac:	230d      	movs	r3, #13
 8000aae:	5473      	strb	r3, [r6, r1]
	  buf_pos+=1;
 8000ab0:	3101      	adds	r1, #1
 8000ab2:	6021      	str	r1, [r4, #0]
	  cdcacm_write_now(buf, buf_pos);
 8000ab4:	f7ff ffce 	bl	8000a54 <cdcacm_write_now>
	  buf_pos=0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	6023      	str	r3, [r4, #0]
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 8000abc:	3501      	adds	r5, #1
 8000abe:	e7de      	b.n	8000a7e <cdcacm_write+0xa>
	  buf_pos=0;
	}
    }

  return len;
}
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200089ac 	.word	0x200089ac
 8000acc:	200088dc 	.word	0x200088dc

08000ad0 <cdcacm_read>:

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4614      	mov	r4, r2
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <cdcacm_read+0x20>)
 8000ad8:	f000 f880 	bl	8000bdc <cbuf_used>
 8000adc:	42a0      	cmp	r0, r4
 8000ade:	dbfa      	blt.n	8000ad6 <cdcacm_read+0x6>
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4622      	mov	r2, r4
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <cdcacm_read+0x20>)
}
 8000ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 8000aea:	f000 b887 	b.w	8000bfc <cbuf_pop>
 8000aee:	bf00      	nop
 8000af0:	200089f0 	.word	0x200089f0

08000af4 <cdcacm_usb_init>:
  } else {
    return(-1);
  }
}

void cdcacm_usb_init(void) {
 8000af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  //receive buffer setup
  if (cbuf_init(&cdc_cbuf_in, CDCACM_READ_BUF_SIZE) != 0) { //couldn't initialize buffer for usb
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <cdcacm_usb_init+0x90>)
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	f000 f85a 	bl	8000bb4 <cbuf_init>
 8000b00:	b130      	cbz	r0, 8000b10 <cdcacm_usb_init+0x1c>
    while(1) {
      printled(5, LRED);
 8000b02:	2005      	movs	r0, #5
 8000b04:	4920      	ldr	r1, [pc, #128]	; (8000b88 <cdcacm_usb_init+0x94>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0a:	f7ff fe37 	bl	800077c <printled>
 8000b0e:	e7f8      	b.n	8000b02 <cdcacm_usb_init+0xe>
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <cdcacm_usb_init+0x98>)
 8000b12:	681a      	ldr	r2, [r3, #0]
                       *(unique_id_p + 1) +
 8000b14:	685c      	ldr	r4, [r3, #4]
                       *(unique_id_p + 2);
 8000b16:	3308      	adds	r3, #8
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 8000b18:	4414      	add	r4, r2
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
 8000b1a:	681b      	ldr	r3, [r3, #0]
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 8000b1c:	441c      	add	r4, r3
 8000b1e:	f06f 0103 	mvn.w	r1, #3
 8000b22:	4341      	muls	r1, r0
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <cdcacm_usb_init+0x9c>)
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 8000b26:	fa24 f101 	lsr.w	r1, r4, r1
 8000b2a:	1813      	adds	r3, r2, r0
 8000b2c:	f001 010f 	and.w	r1, r1, #15
 8000b30:	3801      	subs	r0, #1
 8000b32:	3130      	adds	r1, #48	; 0x30
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 8000b34:	f110 0f08 	cmn.w	r0, #8
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 8000b38:	71d9      	strb	r1, [r3, #7]
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 8000b3a:	d1f0      	bne.n	8000b1e <cdcacm_usb_init+0x2a>
 8000b3c:	2300      	movs	r3, #0
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
    if(s[i] > '9')
 8000b3e:	5cd1      	ldrb	r1, [r2, r3]
 8000b40:	2939      	cmp	r1, #57	; 0x39
 8000b42:	d902      	bls.n	8000b4a <cdcacm_usb_init+0x56>
      s[i] += 'A' - '9' - 1;
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <cdcacm_usb_init+0x9c>)
 8000b46:	3107      	adds	r1, #7
 8000b48:	5419      	strb	r1, [r3, r0]

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d1f6      	bne.n	8000b3e <cdcacm_usb_init+0x4a>
    if(s[i] > '9')
      s[i] += 'A' - '9' - 1;
  s[8] = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	7213      	strb	r3, [r2, #8]
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 8000b54:	2303      	movs	r3, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <cdcacm_usb_init+0xa0>)
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <cdcacm_usb_init+0xa4>)
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <cdcacm_usb_init+0xa8>)
 8000b64:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <cdcacm_usb_init+0xac>)
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <cdcacm_usb_init+0xb0>)
 8000b68:	4c0f      	ldr	r4, [pc, #60]	; (8000ba8 <cdcacm_usb_init+0xb4>)
 8000b6a:	f000 fd4d 	bl	8001608 <usbd_init>
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 8000b6e:	490f      	ldr	r1, [pc, #60]	; (8000bac <cdcacm_usb_init+0xb8>)
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 8000b70:	6020      	str	r0, [r4, #0]
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 8000b72:	f000 ff4c 	bl	8001a0e <usbd_register_set_config_callback>
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 8000b76:	6820      	ldr	r0, [r4, #0]
 8000b78:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <cdcacm_usb_init+0xbc>)
}
 8000b7a:	b004      	add	sp, #16
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 8000b80:	f000 bd64 	b.w	800164c <usbd_register_reset_callback>
 8000b84:	200089f0 	.word	0x200089f0
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	1fff7a10 	.word	0x1fff7a10
 8000b90:	200089a0 	.word	0x200089a0
 8000b94:	20008920 	.word	0x20008920
 8000b98:	08007c62 	.word	0x08007c62
 8000b9c:	20000014 	.word	0x20000014
 8000ba0:	08007c3b 	.word	0x08007c3b
 8000ba4:	08007d3c 	.word	0x08007d3c
 8000ba8:	2000891c 	.word	0x2000891c
 8000bac:	08000991 	.word	0x08000991
 8000bb0:	0800098d 	.word	0x0800098d

08000bb4 <cbuf_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000bb4:	b570      	push	{r4, r5, r6, lr}
  cbuf->size=0;
 8000bb6:	2500      	movs	r5, #0
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000bb8:	4604      	mov	r4, r0
  cbuf->size=0;
 8000bba:	6045      	str	r5, [r0, #4]
  cbuf->first_pos=0;
 8000bbc:	6085      	str	r5, [r0, #8]
  cbuf->last_pos=0;
 8000bbe:	60c5      	str	r5, [r0, #12]
  cbuf->wmut=0;
 8000bc0:	6105      	str	r5, [r0, #16]
  cbuf->rmut=0;
 8000bc2:	6145      	str	r5, [r0, #20]
  cbuf->buf=malloc(sizeof(char)*size);
 8000bc4:	4608      	mov	r0, r1
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000bc6:	460e      	mov	r6, r1
  cbuf->size=0;
  cbuf->first_pos=0;
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
 8000bc8:	f001 fc34 	bl	8002434 <malloc>
 8000bcc:	6020      	str	r0, [r4, #0]
  if (cbuf->buf == NULL) {
 8000bce:	b110      	cbz	r0, 8000bd6 <cbuf_init+0x22>
    return(-1);
  } else {
    cbuf->size=size;
 8000bd0:	6066      	str	r6, [r4, #4]
    return(0);
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
  if (cbuf->buf == NULL) {
    return(-1);
 8000bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  } else {
    cbuf->size=size;
    return(0);
  }
}
 8000bda:	bd70      	pop	{r4, r5, r6, pc}

08000bdc <cbuf_used>:
  cbuf->rmut=0;
  cbuf->buf=NULL;
}

int cbuf_used(cbuf_t* cbuf) {
  if (cbuf->last_pos >= cbuf->first_pos) {
 8000bdc:	68c2      	ldr	r2, [r0, #12]
 8000bde:	6883      	ldr	r3, [r0, #8]
 8000be0:	429a      	cmp	r2, r3
    return(cbuf->last_pos-cbuf->first_pos);
  } else {
    return(cbuf->last_pos+cbuf->size-cbuf->first_pos);
 8000be2:	bfbc      	itt	lt
 8000be4:	6840      	ldrlt	r0, [r0, #4]
 8000be6:	1812      	addlt	r2, r2, r0
 8000be8:	1ad0      	subs	r0, r2, r3
  }
}
 8000bea:	4770      	bx	lr

08000bec <cbuf_free>:

int cbuf_free(cbuf_t* cbuf) {
 8000bec:	b510      	push	{r4, lr}
 8000bee:	4604      	mov	r4, r0
  return(cbuf->size-cbuf_used(cbuf));
 8000bf0:	f7ff fff4 	bl	8000bdc <cbuf_used>
 8000bf4:	6863      	ldr	r3, [r4, #4]
}
 8000bf6:	1a18      	subs	r0, r3, r0
 8000bf8:	bd10      	pop	{r4, pc}
	...

08000bfc <cbuf_pop>:

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	4604      	mov	r4, r0
 8000c00:	460e      	mov	r6, r1
  int i=0;
  gpio_toggle(LBLUE);
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <cbuf_pop+0x50>)
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000

int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000c08:	4617      	mov	r7, r2
  int i=0;
  gpio_toggle(LBLUE);
 8000c0a:	f000 f9e8 	bl	8000fde <gpio_toggle>
  LOCK(cbuf->rmut);
 8000c0e:	b672      	cpsid	i
 8000c10:	6960      	ldr	r0, [r4, #20]
 8000c12:	b9b8      	cbnz	r0, 8000c44 <cbuf_pop+0x48>
 8000c14:	2301      	movs	r3, #1
 8000c16:	6163      	str	r3, [r4, #20]
  for (i=0; i<out_len; i++) {
 8000c18:	42b8      	cmp	r0, r7
 8000c1a:	da03      	bge.n	8000c24 <cbuf_pop+0x28>
    if (cbuf->first_pos == cbuf->last_pos) { //empty
 8000c1c:	68a3      	ldr	r3, [r4, #8]
 8000c1e:	68e5      	ldr	r5, [r4, #12]
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d102      	bne.n	8000c2a <cbuf_pop+0x2e>
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000c24:	2300      	movs	r3, #0
 8000c26:	6163      	str	r3, [r4, #20]
 8000c28:	e00d      	b.n	8000c46 <cbuf_pop+0x4a>
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
 8000c2a:	6825      	ldr	r5, [r4, #0]
 8000c2c:	5ceb      	ldrb	r3, [r5, r3]
 8000c2e:	5433      	strb	r3, [r6, r0]
    cbuf->first_pos++;
 8000c30:	68a3      	ldr	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
 8000c32:	6865      	ldr	r5, [r4, #4]
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000c34:	3301      	adds	r3, #1
    if (cbuf->first_pos == cbuf->size) {
 8000c36:	42ab      	cmp	r3, r5
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000c38:	60a3      	str	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
 8000c3a:	bf04      	itt	eq
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	60a3      	streq	r3, [r4, #8]

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
  gpio_toggle(LBLUE);
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
 8000c40:	3001      	adds	r0, #1
 8000c42:	e7e9      	b.n	8000c18 <cbuf_pop+0x1c>
int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
 8000c44:	2000      	movs	r0, #0
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000c46:	b662      	cpsie	i
  return(i);
}
 8000c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <cbuf_append>:

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	4604      	mov	r4, r0
 8000c54:	460f      	mov	r7, r1
  int i=0;
  gpio_toggle(LORANGE);
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <cbuf_append+0x58>)
 8000c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  }
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000c5c:	4615      	mov	r5, r2
  int i=0;
  gpio_toggle(LORANGE);
 8000c5e:	f000 f9be 	bl	8000fde <gpio_toggle>
  LOCK(cbuf->wmut);
 8000c62:	b672      	cpsid	i
 8000c64:	6926      	ldr	r6, [r4, #16]
 8000c66:	b9e6      	cbnz	r6, 8000ca2 <cbuf_append+0x52>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	6123      	str	r3, [r4, #16]
  if (cbuf_free(cbuf) > in_size) {
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff ffbd 	bl	8000bec <cbuf_free>
 8000c72:	42a8      	cmp	r0, r5
 8000c74:	4630      	mov	r0, r6
 8000c76:	dd11      	ble.n	8000c9c <cbuf_append+0x4c>
    for (i=0; i<in_size; i++) {
 8000c78:	42a8      	cmp	r0, r5
 8000c7a:	da0d      	bge.n	8000c98 <cbuf_append+0x48>
      cbuf->buf[cbuf->last_pos]=in[i];
 8000c7c:	68e3      	ldr	r3, [r4, #12]
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	5c39      	ldrb	r1, [r7, r0]
 8000c82:	54d1      	strb	r1, [r2, r3]
      cbuf->last_pos++;
 8000c84:	68e3      	ldr	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
 8000c86:	6862      	ldr	r2, [r4, #4]
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000c88:	3301      	adds	r3, #1
      if (cbuf->last_pos == cbuf->size) {
 8000c8a:	4293      	cmp	r3, r2
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000c8c:	60e3      	str	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
 8000c8e:	bf04      	itt	eq
 8000c90:	2300      	moveq	r3, #0
 8000c92:	60e3      	streq	r3, [r4, #12]
int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
 8000c94:	3001      	adds	r0, #1
 8000c96:	e7ef      	b.n	8000c78 <cbuf_append+0x28>
 8000c98:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	6123      	str	r3, [r4, #16]
 8000ca0:	e000      	b.n	8000ca4 <cbuf_append+0x54>
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
 8000ca2:	2000      	movs	r0, #0
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000ca4:	b662      	cpsie	i
  return(i);
}
 8000ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <adc_disable_scan_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_disable_scan_mode(uint32_t adc)
{
	ADC_CR1(adc) &= ~ADC_CR1_SCAN;
 8000cac:	6843      	ldr	r3, [r0, #4]
 8000cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb2:	6043      	str	r3, [r0, #4]
 8000cb4:	4770      	bx	lr

08000cb6 <adc_start_conversion_regular>:
*/

void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR2(adc) |= ADC_CR2_SWSTART;
 8000cb6:	6883      	ldr	r3, [r0, #8]
 8000cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cbc:	f100 0208 	add.w	r2, r0, #8
 8000cc0:	6083      	str	r3, [r0, #8]

	/* Wait until the ADC starts the conversion. */
	while (ADC_CR2(adc) & ADC_CR2_SWSTART);
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	d4fc      	bmi.n	8000cc2 <adc_start_conversion_regular+0xc>
}
 8000cc8:	4770      	bx	lr

08000cca <adc_set_single_conversion_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_set_single_conversion_mode(uint32_t adc)
{
	ADC_CR2(adc) &= ~ADC_CR2_CONT;
 8000cca:	6883      	ldr	r3, [r0, #8]
 8000ccc:	f023 0302 	bic.w	r3, r3, #2
 8000cd0:	6083      	str	r3, [r0, #8]
 8000cd2:	4770      	bx	lr

08000cd4 <adc_set_sample_time>:

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
	uint32_t reg32;

	if (channel < 10) {
 8000cd4:	2909      	cmp	r1, #9
adc_channel
@param[in] time Unsigned int8. Sampling time selection from @ref adc_sample_rg
*/

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
 8000cd6:	b510      	push	{r4, lr}
	uint32_t reg32;

	if (channel < 10) {
 8000cd8:	d80b      	bhi.n	8000cf2 <adc_set_sample_time+0x1e>
		reg32 = ADC_SMPR2(adc);
 8000cda:	6904      	ldr	r4, [r0, #16]
		reg32 &= ~(0x7 << (channel * 3));
 8000cdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	408b      	lsls	r3, r1
 8000ce4:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << (channel * 3));
 8000ce8:	fa02 f101 	lsl.w	r1, r2, r1
 8000cec:	4319      	orrs	r1, r3
		ADC_SMPR2(adc) = reg32;
 8000cee:	6101      	str	r1, [r0, #16]
 8000cf0:	bd10      	pop	{r4, pc}
	} else {
		reg32 = ADC_SMPR1(adc);
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000cf2:	390a      	subs	r1, #10
 8000cf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		reg32 = ADC_SMPR2(adc);
		reg32 &= ~(0x7 << (channel * 3));
		reg32 |= (time << (channel * 3));
		ADC_SMPR2(adc) = reg32;
	} else {
		reg32 = ADC_SMPR1(adc);
 8000cf8:	68c4      	ldr	r4, [r0, #12]
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << ((channel - 10) * 3));
 8000d02:	408a      	lsls	r2, r1
 8000d04:	ea43 0102 	orr.w	r1, r3, r2
		ADC_SMPR1(adc) = reg32;
 8000d08:	60c1      	str	r1, [r0, #12]
 8000d0a:	bd10      	pop	{r4, pc}

08000d0c <adc_set_regular_sequence>:
{
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000d0c:	2910      	cmp	r1, #16
@param[in] length Unsigned int8. Number of channels in the group.
@param[in] channel Unsigned int8[]. Set of channels in sequence, integers 0..18.
*/

void adc_set_regular_sequence(uint32_t adc, uint8_t length, uint8_t channel[])
{
 8000d0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000d12:	d839      	bhi.n	8000d88 <adc_set_regular_sequence+0x7c>
 8000d14:	2300      	movs	r3, #0
 8000d16:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	461e      	mov	r6, r3
 8000d1e:	461f      	mov	r7, r3
 8000d20:	fa5f fc83 	uxtb.w	ip, r3
 8000d24:	f10c 0801 	add.w	r8, ip, #1
 8000d28:	fa5f f888 	uxtb.w	r8, r8
		return;
	}

	for (i = 1; i <= length; i++) {
 8000d2c:	4588      	cmp	r8, r1
 8000d2e:	d825      	bhi.n	8000d7c <adc_set_regular_sequence+0x70>
		if (i <= 6) {
 8000d30:	f1b8 0f06 	cmp.w	r8, #6
 8000d34:	d807      	bhi.n	8000d46 <adc_set_regular_sequence+0x3a>
			reg32_3 |= (channel[i - 1] << ((i - 1) * 5));
 8000d36:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000d3a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 8000d3e:	fa09 f808 	lsl.w	r8, r9, r8
 8000d42:	ea45 0508 	orr.w	r5, r5, r8
		}
		if ((i > 6) & (i <= 12)) {
 8000d46:	f1ac 0806 	sub.w	r8, ip, #6
 8000d4a:	f1b8 0f05 	cmp.w	r8, #5
 8000d4e:	d807      	bhi.n	8000d60 <adc_set_regular_sequence+0x54>
			reg32_2 |= (channel[i - 1] << ((i - 6 - 1) * 5));
 8000d50:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000d54:	f104 081e 	add.w	r8, r4, #30
 8000d58:	fa09 f808 	lsl.w	r8, r9, r8
 8000d5c:	ea46 0608 	orr.w	r6, r6, r8
		}
		if ((i > 12) & (i <= 16)) {
 8000d60:	f1ac 0c0c 	sub.w	ip, ip, #12
 8000d64:	f1bc 0f03 	cmp.w	ip, #3
 8000d68:	d805      	bhi.n	8000d76 <adc_set_regular_sequence+0x6a>
			reg32_1 |= (channel[i - 1] << ((i - 12 - 1) * 5));
 8000d6a:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000d6e:	fa0c fc04 	lsl.w	ip, ip, r4
 8000d72:	ea47 070c 	orr.w	r7, r7, ip
 8000d76:	3301      	adds	r3, #1
 8000d78:	3405      	adds	r4, #5
 8000d7a:	e7d1      	b.n	8000d20 <adc_set_regular_sequence+0x14>
		}
	}
	reg32_1 |= ((length - 1) << ADC_SQR1_L_LSB);
 8000d7c:	3901      	subs	r1, #1
 8000d7e:	ea47 5701 	orr.w	r7, r7, r1, lsl #20

	ADC_SQR1(adc) = reg32_1;
 8000d82:	62c7      	str	r7, [r0, #44]	; 0x2c
	ADC_SQR2(adc) = reg32_2;
 8000d84:	6306      	str	r6, [r0, #48]	; 0x30
	ADC_SQR3(adc) = reg32_3;
 8000d86:	6345      	str	r5, [r0, #52]	; 0x34
 8000d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d8c <adc_eoc>:
@returns bool. End of conversion flag.
*/

bool adc_eoc(uint32_t adc)
{
	return (ADC_SR(adc) & ADC_SR_EOC) != 0;
 8000d8c:	6800      	ldr	r0, [r0, #0]
}
 8000d8e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000d92:	4770      	bx	lr

08000d94 <adc_read_regular>:
@returns Unsigned int32 conversion result.
*/

uint32_t adc_read_regular(uint32_t adc)
{
	return ADC_DR(adc);
 8000d94:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8000d96:	4770      	bx	lr

08000d98 <adc_power_on>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_power_on(uint32_t adc)
{
	ADC_CR2(adc) |= ADC_CR2_ADON;
 8000d98:	6883      	ldr	r3, [r0, #8]
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6083      	str	r3, [r0, #8]
 8000da0:	4770      	bx	lr
	...

08000da4 <adc_set_clk_prescale>:
adc_ccr_adcpre
*/

void adc_set_clk_prescale(uint32_t prescale)
{
	uint32_t reg32 = ((ADC_CCR & ~ADC_CCR_ADCPRE_MASK) | prescale);
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <adc_set_clk_prescale+0x10>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dac:	4310      	orrs	r0, r2
	ADC_CCR = reg32;
 8000dae:	6018      	str	r0, [r3, #0]
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40012304 	.word	0x40012304

08000db8 <adc_set_multi_mode>:
@param[in] mode Unsigned int32. Multiple mode selection from @ref adc_multi_mode
*/

void adc_set_multi_mode(uint32_t mode)
{
	ADC_CCR |= mode;
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <adc_set_multi_mode+0xc>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4310      	orrs	r0, r2
 8000dbe:	6018      	str	r0, [r3, #0]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40012304 	.word	0x40012304

08000dc8 <rcc_wait_for_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000dc8:	2804      	cmp	r0, #4
 8000dca:	d81c      	bhi.n	8000e06 <rcc_wait_for_osc_ready+0x3e>
 8000dcc:	e8df f000 	tbb	[pc, r0]
 8000dd0:	120d0803 	.word	0x120d0803
 8000dd4:	17          	.byte	0x17
 8000dd5:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <rcc_wait_for_osc_ready+0x40>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	d5fb      	bpl.n	8000dd6 <rcc_wait_for_osc_ready+0xe>
 8000dde:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <rcc_wait_for_osc_ready+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0398      	lsls	r0, r3, #14
 8000de6:	d5fb      	bpl.n	8000de0 <rcc_wait_for_osc_ready+0x18>
 8000de8:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <rcc_wait_for_osc_ready+0x40>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0799      	lsls	r1, r3, #30
 8000df0:	d5fb      	bpl.n	8000dea <rcc_wait_for_osc_ready+0x22>
 8000df2:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <rcc_wait_for_osc_ready+0x44>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	079a      	lsls	r2, r3, #30
 8000dfa:	d5fb      	bpl.n	8000df4 <rcc_wait_for_osc_ready+0x2c>
 8000dfc:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <rcc_wait_for_osc_ready+0x48>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	079b      	lsls	r3, r3, #30
 8000e04:	d5fb      	bpl.n	8000dfe <rcc_wait_for_osc_ready+0x36>
 8000e06:	4770      	bx	lr
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40023870 	.word	0x40023870
 8000e10:	40023874 	.word	0x40023874

08000e14 <rcc_wait_for_sysclk_status>:
	}
}

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
 8000e14:	2801      	cmp	r0, #1
 8000e16:	d00a      	beq.n	8000e2e <rcc_wait_for_sysclk_status+0x1a>
 8000e18:	d302      	bcc.n	8000e20 <rcc_wait_for_sysclk_status+0xc>
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d00e      	beq.n	8000e3c <rcc_wait_for_sysclk_status+0x28>
 8000e1e:	4770      	bx	lr
	case PLL:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_PLL);
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <rcc_wait_for_sysclk_status+0x34>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d1f9      	bne.n	8000e20 <rcc_wait_for_sysclk_status+0xc>
 8000e2c:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <rcc_wait_for_sysclk_status+0x34>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d1f9      	bne.n	8000e2e <rcc_wait_for_sysclk_status+0x1a>
 8000e3a:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSI);
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <rcc_wait_for_sysclk_status+0x34>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	079b      	lsls	r3, r3, #30
 8000e42:	d1fb      	bne.n	8000e3c <rcc_wait_for_sysclk_status+0x28>
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023808 	.word	0x40023808

08000e4c <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000e4c:	2804      	cmp	r0, #4
 8000e4e:	d817      	bhi.n	8000e80 <rcc_osc_on+0x34>
 8000e50:	e8df f000 	tbb	[pc, r0]
 8000e54:	0f0d0803 	.word	0x0f0d0803
 8000e58:	11          	.byte	0x11
 8000e59:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <rcc_osc_on+0x38>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e62:	e00c      	b.n	8000e7e <rcc_osc_on+0x32>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <rcc_osc_on+0x38>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e6c:	e007      	b.n	8000e7e <rcc_osc_on+0x32>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <rcc_osc_on+0x38>)
 8000e70:	e002      	b.n	8000e78 <rcc_osc_on+0x2c>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <rcc_osc_on+0x3c>)
 8000e74:	e000      	b.n	8000e78 <rcc_osc_on+0x2c>
		break;
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <rcc_osc_on+0x40>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40023870 	.word	0x40023870
 8000e8c:	40023874 	.word	0x40023874

08000e90 <rcc_osc_off>:
	}
}

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8000e90:	2804      	cmp	r0, #4
 8000e92:	d817      	bhi.n	8000ec4 <rcc_osc_off+0x34>
 8000e94:	e8df f000 	tbb	[pc, r0]
 8000e98:	0f0d0803 	.word	0x0f0d0803
 8000e9c:	11          	.byte	0x11
 8000e9d:	00          	.byte	0x00
	case PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <rcc_osc_off+0x38>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000ea6:	e00c      	b.n	8000ec2 <rcc_osc_off+0x32>
		break;
	case HSE:
		RCC_CR &= ~RCC_CR_HSEON;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <rcc_osc_off+0x38>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eb0:	e007      	b.n	8000ec2 <rcc_osc_off+0x32>
		break;
	case HSI:
		RCC_CR &= ~RCC_CR_HSION;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <rcc_osc_off+0x38>)
 8000eb4:	e002      	b.n	8000ebc <rcc_osc_off+0x2c>
		break;
	case LSE:
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <rcc_osc_off+0x3c>)
 8000eb8:	e000      	b.n	8000ebc <rcc_osc_off+0x2c>
		break;
	case LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <rcc_osc_off+0x40>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40023870 	.word	0x40023870
 8000ed0:	40023874 	.word	0x40023874

08000ed4 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <rcc_set_sysclk_source+0x10>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 8000ed8:	f022 0203 	bic.w	r2, r2, #3
	RCC_CFGR = (reg32 | clk);
 8000edc:	4310      	orrs	r0, r2
 8000ede:	6018      	str	r0, [r3, #0]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023808 	.word	0x40023808

08000ee8 <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <rcc_set_ppre2+0x10>)
 8000eea:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8000eec:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8000ef0:	ea42 3040 	orr.w	r0, r2, r0, lsl #13
 8000ef4:	6018      	str	r0, [r3, #0]
 8000ef6:	4770      	bx	lr
 8000ef8:	40023808 	.word	0x40023808

08000efc <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <rcc_set_ppre1+0x10>)
 8000efe:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 8000f00:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000f04:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
 8000f08:	6018      	str	r0, [r3, #0]
 8000f0a:	4770      	bx	lr
 8000f0c:	40023808 	.word	0x40023808

08000f10 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <rcc_set_hpre+0x10>)
 8000f12:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000f14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000f18:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 8000f1c:	6018      	str	r0, [r3, #0]
 8000f1e:	4770      	bx	lr
 8000f20:	40023808 	.word	0x40023808

08000f24 <rcc_set_main_pll_hse>:
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000f24:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
 8000f28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000f2c:	0852      	lsrs	r2, r2, #1
		RCC_PLLCFGR_PLLSRC |
 8000f2e:	ea43 1181 	orr.w	r1, r3, r1, lsl #6
void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000f32:	1e53      	subs	r3, r2, #1
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000f34:	4a02      	ldr	r2, [pc, #8]	; (8000f40 <rcc_set_main_pll_hse+0x1c>)
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
		RCC_PLLCFGR_PLLSRC |
 8000f36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000f3a:	6011      	str	r1, [r2, #0]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023804 	.word	0x40023804

08000f44 <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const clock_scale_t *clock)
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff ff7f 	bl	8000e4c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff ff3a 	bl	8000dc8 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ffbd 	bl	8000ed4 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ff76 	bl	8000e4c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ff31 	bl	8000dc8 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 8000f66:	7be0      	ldrb	r0, [r4, #15]
 8000f68:	b100      	cbz	r0, 8000f6c <rcc_clock_setup_hse_3v3+0x28>
		pwr_set_vos_scale(SCALE1);
	} else {
		pwr_set_vos_scale(SCALE2);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 ffa6 	bl	8001ebc <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8000f70:	7b20      	ldrb	r0, [r4, #12]
 8000f72:	f7ff ffcd 	bl	8000f10 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8000f76:	7b60      	ldrb	r0, [r4, #13]
 8000f78:	f7ff ffc0 	bl	8000efc <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8000f7c:	7ba0      	ldrb	r0, [r4, #14]
 8000f7e:	f7ff ffb3 	bl	8000ee8 <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 8000f82:	7922      	ldrb	r2, [r4, #4]
 8000f84:	7963      	ldrb	r3, [r4, #5]
 8000f86:	7820      	ldrb	r0, [r4, #0]
 8000f88:	8861      	ldrh	r1, [r4, #2]
 8000f8a:	f7ff ffcb 	bl	8000f24 <rcc_set_main_pll_hse>

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <rcc_clock_setup_hse_3v3+0x84>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f96:	601a      	str	r2, [r3, #0]

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	0192      	lsls	r2, r2, #6
 8000f9c:	d5fc      	bpl.n	8000f98 <rcc_clock_setup_hse_3v3+0x54>
	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
	rcc_wait_for_osc_ready(PLL);

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 8000f9e:	68a0      	ldr	r0, [r4, #8]
 8000fa0:	f000 fb1a 	bl	80015d8 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff ff95 	bl	8000ed4 <rcc_set_sysclk_source>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(PLL);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff32 	bl	8000e14 <rcc_wait_for_sysclk_status>

	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <rcc_clock_setup_hse_3v3+0x88>)
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = clock->apb2_frequency;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <rcc_clock_setup_hse_3v3+0x8c>)
 8000fb8:	6962      	ldr	r2, [r4, #20]
 8000fba:	601a      	str	r2, [r3, #0]

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000fbc:	2002      	movs	r0, #2
}
 8000fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
	rcc_ppre2_frequency = clock->apb2_frequency;

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000fc2:	f7ff bf65 	b.w	8000e90 <rcc_osc_off>
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	20000024 	.word	0x20000024
 8000fd0:	20000028 	.word	0x20000028

08000fd4 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000fd4:	6181      	str	r1, [r0, #24]
 8000fd6:	4770      	bx	lr

08000fd8 <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	6181      	str	r1, [r0, #24]
 8000fdc:	4770      	bx	lr

08000fde <gpio_toggle>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 8000fde:	6943      	ldr	r3, [r0, #20]
 8000fe0:	4059      	eors	r1, r3
 8000fe2:	6141      	str	r1, [r0, #20]
 8000fe4:	4770      	bx	lr

08000fe6 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000fea:	6806      	ldr	r6, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000fec:	68c5      	ldr	r5, [r0, #12]
 8000fee:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000ff0:	fa43 f704 	asr.w	r7, r3, r4
 8000ff4:	07ff      	lsls	r7, r7, #31
 8000ff6:	d511      	bpl.n	800101c <gpio_mode_setup+0x36>
 8000ff8:	0067      	lsls	r7, r4, #1
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000ffa:	f04f 0c03 	mov.w	ip, #3
 8000ffe:	fa0c fc07 	lsl.w	ip, ip, r7
 8001002:	ea6f 0c0c 	mvn.w	ip, ip
		moder |= GPIO_MODE(i, mode);
 8001006:	fa01 f807 	lsl.w	r8, r1, r7
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 800100a:	ea0c 0606 	and.w	r6, ip, r6
		moder |= GPIO_MODE(i, mode);
		pupd &= ~GPIO_PUPD_MASK(i);
 800100e:	ea0c 0505 	and.w	r5, ip, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8001012:	fa02 f707 	lsl.w	r7, r2, r7
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
		moder |= GPIO_MODE(i, mode);
 8001016:	ea46 0608 	orr.w	r6, r6, r8
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
 800101a:	433d      	orrs	r5, r7
 800101c:	3401      	adds	r4, #1
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
	pupd = GPIO_PUPDR(gpioport);

	for (i = 0; i < 16; i++) {
 800101e:	2c10      	cmp	r4, #16
 8001020:	d1e6      	bne.n	8000ff0 <gpio_mode_setup+0xa>
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8001022:	6006      	str	r6, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8001024:	60c5      	str	r5, [r0, #12]
 8001026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800102a <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800102a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 800102c:	6a05      	ldr	r5, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 800102e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001030:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8001032:	fa42 f603 	asr.w	r6, r2, r3
 8001036:	07f7      	lsls	r7, r6, #31
 8001038:	d507      	bpl.n	800104a <gpio_set_af+0x20>
 800103a:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 800103c:	270f      	movs	r7, #15
 800103e:	40b7      	lsls	r7, r6
 8001040:	ea25 0507 	bic.w	r5, r5, r7
		afrl |= GPIO_AFR(i, alt_func_num);
 8001044:	fa01 f606 	lsl.w	r6, r1, r6
 8001048:	4335      	orrs	r5, r6
 800104a:	3301      	adds	r3, #1
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);

	for (i = 0; i < 8; i++) {
 800104c:	2b08      	cmp	r3, #8
 800104e:	d1f0      	bne.n	8001032 <gpio_set_af+0x8>
 8001050:	2300      	movs	r3, #0
 8001052:	f103 0608 	add.w	r6, r3, #8
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8001056:	fa42 f606 	asr.w	r6, r2, r6
 800105a:	07f6      	lsls	r6, r6, #31
 800105c:	d507      	bpl.n	800106e <gpio_set_af+0x44>
 800105e:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8001060:	270f      	movs	r7, #15
 8001062:	40b7      	lsls	r7, r6
 8001064:	ea24 0407 	bic.w	r4, r4, r7
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8001068:	fa01 f606 	lsl.w	r6, r1, r6
 800106c:	4334      	orrs	r4, r6
 800106e:	3301      	adds	r3, #1
		}
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
 8001070:	2b08      	cmp	r3, #8
 8001072:	d1ee      	bne.n	8001052 <gpio_set_af+0x28>
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
		afrh |= GPIO_AFR(i - 8, alt_func_num);
	}

	GPIO_AFRL(gpioport) = afrl;
 8001074:	6205      	str	r5, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8001076:	6244      	str	r4, [r0, #36]	; 0x24
 8001078:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800107c <timer_reset>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
 800107c:	b508      	push	{r3, lr}
	switch (timer_peripheral) {
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <timer_reset+0xb8>)
 8001080:	4298      	cmp	r0, r3
 8001082:	d036      	beq.n	80010f2 <timer_reset+0x76>
 8001084:	d810      	bhi.n	80010a8 <timer_reset+0x2c>
 8001086:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800108a:	4298      	cmp	r0, r3
 800108c:	d024      	beq.n	80010d8 <timer_reset+0x5c>
 800108e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001092:	4298      	cmp	r0, r3
 8001094:	d026      	beq.n	80010e4 <timer_reset+0x68>
 8001096:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800109a:	d149      	bne.n	8001130 <timer_reset+0xb4>
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 800109c:	4826      	ldr	r0, [pc, #152]	; (8001138 <timer_reset+0xbc>)
 800109e:	2101      	movs	r1, #1
 80010a0:	f000 faa8 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 80010a4:	4824      	ldr	r0, [pc, #144]	; (8001138 <timer_reset+0xbc>)
 80010a6:	e015      	b.n	80010d4 <timer_reset+0x58>
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <timer_reset+0xc0>)
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d02f      	beq.n	800110e <timer_reset+0x92>
 80010ae:	d804      	bhi.n	80010ba <timer_reset+0x3e>
 80010b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010b4:	4298      	cmp	r0, r3
 80010b6:	d023      	beq.n	8001100 <timer_reset+0x84>
 80010b8:	bd08      	pop	{r3, pc}
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <timer_reset+0xc4>)
 80010bc:	4298      	cmp	r0, r3
 80010be:	d004      	beq.n	80010ca <timer_reset+0x4e>
 80010c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010c4:	4298      	cmp	r0, r3
 80010c6:	d029      	beq.n	800111c <timer_reset+0xa0>
 80010c8:	bd08      	pop	{r3, pc}
#if defined(TIM1_BASE)
	case TIM1:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 80010ca:	481e      	ldr	r0, [pc, #120]	; (8001144 <timer_reset+0xc8>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	f000 fa91 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 80010d2:	481c      	ldr	r0, [pc, #112]	; (8001144 <timer_reset+0xc8>)
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 80010d4:	2101      	movs	r1, #1
 80010d6:	e027      	b.n	8001128 <timer_reset+0xac>
		break;
	case TIM3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <timer_reset+0xbc>)
 80010da:	2102      	movs	r1, #2
 80010dc:	f000 fa8a 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 80010e0:	4815      	ldr	r0, [pc, #84]	; (8001138 <timer_reset+0xbc>)
 80010e2:	e020      	b.n	8001126 <timer_reset+0xaa>
		break;
	case TIM4:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <timer_reset+0xbc>)
 80010e6:	2104      	movs	r1, #4
 80010e8:	f000 fa84 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <timer_reset+0xbc>)
 80010ee:	2104      	movs	r1, #4
 80010f0:	e01a      	b.n	8001128 <timer_reset+0xac>
		break;
#if defined(TIM5_BASE)
	case TIM5:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <timer_reset+0xbc>)
 80010f4:	2108      	movs	r1, #8
 80010f6:	f000 fa7d 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 80010fa:	480f      	ldr	r0, [pc, #60]	; (8001138 <timer_reset+0xbc>)
 80010fc:	2108      	movs	r1, #8
 80010fe:	e013      	b.n	8001128 <timer_reset+0xac>
		break;
#endif
	case TIM6:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <timer_reset+0xbc>)
 8001102:	2110      	movs	r1, #16
 8001104:	f000 fa76 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <timer_reset+0xbc>)
 800110a:	2110      	movs	r1, #16
 800110c:	e00c      	b.n	8001128 <timer_reset+0xac>
		break;
	case TIM7:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <timer_reset+0xbc>)
 8001110:	2120      	movs	r1, #32
 8001112:	f000 fa6f 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <timer_reset+0xbc>)
 8001118:	2120      	movs	r1, #32
 800111a:	e005      	b.n	8001128 <timer_reset+0xac>
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <timer_reset+0xc8>)
 800111e:	2102      	movs	r1, #2
 8001120:	f000 fa68 	bl	80015f4 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <timer_reset+0xc8>)
 8001126:	2102      	movs	r1, #2
		rcc_peripheral_clear_reset(&RCC_APB1RSTR,
					   RCC_APB1RSTR_TIM14RST);
		break;
*/
	}
}
 8001128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 800112c:	f000 ba66 	b.w	80015fc <rcc_peripheral_clear_reset>
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	40000c00 	.word	0x40000c00
 8001138:	40023820 	.word	0x40023820
 800113c:	40001400 	.word	0x40001400
 8001140:	40010000 	.word	0x40010000
 8001144:	40023824 	.word	0x40023824

08001148 <timer_enable_irq>:
enable bits to be set
*/

void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) |= irq;
 8001148:	68c3      	ldr	r3, [r0, #12]
 800114a:	4319      	orrs	r1, r3
 800114c:	60c1      	str	r1, [r0, #12]
 800114e:	4770      	bx	lr

08001150 <timer_clear_flag>:
@param[in] flag Unsigned int32. @ref tim_sr_values. Status register flag.
*/

void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag)
{
	TIM_SR(timer_peripheral) &= ~flag;
 8001150:	6903      	ldr	r3, [r0, #16]
 8001152:	ea23 0101 	bic.w	r1, r3, r1
 8001156:	6101      	str	r1, [r0, #16]
 8001158:	4770      	bx	lr

0800115a <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 800115a:	b510      	push	{r4, lr}
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 800115c:	6804      	ldr	r4, [r0, #0]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);

	cr1 |= clock_div | alignment | direction;
 800115e:	4313      	orrs	r3, r2
{
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 8001160:	f424 745c 	bic.w	r4, r4, #880	; 0x370

	cr1 |= clock_div | alignment | direction;
 8001164:	4319      	orrs	r1, r3
 8001166:	430c      	orrs	r4, r1

	TIM_CR1(timer_peripheral) = cr1;
 8001168:	6004      	str	r4, [r0, #0]
 800116a:	bd10      	pop	{r4, pc}

0800116c <timer_enable_preload>:
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 800116c:	6803      	ldr	r3, [r0, #0]
 800116e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001172:	6003      	str	r3, [r0, #0]
 8001174:	4770      	bx	lr

08001176 <timer_continuous_mode>:
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 8001176:	6803      	ldr	r3, [r0, #0]
 8001178:	f023 0308 	bic.w	r3, r3, #8
 800117c:	6003      	str	r3, [r0, #0]
 800117e:	4770      	bx	lr

08001180 <timer_enable_update_event>:
tim_reg_base
*/

void timer_enable_update_event(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_UDIS;
 8001180:	6803      	ldr	r3, [r0, #0]
 8001182:	f023 0302 	bic.w	r3, r3, #2
 8001186:	6003      	str	r3, [r0, #0]
 8001188:	4770      	bx	lr

0800118a <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 800118a:	6803      	ldr	r3, [r0, #0]
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6003      	str	r3, [r0, #0]
 8001192:	4770      	bx	lr

08001194 <timer_disable_preload_complementry_enable_bits>:
*/

void timer_disable_preload_complementry_enable_bits(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <timer_disable_preload_complementry_enable_bits+0x14>)
 8001196:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800119a:	429a      	cmp	r2, r3
 800119c:	d103      	bne.n	80011a6 <timer_disable_preload_complementry_enable_bits+0x12>
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCPC;
 800119e:	6843      	ldr	r3, [r0, #4]
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6043      	str	r3, [r0, #4]
 80011a6:	4770      	bx	lr
 80011a8:	40010000 	.word	0x40010000

080011ac <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 80011ac:	6281      	str	r1, [r0, #40]	; 0x28
 80011ae:	4770      	bx	lr

080011b0 <timer_set_repetition_counter>:
*/

void timer_set_repetition_counter(uint32_t timer_peripheral, uint32_t value)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <timer_set_repetition_counter+0x10>)
 80011b2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80011b6:	429a      	cmp	r2, r3
		TIM_RCR(timer_peripheral) = value;
 80011b8:	bf08      	it	eq
 80011ba:	6301      	streq	r1, [r0, #48]	; 0x30
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40010000 	.word	0x40010000

080011c4 <timer_set_period>:
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
	TIM_ARR(timer_peripheral) = period;
 80011c4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80011c6:	4770      	bx	lr

080011c8 <timer_set_oc_mode>:
*/

void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
		       enum tim_oc_mode oc_mode)
{
	switch (oc_id) {
 80011c8:	2906      	cmp	r1, #6
 80011ca:	f200 80bf 	bhi.w	800134c <timer_set_oc_mode+0x184>
 80011ce:	e8df f011 	tbh	[pc, r1, lsl #1]
 80011d2:	0007      	.short	0x0007
 80011d4:	003200bd 	.word	0x003200bd
 80011d8:	005e00bd 	.word	0x005e00bd
 80011dc:	008c00bd 	.word	0x008c00bd
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 80011e0:	6983      	ldr	r3, [r0, #24]
 80011e2:	f023 0303 	bic.w	r3, r3, #3
 80011e6:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC1S_OUT;
 80011e8:	6983      	ldr	r3, [r0, #24]
 80011ea:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1M_MASK;
 80011ec:	6983      	ldr	r3, [r0, #24]
 80011ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011f2:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 80011f4:	2a07      	cmp	r2, #7
 80011f6:	f200 80a9 	bhi.w	800134c <timer_set_oc_mode+0x184>
 80011fa:	e8df f002 	tbb	[pc, r2]
 80011fe:	5a2e      	.short	0x5a2e
 8001200:	100c0804 	.word	0x100c0804
 8001204:	1814      	.short	0x1814
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_INACTIVE;
 8001206:	6983      	ldr	r3, [r0, #24]
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	e084      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_TOGGLE;
 800120e:	6983      	ldr	r3, [r0, #24]
 8001210:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001214:	e080      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FORCE_LOW;
 8001216:	6983      	ldr	r3, [r0, #24]
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	e07c      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 800121e:	6983      	ldr	r3, [r0, #24]
 8001220:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001224:	e078      	b.n	8001318 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC1M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM1;
 8001226:	6983      	ldr	r3, [r0, #24]
 8001228:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800122c:	e074      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM2;
 800122e:	6983      	ldr	r3, [r0, #24]
 8001230:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001234:	e070      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 8001236:	6983      	ldr	r3, [r0, #24]
 8001238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800123c:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC2S_OUT;
 800123e:	6983      	ldr	r3, [r0, #24]
 8001240:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2M_MASK;
 8001242:	6983      	ldr	r3, [r0, #24]
 8001244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001248:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 800124a:	2a07      	cmp	r2, #7
 800124c:	d87e      	bhi.n	800134c <timer_set_oc_mode+0x184>
 800124e:	e8df f002 	tbb	[pc, r2]
 8001252:	6004      	.short	0x6004
 8001254:	120e0a06 	.word	0x120e0a06
 8001258:	1a16      	.short	0x1a16
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FROZEN;
 800125a:	6983      	ldr	r3, [r0, #24]
 800125c:	e05c      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_INACTIVE;
 800125e:	6983      	ldr	r3, [r0, #24]
 8001260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001264:	e058      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_TOGGLE;
 8001266:	6983      	ldr	r3, [r0, #24]
 8001268:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800126c:	e054      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FORCE_LOW;
 800126e:	6983      	ldr	r3, [r0, #24]
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	e050      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 8001276:	6983      	ldr	r3, [r0, #24]
 8001278:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800127c:	e04c      	b.n	8001318 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC2M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM1;
 800127e:	6983      	ldr	r3, [r0, #24]
 8001280:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001284:	e048      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM2;
 8001286:	6983      	ldr	r3, [r0, #24]
 8001288:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800128c:	e044      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC3:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 800128e:	6983      	ldr	r3, [r0, #24]
 8001290:	f023 0303 	bic.w	r3, r3, #3
 8001294:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC3S_OUT;
 8001296:	6983      	ldr	r3, [r0, #24]
 8001298:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3M_MASK;
 800129a:	69c3      	ldr	r3, [r0, #28]
 800129c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012a0:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 80012a2:	2a07      	cmp	r2, #7
 80012a4:	d852      	bhi.n	800134c <timer_set_oc_mode+0x184>
 80012a6:	e8df f002 	tbb	[pc, r2]
 80012aa:	0432      	.short	0x0432
 80012ac:	14100c08 	.word	0x14100c08
 80012b0:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC3M_ACTIVE;
 80012b2:	6983      	ldr	r3, [r0, #24]
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	e02e      	b.n	8001318 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_INACTIVE;
 80012ba:	69c3      	ldr	r3, [r0, #28]
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	e043      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_TOGGLE;
 80012c2:	69c3      	ldr	r3, [r0, #28]
 80012c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012c8:	e03f      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FORCE_LOW;
 80012ca:	69c3      	ldr	r3, [r0, #28]
 80012cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d0:	e03b      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 80012d2:	69c3      	ldr	r3, [r0, #28]
 80012d4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012d8:	e037      	b.n	800134a <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC3M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM1;
 80012da:	69c3      	ldr	r3, [r0, #28]
 80012dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e0:	e033      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM2;
 80012e2:	69c3      	ldr	r3, [r0, #28]
 80012e4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80012e8:	e02f      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		}
		break;
	case TIM_OC4:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 80012ea:	6983      	ldr	r3, [r0, #24]
 80012ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f0:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC4S_OUT;
 80012f2:	6983      	ldr	r3, [r0, #24]
 80012f4:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4M_MASK;
 80012f6:	69c3      	ldr	r3, [r0, #28]
 80012f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012fc:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 80012fe:	2a07      	cmp	r2, #7
 8001300:	d824      	bhi.n	800134c <timer_set_oc_mode+0x184>
 8001302:	e8df f002 	tbb	[pc, r2]
 8001306:	0604      	.short	0x0604
 8001308:	17130f0b 	.word	0x17130f0b
 800130c:	1f1b      	.short	0x1f1b
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FROZEN;
 800130e:	69c3      	ldr	r3, [r0, #28]
 8001310:	e01b      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC4M_ACTIVE;
 8001312:	6983      	ldr	r3, [r0, #24]
 8001314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001318:	6183      	str	r3, [r0, #24]
			break;
 800131a:	4770      	bx	lr
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_INACTIVE;
 800131c:	69c3      	ldr	r3, [r0, #28]
 800131e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001322:	e012      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_TOGGLE;
 8001324:	69c3      	ldr	r3, [r0, #28]
 8001326:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800132a:	e00e      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FORCE_LOW;
 800132c:	69c3      	ldr	r3, [r0, #28]
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	e00a      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 8001334:	69c3      	ldr	r3, [r0, #28]
 8001336:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800133a:	e006      	b.n	800134a <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC4M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM1;
 800133c:	69c3      	ldr	r3, [r0, #28]
 800133e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001342:	e002      	b.n	800134a <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM2;
 8001344:	69c3      	ldr	r3, [r0, #28]
 8001346:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800134a:	61c3      	str	r3, [r0, #28]
 800134c:	4770      	bx	lr

0800134e <timer_enable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 800134e:	2906      	cmp	r1, #6
 8001350:	d816      	bhi.n	8001380 <timer_enable_oc_preload+0x32>
 8001352:	e8df f001 	tbb	[pc, r1]
 8001356:	1504      	.short	0x1504
 8001358:	150d1508 	.word	0x150d1508
 800135c:	11          	.byte	0x11
 800135d:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1PE;
 800135e:	6983      	ldr	r3, [r0, #24]
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	e002      	b.n	800136c <timer_enable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2PE;
 8001366:	6983      	ldr	r3, [r0, #24]
 8001368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800136c:	6183      	str	r3, [r0, #24]
		break;
 800136e:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3PE;
 8001370:	69c3      	ldr	r3, [r0, #28]
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	e002      	b.n	800137e <timer_enable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4PE;
 8001378:	69c3      	ldr	r3, [r0, #28]
 800137a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137e:	61c3      	str	r3, [r0, #28]
 8001380:	4770      	bx	lr
	...

08001384 <timer_set_oc_polarity_high>:
		timers 1 and 8)
*/

void timer_set_oc_polarity_high(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8001384:	2906      	cmp	r1, #6
 8001386:	d815      	bhi.n	80013b4 <timer_set_oc_polarity_high+0x30>
 8001388:	e8df f001 	tbb	[pc, r1]
 800138c:	14081404 	.word	0x14081404
 8001390:	140c      	.short	0x140c
 8001392:	10          	.byte	0x10
 8001393:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1P;
 8001394:	6a03      	ldr	r3, [r0, #32]
 8001396:	f023 0302 	bic.w	r3, r3, #2
 800139a:	e00a      	b.n	80013b2 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2P;
 800139c:	6a03      	ldr	r3, [r0, #32]
 800139e:	f023 0320 	bic.w	r3, r3, #32
 80013a2:	e006      	b.n	80013b2 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3P;
 80013a4:	6a03      	ldr	r3, [r0, #32]
 80013a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013aa:	e002      	b.n	80013b2 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4P;
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b2:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <timer_set_oc_polarity_high+0x60>)
 80013b6:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d111      	bne.n	80013e2 <timer_set_oc_polarity_high+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 80013be:	2903      	cmp	r1, #3
 80013c0:	d007      	beq.n	80013d2 <timer_set_oc_polarity_high+0x4e>
 80013c2:	2905      	cmp	r1, #5
 80013c4:	d009      	beq.n	80013da <timer_set_oc_polarity_high+0x56>
 80013c6:	2901      	cmp	r1, #1
 80013c8:	d10b      	bne.n	80013e2 <timer_set_oc_polarity_high+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NP;
 80013ca:	6a03      	ldr	r3, [r0, #32]
 80013cc:	f023 0308 	bic.w	r3, r3, #8
 80013d0:	e006      	b.n	80013e0 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NP;
 80013d2:	6a03      	ldr	r3, [r0, #32]
 80013d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d8:	e002      	b.n	80013e0 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NP;
 80013da:	6a03      	ldr	r3, [r0, #32]
 80013dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013e0:	6203      	str	r3, [r0, #32]
 80013e2:	4770      	bx	lr
 80013e4:	40010000 	.word	0x40010000

080013e8 <timer_enable_oc_output>:
		timers 1 and 8)
*/

void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80013e8:	2906      	cmp	r1, #6
 80013ea:	d815      	bhi.n	8001418 <timer_enable_oc_output+0x30>
 80013ec:	e8df f001 	tbb	[pc, r1]
 80013f0:	14081404 	.word	0x14081404
 80013f4:	140c      	.short	0x140c
 80013f6:	10          	.byte	0x10
 80013f7:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1E;
 80013f8:	6a03      	ldr	r3, [r0, #32]
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	e00a      	b.n	8001416 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2E;
 8001400:	6a03      	ldr	r3, [r0, #32]
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	e006      	b.n	8001416 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
 8001408:	6a03      	ldr	r3, [r0, #32]
 800140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140e:	e002      	b.n	8001416 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 8001410:	6a03      	ldr	r3, [r0, #32]
 8001412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001416:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <timer_enable_oc_output+0x60>)
 800141a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800141e:	429a      	cmp	r2, r3
 8001420:	d111      	bne.n	8001446 <timer_enable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 8001422:	2903      	cmp	r1, #3
 8001424:	d007      	beq.n	8001436 <timer_enable_oc_output+0x4e>
 8001426:	2905      	cmp	r1, #5
 8001428:	d009      	beq.n	800143e <timer_enable_oc_output+0x56>
 800142a:	2901      	cmp	r1, #1
 800142c:	d10b      	bne.n	8001446 <timer_enable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NE;
 800142e:	6a03      	ldr	r3, [r0, #32]
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	e006      	b.n	8001444 <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NE;
 8001436:	6a03      	ldr	r3, [r0, #32]
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	e002      	b.n	8001444 <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NE;
 800143e:	6a03      	ldr	r3, [r0, #32]
 8001440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001444:	6203      	str	r3, [r0, #32]
 8001446:	4770      	bx	lr
 8001448:	40010000 	.word	0x40010000

0800144c <timer_disable_oc_output>:
		timers 1 and 8)
*/

void timer_disable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 800144c:	2906      	cmp	r1, #6
 800144e:	d815      	bhi.n	800147c <timer_disable_oc_output+0x30>
 8001450:	e8df f001 	tbb	[pc, r1]
 8001454:	14081404 	.word	0x14081404
 8001458:	140c      	.short	0x140c
 800145a:	10          	.byte	0x10
 800145b:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1E;
 800145c:	6a03      	ldr	r3, [r0, #32]
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	e00a      	b.n	800147a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2E;
 8001464:	6a03      	ldr	r3, [r0, #32]
 8001466:	f023 0310 	bic.w	r3, r3, #16
 800146a:	e006      	b.n	800147a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3E;
 800146c:	6a03      	ldr	r3, [r0, #32]
 800146e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001472:	e002      	b.n	800147a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4E;
 8001474:	6a03      	ldr	r3, [r0, #32]
 8001476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800147a:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <timer_disable_oc_output+0x60>)
 800147e:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001482:	429a      	cmp	r2, r3
 8001484:	d111      	bne.n	80014aa <timer_disable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 8001486:	2903      	cmp	r1, #3
 8001488:	d007      	beq.n	800149a <timer_disable_oc_output+0x4e>
 800148a:	2905      	cmp	r1, #5
 800148c:	d009      	beq.n	80014a2 <timer_disable_oc_output+0x56>
 800148e:	2901      	cmp	r1, #1
 8001490:	d10b      	bne.n	80014aa <timer_disable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NE;
 8001492:	6a03      	ldr	r3, [r0, #32]
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	e006      	b.n	80014a8 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NE;
 800149a:	6a03      	ldr	r3, [r0, #32]
 800149c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014a0:	e002      	b.n	80014a8 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NE;
 80014a2:	6a03      	ldr	r3, [r0, #32]
 80014a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a8:	6203      	str	r3, [r0, #32]
 80014aa:	4770      	bx	lr
 80014ac:	40010000 	.word	0x40010000

080014b0 <timer_set_oc_idle_state_unset>:
void timer_set_oc_idle_state_unset(uint32_t timer_peripheral,
				   enum tim_oc_id oc_id)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	/* Acting for TIM1 and TIM8 only. */
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <timer_set_oc_idle_state_unset+0x54>)
 80014b2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d123      	bne.n	8001502 <timer_set_oc_idle_state_unset+0x52>
		return;
	}

	switch (oc_id) {
 80014ba:	2906      	cmp	r1, #6
 80014bc:	d821      	bhi.n	8001502 <timer_set_oc_idle_state_unset+0x52>
 80014be:	e8df f001 	tbb	[pc, r1]
 80014c2:	0804      	.short	0x0804
 80014c4:	1814100c 	.word	0x1814100c
 80014c8:	1c          	.byte	0x1c
 80014c9:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1;
 80014ca:	6843      	ldr	r3, [r0, #4]
 80014cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d0:	e016      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC1N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1N;
 80014d2:	6843      	ldr	r3, [r0, #4]
 80014d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014d8:	e012      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2;
 80014da:	6843      	ldr	r3, [r0, #4]
 80014dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014e0:	e00e      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2N;
 80014e2:	6843      	ldr	r3, [r0, #4]
 80014e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014e8:	e00a      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3;
 80014ea:	6843      	ldr	r3, [r0, #4]
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014f0:	e006      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3N;
 80014f2:	6843      	ldr	r3, [r0, #4]
 80014f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014f8:	e002      	b.n	8001500 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC4:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS4;
 80014fa:	6843      	ldr	r3, [r0, #4]
 80014fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001500:	6043      	str	r3, [r0, #4]
 8001502:	4770      	bx	lr
 8001504:	40010000 	.word	0x40010000

08001508 <timer_set_oc_value>:
*/

void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
			uint32_t value)
{
	switch (oc_id) {
 8001508:	2906      	cmp	r1, #6
 800150a:	d80c      	bhi.n	8001526 <timer_set_oc_value+0x1e>
 800150c:	e8df f001 	tbb	[pc, r1]
 8001510:	0b060b04 	.word	0x0b060b04
 8001514:	0b08      	.short	0x0b08
 8001516:	0a          	.byte	0x0a
 8001517:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCR1(timer_peripheral) = value;
 8001518:	6342      	str	r2, [r0, #52]	; 0x34
		break;
 800151a:	4770      	bx	lr
	case TIM_OC2:
		TIM_CCR2(timer_peripheral) = value;
 800151c:	6382      	str	r2, [r0, #56]	; 0x38
		break;
 800151e:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCR3(timer_peripheral) = value;
 8001520:	63c2      	str	r2, [r0, #60]	; 0x3c
		break;
 8001522:	4770      	bx	lr
	case TIM_OC4:
		TIM_CCR4(timer_peripheral) = value;
 8001524:	6402      	str	r2, [r0, #64]	; 0x40
 8001526:	4770      	bx	lr

08001528 <timer_enable_break_main_output>:
*/

void timer_enable_break_main_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <timer_enable_break_main_output+0x14>)
 800152a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800152e:	429a      	cmp	r2, r3
 8001530:	d103      	bne.n	800153a <timer_enable_break_main_output+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_MOE;
 8001532:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001538:	6443      	str	r3, [r0, #68]	; 0x44
 800153a:	4770      	bx	lr
 800153c:	40010000 	.word	0x40010000

08001540 <timer_disable_break_automatic_output>:
*/

void timer_disable_break_automatic_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <timer_disable_break_automatic_output+0x14>)
 8001542:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001546:	429a      	cmp	r2, r3
 8001548:	d103      	bne.n	8001552 <timer_disable_break_automatic_output+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_AOE;
 800154a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800154c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001550:	6443      	str	r3, [r0, #68]	; 0x44
 8001552:	4770      	bx	lr
 8001554:	40010000 	.word	0x40010000

08001558 <timer_set_break_polarity_high>:
*/

void timer_set_break_polarity_high(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <timer_set_break_polarity_high+0x14>)
 800155a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800155e:	429a      	cmp	r2, r3
 8001560:	d103      	bne.n	800156a <timer_set_break_polarity_high+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_BKP;
 8001562:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001568:	6443      	str	r3, [r0, #68]	; 0x44
 800156a:	4770      	bx	lr
 800156c:	40010000 	.word	0x40010000

08001570 <timer_disable_break>:
*/

void timer_disable_break(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <timer_disable_break+0x14>)
 8001572:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001576:	429a      	cmp	r2, r3
 8001578:	d103      	bne.n	8001582 <timer_disable_break+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_BKE;
 800157a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800157c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001580:	6443      	str	r3, [r0, #68]	; 0x44
 8001582:	4770      	bx	lr
 8001584:	40010000 	.word	0x40010000

08001588 <timer_set_enabled_off_state_in_run_mode>:
*/

void timer_set_enabled_off_state_in_run_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <timer_set_enabled_off_state_in_run_mode+0x14>)
 800158a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800158e:	429a      	cmp	r2, r3
 8001590:	d103      	bne.n	800159a <timer_set_enabled_off_state_in_run_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSR;
 8001592:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001598:	6443      	str	r3, [r0, #68]	; 0x44
 800159a:	4770      	bx	lr
 800159c:	40010000 	.word	0x40010000

080015a0 <timer_set_enabled_off_state_in_idle_mode>:
*/

void timer_set_enabled_off_state_in_idle_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <timer_set_enabled_off_state_in_idle_mode+0x14>)
 80015a2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d103      	bne.n	80015b2 <timer_set_enabled_off_state_in_idle_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSI;
 80015aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b0:	6443      	str	r3, [r0, #68]	; 0x44
 80015b2:	4770      	bx	lr
 80015b4:	40010000 	.word	0x40010000

080015b8 <timer_set_break_lock>:
*/

void timer_set_break_lock(uint32_t timer_peripheral, uint32_t lock)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <timer_set_break_lock+0x14>)
 80015ba:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80015be:	429a      	cmp	r2, r3
 80015c0:	d102      	bne.n	80015c8 <timer_set_break_lock+0x10>
		TIM_BDTR(timer_peripheral) |= lock;
 80015c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015c4:	4319      	orrs	r1, r3
 80015c6:	6441      	str	r1, [r0, #68]	; 0x44
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40010000 	.word	0x40010000

080015d0 <timer_generate_event>:
@param[in] event Unsigned int32. Event specification @ref tim_event_gen
*/

void timer_generate_event(uint32_t timer_peripheral, uint32_t event)
{
	TIM_EGR(timer_peripheral) |= event;
 80015d0:	6943      	ldr	r3, [r0, #20]
 80015d2:	4319      	orrs	r1, r3
 80015d4:	6141      	str	r1, [r0, #20]
 80015d6:	4770      	bx	lr

080015d8 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <flash_set_ws+0x10>)
 80015da:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 80015dc:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 80015e0:	4310      	orrs	r0, r2
	FLASH_ACR = reg32;
 80015e2:	6018      	str	r0, [r3, #0]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 80015ec:	6803      	ldr	r3, [r0, #0]
 80015ee:	4319      	orrs	r1, r3
 80015f0:	6001      	str	r1, [r0, #0]
 80015f2:	4770      	bx	lr

080015f4 <rcc_peripheral_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset)
{
	*reg |= reset;
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	4319      	orrs	r1, r3
 80015f8:	6001      	str	r1, [r0, #0]
 80015fa:	4770      	bx	lr

080015fc <rcc_peripheral_clear_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset)
{
	*reg &= ~clear_reset;
 80015fc:	6803      	ldr	r3, [r0, #0]
 80015fe:	ea23 0101 	bic.w	r1, r3, r1
 8001602:	6001      	str	r1, [r0, #0]
 8001604:	4770      	bx	lr
	...

08001608 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160c:	4605      	mov	r5, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800160e:	6800      	ldr	r0, [r0, #0]
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001610:	4698      	mov	r8, r3
 8001612:	460e      	mov	r6, r1
 8001614:	4617      	mov	r7, r2
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8001616:	4780      	blx	r0

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 8001618:	9b06      	ldr	r3, [sp, #24]
 800161a:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 800161c:	9b07      	ldr	r3, [sp, #28]
 800161e:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8001620:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8001624:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <usbd_init+0x38>)
 8001628:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <usbd_init+0x3c>)
 800162c:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <usbd_init+0x40>)
{
	usbd_device *usbd_dev;

	usbd_dev = driver->init();

	usbd_dev->driver = driver;
 8001630:	f8c0 50c8 	str.w	r5, [r0, #200]	; 0xc8
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
 8001634:	e880 01c0 	stmia.w	r0, {r6, r7, r8}

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8001638:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	return usbd_dev;
}
 800163a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163e:	bf00      	nop
 8001640:	08001c1d 	.word	0x08001c1d
 8001644:	08001c77 	.word	0x08001c77
 8001648:	08001cfd 	.word	0x08001cfd

0800164c <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 800164c:	61c1      	str	r1, [r0, #28]
 800164e:	4770      	bx	lr

08001650 <usbd_poll>:
	}
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
 8001650:	b508      	push	{r3, lr}
	usbd_dev->driver->poll(usbd_dev);
 8001652:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	4798      	blx	r3
 800165a:	bd08      	pop	{r3, pc}

0800165c <usbd_ep_setup>:
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size,
		   void (*callback)(usbd_device *usbd_dev, uint8_t ep))
{
 800165c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800165e:	9c06      	ldr	r4, [sp, #24]
 8001660:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
 8001664:	9400      	str	r4, [sp, #0]
 8001666:	68ac      	ldr	r4, [r5, #8]
 8001668:	47a0      	blx	r4
}
 800166a:	b003      	add	sp, #12
 800166c:	bd30      	pop	{r4, r5, pc}

0800166e <_usbd_reset>:
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 800166e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 8001670:	2400      	movs	r4, #0
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 8001672:	4605      	mov	r5, r0
	usbd_dev->current_address = 0;
 8001674:	7584      	strb	r4, [r0, #22]
	usbd_dev->current_config = 0;
 8001676:	75c4      	strb	r4, [r0, #23]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, 64, NULL);
 8001678:	4621      	mov	r1, r4
 800167a:	4622      	mov	r2, r4
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	9400      	str	r4, [sp, #0]
 8001680:	f7ff ffec 	bl	800165c <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001684:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8001688:	4628      	mov	r0, r5
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4621      	mov	r1, r4
 800168e:	4798      	blx	r3

	if (usbd_dev->user_callback_reset) {
 8001690:	69eb      	ldr	r3, [r5, #28]
 8001692:	b103      	cbz	r3, 8001696 <_usbd_reset+0x28>
		usbd_dev->user_callback_reset();
 8001694:	4798      	blx	r3
	}
}
 8001696:	b003      	add	sp, #12
 8001698:	bd30      	pop	{r4, r5, pc}

0800169a <usbd_ep_write_packet>:
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
}

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800169a:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800169c:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 80016a0:	69e4      	ldr	r4, [r4, #28]
 80016a2:	47a0      	blx	r4
}
 80016a4:	bd10      	pop	{r4, pc}

080016a6 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 80016a6:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80016a8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 80016ac:	6a24      	ldr	r4, [r4, #32]
 80016ae:	47a0      	blx	r4
}
 80016b0:	bd10      	pop	{r4, pc}

080016b2 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 80016b2:	b508      	push	{r3, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 80016b4:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	4798      	blx	r3
 80016bc:	bd08      	pop	{r3, pc}

080016be <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
 80016be:	b508      	push	{r3, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 80016c0:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4798      	blx	r3
}
 80016c8:	bd08      	pop	{r3, pc}

080016ca <usb_standard_set_configuration>:
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 80016ca:	b538      	push	{r3, r4, r5, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 80016cc:	884b      	ldrh	r3, [r1, #2]
 80016ce:	7dc2      	ldrb	r2, [r0, #23]
 80016d0:	429a      	cmp	r2, r3
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 80016d2:	4604      	mov	r4, r0
 80016d4:	460d      	mov	r5, r1
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 80016d6:	d00f      	beq.n	80016f8 <usb_standard_set_configuration+0x2e>
		return 1;
	}

	usbd_dev->current_config = req->wValue;
 80016d8:	75c3      	strb	r3, [r0, #23]

	/* Reset all endpoints. */
	usbd_dev->driver->ep_reset(usbd_dev);
 80016da:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4798      	blx	r3

	if (usbd_dev->user_callback_set_config) {
 80016e2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80016e6:	b13a      	cbz	r2, 80016f8 <usb_standard_set_configuration+0x2e>
		/*
		 * Flush control callbacks. These will be reregistered
		 * by the user handler.
		 */
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
			usbd_dev->user_control_callback[i].cb = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	6463      	str	r3, [r4, #68]	; 0x44
 80016ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80016ee:	6563      	str	r3, [r4, #84]	; 0x54
 80016f0:	65e3      	str	r3, [r4, #92]	; 0x5c
		}

		usbd_dev->user_callback_set_config(usbd_dev, req->wValue);
 80016f2:	4620      	mov	r0, r4
 80016f4:	8869      	ldrh	r1, [r5, #2]
 80016f6:	4790      	blx	r2
	}

	return 1;
}
 80016f8:	2001      	movs	r0, #1
 80016fa:	bd38      	pop	{r3, r4, r5, pc}

080016fc <usb_standard_get_configuration>:
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 80016fc:	8819      	ldrh	r1, [r3, #0]
 80016fe:	2901      	cmp	r1, #1
		*len = 1;
 8001700:	bf84      	itt	hi
 8001702:	2101      	movhi	r1, #1
 8001704:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = usbd_dev->current_config;
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	7dc2      	ldrb	r2, [r0, #23]
 800170a:	701a      	strb	r2, [r3, #0]

	return 1;
}
 800170c:	2001      	movs	r0, #1
 800170e:	4770      	bx	lr

08001710 <usb_standard_set_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
 8001710:	884a      	ldrh	r2, [r1, #2]
 8001712:	b912      	cbnz	r2, 800171a <usb_standard_set_interface+0xa>
		return 0;
	}
	*len = 0;
 8001714:	801a      	strh	r2, [r3, #0]

	return 1;
 8001716:	2001      	movs	r0, #1
 8001718:	4770      	bx	lr
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
		return 0;
 800171a:	2000      	movs	r0, #0
	}
	*len = 0;

	return 1;
}
 800171c:	4770      	bx	lr

0800171e <usb_standard_get_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	*len = 1;
 800171e:	2001      	movs	r0, #1
 8001720:	8018      	strh	r0, [r3, #0]
	(*buf)[0] = 0;
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

	return 1;
}
 8001728:	4770      	bx	lr

0800172a <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 800172a:	8819      	ldrh	r1, [r3, #0]
 800172c:	2902      	cmp	r1, #2
		*len = 2;
 800172e:	bf84      	itt	hi
 8001730:	2102      	movhi	r1, #2
 8001732:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 800173a:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 800173c:	2001      	movs	r0, #1
	/* bit 1: remote wakeup */
	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 800173e:	7053      	strb	r3, [r2, #1]

	return 1;
}
 8001740:	4770      	bx	lr

08001742 <usb_standard_interface_get_status>:
{
	(void)usbd_dev;
	(void)req;
	/* not defined */

	if (*len > 2) {
 8001742:	8819      	ldrh	r1, [r3, #0]
 8001744:	2902      	cmp	r1, #2
		*len = 2;
 8001746:	bf84      	itt	hi
 8001748:	2102      	movhi	r1, #2
 800174a:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	2300      	movs	r3, #0
 8001750:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001752:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 8001754:	2001      	movs	r0, #1

	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 8001756:	7053      	strb	r3, [r2, #1]

	return 1;
}
 8001758:	4770      	bx	lr

0800175a <usb_standard_endpoint_get_status>:

static int usb_standard_endpoint_get_status(usbd_device *usbd_dev,
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
 800175a:	b538      	push	{r3, r4, r5, lr}
 800175c:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 800175e:	881a      	ldrh	r2, [r3, #0]
		*len = 2;
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001760:	6825      	ldr	r5, [r4, #0]
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 2) {
 8001762:	2a02      	cmp	r2, #2
		*len = 2;
 8001764:	bf84      	itt	hi
 8001766:	2202      	movhi	r2, #2
 8001768:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800176a:	8889      	ldrh	r1, [r1, #4]
 800176c:	b2c9      	uxtb	r1, r1
 800176e:	f7ff ffa6 	bl	80016be <usbd_ep_stall_get>
 8001772:	3000      	adds	r0, #0
 8001774:	bf18      	it	ne
 8001776:	2001      	movne	r0, #1
 8001778:	7028      	strb	r0, [r5, #0]
	(*buf)[1] = 0;
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	705a      	strb	r2, [r3, #1]

	return 1;
}
 8001780:	2001      	movs	r0, #1
 8001782:	bd38      	pop	{r3, r4, r5, pc}

08001784 <usb_standard_endpoint_stall>:

static int usb_standard_endpoint_stall(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 8001784:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001786:	8889      	ldrh	r1, [r1, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	b2c9      	uxtb	r1, r1
 800178c:	f7ff ff91 	bl	80016b2 <usbd_ep_stall_set>

	return 1;
}
 8001790:	2001      	movs	r0, #1
 8001792:	bd08      	pop	{r3, pc}

08001794 <usb_standard_endpoint_unstall>:

static int usb_standard_endpoint_unstall(usbd_device *usbd_dev,
					 struct usb_setup_data *req,
					 uint8_t **buf, uint16_t *len)
{
 8001794:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001796:	8889      	ldrh	r1, [r1, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	b2c9      	uxtb	r1, r1
 800179c:	f7ff ff89 	bl	80016b2 <usbd_ep_stall_set>

	return 1;
}
 80017a0:	2001      	movs	r0, #1
 80017a2:	bd08      	pop	{r3, pc}

080017a4 <usb_standard_set_address>:
}

static int usb_standard_set_address(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 80017a4:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 80017a6:	780a      	ldrb	r2, [r1, #0]
 80017a8:	b972      	cbnz	r2, 80017c8 <usb_standard_set_address+0x24>
 80017aa:	884c      	ldrh	r4, [r1, #2]
 80017ac:	2c7f      	cmp	r4, #127	; 0x7f
 80017ae:	d80b      	bhi.n	80017c8 <usb_standard_set_address+0x24>

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 80017b0:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
	}

	usbd_dev->current_address = req->wValue;
 80017b4:	7584      	strb	r4, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 80017b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80017ba:	b11a      	cbz	r2, 80017c4 <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80017bc:	8849      	ldrh	r1, [r1, #2]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	b2c9      	uxtb	r1, r1
 80017c2:	4798      	blx	r3
	}

	return 1;
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd10      	pop	{r4, pc}
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
 80017c8:	2000      	movs	r0, #0
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return 1;
}
 80017ca:	bd10      	pop	{r4, pc}

080017cc <usb_standard_get_descriptor>:
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	4604      	mov	r4, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);
 80017d2:	8848      	ldrh	r0, [r1, #2]
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 80017d4:	461d      	mov	r5, r3
	return wValue >> 8;
}

static int usb_descriptor_index(uint16_t wValue)
{
	return wValue & 0xFF;
 80017d6:	b2c3      	uxtb	r3, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 80017d8:	0a00      	lsrs	r0, r0, #8
 80017da:	2802      	cmp	r0, #2
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 80017dc:	b087      	sub	sp, #28
 80017de:	4617      	mov	r7, r2
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 80017e0:	d00f      	beq.n	8001802 <usb_standard_get_descriptor+0x36>
 80017e2:	2803      	cmp	r0, #3
 80017e4:	f000 80d4 	beq.w	8001990 <usb_standard_get_descriptor+0x1c4>
 80017e8:	2801      	cmp	r0, #1
 80017ea:	f040 810c 	bne.w	8001a06 <usb_standard_get_descriptor+0x23a>
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	6013      	str	r3, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	882a      	ldrh	r2, [r5, #0]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	bf38      	it	cc
 80017fc:	4613      	movcc	r3, r2
 80017fe:	802b      	strh	r3, [r5, #0]
		return USBD_REQ_HANDLED;
 8001800:	e102      	b.n	8001a08 <usb_standard_get_descriptor+0x23c>
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 8001802:	6920      	ldr	r0, [r4, #16]
 8001804:	6010      	str	r0, [r2, #0]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001806:	270d      	movs	r7, #13
 8001808:	f8d4 8004 	ldr.w	r8, [r4, #4]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800180c:	882e      	ldrh	r6, [r5, #0]
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 800180e:	9001      	str	r0, [sp, #4]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001810:	435f      	muls	r7, r3
 8001812:	eb08 0307 	add.w	r3, r8, r7
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001816:	f818 4007 	ldrb.w	r4, [r8, r7]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800181a:	9302      	str	r3, [sp, #8]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800181c:	42a6      	cmp	r6, r4
 800181e:	bf38      	it	cc
 8001820:	4634      	movcc	r4, r6
 8001822:	4619      	mov	r1, r3
 8001824:	4622      	mov	r2, r4
 8001826:	f001 f8a9 	bl	800297c <memcpy>
	buf += count;
 800182a:	9b01      	ldr	r3, [sp, #4]
	len -= count;
	total += count;
	totallen += cfg->bLength;
 800182c:	f818 7007 	ldrb.w	r7, [r8, r7]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
	len -= count;
 8001830:	1b36      	subs	r6, r6, r4
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
 8001832:	4423      	add	r3, r4
	len -= count;
 8001834:	b2b6      	uxth	r6, r6
	total += count;
	totallen += cfg->bLength;
 8001836:	f04f 0800 	mov.w	r8, #0
 800183a:	f8cd 8010 	str.w	r8, [sp, #16]

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 800183e:	9802      	ldr	r0, [sp, #8]
 8001840:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001844:	7901      	ldrb	r1, [r0, #4]
 8001846:	fa1f f288 	uxth.w	r2, r8
 800184a:	4291      	cmp	r1, r2
 800184c:	f240 809c 	bls.w	8001988 <usb_standard_get_descriptor+0x1bc>
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
 8001850:	210c      	movs	r1, #12
 8001852:	434a      	muls	r2, r1
 8001854:	9802      	ldr	r0, [sp, #8]
 8001856:	9203      	str	r2, [sp, #12]
 8001858:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800185c:	f8d0 2009 	ldr.w	r2, [r0, #9]
 8001860:	4442      	add	r2, r8
 8001862:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001866:	f1b8 0f00 	cmp.w	r8, #0
 800186a:	d014      	beq.n	8001896 <usb_standard_get_descriptor+0xca>
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 800186c:	f898 9000 	ldrb.w	r9, [r8]
 8001870:	454e      	cmp	r6, r9
 8001872:	bf38      	it	cc
 8001874:	46b1      	movcc	r9, r6
 8001876:	4618      	mov	r0, r3
 8001878:	464a      	mov	r2, r9
 800187a:	4641      	mov	r1, r8
 800187c:	f001 f87e 	bl	800297c <memcpy>
			buf += count;
			len -= count;
			total += count;
			totallen += assoc->bLength;
 8001880:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001884:	4603      	mov	r3, r0
			buf += count;
			len -= count;
 8001886:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 800188a:	444c      	add	r4, r9
			totallen += assoc->bLength;
 800188c:	4417      	add	r7, r2
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
 800188e:	444b      	add	r3, r9
			len -= count;
 8001890:	b2b6      	uxth	r6, r6
			total += count;
 8001892:	b2a4      	uxth	r4, r4
			totallen += assoc->bLength;
 8001894:	b2bf      	uxth	r7, r7
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 8001896:	f04f 0c00 	mov.w	ip, #0
			len -= count;
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800189a:	9a02      	ldr	r2, [sp, #8]
 800189c:	9803      	ldr	r0, [sp, #12]
 800189e:	f8d2 1009 	ldr.w	r1, [r2, #9]
 80018a2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80018a6:	4408      	add	r0, r1
 80018a8:	f851 1008 	ldr.w	r1, [r1, r8]
 80018ac:	fa1f f28c 	uxth.w	r2, ip
 80018b0:	428a      	cmp	r2, r1
 80018b2:	da64      	bge.n	800197e <usb_standard_get_descriptor+0x1b2>
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
 80018b4:	f04f 0a15 	mov.w	sl, #21
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 80018b8:	f8d0 b008 	ldr.w	fp, [r0, #8]
					&cfg->interface[i].altsetting[j];
 80018bc:	fb0a fa02 	mul.w	sl, sl, r2
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 80018c0:	eb0b 080a 	add.w	r8, fp, sl
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 80018c4:	f81b 900a 	ldrb.w	r9, [fp, sl]
 80018c8:	f8cd c000 	str.w	ip, [sp]
 80018cc:	454e      	cmp	r6, r9
 80018ce:	bf38      	it	cc
 80018d0:	46b1      	movcc	r9, r6
 80018d2:	464a      	mov	r2, r9
 80018d4:	4618      	mov	r0, r3
 80018d6:	4641      	mov	r1, r8
 80018d8:	f001 f850 	bl	800297c <memcpy>
 80018dc:	4603      	mov	r3, r0
			buf += count;
 80018de:	444b      	add	r3, r9
			len -= count;
 80018e0:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 80018e4:	44a1      	add	r9, r4
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 80018e6:	f8d8 4011 	ldr.w	r4, [r8, #17]
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 80018ea:	f8d8 100d 	ldr.w	r1, [r8, #13]
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
 80018ee:	f81b a00a 	ldrb.w	sl, [fp, sl]
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
 80018f2:	b2b6      	uxth	r6, r6
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 80018f4:	42a6      	cmp	r6, r4
 80018f6:	bfb8      	it	lt
 80018f8:	4634      	movlt	r4, r6
 80018fa:	b2a4      	uxth	r4, r4
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 80018fc:	4622      	mov	r2, r4
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f83c 	bl	800297c <memcpy>
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
 8001904:	f8d8 2011 	ldr.w	r2, [r8, #17]
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
 8001908:	fa1f f989 	uxth.w	r9, r9
			totallen += iface->bLength;
 800190c:	4492      	add	sl, r2
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 800190e:	4603      	mov	r3, r0
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 8001910:	1b36      	subs	r6, r6, r4
			total += count;
			totallen += iface->extralen;
 8001912:	fa17 f78a 	uxtah	r7, r7, sl
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
 8001916:	4423      	add	r3, r4
			len -= count;
			total += count;
 8001918:	444c      	add	r4, r9
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 800191a:	b2b6      	uxth	r6, r6
			total += count;
 800191c:	b2a4      	uxth	r4, r4
			totallen += iface->extralen;
 800191e:	b2bf      	uxth	r7, r7
 8001920:	f04f 0a00 	mov.w	sl, #0
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001924:	f898 2004 	ldrb.w	r2, [r8, #4]
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 8001928:	f8dd c000 	ldr.w	ip, [sp]
 800192c:	f10a 0001 	add.w	r0, sl, #1
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001930:	fa1f fa8a 	uxth.w	sl, sl
 8001934:	4552      	cmp	r2, sl
 8001936:	9005      	str	r0, [sp, #20]
 8001938:	d91e      	bls.n	8001978 <usb_standard_get_descriptor+0x1ac>
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
 800193a:	f8d8 b009 	ldr.w	fp, [r8, #9]
 800193e:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001942:	4618      	mov	r0, r3
 8001944:	f81b 900a 	ldrb.w	r9, [fp, sl]
 8001948:	f8cd c000 	str.w	ip, [sp]
 800194c:	454e      	cmp	r6, r9
 800194e:	bf38      	it	cc
 8001950:	46b1      	movcc	r9, r6
 8001952:	eb0b 010a 	add.w	r1, fp, sl
 8001956:	464a      	mov	r2, r9
 8001958:	f001 f810 	bl	800297c <memcpy>
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 800195c:	f81b 200a 	ldrb.w	r2, [fp, sl]
 8001960:	f8dd a014 	ldr.w	sl, [sp, #20]
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001964:	4603      	mov	r3, r0
				buf += count;
				len -= count;
 8001966:	ebc9 0606 	rsb	r6, r9, r6
				total += count;
 800196a:	444c      	add	r4, r9
				totallen += ep->bLength;
 800196c:	4417      	add	r7, r2
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
 800196e:	444b      	add	r3, r9
				len -= count;
 8001970:	b2b6      	uxth	r6, r6
				total += count;
 8001972:	b2a4      	uxth	r4, r4
				totallen += ep->bLength;
 8001974:	b2bf      	uxth	r7, r7
 8001976:	e7d5      	b.n	8001924 <usb_standard_get_descriptor+0x158>
 8001978:	f10c 0c01 	add.w	ip, ip, #1
 800197c:	e78d      	b.n	800189a <usb_standard_get_descriptor+0xce>
 800197e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001982:	f108 0801 	add.w	r8, r8, #1
 8001986:	e758      	b.n	800183a <usb_standard_get_descriptor+0x6e>
			}
		}
	}

	/* Fill in wTotalLength. */
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	805f      	strh	r7, [r3, #2]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800198c:	802c      	strh	r4, [r5, #0]
 800198e:	e038      	b.n	8001a02 <usb_standard_get_descriptor+0x236>
		return USBD_REQ_HANDLED;
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001990:	6926      	ldr	r6, [r4, #16]

		if (descr_idx == 0) {
 8001992:	b953      	cbnz	r3, 80019aa <usb_standard_get_descriptor+0x1de>
			/* Send sane Language ID descriptor... */
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001994:	2309      	movs	r3, #9
 8001996:	70b3      	strb	r3, [r6, #2]
 8001998:	2304      	movs	r3, #4
 800199a:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 800199c:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
 800199e:	882b      	ldrh	r3, [r5, #0]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	bf28      	it	cs
 80019a4:	2304      	movcs	r3, #4
 80019a6:	802b      	strh	r3, [r5, #0]
 80019a8:	e028      	b.n	80019fc <usb_standard_get_descriptor+0x230>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
 80019aa:	68a0      	ldr	r0, [r4, #8]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
		} else {
			array_idx = descr_idx - 1;
 80019ac:	3b01      	subs	r3, #1

			if (!usbd_dev->strings) {
 80019ae:	b358      	cbz	r0, 8001a08 <usb_standard_get_descriptor+0x23c>
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
			}

			/* Check that string index is in range. */
			if (array_idx >= usbd_dev->num_strings) {
 80019b0:	68e2      	ldr	r2, [r4, #12]
 80019b2:	4293      	cmp	r3, r2
 80019b4:	da27      	bge.n	8001a06 <usb_standard_get_descriptor+0x23a>
				return USBD_REQ_NOTSUPP;
			}

			/* Strings with Language ID differnet from
			 * USB_LANGID_ENGLISH_US are not supported */
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 80019b6:	8889      	ldrh	r1, [r1, #4]
 80019b8:	f240 4209 	movw	r2, #1033	; 0x409
 80019bc:	4291      	cmp	r1, r2
 80019be:	d122      	bne.n	8001a06 <usb_standard_get_descriptor+0x23a>
			}

			/* Ths string is returned as UTF16, hence the
			 * multiplication
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 80019c0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80019c4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80019c8:	f001 fa80 	bl	8002ecc <strlen>
 80019cc:	3001      	adds	r0, #1
 80019ce:	0043      	lsls	r3, r0, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 80019d4:	882a      	ldrh	r2, [r5, #0]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	bf28      	it	cs
 80019da:	4613      	movcs	r3, r2
 80019dc:	802b      	strh	r3, [r5, #0]

			for (i = 0; i < (*len / 2) - 1; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	882a      	ldrh	r2, [r5, #0]
 80019e2:	0852      	lsrs	r2, r2, #1
 80019e4:	3a01      	subs	r2, #1
 80019e6:	4293      	cmp	r3, r2
 80019e8:	da08      	bge.n	80019fc <usb_standard_get_descriptor+0x230>
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
 80019ea:	68a2      	ldr	r2, [r4, #8]
 80019ec:	f852 2008 	ldr.w	r2, [r2, r8]
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
				sd->wData[i] =
 80019f0:	5cd1      	ldrb	r1, [r2, r3]
 80019f2:	eb06 0243 	add.w	r2, r6, r3, lsl #1
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
 80019f6:	3301      	adds	r3, #1
				sd->wData[i] =
 80019f8:	8051      	strh	r1, [r2, #2]
 80019fa:	e7f1      	b.n	80019e0 <usb_standard_get_descriptor+0x214>
					usbd_dev->strings[array_idx][i];
			}
		}

		sd->bDescriptorType = USB_DT_STRING;
 80019fc:	2303      	movs	r3, #3
 80019fe:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 8001a00:	603e      	str	r6, [r7, #0]

		return USBD_REQ_HANDLED;
 8001a02:	2001      	movs	r0, #1
 8001a04:	e000      	b.n	8001a08 <usb_standard_get_descriptor+0x23c>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
 8001a06:	2000      	movs	r0, #0
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 8001a08:	b007      	add	sp, #28
 8001a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a0e <usbd_register_set_config_callback>:

void usbd_register_set_config_callback(usbd_device *usbd_dev,
				       void (*callback)(usbd_device *usbd_dev,
				       uint16_t wValue))
{
	usbd_dev->user_callback_set_config = callback;
 8001a0e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8001a12:	4770      	bx	lr

08001a14 <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 8001a14:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001a16:	784c      	ldrb	r4, [r1, #1]
 8001a18:	2c09      	cmp	r4, #9
 8001a1a:	d805      	bhi.n	8001a28 <_usbd_standard_request_device+0x14>
 8001a1c:	4d04      	ldr	r5, [pc, #16]	; (8001a30 <_usbd_standard_request_device+0x1c>)
 8001a1e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_SET_DESCRIPTOR:
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
 8001a22:	b11c      	cbz	r4, 8001a2c <_usbd_standard_request_device+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001a24:	47a0      	blx	r4
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
		return 0;
 8001a28:	2000      	movs	r0, #0
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	08007ce4 	.word	0x08007ce4

08001a34 <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 8001a34:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001a36:	784c      	ldrb	r4, [r1, #1]
 8001a38:	2c0b      	cmp	r4, #11
 8001a3a:	d805      	bhi.n	8001a48 <_usbd_standard_request_interface+0x14>
 8001a3c:	4d04      	ldr	r5, [pc, #16]	; (8001a50 <_usbd_standard_request_interface+0x1c>)
 8001a3e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
 8001a42:	b11c      	cbz	r4, 8001a4c <_usbd_standard_request_interface+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001a44:	47a0      	blx	r4
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
		return 0;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	08007d0c 	.word	0x08007d0c

08001a54 <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 8001a54:	b510      	push	{r4, lr}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001a56:	784c      	ldrb	r4, [r1, #1]
 8001a58:	2c01      	cmp	r4, #1
 8001a5a:	d003      	beq.n	8001a64 <_usbd_standard_request_endpoint+0x10>
 8001a5c:	d309      	bcc.n	8001a72 <_usbd_standard_request_endpoint+0x1e>
 8001a5e:	2c03      	cmp	r4, #3
 8001a60:	d003      	beq.n	8001a6a <_usbd_standard_request_endpoint+0x16>
 8001a62:	e004      	b.n	8001a6e <_usbd_standard_request_endpoint+0x1a>
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001a64:	884c      	ldrh	r4, [r1, #2]
 8001a66:	b134      	cbz	r4, 8001a76 <_usbd_standard_request_endpoint+0x22>
 8001a68:	e001      	b.n	8001a6e <_usbd_standard_request_endpoint+0x1a>
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001a6a:	884c      	ldrh	r4, [r1, #2]
 8001a6c:	b12c      	cbz	r4, 8001a7a <_usbd_standard_request_endpoint+0x26>
		 */
		break;
	}

	if (!command) {
		return 0;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	bd10      	pop	{r4, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
		}
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_endpoint_get_status;
 8001a72:	4c03      	ldr	r4, [pc, #12]	; (8001a80 <_usbd_standard_request_endpoint+0x2c>)
 8001a74:	e002      	b.n	8001a7c <_usbd_standard_request_endpoint+0x28>
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
 8001a76:	4c03      	ldr	r4, [pc, #12]	; (8001a84 <_usbd_standard_request_endpoint+0x30>)
 8001a78:	e000      	b.n	8001a7c <_usbd_standard_request_endpoint+0x28>
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
 8001a7a:	4c03      	ldr	r4, [pc, #12]	; (8001a88 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001a7c:	47a0      	blx	r4
}
 8001a7e:	bd10      	pop	{r4, pc}
 8001a80:	0800175b 	.word	0x0800175b
 8001a84:	08001795 	.word	0x08001795
 8001a88:	08001785 	.word	0x08001785

08001a8c <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8001a8c:	b510      	push	{r4, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001a8e:	780c      	ldrb	r4, [r1, #0]
 8001a90:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001a94:	d112      	bne.n	8001abc <_usbd_standard_request+0x30>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001a96:	f004 041f 	and.w	r4, r4, #31
 8001a9a:	2c01      	cmp	r4, #1
 8001a9c:	d00a      	beq.n	8001ab4 <_usbd_standard_request+0x28>
 8001a9e:	d305      	bcc.n	8001aac <_usbd_standard_request+0x20>
 8001aa0:	2c02      	cmp	r4, #2
 8001aa2:	d10b      	bne.n	8001abc <_usbd_standard_request+0x30>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001aa8:	f7ff bfd4 	b.w	8001a54 <_usbd_standard_request_endpoint>
	default:
		return 0;
	}
}
 8001aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001ab0:	f7ff bfb0 	b.w	8001a14 <_usbd_standard_request_device>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
 8001ab8:	f7ff bfbc 	b.w	8001a34 <_usbd_standard_request_interface>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001abc:	2000      	movs	r0, #0
 8001abe:	bd10      	pop	{r4, pc}

08001ac0 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001ac0:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001ac2:	2100      	movs	r1, #0
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001ac4:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f7ff fdf3 	bl	80016b2 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001ad4:	b538      	push	{r3, r4, r5, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001ad6:	6802      	ldr	r2, [r0, #0]
 8001ad8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001ada:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 8001adc:	79d2      	ldrb	r2, [r2, #7]
 8001ade:	1aed      	subs	r5, r5, r3
 8001ae0:	4295      	cmp	r5, r2
 8001ae2:	bfa8      	it	ge
 8001ae4:	4615      	movge	r5, r2
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001ae6:	6b82      	ldr	r2, [r0, #56]	; 0x38
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001ae8:	b2ad      	uxth	r5, r5
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001aea:	441a      	add	r2, r3
 8001aec:	2100      	movs	r1, #0
 8001aee:	462b      	mov	r3, r5
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001af0:	4604      	mov	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001af2:	f7ff fdd8 	bl	80016a6 <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_buf +
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	d005      	beq.n	8001b06 <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff ffe0 	bl	8001ac0 <stall_transaction>
		return -1;
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
	}

	usbd_dev->control_state.ctrl_len += size;
 8001b06:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001b08:	4403      	add	r3, r0
 8001b0a:	87a3      	strh	r3, [r4, #60]	; 0x3c

	return packetsize;
}
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}

08001b0e <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8001b0e:	b538      	push	{r3, r4, r5, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001b10:	6803      	ldr	r3, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001b12:	6b82      	ldr	r2, [r0, #56]	; 0x38
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001b14:	79dd      	ldrb	r5, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8001b16:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001b18:	429d      	cmp	r5, r3

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8001b1a:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001b1c:	f04f 0100 	mov.w	r1, #0
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001b20:	d20f      	bcs.n	8001b42 <usb_control_send_chunk+0x34>
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001b22:	462b      	mov	r3, r5
 8001b24:	f7ff fdb9 	bl	800169a <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 8001b2e:	6823      	ldr	r3, [r4, #0]
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 8001b30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b32:	79d9      	ldrb	r1, [r3, #7]
 8001b34:	440a      	add	r2, r1
 8001b36:	63a2      	str	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 8001b38:	79db      	ldrb	r3, [r3, #7]
 8001b3a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8001b40:	bd38      	pop	{r3, r4, r5, pc}
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001b42:	f7ff fdaa 	bl	800169a <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);
		usbd_dev->control_state.state = LAST_DATA_IN;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 8001b50:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b52:	bd38      	pop	{r3, r4, r5, pc}

08001b54 <usb_control_request_dispatch>:
	return packetsize;
}

static int usb_control_request_dispatch(usbd_device *usbd_dev,
					struct usb_setup_data *req)
{
 8001b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001b58:	4604      	mov	r4, r0
 8001b5a:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8001b5c:	f100 0844 	add.w	r8, r0, #68	; 0x44
 8001b60:	2500      	movs	r5, #0

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
 8001b62:	f858 7005 	ldr.w	r7, [r8, r5]
 8001b66:	b957      	cbnz	r7, 8001b7e <usb_control_request_dispatch+0x2a>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001b70:	f104 033c 	add.w	r3, r4, #60	; 0x3c
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001b74:	b002      	add	sp, #8
 8001b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001b7a:	f7ff bf87 	b.w	8001a8c <_usbd_standard_request>
 8001b7e:	eb08 0305 	add.w	r3, r8, r5
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001b82:	7831      	ldrb	r1, [r6, #0]
 8001b84:	7958      	ldrb	r0, [r3, #5]
 8001b86:	791a      	ldrb	r2, [r3, #4]
 8001b88:	ea00 0301 	and.w	r3, r0, r1
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d003      	beq.n	8001b98 <usb_control_request_dispatch+0x44>
 8001b90:	3508      	adds	r5, #8
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001b92:	2d20      	cmp	r5, #32
 8001b94:	d1e5      	bne.n	8001b62 <usb_control_request_dispatch+0xe>
 8001b96:	e7e7      	b.n	8001b68 <usb_control_request_dispatch+0x14>
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001b98:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001ba6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8001baa:	47b8      	blx	r7
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8001bac:	2801      	cmp	r0, #1
 8001bae:	d8ef      	bhi.n	8001b90 <usb_control_request_dispatch+0x3c>

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bb6 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001bb6:	b510      	push	{r4, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001bb8:	6902      	ldr	r2, [r0, #16]
 8001bba:	6382      	str	r2, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001bbc:	798a      	ldrb	r2, [r1, #6]
 8001bbe:	79cb      	ldrb	r3, [r1, #7]
 8001bc0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001bc4:	8783      	strh	r3, [r0, #60]	; 0x3c
}

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001bc6:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001bc8:	f7ff ffc4 	bl	8001b54 <usb_control_request_dispatch>
 8001bcc:	b170      	cbz	r0, 8001bec <usb_control_setup_read+0x36>
		if (usbd_dev->control_state.ctrl_len) {
 8001bce:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001bd0:	4620      	mov	r0, r4
{
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
 8001bd2:	b119      	cbz	r1, 8001bdc <usb_control_setup_read+0x26>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8001bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001bd8:	f7ff bf99 	b.w	8001b0e <usb_control_send_chunk>
		} else {
			/* Go to status stage if handled. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001bdc:	460b      	mov	r3, r1
 8001bde:	460a      	mov	r2, r1
 8001be0:	f7ff fd5b 	bl	800169a <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001be4:	2304      	movs	r3, #4
 8001be6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001bea:	bd10      	pop	{r4, pc}
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001bec:	4620      	mov	r0, r4
	}
}
 8001bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001bf2:	f7ff bf65 	b.w	8001ac0 <stall_transaction>

08001bf6 <usbd_register_control_callback>:

/* Register application callback function for handling USB control requests. */
int usbd_register_control_callback(usbd_device *usbd_dev, uint8_t type,
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
 8001bf6:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 8001bfe:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001c00:	b12e      	cbz	r6, 8001c0e <usbd_register_control_callback+0x18>
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001c02:	3501      	adds	r5, #1
 8001c04:	2d04      	cmp	r5, #4
 8001c06:	d1f8      	bne.n	8001bfa <usbd_register_control_callback+0x4>
		usbd_dev->user_control_callback[i].type_mask = type_mask;
		usbd_dev->user_control_callback[i].cb = callback;
		return 0;
	}

	return -1;
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (usbd_dev->user_control_callback[i].cb) {
			continue;
		}

		usbd_dev->user_control_callback[i].type = type;
 8001c0e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001c12:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
		usbd_dev->user_control_callback[i].cb = callback;
 8001c16:	6463      	str	r3, [r4, #68]	; 0x44
		return 0;
 8001c18:	4630      	mov	r0, r6
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}

08001c1c <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001c1e:	f100 0630 	add.w	r6, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001c22:	2500      	movs	r5, #0
 8001c24:	6405      	str	r5, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001c26:	4629      	mov	r1, r5
 8001c28:	4632      	mov	r2, r6
 8001c2a:	2308      	movs	r3, #8

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001c2c:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001c2e:	f7ff fd3a 	bl	80016a6 <usbd_ep_read_packet>
 8001c32:	2808      	cmp	r0, #8
 8001c34:	d004      	beq.n	8001c40 <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 8001c36:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
		stall_transaction(usbd_dev);
 8001c3c:	f7ff bf40 	b.w	8001ac0 <stall_transaction>
		return;
	}

	if (req->wLength == 0) {
 8001c40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c42:	b11b      	cbz	r3, 8001c4c <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001c44:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	da05      	bge.n	8001c58 <_usbd_control_setup+0x3c>
		usb_control_setup_read(usbd_dev, req);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4631      	mov	r1, r6
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}

	if (req->wLength == 0) {
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8001c54:	f7ff bfaf 	b.w	8001bb6 <usb_control_setup_read>
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001c58:	8aa2      	ldrh	r2, [r4, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3eb      	bcc.n	8001c36 <_usbd_control_setup+0x1a>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001c5e:	6922      	ldr	r2, [r4, #16]
 8001c60:	63a2      	str	r2, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001c62:	6822      	ldr	r2, [r4, #0]
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = 0;
 8001c64:	87a5      	strh	r5, [r4, #60]	; 0x3c
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001c66:	79d2      	ldrb	r2, [r2, #7]
 8001c68:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 8001c6a:	bf34      	ite	cc
 8001c6c:	2305      	movcc	r3, #5
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001c6e:	2306      	movcs	r3, #6
 8001c70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001c74:	bd70      	pop	{r4, r5, r6, pc}

08001c76 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001c76:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001c7a:	2b06      	cmp	r3, #6
		usb_control_setup_write(usbd_dev, req);
	}
}

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001c80:	d010      	beq.n	8001ca4 <_usbd_control_out+0x2e>
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d024      	beq.n	8001cd0 <_usbd_control_out+0x5a>
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d133      	bne.n	8001cf2 <_usbd_control_out+0x7c>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001c8a:	f7ff ff23 	bl	8001ad4 <usb_control_recv_chunk>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	db33      	blt.n	8001cfa <_usbd_control_out+0x84>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001c92:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001c94:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c96:	1ad2      	subs	r2, r2, r3
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
 8001c98:	6823      	ldr	r3, [r4, #0]
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001c9a:	79db      	ldrb	r3, [r3, #7]
	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dc2c      	bgt.n	8001cfa <_usbd_control_out+0x84>
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	e010      	b.n	8001cc6 <_usbd_control_out+0x50>
		}
		break;
	case LAST_DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001ca4:	f7ff ff16 	bl	8001ad4 <usb_control_recv_chunk>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	db26      	blt.n	8001cfa <_usbd_control_out+0x84>
		}
		/*
		 * We have now received the full data payload.
		 * Invoke callback to process.
		 */
		if (usb_control_request_dispatch(usbd_dev,
 8001cac:	4620      	mov	r0, r4
 8001cae:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001cb2:	f7ff ff4f 	bl	8001b54 <usb_control_request_dispatch>
 8001cb6:	b148      	cbz	r0, 8001ccc <_usbd_control_out+0x56>
					&(usbd_dev->control_state.req))) {
			/* Got to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	f7ff fceb 	bl	800169a <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001cca:	bd10      	pop	{r4, pc}
		} else {
			stall_transaction(usbd_dev);
 8001ccc:	4620      	mov	r0, r4
 8001cce:	e010      	b.n	8001cf2 <_usbd_control_out+0x7c>
		}
		break;
	case STATUS_OUT:
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	f7ff fce6 	bl	80016a6 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce2:	b11b      	cbz	r3, 8001cec <_usbd_control_out+0x76>
			usbd_dev->control_state.complete(usbd_dev,
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001cea:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001cf0:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
 8001cf6:	f7ff bee3 	b.w	8001ac0 <stall_transaction>
 8001cfa:	bd10      	pop	{r4, pc}

08001cfc <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001cfc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001d00:	2b03      	cmp	r3, #3
		stall_transaction(usbd_dev);
	}
}

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8001d02:	b510      	push	{r4, lr}
 8001d04:	4604      	mov	r4, r0
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001d06:	d007      	beq.n	8001d18 <_usbd_control_in+0x1c>
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d007      	beq.n	8001d1c <_usbd_control_in+0x20>
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d11c      	bne.n	8001d4a <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8001d14:	f7ff befb 	b.w	8001b0e <usb_control_send_chunk>
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	e013      	b.n	8001d44 <_usbd_control_in+0x48>
		break;
	case STATUS_IN:
		if (usbd_dev->control_state.complete) {
 8001d1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d1e:	b113      	cbz	r3, 8001d26 <_usbd_control_in+0x2a>
			usbd_dev->control_state.complete(usbd_dev,
 8001d20:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001d24:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}

		/* Exception: Handle SET ADDRESS function here... */
		if ((req->bmRequestType == 0) &&
 8001d26:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001d2a:	b953      	cbnz	r3, 8001d42 <_usbd_control_in+0x46>
 8001d2c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d106      	bne.n	8001d42 <_usbd_control_in+0x46>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001d34:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001d38:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	b2c9      	uxtb	r1, r1
 8001d40:	4798      	blx	r3
		}
		usbd_dev->control_state.state = IDLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		break;
 8001d48:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
		}
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
 8001d4e:	f7ff beb7 	b.w	8001ac0 <stall_transaction>
	...

08001d54 <stm32f107_usbd_init>:
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *stm32f107_usbd_init(void)
{
	OTG_FS_GINTSTS = OTG_FS_GINTSTS_MMIS;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <stm32f107_usbd_init+0x78>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]

	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_PHYSEL;
 8001d5a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d62:	f843 2c08 	str.w	r2, [r3, #-8]
	/* Enable VBUS sensing in device mode and power down the PHY. */
	OTG_FS_GCCFG |= OTG_FS_GCCFG_VBUSBSEN | OTG_FS_GCCFG_PWRDWN;
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

	/* Wait for AHB idle. */
	while (!(OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_AHBIDL));
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <stm32f107_usbd_init+0x7c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	dafb      	bge.n	8001d6e <stm32f107_usbd_init+0x1a>
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f012 0101 	ands.w	r1, r2, #1
 8001d84:	d1fb      	bne.n	8001d7e <stm32f107_usbd_init+0x2a>

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <stm32f107_usbd_init+0x80>)

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <stm32f107_usbd_init+0x84>)
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d90:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001d94:	6013      	str	r3, [r2, #0]

	/* Full speed device. */
	OTG_FS_DCFG |= OTG_FS_DCFG_DSPD;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <stm32f107_usbd_init+0x88>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f042 0203 	orr.w	r2, r2, #3
 8001d9e:	601a      	str	r2, [r3, #0]

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <stm32f107_usbd_init+0x8c>)

	/* Full speed device. */
	OTG_FS_DCFG |= OTG_FS_DCFG_DSPD;

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;
 8001da2:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	6013      	str	r3, [r2, #0]
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001daa:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc

	/* Unmask interrupts for TX and RX. */
	OTG_FS_GAHBCFG |= OTG_FS_GAHBCFG_GINT;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <stm32f107_usbd_init+0x90>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
	OTG_FS_GINTMSK = OTG_FS_GINTMSK_ENUMDNEM |
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <stm32f107_usbd_init+0x94>)
 8001dba:	611a      	str	r2, [r3, #16]
			 OTG_FS_GINTMSK_RXFLVLM |
			 OTG_FS_GINTMSK_IEPINT |
			 OTG_FS_GINTMSK_USBSUSPM |
			 OTG_FS_GINTMSK_WUIM |
			 OTG_FS_GINTMSK_SOFM;
	OTG_FS_DAINTMSK = 0xF;
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
	OTG_FS_DIEPMSK = OTG_FS_DIEPMSK_XFRCM;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

	return &usbd_dev;
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	50000014 	.word	0x50000014
 8001dd0:	50000010 	.word	0x50000010
 8001dd4:	5000000c 	.word	0x5000000c
 8001dd8:	20008a0c 	.word	0x20008a0c
 8001ddc:	50000800 	.word	0x50000800
 8001de0:	50000024 	.word	0x50000024
 8001de4:	50000008 	.word	0x50000008
 8001de8:	80042818 	.word	0x80042818

08001dec <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8001dec:	e7fe      	b.n	8001dec <blocking_handler>

08001dee <null_handler>:
	while (1);
}

void null_handler(void)
{
 8001dee:	4770      	bx	lr

08001df0 <reset_handler>:
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8001df0:	2200      	movs	r2, #0
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <reset_handler+0x64>)
 8001df4:	4818      	ldr	r0, [pc, #96]	; (8001e58 <reset_handler+0x68>)
 8001df6:	1853      	adds	r3, r2, r1
 8001df8:	4283      	cmp	r3, r0
 8001dfa:	d204      	bcs.n	8001e06 <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <reset_handler+0x6c>)
 8001dfe:	58d3      	ldr	r3, [r2, r3]
 8001e00:	5053      	str	r3, [r2, r1]
 8001e02:	3204      	adds	r2, #4
 8001e04:	e7f5      	b.n	8001df2 <reset_handler+0x2>
	}

	while (dest < &_ebss) {
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <reset_handler+0x70>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d203      	bcs.n	8001e14 <reset_handler+0x24>
		*dest++ = 0;
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	3304      	adds	r3, #4
 8001e12:	e7f8      	b.n	8001e06 <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
 8001e14:	4c13      	ldr	r4, [pc, #76]	; (8001e64 <reset_handler+0x74>)
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <reset_handler+0x78>)
 8001e18:	429c      	cmp	r4, r3
 8001e1a:	d203      	bcs.n	8001e24 <reset_handler+0x34>
		(*fp)();
 8001e1c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001e20:	4798      	blx	r3
 8001e22:	e7f8      	b.n	8001e16 <reset_handler+0x26>
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001e24:	4c11      	ldr	r4, [pc, #68]	; (8001e6c <reset_handler+0x7c>)
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <reset_handler+0x80>)
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	d203      	bcs.n	8001e34 <reset_handler+0x44>
		(*fp)();
 8001e2c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001e30:	4798      	blx	r3
 8001e32:	e7f8      	b.n	8001e26 <reset_handler+0x36>
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <reset_handler+0x84>)

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001e36:	4c10      	ldr	r4, [pc, #64]	; (8001e78 <reset_handler+0x88>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e3e:	601a      	str	r2, [r3, #0]

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 8001e40:	f7fe fc48 	bl	80006d4 <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <reset_handler+0x8c>)
 8001e46:	429c      	cmp	r4, r3
 8001e48:	d203      	bcs.n	8001e52 <reset_handler+0x62>
		(*fp)();
 8001e4a:	f854 3b04 	ldr.w	r3, [r4], #4
 8001e4e:	4798      	blx	r3
 8001e50:	e7f8      	b.n	8001e44 <reset_handler+0x54>
 8001e52:	bf00      	nop
 8001e54:	20000000 	.word	0x20000000
 8001e58:	200008cc 	.word	0x200008cc
 8001e5c:	08007efc 	.word	0x08007efc
 8001e60:	20008b2c 	.word	0x20008b2c
 8001e64:	08007ef4 	.word	0x08007ef4
 8001e68:	08007ef4 	.word	0x08007ef4
 8001e6c:	08007ef4 	.word	0x08007ef4
 8001e70:	08007ef4 	.word	0x08007ef4
 8001e74:	e000ed88 	.word	0xe000ed88
 8001e78:	08007ef4 	.word	0x08007ef4
 8001e7c:	08007ef4 	.word	0x08007ef4

08001e80 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <nvic_enable_irq+0x18>)
 8001e82:	0942      	lsrs	r2, r0, #5
 8001e84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e88:	f000 001f 	and.w	r0, r0, #31
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	fa02 f000 	lsl.w	r0, r2, r0
 8001e92:	6018      	str	r0, [r3, #0]
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 8001e9c:	2850      	cmp	r0, #80	; 0x50
 8001e9e:	d904      	bls.n	8001eaa <nvic_set_priority+0xe>
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
 8001ea0:	f000 000f 	and.w	r0, r0, #15
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <nvic_set_priority+0x1c>)
 8001ea6:	54c1      	strb	r1, [r0, r3]
 8001ea8:	4770      	bx	lr
	} else {
		/* Device specific interrupts */
		NVIC_IPR(irqn) = priority;
 8001eaa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001eae:	f500 4064 	add.w	r0, r0, #58368	; 0xe400
 8001eb2:	7001      	strb	r1, [r0, #0]
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed14 	.word	0xe000ed14

08001ebc <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(vos_scale_t scale)
{
	if (scale == SCALE1) {
 8001ebc:	b920      	cbnz	r0, 8001ec8 <pwr_set_vos_scale+0xc>
		PWR_CR |= PWR_CR_VOS;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <pwr_set_vos_scale+0x1c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec6:	e005      	b.n	8001ed4 <pwr_set_vos_scale+0x18>
	} else if (scale == SCALE2) {
 8001ec8:	2801      	cmp	r0, #1
 8001eca:	d104      	bne.n	8001ed6 <pwr_set_vos_scale+0x1a>
		PWR_CR &= PWR_CR_VOS;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <pwr_set_vos_scale+0x1c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	4770      	bx	lr
 8001ed8:	40007000 	.word	0x40007000

08001edc <stm32fx07_set_address>:
#define REBASE(x)        MMIO32((x) + (dev_base_address))
#define REBASE_FIFO(x)   (&MMIO32((dev_base_address) + (OTG_FIFO(x))))

void stm32fx07_set_address(usbd_device *usbd_dev, uint8_t addr)
{
	REBASE(OTG_DCFG) = (REBASE(OTG_DCFG) & ~OTG_FS_DCFG_DAD) | (addr << 4);
 8001edc:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ee6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8001eea:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8001eee:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 8001ef2:	4770      	bx	lr

08001ef4 <stm32fx07_ep_setup>:
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001ef8:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001efc:	9e08      	ldr	r6, [sp, #32]
 8001efe:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001f02:	f003 077f 	and.w	r7, r3, #127	; 0x7f
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001f06:	d13a      	bne.n	8001f7e <stm32fx07_ep_setup+0x8a>
		/* Configure IN part. */
		if (max_size >= 64) {
 8001f08:	2b3f      	cmp	r3, #63	; 0x3f
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001f0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
		/* Configure IN part. */
		if (max_size >= 64) {
 8001f0c:	d902      	bls.n	8001f14 <stm32fx07_ep_setup+0x20>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001f0e:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
 8001f12:	e009      	b.n	8001f28 <stm32fx07_ep_setup+0x34>
		} else if (max_size >= 32) {
 8001f14:	2b1f      	cmp	r3, #31
 8001f16:	d901      	bls.n	8001f1c <stm32fx07_ep_setup+0x28>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_32;
 8001f18:	2101      	movs	r1, #1
 8001f1a:	e003      	b.n	8001f24 <stm32fx07_ep_setup+0x30>
		} else if (max_size >= 16) {
 8001f1c:	2b0f      	cmp	r3, #15
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_16;
 8001f1e:	bf8c      	ite	hi
 8001f20:	2102      	movhi	r1, #2
		} else {
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_8;
 8001f22:	2103      	movls	r1, #3
 8001f24:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
		}

		REBASE(OTG_DIEPTSIZ0) =
 8001f28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f2a:	b2ba      	uxth	r2, r7
 8001f2c:	f8c1 2910 	str.w	r2, [r1, #2320]	; 0x910
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
 8001f30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f32:	f8d1 5900 	ldr.w	r5, [r1, #2304]	; 0x900
 8001f36:	f045 4508 	orr.w	r5, r5, #2281701376	; 0x88000000
 8001f3a:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001f3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
 8001f40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
 8001f48:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001f4c:	f8c1 2b10 	str.w	r2, [r1, #2832]	; 0xb10
		REBASE(OTG_DOEPCTL(0)) |=
 8001f50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f52:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8001f56:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 8001f5a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
		    OTG_FS_DOEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001f5e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001f60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001f68:	6291      	str	r1, [r2, #40]	; 0x28
					 usbd_dev->driver->rx_fifo_size;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001f6a:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
 8001f6e:	4413      	add	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		usbd_dev->fifo_mem_top_ep0 = usbd_dev->fifo_mem_top;
 8001f76:	f8a0 30ce 	strh.w	r3, [r0, #206]	; 0xce

		return;
 8001f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (dir) {
 8001f7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f82:	ea4f 4a82 	mov.w	sl, r2, lsl #18
 8001f86:	d02c      	beq.n	8001fe2 <stm32fx07_ep_setup+0xee>
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
 8001f88:	f8b0 c0cc 	ldrh.w	ip, [r0, #204]	; 0xcc

		return;
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
 8001f8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f8e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8001f92:	f105 0940 	add.w	r9, r5, #64	; 0x40
 8001f96:	ea4c 4208 	orr.w	r2, ip, r8, lsl #16
 8001f9a:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001f9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001fa0:	44c4      	add	ip, r8
 8001fa2:	f8a0 c0cc 	strh.w	ip, [r0, #204]	; 0xcc

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001fa6:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 8001faa:	f04f 0c20 	mov.w	ip, #32
 8001fae:	fb1c 1105 	smlabb	r1, ip, r5, r1
 8001fb2:	b2bf      	uxth	r7, r7
 8001fb4:	600f      	str	r7, [r1, #0]
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001fb6:	f44f 6710 	mov.w	r7, #2304	; 0x900
 8001fba:	fb1c 7705 	smlabb	r7, ip, r5, r7
 8001fbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
 8001fc0:	f04a 4218 	orr.w	r2, sl, #2550136832	; 0x98000000
 8001fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001fc8:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001fd0:	4323      	orrs	r3, r4
 8001fd2:	507b      	str	r3, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;

		if (callback) {
 8001fd4:	b33e      	cbz	r6, 8002026 <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	fb03 0005 	mla	r0, r3, r5, r0
 8001fdc:	6646      	str	r6, [r0, #100]	; 0x64
 8001fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001fe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			    (void *)callback;
		}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
 8001fe4:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8001fe8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8001fec:	f8c1 70d4 	str.w	r7, [r1, #212]	; 0xd4
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001ff0:	f502 6c31 	add.w	ip, r2, #2832	; 0xb10
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	fb11 cc05 	smlabb	ip, r1, r5, ip
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001ffa:	f04a 4214 	orr.w	r2, sl, #2483027968	; 0x94000000
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001ffe:	f8cc 7000 	str.w	r7, [ip]
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8002002:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 8002006:	fb11 7705 	smlabb	r7, r1, r5, r7
 800200a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 800200c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8002010:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8002012:	4313      	orrs	r3, r2

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8002014:	4323      	orrs	r3, r4
 8002016:	507b      	str	r3, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;

		if (callback) {
 8002018:	b12e      	cbz	r6, 8002026 <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 800201a:	230c      	movs	r3, #12
 800201c:	fb03 0005 	mla	r0, r3, r5, r0
 8002020:	6686      	str	r6, [r0, #104]	; 0x68
 8002022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800202a <stm32fx07_endpoints_reset>:
}

void stm32fx07_endpoints_reset(usbd_device *usbd_dev)
{
	/* The core resets the endpoints automatically on reset. */
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 800202a:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
 800202e:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
 8002032:	4770      	bx	lr

08002034 <stm32fx07_ep_stall_set>:
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8002034:	b510      	push	{r4, lr}
 8002036:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (addr == 0) {
 800203a:	b951      	cbnz	r1, 8002052 <stm32fx07_ep_stall_set+0x1e>
		if (stall) {
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 800203c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800203e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	if (addr == 0) {
		if (stall) {
 8002042:	b112      	cbz	r2, 800204a <stm32fx07_ep_stall_set+0x16>
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 8002044:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8002048:	e001      	b.n	800204e <stm32fx07_ep_stall_set+0x1a>
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
 800204a:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 800204e:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
		}
	}

	if (addr & 0x80) {
 8002052:	0608      	lsls	r0, r1, #24
		addr &= 0x7F;
 8002054:	bf46      	itte	mi
 8002056:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800205a:	3148      	addmi	r1, #72	; 0x48
 800205c:	3158      	addpl	r1, #88	; 0x58
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 800205e:	0149      	lsls	r1, r1, #5
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
 8002060:	b122      	cbz	r2, 800206c <stm32fx07_ep_stall_set+0x38>
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	58ca      	ldr	r2, [r1, r3]
 8002066:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800206a:	e008      	b.n	800207e <stm32fx07_ep_stall_set+0x4a>
		} else {
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_FS_DOEPCTL0_STALL;
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	5888      	ldr	r0, [r1, r2]
 8002070:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
 8002074:	5088      	str	r0, [r1, r2]
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTLX_SD0PID;
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	58ca      	ldr	r2, [r1, r3]
 800207a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800207e:	50ca      	str	r2, [r1, r3]
 8002080:	bd10      	pop	{r4, pc}

08002082 <stm32fx07_ep_stall_get>:
}

uint8_t stm32fx07_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	/* Return non-zero if STALL set. */
	if (addr & 0x80) {
 8002082:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002086:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
		return (REBASE(OTG_DIEPCTL(addr & 0x7f)) &
 800208a:	bf1a      	itte	ne
 800208c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002090:	3148      	addne	r1, #72	; 0x48
				OTG_FS_DIEPCTL0_STALL) ? 1 : 0;
	} else {
		return (REBASE(OTG_DOEPCTL(addr)) &
 8002092:	3158      	addeq	r1, #88	; 0x58
 8002094:	0149      	lsls	r1, r1, #5
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	58c8      	ldr	r0, [r1, r3]
 800209a:	f3c0 5040 	ubfx	r0, r0, #21, #1
				OTG_FS_DOEPCTL0_STALL) ? 1 : 0;
	}
}
 800209e:	4770      	bx	lr

080020a0 <stm32fx07_ep_nak_set>:

void stm32fx07_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80020a0:	060b      	lsls	r3, r1, #24
 80020a2:	d410      	bmi.n	80020c6 <stm32fx07_ep_nak_set+0x26>
		return;
	}

	usbd_dev->force_nak[addr] = nak;
 80020a4:	1843      	adds	r3, r0, r1
 80020a6:	3158      	adds	r1, #88	; 0x58
 80020a8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80020ac:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

	if (nak) {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 80020b0:	0149      	lsls	r1, r1, #5
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		return;
	}

	usbd_dev->force_nak[addr] = nak;

	if (nak) {
 80020b4:	b11a      	cbz	r2, 80020be <stm32fx07_ep_nak_set+0x1e>
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 80020b6:	58ca      	ldr	r2, [r1, r3]
 80020b8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80020bc:	e002      	b.n	80020c4 <stm32fx07_ep_nak_set+0x24>
	} else {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_CNAK;
 80020be:	58ca      	ldr	r2, [r1, r3]
 80020c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020c4:	50ca      	str	r2, [r1, r3]
 80020c6:	4770      	bx	lr

080020c8 <stm32fx07_ep_write_packet>:
	}
}

uint16_t stm32fx07_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			      const void *buf, uint16_t len)
{
 80020c8:	b570      	push	{r4, r5, r6, lr}
	int i;

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 80020ca:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 80020ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			      const void *buf, uint16_t len)
{
	const uint32_t *buf32 = buf;
	int i;

	addr &= 0x7F;
 80020d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 80020d4:	2520      	movs	r5, #32
 80020d6:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 80020da:	fb15 0001 	smlabb	r0, r5, r1, r0
 80020de:	6806      	ldr	r6, [r0, #0]
 80020e0:	0336      	lsls	r6, r6, #12
 80020e2:	d41b      	bmi.n	800211c <stm32fx07_ep_write_packet+0x54>
		return 0;
	}

	/* Enable endpoint for transmission. */
	REBASE(OTG_DIEPTSIZ(addr)) = OTG_FS_DIEPSIZ0_PKTCNT | len;
 80020e4:	f443 2600 	orr.w	r6, r3, #524288	; 0x80000
 80020e8:	6006      	str	r6, [r0, #0]
	REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_EPENA |
 80020ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020ee:	fb15 0501 	smlabb	r5, r5, r1, r0
 80020f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80020f4:	582e      	ldr	r6, [r5, r0]
 80020f6:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
 80020fa:	502e      	str	r6, [r5, r0]
				     OTG_FS_DIEPCTL0_CNAK;
	volatile uint32_t *fifo = REBASE_FIFO(addr);
 80020fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80020fe:	3101      	adds	r1, #1
 8002100:	eb00 3001 	add.w	r0, r0, r1, lsl #12

	/* Copy buffer to endpoint FIFO, note - memcpy does not work */
	for (i = len; i > 0; i -= 4) {
 8002104:	4601      	mov	r1, r0
 8002106:	18c4      	adds	r4, r0, r3
 8002108:	1a64      	subs	r4, r4, r1
 800210a:	2c00      	cmp	r4, #0
 800210c:	dd04      	ble.n	8002118 <stm32fx07_ep_write_packet+0x50>
 800210e:	1a14      	subs	r4, r2, r0
		*fifo++ = *buf32++;
 8002110:	5864      	ldr	r4, [r4, r1]
 8002112:	f841 4b04 	str.w	r4, [r1], #4
 8002116:	e7f6      	b.n	8002106 <stm32fx07_ep_write_packet+0x3e>
	}

	return len;
 8002118:	4618      	mov	r0, r3
 800211a:	bd70      	pop	{r4, r5, r6, pc}

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
		return 0;
 800211c:	2000      	movs	r0, #0
	for (i = len; i > 0; i -= 4) {
		*fifo++ = *buf32++;
	}

	return len;
}
 800211e:	bd70      	pop	{r4, r5, r6, pc}

08002120 <stm32fx07_ep_read_packet>:

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8002120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002122:	460d      	mov	r5, r1
 8002124:	4611      	mov	r1, r2
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
 8002126:	f8b0 20e4 	ldrh.w	r2, [r0, #228]	; 0xe4
 800212a:	4293      	cmp	r3, r2
 800212c:	bf34      	ite	cc
 800212e:	461e      	movcc	r6, r3
 8002130:	4616      	movcs	r6, r2
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8002132:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 8002138:	1b92      	subs	r2, r2, r6

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 800213a:	1c6f      	adds	r7, r5, #1
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 800213c:	f8a0 20e4 	strh.w	r2, [r0, #228]	; 0xe4
	return len;
}

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8002140:	4604      	mov	r4, r0
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8002142:	eb03 3707 	add.w	r7, r3, r7, lsl #12
	for (i = len; i >= 4; i -= 4) {
 8002146:	4632      	mov	r2, r6

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
	int i;
	uint32_t *buf32 = buf;
 8002148:	4608      	mov	r0, r1
 800214a:	1a7b      	subs	r3, r7, r1

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 800214c:	2a03      	cmp	r2, #3
 800214e:	4403      	add	r3, r0
 8002150:	dd04      	ble.n	800215c <stm32fx07_ep_read_packet+0x3c>
		*buf32++ = *fifo++;
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f840 3b04 	str.w	r3, [r0], #4

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 8002158:	3a04      	subs	r2, #4
 800215a:	e7f6      	b.n	800214a <stm32fx07_ep_read_packet+0x2a>
		*buf32++ = *fifo++;
	}

	if (i) {
 800215c:	b12a      	cbz	r2, 800216a <stm32fx07_ep_read_packet+0x4a>
		extra = *fifo++;
 800215e:	a902      	add	r1, sp, #8
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(buf32, &extra, i);
 8002166:	f000 fc09 	bl	800297c <memcpy>
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 800216a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800216e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002170:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8002174:	2220      	movs	r2, #32
 8002176:	f501 6131 	add.w	r1, r1, #2832	; 0xb10
 800217a:	fb12 1105 	smlabb	r1, r2, r5, r1
 800217e:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8002182:	6008      	str	r0, [r1, #0]
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
	    (usbd_dev->force_nak[addr] ?
 8002184:	442c      	add	r4, r5
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8002186:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800218a:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	fb12 1205 	smlabb	r2, r2, r5, r1
 8002194:	2800      	cmp	r0, #0
 8002196:	58d1      	ldr	r1, [r2, r3]
 8002198:	bf0c      	ite	eq
 800219a:	f04f 4004 	moveq.w	r0, #2214592512	; 0x84000000
 800219e:	f04f 4008 	movne.w	r0, #2281701376	; 0x88000000
 80021a2:	4301      	orrs	r1, r0
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 80021a4:	4630      	mov	r0, r6
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 80021a6:	50d1      	str	r1, [r2, r3]
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 80021a8:	b003      	add	sp, #12
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ac <stm32fx07_poll>:

void stm32fx07_poll(usbd_device *usbd_dev)
{
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 80021ac:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 80021b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021b4:	695e      	ldr	r6, [r3, #20]
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 80021b6:	04b5      	lsls	r5, r6, #18

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 80021b8:	4604      	mov	r4, r0
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 80021ba:	d509      	bpl.n	80021d0 <stm32fx07_poll+0x24>
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
 80021bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c0:	6159      	str	r1, [r3, #20]
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 80021c2:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 80021c4:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		if (usbd_dev->user_callback_sof) {
			usbd_dev->user_callback_sof();
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
	}
}
 80021c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
		_usbd_reset(usbd_dev);
 80021cc:	f7ff ba4f 	b.w	800166e <_usbd_reset>
		return;
	}

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
 80021d0:	06f0      	lsls	r0, r6, #27
 80021d2:	d531      	bpl.n	8002238 <stm32fx07_poll+0x8c>
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
 80021d4:	6a1b      	ldr	r3, [r3, #32]
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
 80021d6:	f403 12b0 	and.w	r2, r3, #1441792	; 0x160000
 80021da:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80021de:	d167      	bne.n	80022b0 <stm32fx07_poll+0x104>

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
 80021e0:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
		    (pktsts != OTG_FS_GRXSTSP_PKTSTS_SETUP)) {
			return;
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
 80021e4:	f003 050f 	and.w	r5, r3, #15
		uint8_t type;
		if (pktsts == OTG_FS_GRXSTSP_PKTSTS_SETUP) {
			type = USB_TRANSACTION_SETUP;
 80021e8:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 80021ec:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80021f0:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
		uint8_t type;
		if (pktsts == OTG_FS_GRXSTSP_PKTSTS_SETUP) {
			type = USB_TRANSACTION_SETUP;
 80021f4:	bf14      	ite	ne
 80021f6:	2201      	movne	r2, #1
 80021f8:	2202      	moveq	r2, #2
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
			__asm__("nop");
 80021fe:	bf00      	nop
		/*
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
 8002200:	3b01      	subs	r3, #1
 8002202:	d1fc      	bne.n	80021fe <stm32fx07_poll+0x52>
			__asm__("nop");
		}

		if (usbd_dev->user_callback_ctr[ep][type]) {
 8002204:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002208:	4413      	add	r3, r2
 800220a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	b113      	cbz	r3, 8002218 <stm32fx07_poll+0x6c>
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
 8002212:	4620      	mov	r0, r4
 8002214:	4629      	mov	r1, r5
 8002216:	4798      	blx	r3
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
			(void)*REBASE_FIFO(ep);
 8002218:	3501      	adds	r5, #1
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 800221a:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	; 0xe4
			(void)*REBASE_FIFO(ep);
 800221e:	032d      	lsls	r5, r5, #12
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8002220:	2300      	movs	r3, #0
 8002222:	428b      	cmp	r3, r1
 8002224:	da05      	bge.n	8002232 <stm32fx07_poll+0x86>
			(void)*REBASE_FIFO(ep);
 8002226:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 800222a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 800222c:	3304      	adds	r3, #4
			(void)*REBASE_FIFO(ep);
 800222e:	58aa      	ldr	r2, [r5, r2]
 8002230:	e7f7      	b.n	8002222 <stm32fx07_poll+0x76>
		}

		usbd_dev->rxbcnt = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8002238:	2500      	movs	r5, #0
	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
 800223a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	016f      	lsls	r7, r5, #5
 8002242:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8002246:	59db      	ldr	r3, [r3, r7]
 8002248:	07d9      	lsls	r1, r3, #31
 800224a:	d50e      	bpl.n	800226a <stm32fx07_poll+0xbe>
 800224c:	230c      	movs	r3, #12
 800224e:	fb03 4305 	mla	r3, r3, r5, r4
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
						       [USB_TRANSACTION_IN]) {
 8002252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
 8002254:	b113      	cbz	r3, 800225c <stm32fx07_poll+0xb0>
						       [USB_TRANSACTION_IN]) {
				usbd_dev->user_callback_ctr[i]
					[USB_TRANSACTION_IN](usbd_dev, i);
 8002256:	4620      	mov	r0, r4
 8002258:	b2e9      	uxtb	r1, r5
 800225a:	4798      	blx	r3
			}

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
 800225c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8002266:	2201      	movs	r2, #1
 8002268:	51da      	str	r2, [r3, r7]

	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
 800226a:	3501      	adds	r5, #1
 800226c:	2d04      	cmp	r5, #4
 800226e:	d1e4      	bne.n	800223a <stm32fx07_poll+0x8e>

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
		}
	}

	if (intsts & OTG_FS_GINTSTS_USBSUSP) {
 8002270:	0532      	lsls	r2, r6, #20
 8002272:	d508      	bpl.n	8002286 <stm32fx07_poll+0xda>
		if (usbd_dev->user_callback_suspend) {
 8002274:	6a23      	ldr	r3, [r4, #32]
 8002276:	b103      	cbz	r3, 800227a <stm32fx07_poll+0xce>
			usbd_dev->user_callback_suspend();
 8002278:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_USBSUSP;
 800227a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002284:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_WKUPINT) {
 8002286:	2e00      	cmp	r6, #0
 8002288:	da08      	bge.n	800229c <stm32fx07_poll+0xf0>
		if (usbd_dev->user_callback_resume) {
 800228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800228c:	b103      	cbz	r3, 8002290 <stm32fx07_poll+0xe4>
			usbd_dev->user_callback_resume();
 800228e:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_WKUPINT;
 8002290:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800229a:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_SOF) {
 800229c:	0733      	lsls	r3, r6, #28
 800229e:	d507      	bpl.n	80022b0 <stm32fx07_poll+0x104>
		if (usbd_dev->user_callback_sof) {
 80022a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022a2:	b103      	cbz	r3, 80022a6 <stm32fx07_poll+0xfa>
			usbd_dev->user_callback_sof();
 80022a4:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
 80022a6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2208      	movs	r2, #8
 80022ae:	615a      	str	r2, [r3, #20]
 80022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022b2 <stm32fx07_disconnect>:
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
 80022b2:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (disconnected) {
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	if (disconnected) {
 80022bc:	b111      	cbz	r1, 80022c4 <stm32fx07_disconnect+0x12>
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 80022be:	f042 0202 	orr.w	r2, r2, #2
 80022c2:	e001      	b.n	80022c8 <stm32fx07_disconnect+0x16>
	} else {
		REBASE(OTG_DCTL) &= ~OTG_FS_DCTL_SDIS;
 80022c4:	f022 0202 	bic.w	r2, r2, #2
 80022c8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80022cc:	4770      	bx	lr
	...

080022d0 <abort>:
 80022d0:	b508      	push	{r3, lr}
 80022d2:	2006      	movs	r0, #6
 80022d4:	f000 fc8c 	bl	8002bf0 <raise>
 80022d8:	2001      	movs	r0, #1
 80022da:	f004 fd0f 	bl	8006cfc <_exit>
 80022de:	bf00      	nop

080022e0 <_cleanup_r>:
 80022e0:	4901      	ldr	r1, [pc, #4]	; (80022e8 <_cleanup_r+0x8>)
 80022e2:	f000 b881 	b.w	80023e8 <_fwalk>
 80022e6:	bf00      	nop
 80022e8:	08005619 	.word	0x08005619

080022ec <__sinit>:
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80022f2:	b083      	sub	sp, #12
 80022f4:	4607      	mov	r7, r0
 80022f6:	2c00      	cmp	r4, #0
 80022f8:	d165      	bne.n	80023c6 <__sinit+0xda>
 80022fa:	6845      	ldr	r5, [r0, #4]
 80022fc:	4833      	ldr	r0, [pc, #204]	; (80023cc <__sinit+0xe0>)
 80022fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002300:	2304      	movs	r3, #4
 8002302:	2103      	movs	r1, #3
 8002304:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8002308:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 800230c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 8002310:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 8002314:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002318:	81ab      	strh	r3, [r5, #12]
 800231a:	602c      	str	r4, [r5, #0]
 800231c:	606c      	str	r4, [r5, #4]
 800231e:	60ac      	str	r4, [r5, #8]
 8002320:	666c      	str	r4, [r5, #100]	; 0x64
 8002322:	81ec      	strh	r4, [r5, #14]
 8002324:	612c      	str	r4, [r5, #16]
 8002326:	616c      	str	r4, [r5, #20]
 8002328:	61ac      	str	r4, [r5, #24]
 800232a:	4621      	mov	r1, r4
 800232c:	2208      	movs	r2, #8
 800232e:	f000 fbbf 	bl	8002ab0 <memset>
 8002332:	68be      	ldr	r6, [r7, #8]
 8002334:	f8df b098 	ldr.w	fp, [pc, #152]	; 80023d0 <__sinit+0xe4>
 8002338:	f8df a098 	ldr.w	sl, [pc, #152]	; 80023d4 <__sinit+0xe8>
 800233c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80023d8 <__sinit+0xec>
 8002340:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80023dc <__sinit+0xf0>
 8002344:	61ed      	str	r5, [r5, #28]
 8002346:	2301      	movs	r3, #1
 8002348:	2209      	movs	r2, #9
 800234a:	f8c5 b020 	str.w	fp, [r5, #32]
 800234e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002352:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002356:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800235a:	4621      	mov	r1, r4
 800235c:	81f3      	strh	r3, [r6, #14]
 800235e:	81b2      	strh	r2, [r6, #12]
 8002360:	6034      	str	r4, [r6, #0]
 8002362:	6074      	str	r4, [r6, #4]
 8002364:	60b4      	str	r4, [r6, #8]
 8002366:	6674      	str	r4, [r6, #100]	; 0x64
 8002368:	6134      	str	r4, [r6, #16]
 800236a:	6174      	str	r4, [r6, #20]
 800236c:	61b4      	str	r4, [r6, #24]
 800236e:	2208      	movs	r2, #8
 8002370:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f000 fb9b 	bl	8002ab0 <memset>
 800237a:	68fd      	ldr	r5, [r7, #12]
 800237c:	61f6      	str	r6, [r6, #28]
 800237e:	2012      	movs	r0, #18
 8002380:	2202      	movs	r2, #2
 8002382:	f8c6 b020 	str.w	fp, [r6, #32]
 8002386:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800238a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800238e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8002392:	4621      	mov	r1, r4
 8002394:	81a8      	strh	r0, [r5, #12]
 8002396:	81ea      	strh	r2, [r5, #14]
 8002398:	602c      	str	r4, [r5, #0]
 800239a:	606c      	str	r4, [r5, #4]
 800239c:	60ac      	str	r4, [r5, #8]
 800239e:	666c      	str	r4, [r5, #100]	; 0x64
 80023a0:	612c      	str	r4, [r5, #16]
 80023a2:	616c      	str	r4, [r5, #20]
 80023a4:	61ac      	str	r4, [r5, #24]
 80023a6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80023aa:	2208      	movs	r2, #8
 80023ac:	f000 fb80 	bl	8002ab0 <memset>
 80023b0:	9b01      	ldr	r3, [sp, #4]
 80023b2:	61ed      	str	r5, [r5, #28]
 80023b4:	f8c5 b020 	str.w	fp, [r5, #32]
 80023b8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80023bc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80023c0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c6:	b003      	add	sp, #12
 80023c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023cc:	080022e1 	.word	0x080022e1
 80023d0:	08002c2d 	.word	0x08002c2d
 80023d4:	08002c51 	.word	0x08002c51
 80023d8:	08002c89 	.word	0x08002c89
 80023dc:	08002ca9 	.word	0x08002ca9

080023e0 <__sfp_lock_acquire>:
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop

080023e4 <__sfp_lock_release>:
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <_fwalk>:
 80023e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80023f0:	4688      	mov	r8, r1
 80023f2:	d01a      	beq.n	800242a <_fwalk+0x42>
 80023f4:	2600      	movs	r6, #0
 80023f6:	687d      	ldr	r5, [r7, #4]
 80023f8:	68bc      	ldr	r4, [r7, #8]
 80023fa:	3d01      	subs	r5, #1
 80023fc:	d40f      	bmi.n	800241e <_fwalk+0x36>
 80023fe:	89a3      	ldrh	r3, [r4, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8002406:	d906      	bls.n	8002416 <_fwalk+0x2e>
 8002408:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800240c:	3301      	adds	r3, #1
 800240e:	4620      	mov	r0, r4
 8002410:	d001      	beq.n	8002416 <_fwalk+0x2e>
 8002412:	47c0      	blx	r8
 8002414:	4306      	orrs	r6, r0
 8002416:	1c6b      	adds	r3, r5, #1
 8002418:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800241c:	d1ef      	bne.n	80023fe <_fwalk+0x16>
 800241e:	683f      	ldr	r7, [r7, #0]
 8002420:	2f00      	cmp	r7, #0
 8002422:	d1e8      	bne.n	80023f6 <_fwalk+0xe>
 8002424:	4630      	mov	r0, r6
 8002426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800242a:	463e      	mov	r6, r7
 800242c:	4630      	mov	r0, r6
 800242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002432:	bf00      	nop

08002434 <malloc>:
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <malloc+0xc>)
 8002436:	4601      	mov	r1, r0
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	f000 b803 	b.w	8002444 <_malloc_r>
 800243e:	bf00      	nop
 8002440:	20000458 	.word	0x20000458

08002444 <_malloc_r>:
 8002444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002448:	f101 050b 	add.w	r5, r1, #11
 800244c:	2d16      	cmp	r5, #22
 800244e:	b083      	sub	sp, #12
 8002450:	4606      	mov	r6, r0
 8002452:	d927      	bls.n	80024a4 <_malloc_r+0x60>
 8002454:	f035 0507 	bics.w	r5, r5, #7
 8002458:	d427      	bmi.n	80024aa <_malloc_r+0x66>
 800245a:	42a9      	cmp	r1, r5
 800245c:	d825      	bhi.n	80024aa <_malloc_r+0x66>
 800245e:	4630      	mov	r0, r6
 8002460:	f000 fb70 	bl	8002b44 <__malloc_lock>
 8002464:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8002468:	d226      	bcs.n	80024b8 <_malloc_r+0x74>
 800246a:	4fc1      	ldr	r7, [pc, #772]	; (8002770 <_malloc_r+0x32c>)
 800246c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8002470:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8002474:	68dc      	ldr	r4, [r3, #12]
 8002476:	429c      	cmp	r4, r3
 8002478:	f000 81d2 	beq.w	8002820 <_malloc_r+0x3dc>
 800247c:	6863      	ldr	r3, [r4, #4]
 800247e:	68e2      	ldr	r2, [r4, #12]
 8002480:	68a1      	ldr	r1, [r4, #8]
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	4423      	add	r3, r4
 8002488:	4630      	mov	r0, r6
 800248a:	685d      	ldr	r5, [r3, #4]
 800248c:	60ca      	str	r2, [r1, #12]
 800248e:	f045 0501 	orr.w	r5, r5, #1
 8002492:	6091      	str	r1, [r2, #8]
 8002494:	605d      	str	r5, [r3, #4]
 8002496:	f000 fb57 	bl	8002b48 <__malloc_unlock>
 800249a:	3408      	adds	r4, #8
 800249c:	4620      	mov	r0, r4
 800249e:	b003      	add	sp, #12
 80024a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a4:	2510      	movs	r5, #16
 80024a6:	42a9      	cmp	r1, r5
 80024a8:	d9d9      	bls.n	800245e <_malloc_r+0x1a>
 80024aa:	2400      	movs	r4, #0
 80024ac:	230c      	movs	r3, #12
 80024ae:	4620      	mov	r0, r4
 80024b0:	6033      	str	r3, [r6, #0]
 80024b2:	b003      	add	sp, #12
 80024b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80024bc:	f000 808a 	beq.w	80025d4 <_malloc_r+0x190>
 80024c0:	f1bc 0f04 	cmp.w	ip, #4
 80024c4:	f200 8160 	bhi.w	8002788 <_malloc_r+0x344>
 80024c8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80024cc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80024d0:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80024d4:	4fa6      	ldr	r7, [pc, #664]	; (8002770 <_malloc_r+0x32c>)
 80024d6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80024da:	68cc      	ldr	r4, [r1, #12]
 80024dc:	42a1      	cmp	r1, r4
 80024de:	d105      	bne.n	80024ec <_malloc_r+0xa8>
 80024e0:	e00c      	b.n	80024fc <_malloc_r+0xb8>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da7a      	bge.n	80025dc <_malloc_r+0x198>
 80024e6:	68e4      	ldr	r4, [r4, #12]
 80024e8:	42a1      	cmp	r1, r4
 80024ea:	d007      	beq.n	80024fc <_malloc_r+0xb8>
 80024ec:	6862      	ldr	r2, [r4, #4]
 80024ee:	f022 0203 	bic.w	r2, r2, #3
 80024f2:	1b53      	subs	r3, r2, r5
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	ddf4      	ble.n	80024e2 <_malloc_r+0x9e>
 80024f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80024fc:	f10c 0c01 	add.w	ip, ip, #1
 8002500:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <_malloc_r+0x32c>)
 8002502:	693c      	ldr	r4, [r7, #16]
 8002504:	f103 0e08 	add.w	lr, r3, #8
 8002508:	4574      	cmp	r4, lr
 800250a:	f000 817e 	beq.w	800280a <_malloc_r+0x3c6>
 800250e:	6861      	ldr	r1, [r4, #4]
 8002510:	f021 0103 	bic.w	r1, r1, #3
 8002514:	1b4a      	subs	r2, r1, r5
 8002516:	2a0f      	cmp	r2, #15
 8002518:	f300 8164 	bgt.w	80027e4 <_malloc_r+0x3a0>
 800251c:	2a00      	cmp	r2, #0
 800251e:	f8c3 e014 	str.w	lr, [r3, #20]
 8002522:	f8c3 e010 	str.w	lr, [r3, #16]
 8002526:	da6a      	bge.n	80025fe <_malloc_r+0x1ba>
 8002528:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800252c:	f080 813a 	bcs.w	80027a4 <_malloc_r+0x360>
 8002530:	08c9      	lsrs	r1, r1, #3
 8002532:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8002536:	ea4f 08a1 	mov.w	r8, r1, asr #2
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	6881      	ldr	r1, [r0, #8]
 800253e:	60a1      	str	r1, [r4, #8]
 8002540:	f04f 0901 	mov.w	r9, #1
 8002544:	fa09 f808 	lsl.w	r8, r9, r8
 8002548:	ea48 0202 	orr.w	r2, r8, r2
 800254c:	60e0      	str	r0, [r4, #12]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	6084      	str	r4, [r0, #8]
 8002552:	60cc      	str	r4, [r1, #12]
 8002554:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8002558:	2001      	movs	r0, #1
 800255a:	4098      	lsls	r0, r3
 800255c:	4290      	cmp	r0, r2
 800255e:	d85b      	bhi.n	8002618 <_malloc_r+0x1d4>
 8002560:	4202      	tst	r2, r0
 8002562:	d106      	bne.n	8002572 <_malloc_r+0x12e>
 8002564:	f02c 0c03 	bic.w	ip, ip, #3
 8002568:	0040      	lsls	r0, r0, #1
 800256a:	4202      	tst	r2, r0
 800256c:	f10c 0c04 	add.w	ip, ip, #4
 8002570:	d0fa      	beq.n	8002568 <_malloc_r+0x124>
 8002572:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 8002576:	4644      	mov	r4, r8
 8002578:	46e1      	mov	r9, ip
 800257a:	68e3      	ldr	r3, [r4, #12]
 800257c:	429c      	cmp	r4, r3
 800257e:	d107      	bne.n	8002590 <_malloc_r+0x14c>
 8002580:	e145      	b.n	800280e <_malloc_r+0x3ca>
 8002582:	2a00      	cmp	r2, #0
 8002584:	f280 8156 	bge.w	8002834 <_malloc_r+0x3f0>
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	429c      	cmp	r4, r3
 800258c:	f000 813f 	beq.w	800280e <_malloc_r+0x3ca>
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	f021 0103 	bic.w	r1, r1, #3
 8002596:	1b4a      	subs	r2, r1, r5
 8002598:	2a0f      	cmp	r2, #15
 800259a:	ddf2      	ble.n	8002582 <_malloc_r+0x13e>
 800259c:	461c      	mov	r4, r3
 800259e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80025a2:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80025a6:	1959      	adds	r1, r3, r5
 80025a8:	f045 0901 	orr.w	r9, r5, #1
 80025ac:	f042 0501 	orr.w	r5, r2, #1
 80025b0:	f8c3 9004 	str.w	r9, [r3, #4]
 80025b4:	4630      	mov	r0, r6
 80025b6:	f8c8 c00c 	str.w	ip, [r8, #12]
 80025ba:	f8cc 8008 	str.w	r8, [ip, #8]
 80025be:	6179      	str	r1, [r7, #20]
 80025c0:	6139      	str	r1, [r7, #16]
 80025c2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80025c6:	f8c1 e008 	str.w	lr, [r1, #8]
 80025ca:	604d      	str	r5, [r1, #4]
 80025cc:	508a      	str	r2, [r1, r2]
 80025ce:	f000 fabb 	bl	8002b48 <__malloc_unlock>
 80025d2:	e763      	b.n	800249c <_malloc_r+0x58>
 80025d4:	217e      	movs	r1, #126	; 0x7e
 80025d6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80025da:	e77b      	b.n	80024d4 <_malloc_r+0x90>
 80025dc:	4422      	add	r2, r4
 80025de:	68e3      	ldr	r3, [r4, #12]
 80025e0:	6850      	ldr	r0, [r2, #4]
 80025e2:	68a1      	ldr	r1, [r4, #8]
 80025e4:	f040 0501 	orr.w	r5, r0, #1
 80025e8:	60cb      	str	r3, [r1, #12]
 80025ea:	4630      	mov	r0, r6
 80025ec:	6099      	str	r1, [r3, #8]
 80025ee:	6055      	str	r5, [r2, #4]
 80025f0:	f000 faaa 	bl	8002b48 <__malloc_unlock>
 80025f4:	3408      	adds	r4, #8
 80025f6:	4620      	mov	r0, r4
 80025f8:	b003      	add	sp, #12
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fe:	4421      	add	r1, r4
 8002600:	4630      	mov	r0, r6
 8002602:	684b      	ldr	r3, [r1, #4]
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	604b      	str	r3, [r1, #4]
 800260a:	f000 fa9d 	bl	8002b48 <__malloc_unlock>
 800260e:	3408      	adds	r4, #8
 8002610:	4620      	mov	r0, r4
 8002612:	b003      	add	sp, #12
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002618:	68bc      	ldr	r4, [r7, #8]
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	f023 0903 	bic.w	r9, r3, #3
 8002620:	45a9      	cmp	r9, r5
 8002622:	d304      	bcc.n	800262e <_malloc_r+0x1ea>
 8002624:	ebc5 0309 	rsb	r3, r5, r9
 8002628:	2b0f      	cmp	r3, #15
 800262a:	f300 8091 	bgt.w	8002750 <_malloc_r+0x30c>
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <_malloc_r+0x330>)
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <_malloc_r+0x334>)
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	eb05 0a01 	add.w	sl, r5, r1
 800263c:	eb04 0b09 	add.w	fp, r4, r9
 8002640:	f000 8161 	beq.w	8002906 <_malloc_r+0x4c2>
 8002644:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 8002648:	f10a 0a0f 	add.w	sl, sl, #15
 800264c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 8002650:	f02a 0a0f 	bic.w	sl, sl, #15
 8002654:	4630      	mov	r0, r6
 8002656:	4651      	mov	r1, sl
 8002658:	9201      	str	r2, [sp, #4]
 800265a:	f000 fa8b 	bl	8002b74 <_sbrk_r>
 800265e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002662:	4680      	mov	r8, r0
 8002664:	9a01      	ldr	r2, [sp, #4]
 8002666:	f000 8100 	beq.w	800286a <_malloc_r+0x426>
 800266a:	4583      	cmp	fp, r0
 800266c:	f200 80fa 	bhi.w	8002864 <_malloc_r+0x420>
 8002670:	f8df c110 	ldr.w	ip, [pc, #272]	; 8002784 <_malloc_r+0x340>
 8002674:	f8dc 3000 	ldr.w	r3, [ip]
 8002678:	45c3      	cmp	fp, r8
 800267a:	4453      	add	r3, sl
 800267c:	f8cc 3000 	str.w	r3, [ip]
 8002680:	f000 814a 	beq.w	8002918 <_malloc_r+0x4d4>
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	493c      	ldr	r1, [pc, #240]	; (8002778 <_malloc_r+0x334>)
 8002688:	3201      	adds	r2, #1
 800268a:	bf1b      	ittet	ne
 800268c:	ebcb 0b08 	rsbne	fp, fp, r8
 8002690:	445b      	addne	r3, fp
 8002692:	f8c1 8000 	streq.w	r8, [r1]
 8002696:	f8cc 3000 	strne.w	r3, [ip]
 800269a:	f018 0307 	ands.w	r3, r8, #7
 800269e:	f000 8113 	beq.w	80028c8 <_malloc_r+0x484>
 80026a2:	f1c3 0208 	rsb	r2, r3, #8
 80026a6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80026aa:	4490      	add	r8, r2
 80026ac:	3308      	adds	r3, #8
 80026ae:	44c2      	add	sl, r8
 80026b0:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 80026b4:	ebca 0a03 	rsb	sl, sl, r3
 80026b8:	4651      	mov	r1, sl
 80026ba:	4630      	mov	r0, r6
 80026bc:	f8cd c004 	str.w	ip, [sp, #4]
 80026c0:	f000 fa58 	bl	8002b74 <_sbrk_r>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80026ca:	f000 8135 	beq.w	8002938 <_malloc_r+0x4f4>
 80026ce:	ebc8 0200 	rsb	r2, r8, r0
 80026d2:	4452      	add	r2, sl
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	f8dc 3000 	ldr.w	r3, [ip]
 80026dc:	f8c7 8008 	str.w	r8, [r7, #8]
 80026e0:	4453      	add	r3, sl
 80026e2:	42bc      	cmp	r4, r7
 80026e4:	f8c8 2004 	str.w	r2, [r8, #4]
 80026e8:	f8cc 3000 	str.w	r3, [ip]
 80026ec:	f8df a094 	ldr.w	sl, [pc, #148]	; 8002784 <_malloc_r+0x340>
 80026f0:	d015      	beq.n	800271e <_malloc_r+0x2da>
 80026f2:	f1b9 0f0f 	cmp.w	r9, #15
 80026f6:	f240 80ea 	bls.w	80028ce <_malloc_r+0x48a>
 80026fa:	6861      	ldr	r1, [r4, #4]
 80026fc:	f1a9 020c 	sub.w	r2, r9, #12
 8002700:	f022 0207 	bic.w	r2, r2, #7
 8002704:	f001 0e01 	and.w	lr, r1, #1
 8002708:	18a1      	adds	r1, r4, r2
 800270a:	2005      	movs	r0, #5
 800270c:	ea42 0e0e 	orr.w	lr, r2, lr
 8002710:	2a0f      	cmp	r2, #15
 8002712:	f8c4 e004 	str.w	lr, [r4, #4]
 8002716:	6048      	str	r0, [r1, #4]
 8002718:	6088      	str	r0, [r1, #8]
 800271a:	f200 8111 	bhi.w	8002940 <_malloc_r+0x4fc>
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <_malloc_r+0x338>)
 8002720:	68bc      	ldr	r4, [r7, #8]
 8002722:	6811      	ldr	r1, [r2, #0]
 8002724:	428b      	cmp	r3, r1
 8002726:	bf88      	it	hi
 8002728:	6013      	strhi	r3, [r2, #0]
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <_malloc_r+0x33c>)
 800272c:	6811      	ldr	r1, [r2, #0]
 800272e:	428b      	cmp	r3, r1
 8002730:	bf88      	it	hi
 8002732:	6013      	strhi	r3, [r2, #0]
 8002734:	6862      	ldr	r2, [r4, #4]
 8002736:	f022 0203 	bic.w	r2, r2, #3
 800273a:	4295      	cmp	r5, r2
 800273c:	ebc5 0302 	rsb	r3, r5, r2
 8002740:	d801      	bhi.n	8002746 <_malloc_r+0x302>
 8002742:	2b0f      	cmp	r3, #15
 8002744:	dc04      	bgt.n	8002750 <_malloc_r+0x30c>
 8002746:	4630      	mov	r0, r6
 8002748:	f000 f9fe 	bl	8002b48 <__malloc_unlock>
 800274c:	2400      	movs	r4, #0
 800274e:	e6a5      	b.n	800249c <_malloc_r+0x58>
 8002750:	1962      	adds	r2, r4, r5
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	f045 0501 	orr.w	r5, r5, #1
 800275a:	6065      	str	r5, [r4, #4]
 800275c:	4630      	mov	r0, r6
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	6053      	str	r3, [r2, #4]
 8002762:	f000 f9f1 	bl	8002b48 <__malloc_unlock>
 8002766:	3408      	adds	r4, #8
 8002768:	4620      	mov	r0, r4
 800276a:	b003      	add	sp, #12
 800276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002770:	2000045c 	.word	0x2000045c
 8002774:	20008afc 	.word	0x20008afc
 8002778:	20000868 	.word	0x20000868
 800277c:	20008af8 	.word	0x20008af8
 8002780:	20008af4 	.word	0x20008af4
 8002784:	20008b00 	.word	0x20008b00
 8002788:	f1bc 0f14 	cmp.w	ip, #20
 800278c:	d961      	bls.n	8002852 <_malloc_r+0x40e>
 800278e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8002792:	f200 808f 	bhi.w	80028b4 <_malloc_r+0x470>
 8002796:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 800279a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 800279e:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80027a2:	e697      	b.n	80024d4 <_malloc_r+0x90>
 80027a4:	0a4b      	lsrs	r3, r1, #9
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d958      	bls.n	800285c <_malloc_r+0x418>
 80027aa:	2b14      	cmp	r3, #20
 80027ac:	f200 80ae 	bhi.w	800290c <_malloc_r+0x4c8>
 80027b0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80027b4:	0050      	lsls	r0, r2, #1
 80027b6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80027ba:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002978 <_malloc_r+0x534>
 80027be:	6883      	ldr	r3, [r0, #8]
 80027c0:	4283      	cmp	r3, r0
 80027c2:	f000 808a 	beq.w	80028da <_malloc_r+0x496>
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	f022 0203 	bic.w	r2, r2, #3
 80027cc:	4291      	cmp	r1, r2
 80027ce:	d202      	bcs.n	80027d6 <_malloc_r+0x392>
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4298      	cmp	r0, r3
 80027d4:	d1f7      	bne.n	80027c6 <_malloc_r+0x382>
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60e1      	str	r1, [r4, #12]
 80027dc:	60a3      	str	r3, [r4, #8]
 80027de:	608c      	str	r4, [r1, #8]
 80027e0:	60dc      	str	r4, [r3, #12]
 80027e2:	e6b7      	b.n	8002554 <_malloc_r+0x110>
 80027e4:	1961      	adds	r1, r4, r5
 80027e6:	f042 0701 	orr.w	r7, r2, #1
 80027ea:	f045 0501 	orr.w	r5, r5, #1
 80027ee:	6065      	str	r5, [r4, #4]
 80027f0:	4630      	mov	r0, r6
 80027f2:	6159      	str	r1, [r3, #20]
 80027f4:	6119      	str	r1, [r3, #16]
 80027f6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80027fa:	f8c1 e008 	str.w	lr, [r1, #8]
 80027fe:	604f      	str	r7, [r1, #4]
 8002800:	508a      	str	r2, [r1, r2]
 8002802:	3408      	adds	r4, #8
 8002804:	f000 f9a0 	bl	8002b48 <__malloc_unlock>
 8002808:	e648      	b.n	800249c <_malloc_r+0x58>
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	e6a2      	b.n	8002554 <_malloc_r+0x110>
 800280e:	f109 0901 	add.w	r9, r9, #1
 8002812:	f019 0f03 	tst.w	r9, #3
 8002816:	f104 0408 	add.w	r4, r4, #8
 800281a:	f47f aeae 	bne.w	800257a <_malloc_r+0x136>
 800281e:	e02d      	b.n	800287c <_malloc_r+0x438>
 8002820:	f104 0308 	add.w	r3, r4, #8
 8002824:	6964      	ldr	r4, [r4, #20]
 8002826:	42a3      	cmp	r3, r4
 8002828:	bf08      	it	eq
 800282a:	f10c 0c02 	addeq.w	ip, ip, #2
 800282e:	f43f ae67 	beq.w	8002500 <_malloc_r+0xbc>
 8002832:	e623      	b.n	800247c <_malloc_r+0x38>
 8002834:	4419      	add	r1, r3
 8002836:	461c      	mov	r4, r3
 8002838:	6848      	ldr	r0, [r1, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8002840:	f040 0501 	orr.w	r5, r0, #1
 8002844:	604d      	str	r5, [r1, #4]
 8002846:	4630      	mov	r0, r6
 8002848:	60d3      	str	r3, [r2, #12]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	f000 f97c 	bl	8002b48 <__malloc_unlock>
 8002850:	e624      	b.n	800249c <_malloc_r+0x58>
 8002852:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 8002856:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800285a:	e63b      	b.n	80024d4 <_malloc_r+0x90>
 800285c:	098a      	lsrs	r2, r1, #6
 800285e:	3238      	adds	r2, #56	; 0x38
 8002860:	0050      	lsls	r0, r2, #1
 8002862:	e7a8      	b.n	80027b6 <_malloc_r+0x372>
 8002864:	42bc      	cmp	r4, r7
 8002866:	f43f af03 	beq.w	8002670 <_malloc_r+0x22c>
 800286a:	68bc      	ldr	r4, [r7, #8]
 800286c:	6862      	ldr	r2, [r4, #4]
 800286e:	f022 0203 	bic.w	r2, r2, #3
 8002872:	e762      	b.n	800273a <_malloc_r+0x2f6>
 8002874:	f8d8 8000 	ldr.w	r8, [r8]
 8002878:	4598      	cmp	r8, r3
 800287a:	d17b      	bne.n	8002974 <_malloc_r+0x530>
 800287c:	f01c 0f03 	tst.w	ip, #3
 8002880:	f1a8 0308 	sub.w	r3, r8, #8
 8002884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002888:	d1f4      	bne.n	8002874 <_malloc_r+0x430>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	ea23 0300 	bic.w	r3, r3, r0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	0040      	lsls	r0, r0, #1
 8002894:	4298      	cmp	r0, r3
 8002896:	f63f aebf 	bhi.w	8002618 <_malloc_r+0x1d4>
 800289a:	2800      	cmp	r0, #0
 800289c:	f43f aebc 	beq.w	8002618 <_malloc_r+0x1d4>
 80028a0:	4203      	tst	r3, r0
 80028a2:	46cc      	mov	ip, r9
 80028a4:	f47f ae65 	bne.w	8002572 <_malloc_r+0x12e>
 80028a8:	0040      	lsls	r0, r0, #1
 80028aa:	4203      	tst	r3, r0
 80028ac:	f10c 0c04 	add.w	ip, ip, #4
 80028b0:	d0fa      	beq.n	80028a8 <_malloc_r+0x464>
 80028b2:	e65e      	b.n	8002572 <_malloc_r+0x12e>
 80028b4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80028b8:	d81a      	bhi.n	80028f0 <_malloc_r+0x4ac>
 80028ba:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 80028be:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80028c2:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80028c6:	e605      	b.n	80024d4 <_malloc_r+0x90>
 80028c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028cc:	e6ef      	b.n	80026ae <_malloc_r+0x26a>
 80028ce:	2301      	movs	r3, #1
 80028d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80028d4:	4644      	mov	r4, r8
 80028d6:	2200      	movs	r2, #0
 80028d8:	e72f      	b.n	800273a <_malloc_r+0x2f6>
 80028da:	1091      	asrs	r1, r2, #2
 80028dc:	2001      	movs	r0, #1
 80028de:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80028e2:	fa00 f101 	lsl.w	r1, r0, r1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	f8c8 2004 	str.w	r2, [r8, #4]
 80028ec:	4619      	mov	r1, r3
 80028ee:	e774      	b.n	80027da <_malloc_r+0x396>
 80028f0:	f240 5354 	movw	r3, #1364	; 0x554
 80028f4:	459c      	cmp	ip, r3
 80028f6:	d81b      	bhi.n	8002930 <_malloc_r+0x4ec>
 80028f8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 80028fc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8002900:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8002904:	e5e6      	b.n	80024d4 <_malloc_r+0x90>
 8002906:	f10a 0a10 	add.w	sl, sl, #16
 800290a:	e6a3      	b.n	8002654 <_malloc_r+0x210>
 800290c:	2b54      	cmp	r3, #84	; 0x54
 800290e:	d81f      	bhi.n	8002950 <_malloc_r+0x50c>
 8002910:	0b0a      	lsrs	r2, r1, #12
 8002912:	326e      	adds	r2, #110	; 0x6e
 8002914:	0050      	lsls	r0, r2, #1
 8002916:	e74e      	b.n	80027b6 <_malloc_r+0x372>
 8002918:	f3cb 010b 	ubfx	r1, fp, #0, #12
 800291c:	2900      	cmp	r1, #0
 800291e:	f47f aeb1 	bne.w	8002684 <_malloc_r+0x240>
 8002922:	eb0a 0109 	add.w	r1, sl, r9
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	f041 0101 	orr.w	r1, r1, #1
 800292c:	6051      	str	r1, [r2, #4]
 800292e:	e6f6      	b.n	800271e <_malloc_r+0x2da>
 8002930:	21fc      	movs	r1, #252	; 0xfc
 8002932:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8002936:	e5cd      	b.n	80024d4 <_malloc_r+0x90>
 8002938:	2201      	movs	r2, #1
 800293a:	f04f 0a00 	mov.w	sl, #0
 800293e:	e6cb      	b.n	80026d8 <_malloc_r+0x294>
 8002940:	f104 0108 	add.w	r1, r4, #8
 8002944:	4630      	mov	r0, r6
 8002946:	f002 ff7d 	bl	8005844 <_free_r>
 800294a:	f8da 3000 	ldr.w	r3, [sl]
 800294e:	e6e6      	b.n	800271e <_malloc_r+0x2da>
 8002950:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002954:	d803      	bhi.n	800295e <_malloc_r+0x51a>
 8002956:	0bca      	lsrs	r2, r1, #15
 8002958:	3277      	adds	r2, #119	; 0x77
 800295a:	0050      	lsls	r0, r2, #1
 800295c:	e72b      	b.n	80027b6 <_malloc_r+0x372>
 800295e:	f240 5254 	movw	r2, #1364	; 0x554
 8002962:	4293      	cmp	r3, r2
 8002964:	d803      	bhi.n	800296e <_malloc_r+0x52a>
 8002966:	0c8a      	lsrs	r2, r1, #18
 8002968:	327c      	adds	r2, #124	; 0x7c
 800296a:	0050      	lsls	r0, r2, #1
 800296c:	e723      	b.n	80027b6 <_malloc_r+0x372>
 800296e:	20fc      	movs	r0, #252	; 0xfc
 8002970:	227e      	movs	r2, #126	; 0x7e
 8002972:	e720      	b.n	80027b6 <_malloc_r+0x372>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	e78c      	b.n	8002892 <_malloc_r+0x44e>
 8002978:	2000045c 	.word	0x2000045c

0800297c <memcpy>:
 800297c:	4684      	mov	ip, r0
 800297e:	ea41 0300 	orr.w	r3, r1, r0
 8002982:	f013 0303 	ands.w	r3, r3, #3
 8002986:	d16d      	bne.n	8002a64 <memcpy+0xe8>
 8002988:	3a40      	subs	r2, #64	; 0x40
 800298a:	d341      	bcc.n	8002a10 <memcpy+0x94>
 800298c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002990:	f840 3b04 	str.w	r3, [r0], #4
 8002994:	f851 3b04 	ldr.w	r3, [r1], #4
 8002998:	f840 3b04 	str.w	r3, [r0], #4
 800299c:	f851 3b04 	ldr.w	r3, [r1], #4
 80029a0:	f840 3b04 	str.w	r3, [r0], #4
 80029a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029a8:	f840 3b04 	str.w	r3, [r0], #4
 80029ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80029b0:	f840 3b04 	str.w	r3, [r0], #4
 80029b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029b8:	f840 3b04 	str.w	r3, [r0], #4
 80029bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80029c0:	f840 3b04 	str.w	r3, [r0], #4
 80029c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029c8:	f840 3b04 	str.w	r3, [r0], #4
 80029cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80029d0:	f840 3b04 	str.w	r3, [r0], #4
 80029d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029d8:	f840 3b04 	str.w	r3, [r0], #4
 80029dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80029e0:	f840 3b04 	str.w	r3, [r0], #4
 80029e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029e8:	f840 3b04 	str.w	r3, [r0], #4
 80029ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80029f0:	f840 3b04 	str.w	r3, [r0], #4
 80029f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80029f8:	f840 3b04 	str.w	r3, [r0], #4
 80029fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a00:	f840 3b04 	str.w	r3, [r0], #4
 8002a04:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a08:	f840 3b04 	str.w	r3, [r0], #4
 8002a0c:	3a40      	subs	r2, #64	; 0x40
 8002a0e:	d2bd      	bcs.n	800298c <memcpy+0x10>
 8002a10:	3230      	adds	r2, #48	; 0x30
 8002a12:	d311      	bcc.n	8002a38 <memcpy+0xbc>
 8002a14:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a18:	f840 3b04 	str.w	r3, [r0], #4
 8002a1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a20:	f840 3b04 	str.w	r3, [r0], #4
 8002a24:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a28:	f840 3b04 	str.w	r3, [r0], #4
 8002a2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a30:	f840 3b04 	str.w	r3, [r0], #4
 8002a34:	3a10      	subs	r2, #16
 8002a36:	d2ed      	bcs.n	8002a14 <memcpy+0x98>
 8002a38:	320c      	adds	r2, #12
 8002a3a:	d305      	bcc.n	8002a48 <memcpy+0xcc>
 8002a3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a40:	f840 3b04 	str.w	r3, [r0], #4
 8002a44:	3a04      	subs	r2, #4
 8002a46:	d2f9      	bcs.n	8002a3c <memcpy+0xc0>
 8002a48:	3204      	adds	r2, #4
 8002a4a:	d008      	beq.n	8002a5e <memcpy+0xe2>
 8002a4c:	07d2      	lsls	r2, r2, #31
 8002a4e:	bf1c      	itt	ne
 8002a50:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002a54:	f800 3b01 	strbne.w	r3, [r0], #1
 8002a58:	d301      	bcc.n	8002a5e <memcpy+0xe2>
 8002a5a:	880b      	ldrh	r3, [r1, #0]
 8002a5c:	8003      	strh	r3, [r0, #0]
 8002a5e:	4660      	mov	r0, ip
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2a08      	cmp	r2, #8
 8002a66:	d313      	bcc.n	8002a90 <memcpy+0x114>
 8002a68:	078b      	lsls	r3, r1, #30
 8002a6a:	d08d      	beq.n	8002988 <memcpy+0xc>
 8002a6c:	f010 0303 	ands.w	r3, r0, #3
 8002a70:	d08a      	beq.n	8002988 <memcpy+0xc>
 8002a72:	f1c3 0304 	rsb	r3, r3, #4
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	07db      	lsls	r3, r3, #31
 8002a7a:	bf1c      	itt	ne
 8002a7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002a80:	f800 3b01 	strbne.w	r3, [r0], #1
 8002a84:	d380      	bcc.n	8002988 <memcpy+0xc>
 8002a86:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002a8a:	f820 3b02 	strh.w	r3, [r0], #2
 8002a8e:	e77b      	b.n	8002988 <memcpy+0xc>
 8002a90:	3a04      	subs	r2, #4
 8002a92:	d3d9      	bcc.n	8002a48 <memcpy+0xcc>
 8002a94:	3a01      	subs	r2, #1
 8002a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a9a:	f800 3b01 	strb.w	r3, [r0], #1
 8002a9e:	d2f9      	bcs.n	8002a94 <memcpy+0x118>
 8002aa0:	780b      	ldrb	r3, [r1, #0]
 8002aa2:	7003      	strb	r3, [r0, #0]
 8002aa4:	784b      	ldrb	r3, [r1, #1]
 8002aa6:	7043      	strb	r3, [r0, #1]
 8002aa8:	788b      	ldrb	r3, [r1, #2]
 8002aaa:	7083      	strb	r3, [r0, #2]
 8002aac:	4660      	mov	r0, ip
 8002aae:	4770      	bx	lr

08002ab0 <memset>:
 8002ab0:	b4f0      	push	{r4, r5, r6, r7}
 8002ab2:	0784      	lsls	r4, r0, #30
 8002ab4:	d043      	beq.n	8002b3e <memset+0x8e>
 8002ab6:	1e54      	subs	r4, r2, #1
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d03e      	beq.n	8002b3a <memset+0x8a>
 8002abc:	b2cd      	uxtb	r5, r1
 8002abe:	4603      	mov	r3, r0
 8002ac0:	e003      	b.n	8002aca <memset+0x1a>
 8002ac2:	1e62      	subs	r2, r4, #1
 8002ac4:	2c00      	cmp	r4, #0
 8002ac6:	d038      	beq.n	8002b3a <memset+0x8a>
 8002ac8:	4614      	mov	r4, r2
 8002aca:	f803 5b01 	strb.w	r5, [r3], #1
 8002ace:	079a      	lsls	r2, r3, #30
 8002ad0:	d1f7      	bne.n	8002ac2 <memset+0x12>
 8002ad2:	2c03      	cmp	r4, #3
 8002ad4:	d92a      	bls.n	8002b2c <memset+0x7c>
 8002ad6:	b2cd      	uxtb	r5, r1
 8002ad8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002adc:	2c0f      	cmp	r4, #15
 8002ade:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002ae2:	d915      	bls.n	8002b10 <memset+0x60>
 8002ae4:	f1a4 0710 	sub.w	r7, r4, #16
 8002ae8:	093f      	lsrs	r7, r7, #4
 8002aea:	f103 0610 	add.w	r6, r3, #16
 8002aee:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8002af2:	461a      	mov	r2, r3
 8002af4:	6015      	str	r5, [r2, #0]
 8002af6:	6055      	str	r5, [r2, #4]
 8002af8:	6095      	str	r5, [r2, #8]
 8002afa:	60d5      	str	r5, [r2, #12]
 8002afc:	3210      	adds	r2, #16
 8002afe:	42b2      	cmp	r2, r6
 8002b00:	d1f8      	bne.n	8002af4 <memset+0x44>
 8002b02:	f004 040f 	and.w	r4, r4, #15
 8002b06:	3701      	adds	r7, #1
 8002b08:	2c03      	cmp	r4, #3
 8002b0a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8002b0e:	d90d      	bls.n	8002b2c <memset+0x7c>
 8002b10:	461e      	mov	r6, r3
 8002b12:	4622      	mov	r2, r4
 8002b14:	3a04      	subs	r2, #4
 8002b16:	2a03      	cmp	r2, #3
 8002b18:	f846 5b04 	str.w	r5, [r6], #4
 8002b1c:	d8fa      	bhi.n	8002b14 <memset+0x64>
 8002b1e:	1f22      	subs	r2, r4, #4
 8002b20:	f022 0203 	bic.w	r2, r2, #3
 8002b24:	3204      	adds	r2, #4
 8002b26:	4413      	add	r3, r2
 8002b28:	f004 0403 	and.w	r4, r4, #3
 8002b2c:	b12c      	cbz	r4, 8002b3a <memset+0x8a>
 8002b2e:	b2c9      	uxtb	r1, r1
 8002b30:	441c      	add	r4, r3
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	42a3      	cmp	r3, r4
 8002b38:	d1fb      	bne.n	8002b32 <memset+0x82>
 8002b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	4614      	mov	r4, r2
 8002b40:	4603      	mov	r3, r0
 8002b42:	e7c6      	b.n	8002ad2 <memset+0x22>

08002b44 <__malloc_lock>:
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop

08002b48 <__malloc_unlock>:
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <printf>:
 8002b4c:	b40f      	push	{r0, r1, r2, r3}
 8002b4e:	b500      	push	{lr}
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <printf+0x24>)
 8002b52:	b083      	sub	sp, #12
 8002b54:	ab04      	add	r3, sp, #16
 8002b56:	6810      	ldr	r0, [r2, #0]
 8002b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b5c:	6881      	ldr	r1, [r0, #8]
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	f000 f9f2 	bl	8002f48 <_vfprintf_r>
 8002b64:	b003      	add	sp, #12
 8002b66:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b6a:	b004      	add	sp, #16
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000458 	.word	0x20000458

08002b74 <_sbrk_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4c07      	ldr	r4, [pc, #28]	; (8002b94 <_sbrk_r+0x20>)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	f7fd fe94 	bl	80008ac <_sbrk>
 8002b84:	1c43      	adds	r3, r0, #1
 8002b86:	d000      	beq.n	8002b8a <_sbrk_r+0x16>
 8002b88:	bd38      	pop	{r3, r4, r5, pc}
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0fb      	beq.n	8002b88 <_sbrk_r+0x14>
 8002b90:	602b      	str	r3, [r5, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	20008b28 	.word	0x20008b28

08002b98 <_raise_r>:
 8002b98:	291f      	cmp	r1, #31
 8002b9a:	b538      	push	{r3, r4, r5, lr}
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	d820      	bhi.n	8002be4 <_raise_r+0x4c>
 8002ba2:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8002ba6:	b19a      	cbz	r2, 8002bd0 <_raise_r+0x38>
 8002ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002bac:	b183      	cbz	r3, 8002bd0 <_raise_r+0x38>
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d00c      	beq.n	8002bcc <_raise_r+0x34>
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	d006      	beq.n	8002bc4 <_raise_r+0x2c>
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8002bbe:	4798      	blx	r3
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	2316      	movs	r3, #22
 8002bc6:	6003      	str	r3, [r0, #0]
 8002bc8:	2001      	movs	r0, #1
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	2000      	movs	r0, #0
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f000 f829 	bl	8002c28 <_getpid_r>
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4601      	mov	r1, r0
 8002bda:	4628      	mov	r0, r5
 8002bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be0:	f000 b80e 	b.w	8002c00 <_kill_r>
 8002be4:	2316      	movs	r3, #22
 8002be6:	6003      	str	r3, [r0, #0]
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
 8002bee:	bf00      	nop

08002bf0 <raise>:
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <raise+0xc>)
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	f7ff bfcf 	b.w	8002b98 <_raise_r>
 8002bfa:	bf00      	nop
 8002bfc:	20000458 	.word	0x20000458

08002c00 <_kill_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4c08      	ldr	r4, [pc, #32]	; (8002c24 <_kill_r+0x24>)
 8002c04:	2300      	movs	r3, #0
 8002c06:	4605      	mov	r5, r0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	f004 f86d 	bl	8006cec <_kill>
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d000      	beq.n	8002c18 <_kill_r+0x18>
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0fb      	beq.n	8002c16 <_kill_r+0x16>
 8002c1e:	602b      	str	r3, [r5, #0]
 8002c20:	bd38      	pop	{r3, r4, r5, pc}
 8002c22:	bf00      	nop
 8002c24:	20008b28 	.word	0x20008b28

08002c28 <_getpid_r>:
 8002c28:	f004 b850 	b.w	8006ccc <_getpid>

08002c2c <__sread>:
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	460c      	mov	r4, r1
 8002c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c34:	f003 fab4 	bl	80061a0 <_read_r>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	db03      	blt.n	8002c44 <__sread+0x18>
 8002c3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c3e:	4403      	add	r3, r0
 8002c40:	6523      	str	r3, [r4, #80]	; 0x50
 8002c42:	bd10      	pop	{r4, pc}
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c4a:	81a3      	strh	r3, [r4, #12]
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop

08002c50 <__swrite>:
 8002c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c54:	460c      	mov	r4, r1
 8002c56:	8989      	ldrh	r1, [r1, #12]
 8002c58:	461d      	mov	r5, r3
 8002c5a:	05cb      	lsls	r3, r1, #23
 8002c5c:	4616      	mov	r6, r2
 8002c5e:	4607      	mov	r7, r0
 8002c60:	d506      	bpl.n	8002c70 <__swrite+0x20>
 8002c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f002 fec7 	bl	80059fc <_lseek_r>
 8002c6e:	89a1      	ldrh	r1, [r4, #12]
 8002c70:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002c74:	81a1      	strh	r1, [r4, #12]
 8002c76:	4638      	mov	r0, r7
 8002c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	462b      	mov	r3, r5
 8002c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c84:	f001 bc3c 	b.w	8004500 <_write_r>

08002c88 <__sseek>:
 8002c88:	b510      	push	{r4, lr}
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c90:	f002 feb4 	bl	80059fc <_lseek_r>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	1c42      	adds	r2, r0, #1
 8002c98:	bf0e      	itee	eq
 8002c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ca2:	6520      	strne	r0, [r4, #80]	; 0x50
 8002ca4:	81a3      	strh	r3, [r4, #12]
 8002ca6:	bd10      	pop	{r4, pc}

08002ca8 <__sclose>:
 8002ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cac:	f001 bc9e 	b.w	80045ec <_close_r>

08002cb0 <strcmp>:
 8002cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8002cb4:	f01c 0f07 	tst.w	ip, #7
 8002cb8:	d123      	bne.n	8002d02 <strcmp+0x52>
 8002cba:	f1bd 0d10 	subs.w	sp, sp, #16
 8002cbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002cc2:	e9cd 6700 	strd	r6, r7, [sp]
 8002cc6:	f06f 0600 	mvn.w	r6, #0
 8002cca:	f04f 0700 	mov.w	r7, #0
 8002cce:	bf00      	nop
 8002cd0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cd4:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002cd8:	42a2      	cmp	r2, r4
 8002cda:	fa82 fc46 	uadd8	ip, r2, r6
 8002cde:	faa7 fc86 	sel	ip, r7, r6
 8002ce2:	bf08      	it	eq
 8002ce4:	f1bc 0f00 	cmpeq.w	ip, #0
 8002ce8:	f040 80d7 	bne.w	8002e9a <strcmp+0x1ea>
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	fa83 fc46 	uadd8	ip, r3, r6
 8002cf2:	faa7 fc86 	sel	ip, r7, r6
 8002cf6:	bf08      	it	eq
 8002cf8:	f1bc 0f00 	cmpeq.w	ip, #0
 8002cfc:	f040 80ca 	bne.w	8002e94 <strcmp+0x1e4>
 8002d00:	e7e6      	b.n	8002cd0 <strcmp+0x20>
 8002d02:	f010 0c03 	ands.w	ip, r0, #3
 8002d06:	d021      	beq.n	8002d4c <strcmp+0x9c>
 8002d08:	f020 0003 	bic.w	r0, r0, #3
 8002d0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002d10:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 8002d14:	d008      	beq.n	8002d28 <strcmp+0x78>
 8002d16:	d20f      	bcs.n	8002d38 <strcmp+0x88>
 8002d18:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002d1c:	fa5f f392 	uxtb.w	r3, r2, ror #8
 8002d20:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002d24:	d110      	bne.n	8002d48 <strcmp+0x98>
 8002d26:	b17b      	cbz	r3, 8002d48 <strcmp+0x98>
 8002d28:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002d2c:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 8002d30:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002d34:	d108      	bne.n	8002d48 <strcmp+0x98>
 8002d36:	b13b      	cbz	r3, 8002d48 <strcmp+0x98>
 8002d38:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002d3c:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 8002d40:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002d44:	d100      	bne.n	8002d48 <strcmp+0x98>
 8002d46:	b90b      	cbnz	r3, 8002d4c <strcmp+0x9c>
 8002d48:	4660      	mov	r0, ip
 8002d4a:	4770      	bx	lr
 8002d4c:	f1bd 0d10 	subs.w	sp, sp, #16
 8002d50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d54:	e9cd 6700 	strd	r6, r7, [sp]
 8002d58:	f06f 0600 	mvn.w	r6, #0
 8002d5c:	f04f 0700 	mov.w	r7, #0
 8002d60:	f011 0c03 	ands.w	ip, r1, #3
 8002d64:	d12d      	bne.n	8002dc2 <strcmp+0x112>
 8002d66:	f010 0f04 	tst.w	r0, #4
 8002d6a:	d00d      	beq.n	8002d88 <strcmp+0xd8>
 8002d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002d70:	f851 4b04 	ldr.w	r4, [r1], #4
 8002d74:	42a2      	cmp	r2, r4
 8002d76:	fa82 fc46 	uadd8	ip, r2, r6
 8002d7a:	faa7 fc86 	sel	ip, r7, r6
 8002d7e:	bf08      	it	eq
 8002d80:	f1bc 0f00 	cmpeq.w	ip, #0
 8002d84:	f040 8089 	bne.w	8002e9a <strcmp+0x1ea>
 8002d88:	f011 0f04 	tst.w	r1, #4
 8002d8c:	d09f      	beq.n	8002cce <strcmp+0x1e>
 8002d8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d92:	bf00      	nop
 8002d94:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002d98:	42aa      	cmp	r2, r5
 8002d9a:	fa82 fc46 	uadd8	ip, r2, r6
 8002d9e:	faa7 fc86 	sel	ip, r7, r6
 8002da2:	bf08      	it	eq
 8002da4:	f1bc 0f00 	cmpeq.w	ip, #0
 8002da8:	d171      	bne.n	8002e8e <strcmp+0x1de>
 8002daa:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002dae:	42a3      	cmp	r3, r4
 8002db0:	fa83 fc46 	uadd8	ip, r3, r6
 8002db4:	faa7 fc86 	sel	ip, r7, r6
 8002db8:	bf08      	it	eq
 8002dba:	f1bc 0f00 	cmpeq.w	ip, #0
 8002dbe:	d163      	bne.n	8002e88 <strcmp+0x1d8>
 8002dc0:	e7e8      	b.n	8002d94 <strcmp+0xe4>
 8002dc2:	f021 0103 	bic.w	r1, r1, #3
 8002dc6:	f1bc 0f02 	cmp.w	ip, #2
 8002dca:	d01e      	beq.n	8002e0a <strcmp+0x15a>
 8002dcc:	da3b      	bge.n	8002e46 <strcmp+0x196>
 8002dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dd2:	bf00      	nop
 8002dd4:	f850 3b04 	ldr.w	r3, [r0], #4
 8002dd8:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8002ddc:	fa83 fc46 	uadd8	ip, r3, r6
 8002de0:	faa7 fc86 	sel	ip, r7, r6
 8002de4:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 8002de8:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 8002dec:	bf08      	it	eq
 8002dee:	42aa      	cmpeq	r2, r5
 8002df0:	d14d      	bne.n	8002e8e <strcmp+0x1de>
 8002df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002df6:	f1bc 0f00 	cmp.w	ip, #0
 8002dfa:	ea82 0303 	eor.w	r3, r2, r3
 8002dfe:	ea4f 6205 	mov.w	r2, r5, lsl #24
 8002e02:	bf08      	it	eq
 8002e04:	4293      	cmpeq	r3, r2
 8002e06:	d13c      	bne.n	8002e82 <strcmp+0x1d2>
 8002e08:	e7e4      	b.n	8002dd4 <strcmp+0x124>
 8002e0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e0e:	bf00      	nop
 8002e10:	f850 3b04 	ldr.w	r3, [r0], #4
 8002e14:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8002e18:	fa83 fc46 	uadd8	ip, r3, r6
 8002e1c:	faa7 fc86 	sel	ip, r7, r6
 8002e20:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 8002e24:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 8002e28:	bf08      	it	eq
 8002e2a:	42aa      	cmpeq	r2, r5
 8002e2c:	d12f      	bne.n	8002e8e <strcmp+0x1de>
 8002e2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e32:	f1bc 0f00 	cmp.w	ip, #0
 8002e36:	ea82 0303 	eor.w	r3, r2, r3
 8002e3a:	ea4f 4205 	mov.w	r2, r5, lsl #16
 8002e3e:	bf08      	it	eq
 8002e40:	4293      	cmpeq	r3, r2
 8002e42:	d11e      	bne.n	8002e82 <strcmp+0x1d2>
 8002e44:	e7e4      	b.n	8002e10 <strcmp+0x160>
 8002e46:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e4a:	bf00      	nop
 8002e4c:	f850 3b04 	ldr.w	r3, [r0], #4
 8002e50:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8002e54:	fa83 fc46 	uadd8	ip, r3, r6
 8002e58:	faa7 fc86 	sel	ip, r7, r6
 8002e5c:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 8002e60:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 8002e64:	bf08      	it	eq
 8002e66:	42aa      	cmpeq	r2, r5
 8002e68:	d111      	bne.n	8002e8e <strcmp+0x1de>
 8002e6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e6e:	f1bc 0f00 	cmp.w	ip, #0
 8002e72:	ea82 0303 	eor.w	r3, r2, r3
 8002e76:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8002e7a:	bf08      	it	eq
 8002e7c:	4293      	cmpeq	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <strcmp+0x1d2>
 8002e80:	e7e4      	b.n	8002e4c <strcmp+0x19c>
 8002e82:	ba19      	rev	r1, r3
 8002e84:	ba12      	rev	r2, r2
 8002e86:	e00a      	b.n	8002e9e <strcmp+0x1ee>
 8002e88:	ba19      	rev	r1, r3
 8002e8a:	ba22      	rev	r2, r4
 8002e8c:	e007      	b.n	8002e9e <strcmp+0x1ee>
 8002e8e:	ba11      	rev	r1, r2
 8002e90:	ba2a      	rev	r2, r5
 8002e92:	e004      	b.n	8002e9e <strcmp+0x1ee>
 8002e94:	ba19      	rev	r1, r3
 8002e96:	ba2a      	rev	r2, r5
 8002e98:	e001      	b.n	8002e9e <strcmp+0x1ee>
 8002e9a:	ba11      	rev	r1, r2
 8002e9c:	ba22      	rev	r2, r4
 8002e9e:	fa9c f08c 	rev.w	r0, ip
 8002ea2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002ea6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002eaa:	f11d 0d10 	adds.w	sp, sp, #16
 8002eae:	b138      	cbz	r0, 8002ec0 <strcmp+0x210>
 8002eb0:	fab0 f080 	clz	r0, r0
 8002eb4:	f1c0 0018 	rsb	r0, r0, #24
 8002eb8:	fa21 f100 	lsr.w	r1, r1, r0
 8002ebc:	fa22 f200 	lsr.w	r2, r2, r0
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	4291      	cmp	r1, r2
 8002ec4:	bf98      	it	ls
 8002ec6:	4180      	sbcls	r0, r0
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <strlen>:
 8002ecc:	f020 0103 	bic.w	r1, r0, #3
 8002ed0:	f010 0003 	ands.w	r0, r0, #3
 8002ed4:	f1c0 0000 	rsb	r0, r0, #0
 8002ed8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002edc:	f100 0c04 	add.w	ip, r0, #4
 8002ee0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002ee4:	f06f 0200 	mvn.w	r2, #0
 8002ee8:	bf1c      	itt	ne
 8002eea:	fa22 f20c 	lsrne.w	r2, r2, ip
 8002eee:	4313      	orrne	r3, r2
 8002ef0:	f04f 0c01 	mov.w	ip, #1
 8002ef4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8002ef8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8002efc:	eba3 020c 	sub.w	r2, r3, ip
 8002f00:	ea22 0203 	bic.w	r2, r2, r3
 8002f04:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8002f08:	bf04      	itt	eq
 8002f0a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8002f0e:	3004      	addeq	r0, #4
 8002f10:	d0f4      	beq.n	8002efc <strlen+0x30>
 8002f12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002f16:	bf1f      	itttt	ne
 8002f18:	3001      	addne	r0, #1
 8002f1a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8002f1e:	3001      	addne	r0, #1
 8002f20:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8002f24:	bf18      	it	ne
 8002f26:	3001      	addne	r0, #1
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <write>:
 8002f2c:	b430      	push	{r4, r5}
 8002f2e:	4c04      	ldr	r4, [pc, #16]	; (8002f40 <write+0x14>)
 8002f30:	460d      	mov	r5, r1
 8002f32:	4613      	mov	r3, r2
 8002f34:	4601      	mov	r1, r0
 8002f36:	462a      	mov	r2, r5
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	bc30      	pop	{r4, r5}
 8002f3c:	f001 bae0 	b.w	8004500 <_write_r>
 8002f40:	20000458 	.word	0x20000458
 8002f44:	00000000 	.word	0x00000000

08002f48 <_vfprintf_r>:
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b0c5      	sub	sp, #276	; 0x114
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4689      	mov	r9, r1
 8002f52:	9206      	str	r2, [sp, #24]
 8002f54:	9009      	str	r0, [sp, #36]	; 0x24
 8002f56:	f002 fd4d 	bl	80059f4 <_localeconv_r>
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	9011      	str	r0, [sp, #68]	; 0x44
 8002f5e:	f7ff ffb5 	bl	8002ecc <strlen>
 8002f62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f64:	9014      	str	r0, [sp, #80]	; 0x50
 8002f66:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f68:	b11d      	cbz	r5, 8002f72 <_vfprintf_r+0x2a>
 8002f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 810b 	beq.w	8003188 <_vfprintf_r+0x240>
 8002f72:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8002f76:	b293      	uxth	r3, r2
 8002f78:	0499      	lsls	r1, r3, #18
 8002f7a:	d40a      	bmi.n	8002f92 <_vfprintf_r+0x4a>
 8002f7c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8002f80:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8002f84:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002f88:	f8a9 300c 	strh.w	r3, [r9, #12]
 8002f8c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	071a      	lsls	r2, r3, #28
 8002f94:	f140 80c2 	bpl.w	800311c <_vfprintf_r+0x1d4>
 8002f98:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8002f9c:	2a00      	cmp	r2, #0
 8002f9e:	f000 80bd 	beq.w	800311c <_vfprintf_r+0x1d4>
 8002fa2:	f003 031a 	and.w	r3, r3, #26
 8002fa6:	2b0a      	cmp	r3, #10
 8002fa8:	f000 80c4 	beq.w	8003134 <_vfprintf_r+0x1ec>
 8002fac:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 8003198 <_vfprintf_r+0x250>
 8002fb0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	ac34      	add	r4, sp, #208	; 0xd0
 8002fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8002fba:	9404      	str	r4, [sp, #16]
 8002fbc:	9329      	str	r3, [sp, #164]	; 0xa4
 8002fbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8002fc0:	9316      	str	r3, [sp, #88]	; 0x58
 8002fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8002fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8002fc6:	9427      	str	r4, [sp, #156]	; 0x9c
 8002fc8:	4626      	mov	r6, r4
 8002fca:	f8dd c018 	ldr.w	ip, [sp, #24]
 8002fce:	f89c 3000 	ldrb.w	r3, [ip]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80dc 	beq.w	8003190 <_vfprintf_r+0x248>
 8002fd8:	2b25      	cmp	r3, #37	; 0x25
 8002fda:	f000 80d9 	beq.w	8003190 <_vfprintf_r+0x248>
 8002fde:	f10c 0201 	add.w	r2, ip, #1
 8002fe2:	e002      	b.n	8002fea <_vfprintf_r+0xa2>
 8002fe4:	2b25      	cmp	r3, #37	; 0x25
 8002fe6:	f000 808b 	beq.w	8003100 <_vfprintf_r+0x1b8>
 8002fea:	4614      	mov	r4, r2
 8002fec:	3201      	adds	r2, #1
 8002fee:	7823      	ldrb	r3, [r4, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f7      	bne.n	8002fe4 <_vfprintf_r+0x9c>
 8002ff4:	9806      	ldr	r0, [sp, #24]
 8002ff6:	1a25      	subs	r5, r4, r0
 8002ff8:	b17d      	cbz	r5, 800301a <_vfprintf_r+0xd2>
 8002ffa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ffc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002ffe:	9806      	ldr	r0, [sp, #24]
 8003000:	6030      	str	r0, [r6, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	442a      	add	r2, r5
 8003006:	2b07      	cmp	r3, #7
 8003008:	6075      	str	r5, [r6, #4]
 800300a:	9229      	str	r2, [sp, #164]	; 0xa4
 800300c:	9328      	str	r3, [sp, #160]	; 0xa0
 800300e:	f300 80a4 	bgt.w	800315a <_vfprintf_r+0x212>
 8003012:	3608      	adds	r6, #8
 8003014:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003016:	4429      	add	r1, r5
 8003018:	910c      	str	r1, [sp, #48]	; 0x30
 800301a:	7823      	ldrb	r3, [r4, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a4 	beq.w	800316a <_vfprintf_r+0x222>
 8003022:	2300      	movs	r3, #0
 8003024:	1c65      	adds	r5, r4, #1
 8003026:	f894 8001 	ldrb.w	r8, [r4, #1]
 800302a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800302e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003032:	461a      	mov	r2, r3
 8003034:	930a      	str	r3, [sp, #40]	; 0x28
 8003036:	9305      	str	r3, [sp, #20]
 8003038:	9506      	str	r5, [sp, #24]
 800303a:	9407      	str	r4, [sp, #28]
 800303c:	462b      	mov	r3, r5
 800303e:	3301      	adds	r3, #1
 8003040:	f1a8 0120 	sub.w	r1, r8, #32
 8003044:	2958      	cmp	r1, #88	; 0x58
 8003046:	f200 83fe 	bhi.w	8003846 <_vfprintf_r+0x8fe>
 800304a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800304e:	023d      	.short	0x023d
 8003050:	03fc03fc 	.word	0x03fc03fc
 8003054:	03fc0309 	.word	0x03fc0309
 8003058:	03fc03fc 	.word	0x03fc03fc
 800305c:	03fc03fc 	.word	0x03fc03fc
 8003060:	024403fc 	.word	0x024403fc
 8003064:	03fc0239 	.word	0x03fc0239
 8003068:	033b0060 	.word	0x033b0060
 800306c:	037b03fc 	.word	0x037b03fc
 8003070:	03820382 	.word	0x03820382
 8003074:	03820382 	.word	0x03820382
 8003078:	03820382 	.word	0x03820382
 800307c:	03820382 	.word	0x03820382
 8003080:	03fc0382 	.word	0x03fc0382
 8003084:	03fc03fc 	.word	0x03fc03fc
 8003088:	03fc03fc 	.word	0x03fc03fc
 800308c:	03fc03fc 	.word	0x03fc03fc
 8003090:	03fc03fc 	.word	0x03fc03fc
 8003094:	035903fc 	.word	0x035903fc
 8003098:	03fc03a3 	.word	0x03fc03a3
 800309c:	03fc03a3 	.word	0x03fc03a3
 80030a0:	03fc03fc 	.word	0x03fc03fc
 80030a4:	039303fc 	.word	0x039303fc
 80030a8:	03fc03fc 	.word	0x03fc03fc
 80030ac:	03fc03da 	.word	0x03fc03da
 80030b0:	03fc03fc 	.word	0x03fc03fc
 80030b4:	03fc03fc 	.word	0x03fc03fc
 80030b8:	03fc02a9 	.word	0x03fc02a9
 80030bc:	02c903fc 	.word	0x02c903fc
 80030c0:	03fc03fc 	.word	0x03fc03fc
 80030c4:	03fc03fc 	.word	0x03fc03fc
 80030c8:	03fc03fc 	.word	0x03fc03fc
 80030cc:	03fc03fc 	.word	0x03fc03fc
 80030d0:	03fc03fc 	.word	0x03fc03fc
 80030d4:	03220310 	.word	0x03220310
 80030d8:	03a303a3 	.word	0x03a303a3
 80030dc:	02df03a3 	.word	0x02df03a3
 80030e0:	03fc0322 	.word	0x03fc0322
 80030e4:	02e803fc 	.word	0x02e803fc
 80030e8:	02f403fc 	.word	0x02f403fc
 80030ec:	02220210 	.word	0x02220210
 80030f0:	03fc0251 	.word	0x03fc0251
 80030f4:	03fc025a 	.word	0x03fc025a
 80030f8:	03fc00a9 	.word	0x03fc00a9
 80030fc:	028103fc 	.word	0x028103fc
 8003100:	9906      	ldr	r1, [sp, #24]
 8003102:	1a65      	subs	r5, r4, r1
 8003104:	e778      	b.n	8002ff8 <_vfprintf_r+0xb0>
 8003106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003108:	910b      	str	r1, [sp, #44]	; 0x2c
 800310a:	4264      	negs	r4, r4
 800310c:	940a      	str	r4, [sp, #40]	; 0x28
 800310e:	9d05      	ldr	r5, [sp, #20]
 8003110:	f045 0504 	orr.w	r5, r5, #4
 8003114:	9505      	str	r5, [sp, #20]
 8003116:	f893 8000 	ldrb.w	r8, [r3]
 800311a:	e790      	b.n	800303e <_vfprintf_r+0xf6>
 800311c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800311e:	4649      	mov	r1, r9
 8003120:	f001 fa02 	bl	8004528 <__swsetup_r>
 8003124:	b9a0      	cbnz	r0, 8003150 <_vfprintf_r+0x208>
 8003126:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800312a:	f003 031a 	and.w	r3, r3, #26
 800312e:	2b0a      	cmp	r3, #10
 8003130:	f47f af3c 	bne.w	8002fac <_vfprintf_r+0x64>
 8003134:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f6ff af37 	blt.w	8002fac <_vfprintf_r+0x64>
 800313e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003140:	9a06      	ldr	r2, [sp, #24]
 8003142:	4649      	mov	r1, r9
 8003144:	4623      	mov	r3, r4
 8003146:	f001 f99f 	bl	8004488 <__sbprintf>
 800314a:	b045      	add	sp, #276	; 0x114
 800314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003154:	b045      	add	sp, #276	; 0x114
 8003156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800315c:	4649      	mov	r1, r9
 800315e:	aa27      	add	r2, sp, #156	; 0x9c
 8003160:	f003 f898 	bl	8006294 <__sprint_r>
 8003164:	b940      	cbnz	r0, 8003178 <_vfprintf_r+0x230>
 8003166:	ae34      	add	r6, sp, #208	; 0xd0
 8003168:	e754      	b.n	8003014 <_vfprintf_r+0xcc>
 800316a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800316c:	b123      	cbz	r3, 8003178 <_vfprintf_r+0x230>
 800316e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003170:	4649      	mov	r1, r9
 8003172:	aa27      	add	r2, sp, #156	; 0x9c
 8003174:	f003 f88e 	bl	8006294 <__sprint_r>
 8003178:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800317c:	065b      	lsls	r3, r3, #25
 800317e:	d4e7      	bmi.n	8003150 <_vfprintf_r+0x208>
 8003180:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003182:	b045      	add	sp, #276	; 0x114
 8003184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003188:	4628      	mov	r0, r5
 800318a:	f7ff f8af 	bl	80022ec <__sinit>
 800318e:	e6f0      	b.n	8002f72 <_vfprintf_r+0x2a>
 8003190:	9c06      	ldr	r4, [sp, #24]
 8003192:	e742      	b.n	800301a <_vfprintf_r+0xd2>
 8003194:	f3af 8000 	nop.w
	...
 80031a0:	9c05      	ldr	r4, [sp, #20]
 80031a2:	9306      	str	r3, [sp, #24]
 80031a4:	06a2      	lsls	r2, r4, #26
 80031a6:	f140 8206 	bpl.w	80035b6 <_vfprintf_r+0x66e>
 80031aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80031ac:	1deb      	adds	r3, r5, #7
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	f103 0c08 	add.w	ip, r3, #8
 80031b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031ba:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80031be:	2301      	movs	r3, #1
 80031c0:	f04f 0a00 	mov.w	sl, #0
 80031c4:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80031c8:	9907      	ldr	r1, [sp, #28]
 80031ca:	2900      	cmp	r1, #0
 80031cc:	db05      	blt.n	80031da <_vfprintf_r+0x292>
 80031ce:	f8dd c014 	ldr.w	ip, [sp, #20]
 80031d2:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 80031d6:	f8cd c014 	str.w	ip, [sp, #20]
 80031da:	ea54 0005 	orrs.w	r0, r4, r5
 80031de:	f040 834b 	bne.w	8003878 <_vfprintf_r+0x930>
 80031e2:	9907      	ldr	r1, [sp, #28]
 80031e4:	2900      	cmp	r1, #0
 80031e6:	f040 8347 	bne.w	8003878 <_vfprintf_r+0x930>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 84bd 	bne.w	8003b6a <_vfprintf_r+0xc22>
 80031f0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80031f4:	f01c 0f01 	tst.w	ip, #1
 80031f8:	f000 84b7 	beq.w	8003b6a <_vfprintf_r+0xc22>
 80031fc:	af44      	add	r7, sp, #272	; 0x110
 80031fe:	2330      	movs	r3, #48	; 0x30
 8003200:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8003204:	9d04      	ldr	r5, [sp, #16]
 8003206:	1bec      	subs	r4, r5, r7
 8003208:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800320c:	2500      	movs	r5, #0
 800320e:	4564      	cmp	r4, ip
 8003210:	bfa8      	it	ge
 8003212:	46a4      	movge	ip, r4
 8003214:	f8cd c020 	str.w	ip, [sp, #32]
 8003218:	9510      	str	r5, [sp, #64]	; 0x40
 800321a:	f1ba 0f00 	cmp.w	sl, #0
 800321e:	d002      	beq.n	8003226 <_vfprintf_r+0x2de>
 8003220:	9d08      	ldr	r5, [sp, #32]
 8003222:	3501      	adds	r5, #1
 8003224:	9508      	str	r5, [sp, #32]
 8003226:	9b05      	ldr	r3, [sp, #20]
 8003228:	f013 0302 	ands.w	r3, r3, #2
 800322c:	930e      	str	r3, [sp, #56]	; 0x38
 800322e:	d002      	beq.n	8003236 <_vfprintf_r+0x2ee>
 8003230:	9d08      	ldr	r5, [sp, #32]
 8003232:	3502      	adds	r5, #2
 8003234:	9508      	str	r5, [sp, #32]
 8003236:	f8dd c014 	ldr.w	ip, [sp, #20]
 800323a:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 800323e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8003242:	f040 8316 	bne.w	8003872 <_vfprintf_r+0x92a>
 8003246:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003248:	f8dd c020 	ldr.w	ip, [sp, #32]
 800324c:	ebcc 0b05 	rsb	fp, ip, r5
 8003250:	f1bb 0f00 	cmp.w	fp, #0
 8003254:	f340 830d 	ble.w	8003872 <_vfprintf_r+0x92a>
 8003258:	f1bb 0f10 	cmp.w	fp, #16
 800325c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800325e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003260:	f8df a528 	ldr.w	sl, [pc, #1320]	; 800378c <_vfprintf_r+0x844>
 8003264:	dd27      	ble.n	80032b6 <_vfprintf_r+0x36e>
 8003266:	9717      	str	r7, [sp, #92]	; 0x5c
 8003268:	2510      	movs	r5, #16
 800326a:	4657      	mov	r7, sl
 800326c:	46a2      	mov	sl, r4
 800326e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003270:	e006      	b.n	8003280 <_vfprintf_r+0x338>
 8003272:	f1ab 0b10 	sub.w	fp, fp, #16
 8003276:	f1bb 0f10 	cmp.w	fp, #16
 800327a:	f106 0608 	add.w	r6, r6, #8
 800327e:	dd17      	ble.n	80032b0 <_vfprintf_r+0x368>
 8003280:	3201      	adds	r2, #1
 8003282:	3110      	adds	r1, #16
 8003284:	2a07      	cmp	r2, #7
 8003286:	9129      	str	r1, [sp, #164]	; 0xa4
 8003288:	9228      	str	r2, [sp, #160]	; 0xa0
 800328a:	6037      	str	r7, [r6, #0]
 800328c:	6075      	str	r5, [r6, #4]
 800328e:	ddf0      	ble.n	8003272 <_vfprintf_r+0x32a>
 8003290:	4620      	mov	r0, r4
 8003292:	4649      	mov	r1, r9
 8003294:	aa27      	add	r2, sp, #156	; 0x9c
 8003296:	f002 fffd 	bl	8006294 <__sprint_r>
 800329a:	2800      	cmp	r0, #0
 800329c:	f47f af6c 	bne.w	8003178 <_vfprintf_r+0x230>
 80032a0:	f1ab 0b10 	sub.w	fp, fp, #16
 80032a4:	f1bb 0f10 	cmp.w	fp, #16
 80032a8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80032aa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80032ac:	ae34      	add	r6, sp, #208	; 0xd0
 80032ae:	dce7      	bgt.n	8003280 <_vfprintf_r+0x338>
 80032b0:	4654      	mov	r4, sl
 80032b2:	46ba      	mov	sl, r7
 80032b4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80032b6:	3201      	adds	r2, #1
 80032b8:	eb0b 0c01 	add.w	ip, fp, r1
 80032bc:	2a07      	cmp	r2, #7
 80032be:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80032c2:	9228      	str	r2, [sp, #160]	; 0xa0
 80032c4:	e886 0c00 	stmia.w	r6, {sl, fp}
 80032c8:	f300 849e 	bgt.w	8003c08 <_vfprintf_r+0xcc0>
 80032cc:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80032d0:	3608      	adds	r6, #8
 80032d2:	f1ba 0f00 	cmp.w	sl, #0
 80032d6:	d00f      	beq.n	80032f8 <_vfprintf_r+0x3b0>
 80032d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032da:	3301      	adds	r3, #1
 80032dc:	f10c 0c01 	add.w	ip, ip, #1
 80032e0:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80032e4:	2201      	movs	r2, #1
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80032ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80032ee:	e886 0006 	stmia.w	r6, {r1, r2}
 80032f2:	f300 8420 	bgt.w	8003b36 <_vfprintf_r+0xbee>
 80032f6:	3608      	adds	r6, #8
 80032f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032fa:	b173      	cbz	r3, 800331a <_vfprintf_r+0x3d2>
 80032fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032fe:	3301      	adds	r3, #1
 8003300:	f10c 0c02 	add.w	ip, ip, #2
 8003304:	a920      	add	r1, sp, #128	; 0x80
 8003306:	2202      	movs	r2, #2
 8003308:	2b07      	cmp	r3, #7
 800330a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800330e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003310:	e886 0006 	stmia.w	r6, {r1, r2}
 8003314:	f300 841c 	bgt.w	8003b50 <_vfprintf_r+0xc08>
 8003318:	3608      	adds	r6, #8
 800331a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800331c:	2d80      	cmp	r5, #128	; 0x80
 800331e:	f000 834c 	beq.w	80039ba <_vfprintf_r+0xa72>
 8003322:	9a07      	ldr	r2, [sp, #28]
 8003324:	1b15      	subs	r5, r2, r4
 8003326:	2d00      	cmp	r5, #0
 8003328:	dd3d      	ble.n	80033a6 <_vfprintf_r+0x45e>
 800332a:	2d10      	cmp	r5, #16
 800332c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800332e:	f8df a460 	ldr.w	sl, [pc, #1120]	; 8003790 <_vfprintf_r+0x848>
 8003332:	dd2c      	ble.n	800338e <_vfprintf_r+0x446>
 8003334:	4651      	mov	r1, sl
 8003336:	9407      	str	r4, [sp, #28]
 8003338:	46aa      	mov	sl, r5
 800333a:	f04f 0b10 	mov.w	fp, #16
 800333e:	4662      	mov	r2, ip
 8003340:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003342:	460d      	mov	r5, r1
 8003344:	e006      	b.n	8003354 <_vfprintf_r+0x40c>
 8003346:	f1aa 0a10 	sub.w	sl, sl, #16
 800334a:	f1ba 0f10 	cmp.w	sl, #16
 800334e:	f106 0608 	add.w	r6, r6, #8
 8003352:	dd17      	ble.n	8003384 <_vfprintf_r+0x43c>
 8003354:	3301      	adds	r3, #1
 8003356:	3210      	adds	r2, #16
 8003358:	2b07      	cmp	r3, #7
 800335a:	9229      	str	r2, [sp, #164]	; 0xa4
 800335c:	9328      	str	r3, [sp, #160]	; 0xa0
 800335e:	e886 0820 	stmia.w	r6, {r5, fp}
 8003362:	ddf0      	ble.n	8003346 <_vfprintf_r+0x3fe>
 8003364:	4620      	mov	r0, r4
 8003366:	4649      	mov	r1, r9
 8003368:	aa27      	add	r2, sp, #156	; 0x9c
 800336a:	f002 ff93 	bl	8006294 <__sprint_r>
 800336e:	2800      	cmp	r0, #0
 8003370:	f47f af02 	bne.w	8003178 <_vfprintf_r+0x230>
 8003374:	f1aa 0a10 	sub.w	sl, sl, #16
 8003378:	f1ba 0f10 	cmp.w	sl, #16
 800337c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800337e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003380:	ae34      	add	r6, sp, #208	; 0xd0
 8003382:	dce7      	bgt.n	8003354 <_vfprintf_r+0x40c>
 8003384:	4694      	mov	ip, r2
 8003386:	9c07      	ldr	r4, [sp, #28]
 8003388:	462a      	mov	r2, r5
 800338a:	4655      	mov	r5, sl
 800338c:	4692      	mov	sl, r2
 800338e:	3301      	adds	r3, #1
 8003390:	44ac      	add	ip, r5
 8003392:	2b07      	cmp	r3, #7
 8003394:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003398:	9328      	str	r3, [sp, #160]	; 0xa0
 800339a:	f8c6 a000 	str.w	sl, [r6]
 800339e:	6075      	str	r5, [r6, #4]
 80033a0:	f300 83bd 	bgt.w	8003b1e <_vfprintf_r+0xbd6>
 80033a4:	3608      	adds	r6, #8
 80033a6:	9d05      	ldr	r5, [sp, #20]
 80033a8:	05eb      	lsls	r3, r5, #23
 80033aa:	f100 82a6 	bmi.w	80038fa <_vfprintf_r+0x9b2>
 80033ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80033b0:	6037      	str	r7, [r6, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	44a4      	add	ip, r4
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80033bc:	6074      	str	r4, [r6, #4]
 80033be:	9328      	str	r3, [sp, #160]	; 0xa0
 80033c0:	f300 8397 	bgt.w	8003af2 <_vfprintf_r+0xbaa>
 80033c4:	3608      	adds	r6, #8
 80033c6:	9c05      	ldr	r4, [sp, #20]
 80033c8:	0762      	lsls	r2, r4, #29
 80033ca:	d540      	bpl.n	800344e <_vfprintf_r+0x506>
 80033cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80033ce:	9808      	ldr	r0, [sp, #32]
 80033d0:	1a2c      	subs	r4, r5, r0
 80033d2:	2c00      	cmp	r4, #0
 80033d4:	dd3b      	ble.n	800344e <_vfprintf_r+0x506>
 80033d6:	2c10      	cmp	r4, #16
 80033d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80033da:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 800378c <_vfprintf_r+0x844>
 80033de:	dd22      	ble.n	8003426 <_vfprintf_r+0x4de>
 80033e0:	2510      	movs	r5, #16
 80033e2:	4662      	mov	r2, ip
 80033e4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80033e8:	4657      	mov	r7, sl
 80033ea:	e004      	b.n	80033f6 <_vfprintf_r+0x4ae>
 80033ec:	3c10      	subs	r4, #16
 80033ee:	2c10      	cmp	r4, #16
 80033f0:	f106 0608 	add.w	r6, r6, #8
 80033f4:	dd15      	ble.n	8003422 <_vfprintf_r+0x4da>
 80033f6:	3301      	adds	r3, #1
 80033f8:	3210      	adds	r2, #16
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	9229      	str	r2, [sp, #164]	; 0xa4
 80033fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8003400:	6037      	str	r7, [r6, #0]
 8003402:	6075      	str	r5, [r6, #4]
 8003404:	ddf2      	ble.n	80033ec <_vfprintf_r+0x4a4>
 8003406:	4640      	mov	r0, r8
 8003408:	4649      	mov	r1, r9
 800340a:	aa27      	add	r2, sp, #156	; 0x9c
 800340c:	f002 ff42 	bl	8006294 <__sprint_r>
 8003410:	2800      	cmp	r0, #0
 8003412:	f47f aeb1 	bne.w	8003178 <_vfprintf_r+0x230>
 8003416:	3c10      	subs	r4, #16
 8003418:	2c10      	cmp	r4, #16
 800341a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800341c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800341e:	ae34      	add	r6, sp, #208	; 0xd0
 8003420:	dce9      	bgt.n	80033f6 <_vfprintf_r+0x4ae>
 8003422:	4694      	mov	ip, r2
 8003424:	46ba      	mov	sl, r7
 8003426:	3301      	adds	r3, #1
 8003428:	44a4      	add	ip, r4
 800342a:	2b07      	cmp	r3, #7
 800342c:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003430:	9328      	str	r3, [sp, #160]	; 0xa0
 8003432:	f8c6 a000 	str.w	sl, [r6]
 8003436:	6074      	str	r4, [r6, #4]
 8003438:	dd09      	ble.n	800344e <_vfprintf_r+0x506>
 800343a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800343c:	4649      	mov	r1, r9
 800343e:	aa27      	add	r2, sp, #156	; 0x9c
 8003440:	f002 ff28 	bl	8006294 <__sprint_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	f47f ae97 	bne.w	8003178 <_vfprintf_r+0x230>
 800344a:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800344e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003450:	9808      	ldr	r0, [sp, #32]
 8003452:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003454:	42a8      	cmp	r0, r5
 8003456:	bfac      	ite	ge
 8003458:	1824      	addge	r4, r4, r0
 800345a:	1964      	addlt	r4, r4, r5
 800345c:	940c      	str	r4, [sp, #48]	; 0x30
 800345e:	f1bc 0f00 	cmp.w	ip, #0
 8003462:	f040 8352 	bne.w	8003b0a <_vfprintf_r+0xbc2>
 8003466:	2300      	movs	r3, #0
 8003468:	9328      	str	r3, [sp, #160]	; 0xa0
 800346a:	ae34      	add	r6, sp, #208	; 0xd0
 800346c:	e5ad      	b.n	8002fca <_vfprintf_r+0x82>
 800346e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003472:	9306      	str	r3, [sp, #24]
 8003474:	f01c 0320 	ands.w	r3, ip, #32
 8003478:	f000 81ce 	beq.w	8003818 <_vfprintf_r+0x8d0>
 800347c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800347e:	1de3      	adds	r3, r4, #7
 8003480:	f023 0307 	bic.w	r3, r3, #7
 8003484:	f103 0508 	add.w	r5, r3, #8
 8003488:	950b      	str	r5, [sp, #44]	; 0x2c
 800348a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800348e:	2300      	movs	r3, #0
 8003490:	e696      	b.n	80031c0 <_vfprintf_r+0x278>
 8003492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003494:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003498:	9306      	str	r3, [sp, #24]
 800349a:	1d15      	adds	r5, r2, #4
 800349c:	2330      	movs	r3, #48	; 0x30
 800349e:	f04f 0878 	mov.w	r8, #120	; 0x78
 80034a2:	f04c 0c02 	orr.w	ip, ip, #2
 80034a6:	48b7      	ldr	r0, [pc, #732]	; (8003784 <_vfprintf_r+0x83c>)
 80034a8:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80034ac:	950b      	str	r5, [sp, #44]	; 0x2c
 80034ae:	6814      	ldr	r4, [r2, #0]
 80034b0:	f8cd c014 	str.w	ip, [sp, #20]
 80034b4:	2500      	movs	r5, #0
 80034b6:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 80034ba:	9016      	str	r0, [sp, #88]	; 0x58
 80034bc:	2302      	movs	r3, #2
 80034be:	e67f      	b.n	80031c0 <_vfprintf_r+0x278>
 80034c0:	f893 8000 	ldrb.w	r8, [r3]
 80034c4:	222b      	movs	r2, #43	; 0x2b
 80034c6:	e5ba      	b.n	800303e <_vfprintf_r+0xf6>
 80034c8:	f893 8000 	ldrb.w	r8, [r3]
 80034cc:	2a00      	cmp	r2, #0
 80034ce:	f47f adb6 	bne.w	800303e <_vfprintf_r+0xf6>
 80034d2:	2220      	movs	r2, #32
 80034d4:	e5b3      	b.n	800303e <_vfprintf_r+0xf6>
 80034d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80034d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80034da:	6824      	ldr	r4, [r4, #0]
 80034dc:	940a      	str	r4, [sp, #40]	; 0x28
 80034de:	2c00      	cmp	r4, #0
 80034e0:	f105 0104 	add.w	r1, r5, #4
 80034e4:	f6ff ae0f 	blt.w	8003106 <_vfprintf_r+0x1be>
 80034e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80034ea:	f893 8000 	ldrb.w	r8, [r3]
 80034ee:	e5a6      	b.n	800303e <_vfprintf_r+0xf6>
 80034f0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80034f4:	f04c 0c20 	orr.w	ip, ip, #32
 80034f8:	f8cd c014 	str.w	ip, [sp, #20]
 80034fc:	f893 8000 	ldrb.w	r8, [r3]
 8003500:	e59d      	b.n	800303e <_vfprintf_r+0xf6>
 8003502:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003504:	9306      	str	r3, [sp, #24]
 8003506:	6827      	ldr	r7, [r4, #0]
 8003508:	f04f 0a00 	mov.w	sl, #0
 800350c:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8003510:	1d25      	adds	r5, r4, #4
 8003512:	2f00      	cmp	r7, #0
 8003514:	f000 8679 	beq.w	800420a <_vfprintf_r+0x12c2>
 8003518:	9c07      	ldr	r4, [sp, #28]
 800351a:	2c00      	cmp	r4, #0
 800351c:	4638      	mov	r0, r7
 800351e:	f2c0 862e 	blt.w	800417e <_vfprintf_r+0x1236>
 8003522:	4651      	mov	r1, sl
 8003524:	4622      	mov	r2, r4
 8003526:	f002 faed 	bl	8005b04 <memchr>
 800352a:	2800      	cmp	r0, #0
 800352c:	f000 86b2 	beq.w	8004294 <_vfprintf_r+0x134c>
 8003530:	9c07      	ldr	r4, [sp, #28]
 8003532:	950b      	str	r5, [sp, #44]	; 0x2c
 8003534:	1bc0      	subs	r0, r0, r7
 8003536:	42a0      	cmp	r0, r4
 8003538:	bfb8      	it	lt
 800353a:	4604      	movlt	r4, r0
 800353c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8003540:	f8cd a01c 	str.w	sl, [sp, #28]
 8003544:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003548:	9508      	str	r5, [sp, #32]
 800354a:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 800354e:	e664      	b.n	800321a <_vfprintf_r+0x2d2>
 8003550:	9d05      	ldr	r5, [sp, #20]
 8003552:	4c8c      	ldr	r4, [pc, #560]	; (8003784 <_vfprintf_r+0x83c>)
 8003554:	9306      	str	r3, [sp, #24]
 8003556:	06af      	lsls	r7, r5, #26
 8003558:	9416      	str	r4, [sp, #88]	; 0x58
 800355a:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800355e:	d547      	bpl.n	80035f0 <_vfprintf_r+0x6a8>
 8003560:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003564:	f10c 0307 	add.w	r3, ip, #7
 8003568:	f023 0307 	bic.w	r3, r3, #7
 800356c:	f103 0408 	add.w	r4, r3, #8
 8003570:	940b      	str	r4, [sp, #44]	; 0x2c
 8003572:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003576:	f8dd c014 	ldr.w	ip, [sp, #20]
 800357a:	f01c 0f01 	tst.w	ip, #1
 800357e:	f000 82f8 	beq.w	8003b72 <_vfprintf_r+0xc2a>
 8003582:	ea54 0005 	orrs.w	r0, r4, r5
 8003586:	f000 82f4 	beq.w	8003b72 <_vfprintf_r+0xc2a>
 800358a:	2330      	movs	r3, #48	; 0x30
 800358c:	f04c 0c02 	orr.w	ip, ip, #2
 8003590:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8003594:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 8003598:	f8cd c014 	str.w	ip, [sp, #20]
 800359c:	2302      	movs	r3, #2
 800359e:	e60f      	b.n	80031c0 <_vfprintf_r+0x278>
 80035a0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80035a4:	9306      	str	r3, [sp, #24]
 80035a6:	f04c 0c10 	orr.w	ip, ip, #16
 80035aa:	f8cd c014 	str.w	ip, [sp, #20]
 80035ae:	9c05      	ldr	r4, [sp, #20]
 80035b0:	06a2      	lsls	r2, r4, #26
 80035b2:	f53f adfa 	bmi.w	80031aa <_vfprintf_r+0x262>
 80035b6:	9c05      	ldr	r4, [sp, #20]
 80035b8:	06e3      	lsls	r3, r4, #27
 80035ba:	f100 8334 	bmi.w	8003c26 <_vfprintf_r+0xcde>
 80035be:	f8dd c014 	ldr.w	ip, [sp, #20]
 80035c2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80035c6:	f000 832e 	beq.w	8003c26 <_vfprintf_r+0xcde>
 80035ca:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80035ce:	f8bc 4000 	ldrh.w	r4, [ip]
 80035d2:	f10c 0c04 	add.w	ip, ip, #4
 80035d6:	2500      	movs	r5, #0
 80035d8:	2301      	movs	r3, #1
 80035da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80035de:	e5ef      	b.n	80031c0 <_vfprintf_r+0x278>
 80035e0:	9d05      	ldr	r5, [sp, #20]
 80035e2:	4c69      	ldr	r4, [pc, #420]	; (8003788 <_vfprintf_r+0x840>)
 80035e4:	9306      	str	r3, [sp, #24]
 80035e6:	06af      	lsls	r7, r5, #26
 80035e8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80035ec:	9416      	str	r4, [sp, #88]	; 0x58
 80035ee:	d4b7      	bmi.n	8003560 <_vfprintf_r+0x618>
 80035f0:	9d05      	ldr	r5, [sp, #20]
 80035f2:	06ed      	lsls	r5, r5, #27
 80035f4:	f140 84ef 	bpl.w	8003fd6 <_vfprintf_r+0x108e>
 80035f8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80035fc:	f8dc 4000 	ldr.w	r4, [ip]
 8003600:	f10c 0c04 	add.w	ip, ip, #4
 8003604:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003608:	2500      	movs	r5, #0
 800360a:	e7b4      	b.n	8003576 <_vfprintf_r+0x62e>
 800360c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003610:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8003614:	f8cd c014 	str.w	ip, [sp, #20]
 8003618:	f893 8000 	ldrb.w	r8, [r3]
 800361c:	e50f      	b.n	800303e <_vfprintf_r+0xf6>
 800361e:	f893 8000 	ldrb.w	r8, [r3]
 8003622:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8003626:	4619      	mov	r1, r3
 8003628:	f000 857b 	beq.w	8004122 <_vfprintf_r+0x11da>
 800362c:	9d05      	ldr	r5, [sp, #20]
 800362e:	f045 0510 	orr.w	r5, r5, #16
 8003632:	9505      	str	r5, [sp, #20]
 8003634:	e503      	b.n	800303e <_vfprintf_r+0xf6>
 8003636:	f8dd c014 	ldr.w	ip, [sp, #20]
 800363a:	9306      	str	r3, [sp, #24]
 800363c:	f01c 0f20 	tst.w	ip, #32
 8003640:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003644:	f000 84a7 	beq.w	8003f96 <_vfprintf_r+0x104e>
 8003648:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800364e:	17e5      	asrs	r5, r4, #31
 8003650:	462b      	mov	r3, r5
 8003652:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003654:	4622      	mov	r2, r4
 8003656:	3504      	adds	r5, #4
 8003658:	950b      	str	r5, [sp, #44]	; 0x2c
 800365a:	e9c1 2300 	strd	r2, r3, [r1]
 800365e:	e4b4      	b.n	8002fca <_vfprintf_r+0x82>
 8003660:	9d05      	ldr	r5, [sp, #20]
 8003662:	f045 0501 	orr.w	r5, r5, #1
 8003666:	9505      	str	r5, [sp, #20]
 8003668:	f893 8000 	ldrb.w	r8, [r3]
 800366c:	e4e7      	b.n	800303e <_vfprintf_r+0xf6>
 800366e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003672:	9306      	str	r3, [sp, #24]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800367a:	2300      	movs	r3, #0
 800367c:	2401      	movs	r4, #1
 800367e:	3504      	adds	r5, #4
 8003680:	469a      	mov	sl, r3
 8003682:	9408      	str	r4, [sp, #32]
 8003684:	950b      	str	r5, [sp, #44]	; 0x2c
 8003686:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800368a:	9307      	str	r3, [sp, #28]
 800368c:	9310      	str	r3, [sp, #64]	; 0x40
 800368e:	af2a      	add	r7, sp, #168	; 0xa8
 8003690:	e5c9      	b.n	8003226 <_vfprintf_r+0x2de>
 8003692:	9c05      	ldr	r4, [sp, #20]
 8003694:	9306      	str	r3, [sp, #24]
 8003696:	06a3      	lsls	r3, r4, #26
 8003698:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800369c:	d53c      	bpl.n	8003718 <_vfprintf_r+0x7d0>
 800369e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036a0:	1de9      	adds	r1, r5, #7
 80036a2:	f021 0107 	bic.w	r1, r1, #7
 80036a6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80036aa:	3108      	adds	r1, #8
 80036ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80036ae:	4614      	mov	r4, r2
 80036b0:	461d      	mov	r5, r3
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	f173 0000 	sbcs.w	r0, r3, #0
 80036b8:	f2c0 83d1 	blt.w	8003e5e <_vfprintf_r+0xf16>
 80036bc:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80036c0:	2301      	movs	r3, #1
 80036c2:	e581      	b.n	80031c8 <_vfprintf_r+0x280>
 80036c4:	f893 8000 	ldrb.w	r8, [r3]
 80036c8:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 80036cc:	f103 0001 	add.w	r0, r3, #1
 80036d0:	f000 86b8 	beq.w	8004444 <_vfprintf_r+0x14fc>
 80036d4:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 80036d8:	2909      	cmp	r1, #9
 80036da:	bf98      	it	ls
 80036dc:	2300      	movls	r3, #0
 80036de:	f200 8629 	bhi.w	8004334 <_vfprintf_r+0x13ec>
 80036e2:	f810 8b01 	ldrb.w	r8, [r0], #1
 80036e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80036ee:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 80036f2:	2909      	cmp	r1, #9
 80036f4:	d9f5      	bls.n	80036e2 <_vfprintf_r+0x79a>
 80036f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036fa:	9307      	str	r3, [sp, #28]
 80036fc:	4603      	mov	r3, r0
 80036fe:	e49f      	b.n	8003040 <_vfprintf_r+0xf8>
 8003700:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003704:	9306      	str	r3, [sp, #24]
 8003706:	f04c 0c10 	orr.w	ip, ip, #16
 800370a:	f8cd c014 	str.w	ip, [sp, #20]
 800370e:	9c05      	ldr	r4, [sp, #20]
 8003710:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003714:	06a3      	lsls	r3, r4, #26
 8003716:	d4c2      	bmi.n	800369e <_vfprintf_r+0x756>
 8003718:	f8dd c014 	ldr.w	ip, [sp, #20]
 800371c:	f01c 0f10 	tst.w	ip, #16
 8003720:	f040 82b3 	bne.w	8003c8a <_vfprintf_r+0xd42>
 8003724:	9c05      	ldr	r4, [sp, #20]
 8003726:	0667      	lsls	r7, r4, #25
 8003728:	f140 82af 	bpl.w	8003c8a <_vfprintf_r+0xd42>
 800372c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003730:	f9bc 4000 	ldrsh.w	r4, [ip]
 8003734:	f10c 0c04 	add.w	ip, ip, #4
 8003738:	17e5      	asrs	r5, r4, #31
 800373a:	4622      	mov	r2, r4
 800373c:	462b      	mov	r3, r5
 800373e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003742:	e7b6      	b.n	80036b2 <_vfprintf_r+0x76a>
 8003744:	9d05      	ldr	r5, [sp, #20]
 8003746:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800374a:	9505      	str	r5, [sp, #20]
 800374c:	f893 8000 	ldrb.w	r8, [r3]
 8003750:	e475      	b.n	800303e <_vfprintf_r+0xf6>
 8003752:	2400      	movs	r4, #0
 8003754:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8003758:	940a      	str	r4, [sp, #40]	; 0x28
 800375a:	4620      	mov	r0, r4
 800375c:	f813 8b01 	ldrb.w	r8, [r3], #1
 8003760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003764:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003768:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 800376c:	2909      	cmp	r1, #9
 800376e:	d9f5      	bls.n	800375c <_vfprintf_r+0x814>
 8003770:	900a      	str	r0, [sp, #40]	; 0x28
 8003772:	e465      	b.n	8003040 <_vfprintf_r+0xf8>
 8003774:	9d05      	ldr	r5, [sp, #20]
 8003776:	f045 0508 	orr.w	r5, r5, #8
 800377a:	9505      	str	r5, [sp, #20]
 800377c:	f893 8000 	ldrb.w	r8, [r3]
 8003780:	e45d      	b.n	800303e <_vfprintf_r+0xf6>
 8003782:	bf00      	nop
 8003784:	08007da8 	.word	0x08007da8
 8003788:	08007d94 	.word	0x08007d94
 800378c:	08007d74 	.word	0x08007d74
 8003790:	08007dc8 	.word	0x08007dc8
 8003794:	9c05      	ldr	r4, [sp, #20]
 8003796:	9306      	str	r3, [sp, #24]
 8003798:	0725      	lsls	r5, r4, #28
 800379a:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800379e:	f140 840e 	bpl.w	8003fbe <_vfprintf_r+0x1076>
 80037a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80037a4:	1deb      	adds	r3, r5, #7
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	ed93 7b00 	vldr	d7, [r3]
 80037ae:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80037b2:	f103 0c08 	add.w	ip, r3, #8
 80037b6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80037ba:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80037be:	f002 fd03 	bl	80061c8 <__fpclassifyd>
 80037c2:	2801      	cmp	r0, #1
 80037c4:	f040 8355 	bne.w	8003e72 <_vfprintf_r+0xf2a>
 80037c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80037cc:	2200      	movs	r2, #0
 80037ce:	2300      	movs	r3, #0
 80037d0:	f003 fec0 	bl	8007554 <__aeabi_dcmplt>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	f040 8533 	bne.w	8004240 <_vfprintf_r+0x12f8>
 80037da:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80037de:	f8dd c014 	ldr.w	ip, [sp, #20]
 80037e2:	4f9f      	ldr	r7, [pc, #636]	; (8003a60 <_vfprintf_r+0xb18>)
 80037e4:	4b9f      	ldr	r3, [pc, #636]	; (8003a64 <_vfprintf_r+0xb1c>)
 80037e6:	2500      	movs	r5, #0
 80037e8:	2403      	movs	r4, #3
 80037ea:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 80037ee:	9408      	str	r4, [sp, #32]
 80037f0:	9507      	str	r5, [sp, #28]
 80037f2:	f8cd c014 	str.w	ip, [sp, #20]
 80037f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037fa:	bfd8      	it	le
 80037fc:	461f      	movle	r7, r3
 80037fe:	9510      	str	r5, [sp, #64]	; 0x40
 8003800:	e50b      	b.n	800321a <_vfprintf_r+0x2d2>
 8003802:	9d05      	ldr	r5, [sp, #20]
 8003804:	9306      	str	r3, [sp, #24]
 8003806:	f045 0510 	orr.w	r5, r5, #16
 800380a:	9505      	str	r5, [sp, #20]
 800380c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003810:	f01c 0320 	ands.w	r3, ip, #32
 8003814:	f47f ae32 	bne.w	800347c <_vfprintf_r+0x534>
 8003818:	f8dd c014 	ldr.w	ip, [sp, #20]
 800381c:	f01c 0210 	ands.w	r2, ip, #16
 8003820:	f040 823f 	bne.w	8003ca2 <_vfprintf_r+0xd5a>
 8003824:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003828:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 800382c:	f000 8239 	beq.w	8003ca2 <_vfprintf_r+0xd5a>
 8003830:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003834:	f8bc 4000 	ldrh.w	r4, [ip]
 8003838:	f10c 0c04 	add.w	ip, ip, #4
 800383c:	4613      	mov	r3, r2
 800383e:	2500      	movs	r5, #0
 8003840:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003844:	e4bc      	b.n	80031c0 <_vfprintf_r+0x278>
 8003846:	9306      	str	r3, [sp, #24]
 8003848:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800384c:	f1b8 0f00 	cmp.w	r8, #0
 8003850:	f43f ac8b 	beq.w	800316a <_vfprintf_r+0x222>
 8003854:	2300      	movs	r3, #0
 8003856:	f04f 0c01 	mov.w	ip, #1
 800385a:	469a      	mov	sl, r3
 800385c:	f8cd c020 	str.w	ip, [sp, #32]
 8003860:	f88d 80a8 	strb.w	r8, [sp, #168]	; 0xa8
 8003864:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003868:	9307      	str	r3, [sp, #28]
 800386a:	9310      	str	r3, [sp, #64]	; 0x40
 800386c:	4664      	mov	r4, ip
 800386e:	af2a      	add	r7, sp, #168	; 0xa8
 8003870:	e4d9      	b.n	8003226 <_vfprintf_r+0x2de>
 8003872:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003876:	e52c      	b.n	80032d2 <_vfprintf_r+0x38a>
 8003878:	2b01      	cmp	r3, #1
 800387a:	f000 80e3 	beq.w	8003a44 <_vfprintf_r+0xafc>
 800387e:	2b02      	cmp	r3, #2
 8003880:	f10d 03cf 	add.w	r3, sp, #207	; 0xcf
 8003884:	d118      	bne.n	80038b8 <_vfprintf_r+0x970>
 8003886:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800388a:	4619      	mov	r1, r3
 800388c:	f004 000f 	and.w	r0, r4, #15
 8003890:	0922      	lsrs	r2, r4, #4
 8003892:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 8003896:	460f      	mov	r7, r1
 8003898:	092b      	lsrs	r3, r5, #4
 800389a:	f81c 1000 	ldrb.w	r1, [ip, r0]
 800389e:	7039      	strb	r1, [r7, #0]
 80038a0:	ea52 0003 	orrs.w	r0, r2, r3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80038ac:	d1ee      	bne.n	800388c <_vfprintf_r+0x944>
 80038ae:	9d04      	ldr	r5, [sp, #16]
 80038b0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80038b4:	1bec      	subs	r4, r5, r7
 80038b6:	e4a7      	b.n	8003208 <_vfprintf_r+0x2c0>
 80038b8:	08e0      	lsrs	r0, r4, #3
 80038ba:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 80038be:	f004 0207 	and.w	r2, r4, #7
 80038c2:	08e9      	lsrs	r1, r5, #3
 80038c4:	3230      	adds	r2, #48	; 0x30
 80038c6:	ea50 0c01 	orrs.w	ip, r0, r1
 80038ca:	461f      	mov	r7, r3
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	4604      	mov	r4, r0
 80038d0:	460d      	mov	r5, r1
 80038d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80038d6:	d1ef      	bne.n	80038b8 <_vfprintf_r+0x970>
 80038d8:	9c05      	ldr	r4, [sp, #20]
 80038da:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80038de:	07e0      	lsls	r0, r4, #31
 80038e0:	4639      	mov	r1, r7
 80038e2:	f140 80b8 	bpl.w	8003a56 <_vfprintf_r+0xb0e>
 80038e6:	2a30      	cmp	r2, #48	; 0x30
 80038e8:	f000 80b5 	beq.w	8003a56 <_vfprintf_r+0xb0e>
 80038ec:	9d04      	ldr	r5, [sp, #16]
 80038ee:	461f      	mov	r7, r3
 80038f0:	2330      	movs	r3, #48	; 0x30
 80038f2:	1bec      	subs	r4, r5, r7
 80038f4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80038f8:	e486      	b.n	8003208 <_vfprintf_r+0x2c0>
 80038fa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80038fe:	f340 80b7 	ble.w	8003a70 <_vfprintf_r+0xb28>
 8003902:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003906:	2200      	movs	r2, #0
 8003908:	2300      	movs	r3, #0
 800390a:	f8cd c00c 	str.w	ip, [sp, #12]
 800390e:	f003 fe17 	bl	8007540 <__aeabi_dcmpeq>
 8003912:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003916:	2800      	cmp	r0, #0
 8003918:	f000 812e 	beq.w	8003b78 <_vfprintf_r+0xc30>
 800391c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800391e:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <_vfprintf_r+0xb20>)
 8003920:	6032      	str	r2, [r6, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	f10c 0c01 	add.w	ip, ip, #1
 8003928:	2201      	movs	r2, #1
 800392a:	2b07      	cmp	r3, #7
 800392c:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003930:	9328      	str	r3, [sp, #160]	; 0xa0
 8003932:	6072      	str	r2, [r6, #4]
 8003934:	f300 836f 	bgt.w	8004016 <_vfprintf_r+0x10ce>
 8003938:	3608      	adds	r6, #8
 800393a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800393c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800393e:	42a3      	cmp	r3, r4
 8003940:	db03      	blt.n	800394a <_vfprintf_r+0xa02>
 8003942:	9d05      	ldr	r5, [sp, #20]
 8003944:	07ef      	lsls	r7, r5, #31
 8003946:	f57f ad3e 	bpl.w	80033c6 <_vfprintf_r+0x47e>
 800394a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800394c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800394e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8003950:	6034      	str	r4, [r6, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	44ac      	add	ip, r5
 8003956:	2b07      	cmp	r3, #7
 8003958:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800395c:	6075      	str	r5, [r6, #4]
 800395e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003960:	f300 83e8 	bgt.w	8004134 <_vfprintf_r+0x11ec>
 8003964:	3608      	adds	r6, #8
 8003966:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003968:	1e6c      	subs	r4, r5, #1
 800396a:	2c00      	cmp	r4, #0
 800396c:	f77f ad2b 	ble.w	80033c6 <_vfprintf_r+0x47e>
 8003970:	2c10      	cmp	r4, #16
 8003972:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003974:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8003a6c <_vfprintf_r+0xb24>
 8003978:	f340 819c 	ble.w	8003cb4 <_vfprintf_r+0xd6c>
 800397c:	2510      	movs	r5, #16
 800397e:	4662      	mov	r2, ip
 8003980:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003984:	4657      	mov	r7, sl
 8003986:	e004      	b.n	8003992 <_vfprintf_r+0xa4a>
 8003988:	3608      	adds	r6, #8
 800398a:	3c10      	subs	r4, #16
 800398c:	2c10      	cmp	r4, #16
 800398e:	f340 818f 	ble.w	8003cb0 <_vfprintf_r+0xd68>
 8003992:	3301      	adds	r3, #1
 8003994:	3210      	adds	r2, #16
 8003996:	2b07      	cmp	r3, #7
 8003998:	9229      	str	r2, [sp, #164]	; 0xa4
 800399a:	9328      	str	r3, [sp, #160]	; 0xa0
 800399c:	6037      	str	r7, [r6, #0]
 800399e:	6075      	str	r5, [r6, #4]
 80039a0:	ddf2      	ble.n	8003988 <_vfprintf_r+0xa40>
 80039a2:	4640      	mov	r0, r8
 80039a4:	4649      	mov	r1, r9
 80039a6:	aa27      	add	r2, sp, #156	; 0x9c
 80039a8:	f002 fc74 	bl	8006294 <__sprint_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	f47f abe3 	bne.w	8003178 <_vfprintf_r+0x230>
 80039b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80039b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039b6:	ae34      	add	r6, sp, #208	; 0xd0
 80039b8:	e7e7      	b.n	800398a <_vfprintf_r+0xa42>
 80039ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039bc:	9908      	ldr	r1, [sp, #32]
 80039be:	1a45      	subs	r5, r0, r1
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	f77f acae 	ble.w	8003322 <_vfprintf_r+0x3da>
 80039c6:	2d10      	cmp	r5, #16
 80039c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039ca:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8003a6c <_vfprintf_r+0xb24>
 80039ce:	dd2c      	ble.n	8003a2a <_vfprintf_r+0xae2>
 80039d0:	4651      	mov	r1, sl
 80039d2:	940e      	str	r4, [sp, #56]	; 0x38
 80039d4:	46aa      	mov	sl, r5
 80039d6:	f04f 0b10 	mov.w	fp, #16
 80039da:	4662      	mov	r2, ip
 80039dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80039de:	460d      	mov	r5, r1
 80039e0:	e006      	b.n	80039f0 <_vfprintf_r+0xaa8>
 80039e2:	f1aa 0a10 	sub.w	sl, sl, #16
 80039e6:	f1ba 0f10 	cmp.w	sl, #16
 80039ea:	f106 0608 	add.w	r6, r6, #8
 80039ee:	dd17      	ble.n	8003a20 <_vfprintf_r+0xad8>
 80039f0:	3301      	adds	r3, #1
 80039f2:	3210      	adds	r2, #16
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80039f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80039fa:	e886 0820 	stmia.w	r6, {r5, fp}
 80039fe:	ddf0      	ble.n	80039e2 <_vfprintf_r+0xa9a>
 8003a00:	4620      	mov	r0, r4
 8003a02:	4649      	mov	r1, r9
 8003a04:	aa27      	add	r2, sp, #156	; 0x9c
 8003a06:	f002 fc45 	bl	8006294 <__sprint_r>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f47f abb4 	bne.w	8003178 <_vfprintf_r+0x230>
 8003a10:	f1aa 0a10 	sub.w	sl, sl, #16
 8003a14:	f1ba 0f10 	cmp.w	sl, #16
 8003a18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003a1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a1c:	ae34      	add	r6, sp, #208	; 0xd0
 8003a1e:	dce7      	bgt.n	80039f0 <_vfprintf_r+0xaa8>
 8003a20:	4694      	mov	ip, r2
 8003a22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003a24:	462a      	mov	r2, r5
 8003a26:	4655      	mov	r5, sl
 8003a28:	4692      	mov	sl, r2
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	44ac      	add	ip, r5
 8003a2e:	2b07      	cmp	r3, #7
 8003a30:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003a34:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a36:	f8c6 a000 	str.w	sl, [r6]
 8003a3a:	6075      	str	r5, [r6, #4]
 8003a3c:	f300 8202 	bgt.w	8003e44 <_vfprintf_r+0xefc>
 8003a40:	3608      	adds	r6, #8
 8003a42:	e46e      	b.n	8003322 <_vfprintf_r+0x3da>
 8003a44:	2d00      	cmp	r5, #0
 8003a46:	bf08      	it	eq
 8003a48:	2c0a      	cmpeq	r4, #10
 8003a4a:	f080 813f 	bcs.w	8003ccc <_vfprintf_r+0xd84>
 8003a4e:	af44      	add	r7, sp, #272	; 0x110
 8003a50:	3430      	adds	r4, #48	; 0x30
 8003a52:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8003a56:	9d04      	ldr	r5, [sp, #16]
 8003a58:	1bec      	subs	r4, r5, r7
 8003a5a:	f7ff bbd5 	b.w	8003208 <_vfprintf_r+0x2c0>
 8003a5e:	bf00      	nop
 8003a60:	08007d88 	.word	0x08007d88
 8003a64:	08007d84 	.word	0x08007d84
 8003a68:	08007dc4 	.word	0x08007dc4
 8003a6c:	08007dc8 	.word	0x08007dc8
 8003a70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003a72:	2c01      	cmp	r4, #1
 8003a74:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003a76:	f340 81a7 	ble.w	8003dc8 <_vfprintf_r+0xe80>
 8003a7a:	3401      	adds	r4, #1
 8003a7c:	f10c 0501 	add.w	r5, ip, #1
 8003a80:	2301      	movs	r3, #1
 8003a82:	2c07      	cmp	r4, #7
 8003a84:	9529      	str	r5, [sp, #164]	; 0xa4
 8003a86:	9428      	str	r4, [sp, #160]	; 0xa0
 8003a88:	6037      	str	r7, [r6, #0]
 8003a8a:	6073      	str	r3, [r6, #4]
 8003a8c:	f300 81b7 	bgt.w	8003dfe <_vfprintf_r+0xeb6>
 8003a90:	3608      	adds	r6, #8
 8003a92:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003a94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003a96:	6031      	str	r1, [r6, #0]
 8003a98:	3401      	adds	r4, #1
 8003a9a:	4405      	add	r5, r0
 8003a9c:	2c07      	cmp	r4, #7
 8003a9e:	9529      	str	r5, [sp, #164]	; 0xa4
 8003aa0:	9428      	str	r4, [sp, #160]	; 0xa0
 8003aa2:	6070      	str	r0, [r6, #4]
 8003aa4:	f300 81c2 	bgt.w	8003e2c <_vfprintf_r+0xee4>
 8003aa8:	3608      	adds	r6, #8
 8003aaa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f003 fd45 	bl	8007540 <__aeabi_dcmpeq>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	f040 80bd 	bne.w	8003c36 <_vfprintf_r+0xcee>
 8003abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003abe:	3401      	adds	r4, #1
 8003ac0:	1e53      	subs	r3, r2, #1
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	441d      	add	r5, r3
 8003ac6:	2c07      	cmp	r4, #7
 8003ac8:	9428      	str	r4, [sp, #160]	; 0xa0
 8003aca:	9529      	str	r5, [sp, #164]	; 0xa4
 8003acc:	6037      	str	r7, [r6, #0]
 8003ace:	6073      	str	r3, [r6, #4]
 8003ad0:	f300 8189 	bgt.w	8003de6 <_vfprintf_r+0xe9e>
 8003ad4:	3608      	adds	r6, #8
 8003ad6:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8003ada:	3401      	adds	r4, #1
 8003adc:	44ac      	add	ip, r5
 8003ade:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003ae0:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003ae4:	ab23      	add	r3, sp, #140	; 0x8c
 8003ae6:	2c07      	cmp	r4, #7
 8003ae8:	9428      	str	r4, [sp, #160]	; 0xa0
 8003aea:	e886 0028 	stmia.w	r6, {r3, r5}
 8003aee:	f77f ac69 	ble.w	80033c4 <_vfprintf_r+0x47c>
 8003af2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003af4:	4649      	mov	r1, r9
 8003af6:	aa27      	add	r2, sp, #156	; 0x9c
 8003af8:	f002 fbcc 	bl	8006294 <__sprint_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f47f ab3b 	bne.w	8003178 <_vfprintf_r+0x230>
 8003b02:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003b06:	ae34      	add	r6, sp, #208	; 0xd0
 8003b08:	e45d      	b.n	80033c6 <_vfprintf_r+0x47e>
 8003b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	aa27      	add	r2, sp, #156	; 0x9c
 8003b10:	f002 fbc0 	bl	8006294 <__sprint_r>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	f43f aca6 	beq.w	8003466 <_vfprintf_r+0x51e>
 8003b1a:	f7ff bb2d 	b.w	8003178 <_vfprintf_r+0x230>
 8003b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b20:	4649      	mov	r1, r9
 8003b22:	aa27      	add	r2, sp, #156	; 0x9c
 8003b24:	f002 fbb6 	bl	8006294 <__sprint_r>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	f47f ab25 	bne.w	8003178 <_vfprintf_r+0x230>
 8003b2e:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003b32:	ae34      	add	r6, sp, #208	; 0xd0
 8003b34:	e437      	b.n	80033a6 <_vfprintf_r+0x45e>
 8003b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b38:	4649      	mov	r1, r9
 8003b3a:	aa27      	add	r2, sp, #156	; 0x9c
 8003b3c:	f002 fbaa 	bl	8006294 <__sprint_r>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	f47f ab19 	bne.w	8003178 <_vfprintf_r+0x230>
 8003b46:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003b4a:	ae34      	add	r6, sp, #208	; 0xd0
 8003b4c:	f7ff bbd4 	b.w	80032f8 <_vfprintf_r+0x3b0>
 8003b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b52:	4649      	mov	r1, r9
 8003b54:	aa27      	add	r2, sp, #156	; 0x9c
 8003b56:	f002 fb9d 	bl	8006294 <__sprint_r>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f47f ab0c 	bne.w	8003178 <_vfprintf_r+0x230>
 8003b60:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003b64:	ae34      	add	r6, sp, #208	; 0xd0
 8003b66:	f7ff bbd8 	b.w	800331a <_vfprintf_r+0x3d2>
 8003b6a:	9c07      	ldr	r4, [sp, #28]
 8003b6c:	af34      	add	r7, sp, #208	; 0xd0
 8003b6e:	f7ff bb4b 	b.w	8003208 <_vfprintf_r+0x2c0>
 8003b72:	2302      	movs	r3, #2
 8003b74:	f7ff bb24 	b.w	80031c0 <_vfprintf_r+0x278>
 8003b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f340 8257 	ble.w	800402e <_vfprintf_r+0x10e6>
 8003b80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003b82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003b84:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003b88:	42ac      	cmp	r4, r5
 8003b8a:	bfa8      	it	ge
 8003b8c:	462c      	movge	r4, r5
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	44b8      	add	r8, r7
 8003b92:	dd0b      	ble.n	8003bac <_vfprintf_r+0xc64>
 8003b94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003b96:	6037      	str	r7, [r6, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	44a4      	add	ip, r4
 8003b9c:	2b07      	cmp	r3, #7
 8003b9e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003ba2:	6074      	str	r4, [r6, #4]
 8003ba4:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ba6:	f300 82fa 	bgt.w	800419e <_vfprintf_r+0x1256>
 8003baa:	3608      	adds	r6, #8
 8003bac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003bae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003bb2:	1b2c      	subs	r4, r5, r4
 8003bb4:	2c00      	cmp	r4, #0
 8003bb6:	f340 80b1 	ble.w	8003d1c <_vfprintf_r+0xdd4>
 8003bba:	2c10      	cmp	r4, #16
 8003bbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003bbe:	f8df a70c 	ldr.w	sl, [pc, #1804]	; 80042cc <_vfprintf_r+0x1384>
 8003bc2:	f340 821b 	ble.w	8003ffc <_vfprintf_r+0x10b4>
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	2510      	movs	r5, #16
 8003bca:	46ba      	mov	sl, r7
 8003bcc:	4662      	mov	r2, ip
 8003bce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	e004      	b.n	8003be0 <_vfprintf_r+0xc98>
 8003bd6:	3608      	adds	r6, #8
 8003bd8:	3c10      	subs	r4, #16
 8003bda:	2c10      	cmp	r4, #16
 8003bdc:	f340 820a 	ble.w	8003ff4 <_vfprintf_r+0x10ac>
 8003be0:	3301      	adds	r3, #1
 8003be2:	3210      	adds	r2, #16
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	9229      	str	r2, [sp, #164]	; 0xa4
 8003be8:	9328      	str	r3, [sp, #160]	; 0xa0
 8003bea:	6037      	str	r7, [r6, #0]
 8003bec:	6075      	str	r5, [r6, #4]
 8003bee:	ddf2      	ble.n	8003bd6 <_vfprintf_r+0xc8e>
 8003bf0:	4658      	mov	r0, fp
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	aa27      	add	r2, sp, #156	; 0x9c
 8003bf6:	f002 fb4d 	bl	8006294 <__sprint_r>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	f47f aabc 	bne.w	8003178 <_vfprintf_r+0x230>
 8003c00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c04:	ae34      	add	r6, sp, #208	; 0xd0
 8003c06:	e7e7      	b.n	8003bd8 <_vfprintf_r+0xc90>
 8003c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	aa27      	add	r2, sp, #156	; 0x9c
 8003c0e:	f002 fb41 	bl	8006294 <__sprint_r>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	f47f aab0 	bne.w	8003178 <_vfprintf_r+0x230>
 8003c18:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003c1c:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003c20:	ae34      	add	r6, sp, #208	; 0xd0
 8003c22:	f7ff bb56 	b.w	80032d2 <_vfprintf_r+0x38a>
 8003c26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003c28:	682c      	ldr	r4, [r5, #0]
 8003c2a:	3504      	adds	r5, #4
 8003c2c:	950b      	str	r5, [sp, #44]	; 0x2c
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2500      	movs	r5, #0
 8003c32:	f7ff bac5 	b.w	80031c0 <_vfprintf_r+0x278>
 8003c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c38:	1e5f      	subs	r7, r3, #1
 8003c3a:	2f00      	cmp	r7, #0
 8003c3c:	f77f af4b 	ble.w	8003ad6 <_vfprintf_r+0xb8e>
 8003c40:	2f10      	cmp	r7, #16
 8003c42:	f8df a688 	ldr.w	sl, [pc, #1672]	; 80042cc <_vfprintf_r+0x1384>
 8003c46:	f340 80e6 	ble.w	8003e16 <_vfprintf_r+0xece>
 8003c4a:	f04f 0810 	mov.w	r8, #16
 8003c4e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003c52:	e004      	b.n	8003c5e <_vfprintf_r+0xd16>
 8003c54:	3608      	adds	r6, #8
 8003c56:	3f10      	subs	r7, #16
 8003c58:	2f10      	cmp	r7, #16
 8003c5a:	f340 80dc 	ble.w	8003e16 <_vfprintf_r+0xece>
 8003c5e:	3401      	adds	r4, #1
 8003c60:	3510      	adds	r5, #16
 8003c62:	2c07      	cmp	r4, #7
 8003c64:	9529      	str	r5, [sp, #164]	; 0xa4
 8003c66:	9428      	str	r4, [sp, #160]	; 0xa0
 8003c68:	f8c6 a000 	str.w	sl, [r6]
 8003c6c:	f8c6 8004 	str.w	r8, [r6, #4]
 8003c70:	ddf0      	ble.n	8003c54 <_vfprintf_r+0xd0c>
 8003c72:	4658      	mov	r0, fp
 8003c74:	4649      	mov	r1, r9
 8003c76:	aa27      	add	r2, sp, #156	; 0x9c
 8003c78:	f002 fb0c 	bl	8006294 <__sprint_r>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	f47f aa7b 	bne.w	8003178 <_vfprintf_r+0x230>
 8003c82:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003c84:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003c86:	ae34      	add	r6, sp, #208	; 0xd0
 8003c88:	e7e5      	b.n	8003c56 <_vfprintf_r+0xd0e>
 8003c8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003c8c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003c90:	682c      	ldr	r4, [r5, #0]
 8003c92:	f10c 0c04 	add.w	ip, ip, #4
 8003c96:	17e5      	asrs	r5, r4, #31
 8003c98:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	e507      	b.n	80036b2 <_vfprintf_r+0x76a>
 8003ca2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003ca4:	682c      	ldr	r4, [r5, #0]
 8003ca6:	3504      	adds	r5, #4
 8003ca8:	950b      	str	r5, [sp, #44]	; 0x2c
 8003caa:	2500      	movs	r5, #0
 8003cac:	f7ff ba88 	b.w	80031c0 <_vfprintf_r+0x278>
 8003cb0:	4694      	mov	ip, r2
 8003cb2:	46ba      	mov	sl, r7
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	44a4      	add	ip, r4
 8003cb8:	2b07      	cmp	r3, #7
 8003cba:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003cbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8003cc0:	f8c6 a000 	str.w	sl, [r6]
 8003cc4:	6074      	str	r4, [r6, #4]
 8003cc6:	f77f ab7d 	ble.w	80033c4 <_vfprintf_r+0x47c>
 8003cca:	e712      	b.n	8003af2 <_vfprintf_r+0xbaa>
 8003ccc:	f10d 0bcf 	add.w	fp, sp, #207	; 0xcf
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f003 fc8c 	bl	80075f4 <__aeabi_uldivmod>
 8003cdc:	3230      	adds	r2, #48	; 0x30
 8003cde:	f88b 2000 	strb.w	r2, [fp]
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	220a      	movs	r2, #10
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f003 fc83 	bl	80075f4 <__aeabi_uldivmod>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	ea54 0c05 	orrs.w	ip, r4, r5
 8003cf6:	465f      	mov	r7, fp
 8003cf8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003cfc:	d1e8      	bne.n	8003cd0 <_vfprintf_r+0xd88>
 8003cfe:	9d04      	ldr	r5, [sp, #16]
 8003d00:	1bec      	subs	r4, r5, r7
 8003d02:	f7ff ba81 	b.w	8003208 <_vfprintf_r+0x2c0>
 8003d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d08:	4649      	mov	r1, r9
 8003d0a:	aa27      	add	r2, sp, #156	; 0x9c
 8003d0c:	f002 fac2 	bl	8006294 <__sprint_r>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f47f aa31 	bne.w	8003178 <_vfprintf_r+0x230>
 8003d16:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003d1a:	ae34      	add	r6, sp, #208	; 0xd0
 8003d1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d1e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003d20:	442f      	add	r7, r5
 8003d22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003d24:	42ac      	cmp	r4, r5
 8003d26:	db40      	blt.n	8003daa <_vfprintf_r+0xe62>
 8003d28:	9d05      	ldr	r5, [sp, #20]
 8003d2a:	07e8      	lsls	r0, r5, #31
 8003d2c:	d43d      	bmi.n	8003daa <_vfprintf_r+0xe62>
 8003d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d30:	ebc7 0508 	rsb	r5, r7, r8
 8003d34:	1b04      	subs	r4, r0, r4
 8003d36:	42ac      	cmp	r4, r5
 8003d38:	bfb8      	it	lt
 8003d3a:	4625      	movlt	r5, r4
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	dd0b      	ble.n	8003d58 <_vfprintf_r+0xe10>
 8003d40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003d42:	6037      	str	r7, [r6, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	44ac      	add	ip, r5
 8003d48:	2b07      	cmp	r3, #7
 8003d4a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003d4e:	6075      	str	r5, [r6, #4]
 8003d50:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d52:	f300 824b 	bgt.w	80041ec <_vfprintf_r+0x12a4>
 8003d56:	3608      	adds	r6, #8
 8003d58:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8003d5c:	1b64      	subs	r4, r4, r5
 8003d5e:	2c00      	cmp	r4, #0
 8003d60:	f77f ab31 	ble.w	80033c6 <_vfprintf_r+0x47e>
 8003d64:	2c10      	cmp	r4, #16
 8003d66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003d68:	f8df a560 	ldr.w	sl, [pc, #1376]	; 80042cc <_vfprintf_r+0x1384>
 8003d6c:	dda2      	ble.n	8003cb4 <_vfprintf_r+0xd6c>
 8003d6e:	2510      	movs	r5, #16
 8003d70:	4662      	mov	r2, ip
 8003d72:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003d76:	4657      	mov	r7, sl
 8003d78:	e003      	b.n	8003d82 <_vfprintf_r+0xe3a>
 8003d7a:	3608      	adds	r6, #8
 8003d7c:	3c10      	subs	r4, #16
 8003d7e:	2c10      	cmp	r4, #16
 8003d80:	dd96      	ble.n	8003cb0 <_vfprintf_r+0xd68>
 8003d82:	3301      	adds	r3, #1
 8003d84:	3210      	adds	r2, #16
 8003d86:	2b07      	cmp	r3, #7
 8003d88:	9229      	str	r2, [sp, #164]	; 0xa4
 8003d8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d8c:	6037      	str	r7, [r6, #0]
 8003d8e:	6075      	str	r5, [r6, #4]
 8003d90:	ddf3      	ble.n	8003d7a <_vfprintf_r+0xe32>
 8003d92:	4640      	mov	r0, r8
 8003d94:	4649      	mov	r1, r9
 8003d96:	aa27      	add	r2, sp, #156	; 0x9c
 8003d98:	f002 fa7c 	bl	8006294 <__sprint_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f47f a9eb 	bne.w	8003178 <_vfprintf_r+0x230>
 8003da2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003da4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003da6:	ae34      	add	r6, sp, #208	; 0xd0
 8003da8:	e7e8      	b.n	8003d7c <_vfprintf_r+0xe34>
 8003daa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003dac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003dae:	6035      	str	r5, [r6, #0]
 8003db0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003db2:	6075      	str	r5, [r6, #4]
 8003db4:	3301      	adds	r3, #1
 8003db6:	44ac      	add	ip, r5
 8003db8:	2b07      	cmp	r3, #7
 8003dba:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003dbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8003dc0:	f300 8207 	bgt.w	80041d2 <_vfprintf_r+0x128a>
 8003dc4:	3608      	adds	r6, #8
 8003dc6:	e7b2      	b.n	8003d2e <_vfprintf_r+0xde6>
 8003dc8:	9d05      	ldr	r5, [sp, #20]
 8003dca:	07e9      	lsls	r1, r5, #31
 8003dcc:	f53f ae55 	bmi.w	8003a7a <_vfprintf_r+0xb32>
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	f10c 0501 	add.w	r5, ip, #1
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	2c07      	cmp	r4, #7
 8003dda:	9529      	str	r5, [sp, #164]	; 0xa4
 8003ddc:	9428      	str	r4, [sp, #160]	; 0xa0
 8003dde:	6037      	str	r7, [r6, #0]
 8003de0:	6073      	str	r3, [r6, #4]
 8003de2:	f77f ae77 	ble.w	8003ad4 <_vfprintf_r+0xb8c>
 8003de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de8:	4649      	mov	r1, r9
 8003dea:	aa27      	add	r2, sp, #156	; 0x9c
 8003dec:	f002 fa52 	bl	8006294 <__sprint_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f47f a9c1 	bne.w	8003178 <_vfprintf_r+0x230>
 8003df6:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003df8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003dfa:	ae34      	add	r6, sp, #208	; 0xd0
 8003dfc:	e66b      	b.n	8003ad6 <_vfprintf_r+0xb8e>
 8003dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e00:	4649      	mov	r1, r9
 8003e02:	aa27      	add	r2, sp, #156	; 0x9c
 8003e04:	f002 fa46 	bl	8006294 <__sprint_r>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f47f a9b5 	bne.w	8003178 <_vfprintf_r+0x230>
 8003e0e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003e10:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003e12:	ae34      	add	r6, sp, #208	; 0xd0
 8003e14:	e63d      	b.n	8003a92 <_vfprintf_r+0xb4a>
 8003e16:	3401      	adds	r4, #1
 8003e18:	443d      	add	r5, r7
 8003e1a:	2c07      	cmp	r4, #7
 8003e1c:	9529      	str	r5, [sp, #164]	; 0xa4
 8003e1e:	9428      	str	r4, [sp, #160]	; 0xa0
 8003e20:	f8c6 a000 	str.w	sl, [r6]
 8003e24:	6077      	str	r7, [r6, #4]
 8003e26:	f77f ae55 	ble.w	8003ad4 <_vfprintf_r+0xb8c>
 8003e2a:	e7dc      	b.n	8003de6 <_vfprintf_r+0xe9e>
 8003e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e2e:	4649      	mov	r1, r9
 8003e30:	aa27      	add	r2, sp, #156	; 0x9c
 8003e32:	f002 fa2f 	bl	8006294 <__sprint_r>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	f47f a99e 	bne.w	8003178 <_vfprintf_r+0x230>
 8003e3c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003e3e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003e40:	ae34      	add	r6, sp, #208	; 0xd0
 8003e42:	e632      	b.n	8003aaa <_vfprintf_r+0xb62>
 8003e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e46:	4649      	mov	r1, r9
 8003e48:	aa27      	add	r2, sp, #156	; 0x9c
 8003e4a:	f002 fa23 	bl	8006294 <__sprint_r>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f47f a992 	bne.w	8003178 <_vfprintf_r+0x230>
 8003e54:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003e58:	ae34      	add	r6, sp, #208	; 0xd0
 8003e5a:	f7ff ba62 	b.w	8003322 <_vfprintf_r+0x3da>
 8003e5e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8003e62:	4264      	negs	r4, r4
 8003e64:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003e68:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f7ff b9ab 	b.w	80031c8 <_vfprintf_r+0x280>
 8003e72:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8003e76:	f002 f9a7 	bl	80061c8 <__fpclassifyd>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	f000 8123 	beq.w	80040c6 <_vfprintf_r+0x117e>
 8003e80:	9c07      	ldr	r4, [sp, #28]
 8003e82:	3401      	adds	r4, #1
 8003e84:	f028 0a20 	bic.w	sl, r8, #32
 8003e88:	f000 826f 	beq.w	800436a <_vfprintf_r+0x1422>
 8003e8c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e90:	d104      	bne.n	8003e9c <_vfprintf_r+0xf54>
 8003e92:	9c07      	ldr	r4, [sp, #28]
 8003e94:	2c00      	cmp	r4, #0
 8003e96:	bf08      	it	eq
 8003e98:	2401      	moveq	r4, #1
 8003e9a:	9407      	str	r4, [sp, #28]
 8003e9c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003ea0:	9d05      	ldr	r5, [sp, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003ea8:	950e      	str	r5, [sp, #56]	; 0x38
 8003eaa:	f2c0 8255 	blt.w	8004358 <_vfprintf_r+0x1410>
 8003eae:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8003eb2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003eb6:	f04f 0b00 	mov.w	fp, #0
 8003eba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003ebe:	f000 81da 	beq.w	8004276 <_vfprintf_r+0x132e>
 8003ec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ec6:	f000 81d6 	beq.w	8004276 <_vfprintf_r+0x132e>
 8003eca:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8003ece:	bf0c      	ite	eq
 8003ed0:	9c07      	ldreq	r4, [sp, #28]
 8003ed2:	9d07      	ldrne	r5, [sp, #28]
 8003ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed6:	bf08      	it	eq
 8003ed8:	1c65      	addeq	r5, r4, #1
 8003eda:	aa22      	add	r2, sp, #136	; 0x88
 8003edc:	ab25      	add	r3, sp, #148	; 0x94
 8003ede:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003ee2:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	462a      	mov	r2, r5
 8003eea:	ab21      	add	r3, sp, #132	; 0x84
 8003eec:	f000 fc28 	bl	8004740 <_dtoa_r>
 8003ef0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	d002      	beq.n	8003efe <_vfprintf_r+0xfb6>
 8003ef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003efc:	d105      	bne.n	8003f0a <_vfprintf_r+0xfc2>
 8003efe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003f02:	f01c 0f01 	tst.w	ip, #1
 8003f06:	f000 8233 	beq.w	8004370 <_vfprintf_r+0x1428>
 8003f0a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 8003f0e:	eb07 0405 	add.w	r4, r7, r5
 8003f12:	f000 81cb 	beq.w	80042ac <_vfprintf_r+0x1364>
 8003f16:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f003 fb0f 	bl	8007540 <__aeabi_dcmpeq>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f040 81a5 	bne.w	8004272 <_vfprintf_r+0x132a>
 8003f28:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003f2a:	429c      	cmp	r4, r3
 8003f2c:	d906      	bls.n	8003f3c <_vfprintf_r+0xff4>
 8003f2e:	2130      	movs	r1, #48	; 0x30
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	9225      	str	r2, [sp, #148]	; 0x94
 8003f34:	7019      	strb	r1, [r3, #0]
 8003f36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	d8f9      	bhi.n	8003f30 <_vfprintf_r+0xfe8>
 8003f3c:	1bdb      	subs	r3, r3, r7
 8003f3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f42:	930d      	str	r3, [sp, #52]	; 0x34
 8003f44:	f000 818d 	beq.w	8004262 <_vfprintf_r+0x131a>
 8003f48:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003f4c:	f340 8292 	ble.w	8004474 <_vfprintf_r+0x152c>
 8003f50:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003f54:	f000 823c 	beq.w	80043d0 <_vfprintf_r+0x1488>
 8003f58:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003f5a:	9410      	str	r4, [sp, #64]	; 0x40
 8003f5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003f5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f60:	42ac      	cmp	r4, r5
 8003f62:	f300 81ec 	bgt.w	800433e <_vfprintf_r+0x13f6>
 8003f66:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003f6a:	f01c 0f01 	tst.w	ip, #1
 8003f6e:	f040 823c 	bne.w	80043ea <_vfprintf_r+0x14a2>
 8003f72:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003f76:	462c      	mov	r4, r5
 8003f78:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003f7c:	f1bb 0f00 	cmp.w	fp, #0
 8003f80:	f040 8164 	bne.w	800424c <_vfprintf_r+0x1304>
 8003f84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003f86:	9308      	str	r3, [sp, #32]
 8003f88:	9505      	str	r5, [sp, #20]
 8003f8a:	f8cd b01c 	str.w	fp, [sp, #28]
 8003f8e:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003f92:	f7ff b942 	b.w	800321a <_vfprintf_r+0x2d2>
 8003f96:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003f9a:	f01c 0f10 	tst.w	ip, #16
 8003f9e:	f040 80ab 	bne.w	80040f8 <_vfprintf_r+0x11b0>
 8003fa2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003fa6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8003faa:	f000 813d 	beq.w	8004228 <_vfprintf_r+0x12e0>
 8003fae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003fb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	3404      	adds	r4, #4
 8003fb6:	940b      	str	r4, [sp, #44]	; 0x2c
 8003fb8:	801d      	strh	r5, [r3, #0]
 8003fba:	f7ff b806 	b.w	8002fca <_vfprintf_r+0x82>
 8003fbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003fc0:	1de3      	adds	r3, r4, #7
 8003fc2:	f023 0307 	bic.w	r3, r3, #7
 8003fc6:	ed93 7b00 	vldr	d7, [r3]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd2:	f7ff bbf2 	b.w	80037ba <_vfprintf_r+0x872>
 8003fd6:	9c05      	ldr	r4, [sp, #20]
 8003fd8:	0664      	lsls	r4, r4, #25
 8003fda:	f140 8086 	bpl.w	80040ea <_vfprintf_r+0x11a2>
 8003fde:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003fe2:	f8bc 4000 	ldrh.w	r4, [ip]
 8003fe6:	f10c 0c04 	add.w	ip, ip, #4
 8003fea:	2500      	movs	r5, #0
 8003fec:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003ff0:	f7ff bac1 	b.w	8003576 <_vfprintf_r+0x62e>
 8003ff4:	4694      	mov	ip, r2
 8003ff6:	463a      	mov	r2, r7
 8003ff8:	4657      	mov	r7, sl
 8003ffa:	4692      	mov	sl, r2
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	44a4      	add	ip, r4
 8004000:	2b07      	cmp	r3, #7
 8004002:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8004006:	9328      	str	r3, [sp, #160]	; 0xa0
 8004008:	f8c6 a000 	str.w	sl, [r6]
 800400c:	6074      	str	r4, [r6, #4]
 800400e:	f73f ae7a 	bgt.w	8003d06 <_vfprintf_r+0xdbe>
 8004012:	3608      	adds	r6, #8
 8004014:	e682      	b.n	8003d1c <_vfprintf_r+0xdd4>
 8004016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004018:	4649      	mov	r1, r9
 800401a:	aa27      	add	r2, sp, #156	; 0x9c
 800401c:	f002 f93a 	bl	8006294 <__sprint_r>
 8004020:	2800      	cmp	r0, #0
 8004022:	f47f a8a9 	bne.w	8003178 <_vfprintf_r+0x230>
 8004026:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800402a:	ae34      	add	r6, sp, #208	; 0xd0
 800402c:	e485      	b.n	800393a <_vfprintf_r+0x9f2>
 800402e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004030:	49a2      	ldr	r1, [pc, #648]	; (80042bc <_vfprintf_r+0x1374>)
 8004032:	6031      	str	r1, [r6, #0]
 8004034:	3201      	adds	r2, #1
 8004036:	f10c 0c01 	add.w	ip, ip, #1
 800403a:	2101      	movs	r1, #1
 800403c:	2a07      	cmp	r2, #7
 800403e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8004042:	9228      	str	r2, [sp, #160]	; 0xa0
 8004044:	6071      	str	r1, [r6, #4]
 8004046:	dc5f      	bgt.n	8004108 <_vfprintf_r+0x11c0>
 8004048:	3608      	adds	r6, #8
 800404a:	461c      	mov	r4, r3
 800404c:	b92c      	cbnz	r4, 800405a <_vfprintf_r+0x1112>
 800404e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004050:	b91d      	cbnz	r5, 800405a <_vfprintf_r+0x1112>
 8004052:	9d05      	ldr	r5, [sp, #20]
 8004054:	07ed      	lsls	r5, r5, #31
 8004056:	f57f a9b6 	bpl.w	80033c6 <_vfprintf_r+0x47e>
 800405a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800405c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800405e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004060:	6035      	str	r5, [r6, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4462      	add	r2, ip
 8004066:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004068:	9229      	str	r2, [sp, #164]	; 0xa4
 800406a:	2b07      	cmp	r3, #7
 800406c:	6075      	str	r5, [r6, #4]
 800406e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004070:	f300 8153 	bgt.w	800431a <_vfprintf_r+0x13d2>
 8004074:	3608      	adds	r6, #8
 8004076:	4264      	negs	r4, r4
 8004078:	2c00      	cmp	r4, #0
 800407a:	dd72      	ble.n	8004162 <_vfprintf_r+0x121a>
 800407c:	2c10      	cmp	r4, #16
 800407e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80042cc <_vfprintf_r+0x1384>
 8004082:	f340 809b 	ble.w	80041bc <_vfprintf_r+0x1274>
 8004086:	4651      	mov	r1, sl
 8004088:	2510      	movs	r5, #16
 800408a:	46ba      	mov	sl, r7
 800408c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004090:	460f      	mov	r7, r1
 8004092:	e004      	b.n	800409e <_vfprintf_r+0x1156>
 8004094:	3608      	adds	r6, #8
 8004096:	3c10      	subs	r4, #16
 8004098:	2c10      	cmp	r4, #16
 800409a:	f340 808c 	ble.w	80041b6 <_vfprintf_r+0x126e>
 800409e:	3301      	adds	r3, #1
 80040a0:	3210      	adds	r2, #16
 80040a2:	2b07      	cmp	r3, #7
 80040a4:	9229      	str	r2, [sp, #164]	; 0xa4
 80040a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80040a8:	6037      	str	r7, [r6, #0]
 80040aa:	6075      	str	r5, [r6, #4]
 80040ac:	ddf2      	ble.n	8004094 <_vfprintf_r+0x114c>
 80040ae:	4640      	mov	r0, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	aa27      	add	r2, sp, #156	; 0x9c
 80040b4:	f002 f8ee 	bl	8006294 <__sprint_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f47f a85d 	bne.w	8003178 <_vfprintf_r+0x230>
 80040be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80040c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80040c2:	ae34      	add	r6, sp, #208	; 0xd0
 80040c4:	e7e7      	b.n	8004096 <_vfprintf_r+0x114e>
 80040c6:	9d05      	ldr	r5, [sp, #20]
 80040c8:	4f7d      	ldr	r7, [pc, #500]	; (80042c0 <_vfprintf_r+0x1378>)
 80040ca:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <_vfprintf_r+0x137c>)
 80040cc:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80040d0:	9007      	str	r0, [sp, #28]
 80040d2:	2403      	movs	r4, #3
 80040d4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80040d8:	9408      	str	r4, [sp, #32]
 80040da:	9505      	str	r5, [sp, #20]
 80040dc:	9010      	str	r0, [sp, #64]	; 0x40
 80040de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040e2:	bfd8      	it	le
 80040e4:	461f      	movle	r7, r3
 80040e6:	f7ff b898 	b.w	800321a <_vfprintf_r+0x2d2>
 80040ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80040ec:	682c      	ldr	r4, [r5, #0]
 80040ee:	3504      	adds	r5, #4
 80040f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80040f2:	2500      	movs	r5, #0
 80040f4:	f7ff ba3f 	b.w	8003576 <_vfprintf_r+0x62e>
 80040f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80040fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	3404      	adds	r4, #4
 8004100:	940b      	str	r4, [sp, #44]	; 0x2c
 8004102:	601d      	str	r5, [r3, #0]
 8004104:	f7fe bf61 	b.w	8002fca <_vfprintf_r+0x82>
 8004108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800410a:	4649      	mov	r1, r9
 800410c:	aa27      	add	r2, sp, #156	; 0x9c
 800410e:	f002 f8c1 	bl	8006294 <__sprint_r>
 8004112:	2800      	cmp	r0, #0
 8004114:	f47f a830 	bne.w	8003178 <_vfprintf_r+0x230>
 8004118:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800411a:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800411e:	ae34      	add	r6, sp, #208	; 0xd0
 8004120:	e794      	b.n	800404c <_vfprintf_r+0x1104>
 8004122:	9c05      	ldr	r4, [sp, #20]
 8004124:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004128:	f044 0420 	orr.w	r4, r4, #32
 800412c:	3301      	adds	r3, #1
 800412e:	9405      	str	r4, [sp, #20]
 8004130:	f7fe bf85 	b.w	800303e <_vfprintf_r+0xf6>
 8004134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004136:	4649      	mov	r1, r9
 8004138:	aa27      	add	r2, sp, #156	; 0x9c
 800413a:	f002 f8ab 	bl	8006294 <__sprint_r>
 800413e:	2800      	cmp	r0, #0
 8004140:	f47f a81a 	bne.w	8003178 <_vfprintf_r+0x230>
 8004144:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8004148:	ae34      	add	r6, sp, #208	; 0xd0
 800414a:	e40c      	b.n	8003966 <_vfprintf_r+0xa1e>
 800414c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800414e:	4649      	mov	r1, r9
 8004150:	aa27      	add	r2, sp, #156	; 0x9c
 8004152:	f002 f89f 	bl	8006294 <__sprint_r>
 8004156:	2800      	cmp	r0, #0
 8004158:	f47f a80e 	bne.w	8003178 <_vfprintf_r+0x230>
 800415c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800415e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004160:	ae34      	add	r6, sp, #208	; 0xd0
 8004162:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8004166:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004168:	6037      	str	r7, [r6, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	4494      	add	ip, r2
 800416e:	2b07      	cmp	r3, #7
 8004170:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8004174:	9328      	str	r3, [sp, #160]	; 0xa0
 8004176:	6074      	str	r4, [r6, #4]
 8004178:	f77f a924 	ble.w	80033c4 <_vfprintf_r+0x47c>
 800417c:	e4b9      	b.n	8003af2 <_vfprintf_r+0xbaa>
 800417e:	f8cd a01c 	str.w	sl, [sp, #28]
 8004182:	f7fe fea3 	bl	8002ecc <strlen>
 8004186:	950b      	str	r5, [sp, #44]	; 0x2c
 8004188:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 800418c:	9d07      	ldr	r5, [sp, #28]
 800418e:	f8cd c020 	str.w	ip, [sp, #32]
 8004192:	4604      	mov	r4, r0
 8004194:	9510      	str	r5, [sp, #64]	; 0x40
 8004196:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 800419a:	f7ff b83e 	b.w	800321a <_vfprintf_r+0x2d2>
 800419e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a0:	4649      	mov	r1, r9
 80041a2:	aa27      	add	r2, sp, #156	; 0x9c
 80041a4:	f002 f876 	bl	8006294 <__sprint_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	f47e afe5 	bne.w	8003178 <_vfprintf_r+0x230>
 80041ae:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80041b2:	ae34      	add	r6, sp, #208	; 0xd0
 80041b4:	e4fa      	b.n	8003bac <_vfprintf_r+0xc64>
 80041b6:	4639      	mov	r1, r7
 80041b8:	4657      	mov	r7, sl
 80041ba:	468a      	mov	sl, r1
 80041bc:	3301      	adds	r3, #1
 80041be:	4422      	add	r2, r4
 80041c0:	2b07      	cmp	r3, #7
 80041c2:	9229      	str	r2, [sp, #164]	; 0xa4
 80041c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80041c6:	f8c6 a000 	str.w	sl, [r6]
 80041ca:	6074      	str	r4, [r6, #4]
 80041cc:	dcbe      	bgt.n	800414c <_vfprintf_r+0x1204>
 80041ce:	3608      	adds	r6, #8
 80041d0:	e7c7      	b.n	8004162 <_vfprintf_r+0x121a>
 80041d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041d4:	4649      	mov	r1, r9
 80041d6:	aa27      	add	r2, sp, #156	; 0x9c
 80041d8:	f002 f85c 	bl	8006294 <__sprint_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	f47e afcb 	bne.w	8003178 <_vfprintf_r+0x230>
 80041e2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80041e4:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80041e8:	ae34      	add	r6, sp, #208	; 0xd0
 80041ea:	e5a0      	b.n	8003d2e <_vfprintf_r+0xde6>
 80041ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ee:	4649      	mov	r1, r9
 80041f0:	aa27      	add	r2, sp, #156	; 0x9c
 80041f2:	f002 f84f 	bl	8006294 <__sprint_r>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f47e afbe 	bne.w	8003178 <_vfprintf_r+0x230>
 80041fc:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80041fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004200:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8004204:	1b0c      	subs	r4, r1, r4
 8004206:	ae34      	add	r6, sp, #208	; 0xd0
 8004208:	e5a6      	b.n	8003d58 <_vfprintf_r+0xe10>
 800420a:	9c07      	ldr	r4, [sp, #28]
 800420c:	9710      	str	r7, [sp, #64]	; 0x40
 800420e:	2c06      	cmp	r4, #6
 8004210:	bf28      	it	cs
 8004212:	2406      	movcs	r4, #6
 8004214:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8004218:	46ba      	mov	sl, r7
 800421a:	9707      	str	r7, [sp, #28]
 800421c:	950b      	str	r5, [sp, #44]	; 0x2c
 800421e:	f8cd c020 	str.w	ip, [sp, #32]
 8004222:	4f29      	ldr	r7, [pc, #164]	; (80042c8 <_vfprintf_r+0x1380>)
 8004224:	f7fe bff9 	b.w	800321a <_vfprintf_r+0x2d2>
 8004228:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800422c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800422e:	f8dc 3000 	ldr.w	r3, [ip]
 8004232:	f10c 0c04 	add.w	ip, ip, #4
 8004236:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800423a:	601c      	str	r4, [r3, #0]
 800423c:	f7fe bec5 	b.w	8002fca <_vfprintf_r+0x82>
 8004240:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8004244:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8004248:	f7ff bac9 	b.w	80037de <_vfprintf_r+0x896>
 800424c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800424e:	9505      	str	r5, [sp, #20]
 8004250:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8004254:	2500      	movs	r5, #0
 8004256:	9308      	str	r3, [sp, #32]
 8004258:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 800425c:	9507      	str	r5, [sp, #28]
 800425e:	f7fe bfdf 	b.w	8003220 <_vfprintf_r+0x2d8>
 8004262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004264:	1cdc      	adds	r4, r3, #3
 8004266:	db33      	blt.n	80042d0 <_vfprintf_r+0x1388>
 8004268:	9c07      	ldr	r4, [sp, #28]
 800426a:	429c      	cmp	r4, r3
 800426c:	db30      	blt.n	80042d0 <_vfprintf_r+0x1388>
 800426e:	9310      	str	r3, [sp, #64]	; 0x40
 8004270:	e674      	b.n	8003f5c <_vfprintf_r+0x1014>
 8004272:	4623      	mov	r3, r4
 8004274:	e662      	b.n	8003f3c <_vfprintf_r+0xff4>
 8004276:	aa22      	add	r2, sp, #136	; 0x88
 8004278:	ab25      	add	r3, sp, #148	; 0x94
 800427a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800427e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004280:	9a07      	ldr	r2, [sp, #28]
 8004282:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 8004286:	2103      	movs	r1, #3
 8004288:	ab21      	add	r3, sp, #132	; 0x84
 800428a:	f000 fa59 	bl	8004740 <_dtoa_r>
 800428e:	9d07      	ldr	r5, [sp, #28]
 8004290:	4607      	mov	r7, r0
 8004292:	e63a      	b.n	8003f0a <_vfprintf_r+0xfc2>
 8004294:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8004298:	f8cd c020 	str.w	ip, [sp, #32]
 800429c:	9c07      	ldr	r4, [sp, #28]
 800429e:	950b      	str	r5, [sp, #44]	; 0x2c
 80042a0:	9007      	str	r0, [sp, #28]
 80042a2:	9010      	str	r0, [sp, #64]	; 0x40
 80042a4:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 80042a8:	f7fe bfb7 	b.w	800321a <_vfprintf_r+0x2d2>
 80042ac:	783b      	ldrb	r3, [r7, #0]
 80042ae:	2b30      	cmp	r3, #48	; 0x30
 80042b0:	f000 80a2 	beq.w	80043f8 <_vfprintf_r+0x14b0>
 80042b4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80042b6:	442c      	add	r4, r5
 80042b8:	e62d      	b.n	8003f16 <_vfprintf_r+0xfce>
 80042ba:	bf00      	nop
 80042bc:	08007dc4 	.word	0x08007dc4
 80042c0:	08007d90 	.word	0x08007d90
 80042c4:	08007d8c 	.word	0x08007d8c
 80042c8:	08007dbc 	.word	0x08007dbc
 80042cc:	08007dc8 	.word	0x08007dc8
 80042d0:	f1a8 0802 	sub.w	r8, r8, #2
 80042d4:	3b01      	subs	r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	9321      	str	r3, [sp, #132]	; 0x84
 80042da:	bfba      	itte	lt
 80042dc:	425b      	neglt	r3, r3
 80042de:	222d      	movlt	r2, #45	; 0x2d
 80042e0:	222b      	movge	r2, #43	; 0x2b
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	f88d 808c 	strb.w	r8, [sp, #140]	; 0x8c
 80042e8:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80042ec:	dc42      	bgt.n	8004374 <_vfprintf_r+0x142c>
 80042ee:	3330      	adds	r3, #48	; 0x30
 80042f0:	2230      	movs	r2, #48	; 0x30
 80042f2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80042f6:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80042fa:	ab24      	add	r3, sp, #144	; 0x90
 80042fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80042fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004300:	aa23      	add	r2, sp, #140	; 0x8c
 8004302:	1a9a      	subs	r2, r3, r2
 8004304:	2d01      	cmp	r5, #1
 8004306:	9215      	str	r2, [sp, #84]	; 0x54
 8004308:	4414      	add	r4, r2
 800430a:	f340 8091 	ble.w	8004430 <_vfprintf_r+0x14e8>
 800430e:	3401      	adds	r4, #1
 8004310:	2500      	movs	r5, #0
 8004312:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004316:	9510      	str	r5, [sp, #64]	; 0x40
 8004318:	e630      	b.n	8003f7c <_vfprintf_r+0x1034>
 800431a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800431c:	4649      	mov	r1, r9
 800431e:	aa27      	add	r2, sp, #156	; 0x9c
 8004320:	f001 ffb8 	bl	8006294 <__sprint_r>
 8004324:	2800      	cmp	r0, #0
 8004326:	f47e af27 	bne.w	8003178 <_vfprintf_r+0x230>
 800432a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800432c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800432e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004330:	ae34      	add	r6, sp, #208	; 0xd0
 8004332:	e6a0      	b.n	8004076 <_vfprintf_r+0x112e>
 8004334:	2400      	movs	r4, #0
 8004336:	4603      	mov	r3, r0
 8004338:	9407      	str	r4, [sp, #28]
 800433a:	f7fe be81 	b.w	8003040 <_vfprintf_r+0xf8>
 800433e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004340:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004342:	2c00      	cmp	r4, #0
 8004344:	bfd4      	ite	le
 8004346:	f1c4 0402 	rsble	r4, r4, #2
 800434a:	2401      	movgt	r4, #1
 800434c:	442c      	add	r4, r5
 800434e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004352:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004356:	e611      	b.n	8003f7c <_vfprintf_r+0x1034>
 8004358:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800435a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800435c:	901c      	str	r0, [sp, #112]	; 0x70
 800435e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004362:	911d      	str	r1, [sp, #116]	; 0x74
 8004364:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 8004368:	e5a7      	b.n	8003eba <_vfprintf_r+0xf72>
 800436a:	2506      	movs	r5, #6
 800436c:	9507      	str	r5, [sp, #28]
 800436e:	e595      	b.n	8003e9c <_vfprintf_r+0xf54>
 8004370:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004372:	e5e3      	b.n	8003f3c <_vfprintf_r+0xff4>
 8004374:	f10d 009a 	add.w	r0, sp, #154	; 0x9a
 8004378:	4d41      	ldr	r5, [pc, #260]	; (8004480 <_vfprintf_r+0x1538>)
 800437a:	17da      	asrs	r2, r3, #31
 800437c:	fb85 5103 	smull	r5, r1, r5, r3
 8004380:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8004384:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8004388:	4602      	mov	r2, r0
 800438a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800438e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004392:	2909      	cmp	r1, #9
 8004394:	7010      	strb	r0, [r2, #0]
 8004396:	460b      	mov	r3, r1
 8004398:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800439c:	dcec      	bgt.n	8004378 <_vfprintf_r+0x1430>
 800439e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80043a2:	f10d 049b 	add.w	r4, sp, #155	; 0x9b
 80043a6:	b2d9      	uxtb	r1, r3
 80043a8:	4284      	cmp	r4, r0
 80043aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043ae:	d963      	bls.n	8004478 <_vfprintf_r+0x1530>
 80043b0:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
 80043b4:	4613      	mov	r3, r2
 80043b6:	e001      	b.n	80043bc <_vfprintf_r+0x1474>
 80043b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80043bc:	42a3      	cmp	r3, r4
 80043be:	f800 1f01 	strb.w	r1, [r0, #1]!
 80043c2:	d1f9      	bne.n	80043b8 <_vfprintf_r+0x1470>
 80043c4:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 80043c8:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80043cc:	3bf6      	subs	r3, #246	; 0xf6
 80043ce:	e795      	b.n	80042fc <_vfprintf_r+0x13b4>
 80043d0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80043d2:	9510      	str	r5, [sp, #64]	; 0x40
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	9c07      	ldr	r4, [sp, #28]
 80043d8:	dd23      	ble.n	8004422 <_vfprintf_r+0x14da>
 80043da:	b9dc      	cbnz	r4, 8004414 <_vfprintf_r+0x14cc>
 80043dc:	9d05      	ldr	r5, [sp, #20]
 80043de:	07e8      	lsls	r0, r5, #31
 80043e0:	d418      	bmi.n	8004414 <_vfprintf_r+0x14cc>
 80043e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80043e4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80043e8:	e5c8      	b.n	8003f7c <_vfprintf_r+0x1034>
 80043ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043ec:	1c6c      	adds	r4, r5, #1
 80043ee:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80043f2:	f04f 0867 	mov.w	r8, #103	; 0x67
 80043f6:	e5c1      	b.n	8003f7c <_vfprintf_r+0x1034>
 80043f8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80043fc:	2200      	movs	r2, #0
 80043fe:	2300      	movs	r3, #0
 8004400:	f003 f89e 	bl	8007540 <__aeabi_dcmpeq>
 8004404:	2800      	cmp	r0, #0
 8004406:	f47f af55 	bne.w	80042b4 <_vfprintf_r+0x136c>
 800440a:	f1c5 0501 	rsb	r5, r5, #1
 800440e:	9521      	str	r5, [sp, #132]	; 0x84
 8004410:	442c      	add	r4, r5
 8004412:	e580      	b.n	8003f16 <_vfprintf_r+0xfce>
 8004414:	9d07      	ldr	r5, [sp, #28]
 8004416:	1c6c      	adds	r4, r5, #1
 8004418:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800441a:	442c      	add	r4, r5
 800441c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004420:	e5ac      	b.n	8003f7c <_vfprintf_r+0x1034>
 8004422:	bb14      	cbnz	r4, 800446a <_vfprintf_r+0x1522>
 8004424:	9d05      	ldr	r5, [sp, #20]
 8004426:	07e9      	lsls	r1, r5, #31
 8004428:	d41f      	bmi.n	800446a <_vfprintf_r+0x1522>
 800442a:	2301      	movs	r3, #1
 800442c:	461c      	mov	r4, r3
 800442e:	e5a5      	b.n	8003f7c <_vfprintf_r+0x1034>
 8004430:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004434:	f01c 0301 	ands.w	r3, ip, #1
 8004438:	f47f af69 	bne.w	800430e <_vfprintf_r+0x13c6>
 800443c:	9310      	str	r3, [sp, #64]	; 0x40
 800443e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004442:	e59b      	b.n	8003f7c <_vfprintf_r+0x1034>
 8004444:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004446:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800444a:	682d      	ldr	r5, [r5, #0]
 800444c:	f893 8001 	ldrb.w	r8, [r3, #1]
 8004450:	9507      	str	r5, [sp, #28]
 8004452:	f10c 0104 	add.w	r1, ip, #4
 8004456:	2d00      	cmp	r5, #0
 8004458:	910b      	str	r1, [sp, #44]	; 0x2c
 800445a:	4603      	mov	r3, r0
 800445c:	f6be adef 	bge.w	800303e <_vfprintf_r+0xf6>
 8004460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004464:	9407      	str	r4, [sp, #28]
 8004466:	f7fe bdea 	b.w	800303e <_vfprintf_r+0xf6>
 800446a:	9d07      	ldr	r5, [sp, #28]
 800446c:	1cac      	adds	r4, r5, #2
 800446e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004472:	e583      	b.n	8003f7c <_vfprintf_r+0x1034>
 8004474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004476:	e72d      	b.n	80042d4 <_vfprintf_r+0x138c>
 8004478:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800447c:	e73e      	b.n	80042fc <_vfprintf_r+0x13b4>
 800447e:	bf00      	nop
 8004480:	66666667 	.word	0x66666667
 8004484:	f3af 8000 	nop.w

08004488 <__sbprintf>:
 8004488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800448c:	460c      	mov	r4, r1
 800448e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8004492:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 8004496:	69e7      	ldr	r7, [r4, #28]
 8004498:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800449a:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 800449e:	9119      	str	r1, [sp, #100]	; 0x64
 80044a0:	ad1a      	add	r5, sp, #104	; 0x68
 80044a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80044a6:	f04f 0e00 	mov.w	lr, #0
 80044aa:	9707      	str	r7, [sp, #28]
 80044ac:	f029 0902 	bic.w	r9, r9, #2
 80044b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80044b2:	9500      	str	r5, [sp, #0]
 80044b4:	4669      	mov	r1, sp
 80044b6:	9504      	str	r5, [sp, #16]
 80044b8:	9602      	str	r6, [sp, #8]
 80044ba:	9605      	str	r6, [sp, #20]
 80044bc:	f8ad 900c 	strh.w	r9, [sp, #12]
 80044c0:	f8ad 800e 	strh.w	r8, [sp, #14]
 80044c4:	9709      	str	r7, [sp, #36]	; 0x24
 80044c6:	f8cd e018 	str.w	lr, [sp, #24]
 80044ca:	4606      	mov	r6, r0
 80044cc:	f7fe fd3c 	bl	8002f48 <_vfprintf_r>
 80044d0:	1e05      	subs	r5, r0, #0
 80044d2:	db07      	blt.n	80044e4 <__sbprintf+0x5c>
 80044d4:	4630      	mov	r0, r6
 80044d6:	4669      	mov	r1, sp
 80044d8:	f001 f950 	bl	800577c <_fflush_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	bf18      	it	ne
 80044e0:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80044e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80044e8:	065b      	lsls	r3, r3, #25
 80044ea:	d503      	bpl.n	80044f4 <__sbprintf+0x6c>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	4628      	mov	r0, r5
 80044f6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80044fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044fe:	bf00      	nop

08004500 <_write_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4c08      	ldr	r4, [pc, #32]	; (8004524 <_write_r+0x24>)
 8004504:	4606      	mov	r6, r0
 8004506:	2500      	movs	r5, #0
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	461a      	mov	r2, r3
 800450e:	6025      	str	r5, [r4, #0]
 8004510:	f7fc f994 	bl	800083c <_write>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d000      	beq.n	800451a <_write_r+0x1a>
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0fb      	beq.n	8004518 <_write_r+0x18>
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	20008b28 	.word	0x20008b28

08004528 <__swsetup_r>:
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <__swsetup_r+0xc0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4606      	mov	r6, r0
 8004530:	460c      	mov	r4, r1
 8004532:	b113      	cbz	r3, 800453a <__swsetup_r+0x12>
 8004534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004536:	2a00      	cmp	r2, #0
 8004538:	d036      	beq.n	80045a8 <__swsetup_r+0x80>
 800453a:	89a5      	ldrh	r5, [r4, #12]
 800453c:	b2ab      	uxth	r3, r5
 800453e:	0719      	lsls	r1, r3, #28
 8004540:	d50c      	bpl.n	800455c <__swsetup_r+0x34>
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	b1aa      	cbz	r2, 8004572 <__swsetup_r+0x4a>
 8004546:	f013 0101 	ands.w	r1, r3, #1
 800454a:	d01e      	beq.n	800458a <__swsetup_r+0x62>
 800454c:	6963      	ldr	r3, [r4, #20]
 800454e:	2100      	movs	r1, #0
 8004550:	425b      	negs	r3, r3
 8004552:	61a3      	str	r3, [r4, #24]
 8004554:	60a1      	str	r1, [r4, #8]
 8004556:	b1f2      	cbz	r2, 8004596 <__swsetup_r+0x6e>
 8004558:	2000      	movs	r0, #0
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	06da      	lsls	r2, r3, #27
 800455e:	d53b      	bpl.n	80045d8 <__swsetup_r+0xb0>
 8004560:	075b      	lsls	r3, r3, #29
 8004562:	d425      	bmi.n	80045b0 <__swsetup_r+0x88>
 8004564:	6922      	ldr	r2, [r4, #16]
 8004566:	f045 0308 	orr.w	r3, r5, #8
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	b29b      	uxth	r3, r3
 800456e:	2a00      	cmp	r2, #0
 8004570:	d1e9      	bne.n	8004546 <__swsetup_r+0x1e>
 8004572:	f403 7120 	and.w	r1, r3, #640	; 0x280
 8004576:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800457a:	d0e4      	beq.n	8004546 <__swsetup_r+0x1e>
 800457c:	4630      	mov	r0, r6
 800457e:	4621      	mov	r1, r4
 8004580:	f001 fa50 	bl	8005a24 <__smakebuf_r>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	6922      	ldr	r2, [r4, #16]
 8004588:	e7dd      	b.n	8004546 <__swsetup_r+0x1e>
 800458a:	0798      	lsls	r0, r3, #30
 800458c:	bf58      	it	pl
 800458e:	6961      	ldrpl	r1, [r4, #20]
 8004590:	60a1      	str	r1, [r4, #8]
 8004592:	2a00      	cmp	r2, #0
 8004594:	d1e0      	bne.n	8004558 <__swsetup_r+0x30>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	061a      	lsls	r2, r3, #24
 800459a:	d5dd      	bpl.n	8004558 <__swsetup_r+0x30>
 800459c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd fe9f 	bl	80022ec <__sinit>
 80045ae:	e7c4      	b.n	800453a <__swsetup_r+0x12>
 80045b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80045b2:	b149      	cbz	r1, 80045c8 <__swsetup_r+0xa0>
 80045b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80045b8:	4299      	cmp	r1, r3
 80045ba:	d003      	beq.n	80045c4 <__swsetup_r+0x9c>
 80045bc:	4630      	mov	r0, r6
 80045be:	f001 f941 	bl	8005844 <_free_r>
 80045c2:	89a5      	ldrh	r5, [r4, #12]
 80045c4:	2300      	movs	r3, #0
 80045c6:	6323      	str	r3, [r4, #48]	; 0x30
 80045c8:	f025 0524 	bic.w	r5, r5, #36	; 0x24
 80045cc:	2300      	movs	r3, #0
 80045ce:	6922      	ldr	r2, [r4, #16]
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	b2ad      	uxth	r5, r5
 80045d4:	6022      	str	r2, [r4, #0]
 80045d6:	e7c6      	b.n	8004566 <__swsetup_r+0x3e>
 80045d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80045dc:	2309      	movs	r3, #9
 80045de:	6033      	str	r3, [r6, #0]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e4:	81a5      	strh	r5, [r4, #12]
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	20000458 	.word	0x20000458

080045ec <_close_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4c07      	ldr	r4, [pc, #28]	; (800460c <_close_r+0x20>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4605      	mov	r5, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	f7fc f94e 	bl	8000898 <_close>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d000      	beq.n	8004602 <_close_r+0x16>
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0fb      	beq.n	8004600 <_close_r+0x14>
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	20008b28 	.word	0x20008b28

08004610 <quorem>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	6903      	ldr	r3, [r0, #16]
 8004616:	690d      	ldr	r5, [r1, #16]
 8004618:	429d      	cmp	r5, r3
 800461a:	b083      	sub	sp, #12
 800461c:	4683      	mov	fp, r0
 800461e:	f300 808b 	bgt.w	8004738 <quorem+0x128>
 8004622:	3d01      	subs	r5, #1
 8004624:	f101 0414 	add.w	r4, r1, #20
 8004628:	f100 0a14 	add.w	sl, r0, #20
 800462c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8004630:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8004634:	3201      	adds	r2, #1
 8004636:	fbb3 f8f2 	udiv	r8, r3, r2
 800463a:	00aa      	lsls	r2, r5, #2
 800463c:	4691      	mov	r9, r2
 800463e:	9200      	str	r2, [sp, #0]
 8004640:	4452      	add	r2, sl
 8004642:	44a1      	add	r9, r4
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	f1b8 0f00 	cmp.w	r8, #0
 800464a:	d03d      	beq.n	80046c8 <quorem+0xb8>
 800464c:	f04f 0e00 	mov.w	lr, #0
 8004650:	4670      	mov	r0, lr
 8004652:	4622      	mov	r2, r4
 8004654:	4653      	mov	r3, sl
 8004656:	468c      	mov	ip, r1
 8004658:	f852 6b04 	ldr.w	r6, [r2], #4
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	b2b7      	uxth	r7, r6
 8004660:	0c36      	lsrs	r6, r6, #16
 8004662:	fb07 ee08 	mla	lr, r7, r8, lr
 8004666:	fb06 f608 	mul.w	r6, r6, r8
 800466a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 800466e:	fa1f f78e 	uxth.w	r7, lr
 8004672:	1bc7      	subs	r7, r0, r7
 8004674:	b2b0      	uxth	r0, r6
 8004676:	fa17 f781 	uxtah	r7, r7, r1
 800467a:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 800467e:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8004682:	b2bf      	uxth	r7, r7
 8004684:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8004688:	4591      	cmp	r9, r2
 800468a:	f843 7b04 	str.w	r7, [r3], #4
 800468e:	ea4f 4020 	mov.w	r0, r0, asr #16
 8004692:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004696:	d2df      	bcs.n	8004658 <quorem+0x48>
 8004698:	9a00      	ldr	r2, [sp, #0]
 800469a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800469e:	4661      	mov	r1, ip
 80046a0:	b993      	cbnz	r3, 80046c8 <quorem+0xb8>
 80046a2:	9a01      	ldr	r2, [sp, #4]
 80046a4:	1f13      	subs	r3, r2, #4
 80046a6:	459a      	cmp	sl, r3
 80046a8:	d20c      	bcs.n	80046c4 <quorem+0xb4>
 80046aa:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80046ae:	b94b      	cbnz	r3, 80046c4 <quorem+0xb4>
 80046b0:	f1a2 0308 	sub.w	r3, r2, #8
 80046b4:	e002      	b.n	80046bc <quorem+0xac>
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	b91a      	cbnz	r2, 80046c4 <quorem+0xb4>
 80046bc:	459a      	cmp	sl, r3
 80046be:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80046c2:	d3f8      	bcc.n	80046b6 <quorem+0xa6>
 80046c4:	f8cb 5010 	str.w	r5, [fp, #16]
 80046c8:	4658      	mov	r0, fp
 80046ca:	f001 fc81 	bl	8005fd0 <__mcmp>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	db2e      	blt.n	8004730 <quorem+0x120>
 80046d2:	f108 0801 	add.w	r8, r8, #1
 80046d6:	4653      	mov	r3, sl
 80046d8:	2200      	movs	r2, #0
 80046da:	f854 6b04 	ldr.w	r6, [r4], #4
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	b2b1      	uxth	r1, r6
 80046e2:	1a52      	subs	r2, r2, r1
 80046e4:	0c36      	lsrs	r6, r6, #16
 80046e6:	fa12 f180 	uxtah	r1, r2, r0
 80046ea:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 80046ee:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80046f2:	b289      	uxth	r1, r1
 80046f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046f8:	45a1      	cmp	r9, r4
 80046fa:	f843 1b04 	str.w	r1, [r3], #4
 80046fe:	ea4f 4222 	mov.w	r2, r2, asr #16
 8004702:	d2ea      	bcs.n	80046da <quorem+0xca>
 8004704:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8004708:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800470c:	b982      	cbnz	r2, 8004730 <quorem+0x120>
 800470e:	1f1a      	subs	r2, r3, #4
 8004710:	4592      	cmp	sl, r2
 8004712:	d20b      	bcs.n	800472c <quorem+0x11c>
 8004714:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8004718:	b942      	cbnz	r2, 800472c <quorem+0x11c>
 800471a:	3b08      	subs	r3, #8
 800471c:	e002      	b.n	8004724 <quorem+0x114>
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	3b04      	subs	r3, #4
 8004722:	b91a      	cbnz	r2, 800472c <quorem+0x11c>
 8004724:	459a      	cmp	sl, r3
 8004726:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800472a:	d3f8      	bcc.n	800471e <quorem+0x10e>
 800472c:	f8cb 5010 	str.w	r5, [fp, #16]
 8004730:	4640      	mov	r0, r8
 8004732:	b003      	add	sp, #12
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004738:	2000      	movs	r0, #0
 800473a:	b003      	add	sp, #12
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004740 <_dtoa_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b09d      	sub	sp, #116	; 0x74
 8004746:	4604      	mov	r4, r0
 8004748:	9104      	str	r1, [sp, #16]
 800474a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800474c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800474e:	9206      	str	r2, [sp, #24]
 8004750:	9309      	str	r3, [sp, #36]	; 0x24
 8004752:	ec5b ab10 	vmov	sl, fp, d0
 8004756:	b149      	cbz	r1, 800476c <_dtoa_r+0x2c>
 8004758:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	608b      	str	r3, [r1, #8]
 8004764:	f001 fa3c 	bl	8005be0 <_Bfree>
 8004768:	2300      	movs	r3, #0
 800476a:	6423      	str	r3, [r4, #64]	; 0x40
 800476c:	f1bb 0f00 	cmp.w	fp, #0
 8004770:	46d9      	mov	r9, fp
 8004772:	db35      	blt.n	80047e0 <_dtoa_r+0xa0>
 8004774:	2300      	movs	r3, #0
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	4ba5      	ldr	r3, [pc, #660]	; (8004a10 <_dtoa_r+0x2d0>)
 800477a:	461a      	mov	r2, r3
 800477c:	ea09 0303 	and.w	r3, r9, r3
 8004780:	4293      	cmp	r3, r2
 8004782:	d016      	beq.n	80047b2 <_dtoa_r+0x72>
 8004784:	2200      	movs	r2, #0
 8004786:	2300      	movs	r3, #0
 8004788:	4650      	mov	r0, sl
 800478a:	4659      	mov	r1, fp
 800478c:	f002 fed8 	bl	8007540 <__aeabi_dcmpeq>
 8004790:	4656      	mov	r6, sl
 8004792:	465f      	mov	r7, fp
 8004794:	4680      	mov	r8, r0
 8004796:	b348      	cbz	r0, 80047ec <_dtoa_r+0xac>
 8004798:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800479a:	2301      	movs	r3, #1
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80047a0:	2e00      	cmp	r6, #0
 80047a2:	f000 80c9 	beq.w	8004938 <_dtoa_r+0x1f8>
 80047a6:	489b      	ldr	r0, [pc, #620]	; (8004a14 <_dtoa_r+0x2d4>)
 80047a8:	6030      	str	r0, [r6, #0]
 80047aa:	3801      	subs	r0, #1
 80047ac:	b01d      	add	sp, #116	; 0x74
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80047b4:	f242 730f 	movw	r3, #9999	; 0x270f
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	f1ba 0f00 	cmp.w	sl, #0
 80047be:	f000 80a4 	beq.w	800490a <_dtoa_r+0x1ca>
 80047c2:	4895      	ldr	r0, [pc, #596]	; (8004a18 <_dtoa_r+0x2d8>)
 80047c4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80047c6:	2e00      	cmp	r6, #0
 80047c8:	d0f0      	beq.n	80047ac <_dtoa_r+0x6c>
 80047ca:	78c3      	ldrb	r3, [r0, #3]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80b5 	beq.w	800493c <_dtoa_r+0x1fc>
 80047d2:	f100 0308 	add.w	r3, r0, #8
 80047d6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80047d8:	6033      	str	r3, [r6, #0]
 80047da:	b01d      	add	sp, #116	; 0x74
 80047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e0:	2301      	movs	r3, #1
 80047e2:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	46cb      	mov	fp, r9
 80047ea:	e7c5      	b.n	8004778 <_dtoa_r+0x38>
 80047ec:	4620      	mov	r0, r4
 80047ee:	ec47 6b10 	vmov	d0, r6, r7
 80047f2:	a91b      	add	r1, sp, #108	; 0x6c
 80047f4:	aa1a      	add	r2, sp, #104	; 0x68
 80047f6:	f001 fc79 	bl	80060ec <__d2b>
 80047fa:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80047fe:	900c      	str	r0, [sp, #48]	; 0x30
 8004800:	f040 808c 	bne.w	800491c <_dtoa_r+0x1dc>
 8004804:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004806:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004808:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800480c:	443d      	add	r5, r7
 800480e:	429d      	cmp	r5, r3
 8004810:	f2c0 8297 	blt.w	8004d42 <_dtoa_r+0x602>
 8004814:	331f      	adds	r3, #31
 8004816:	f205 4212 	addw	r2, r5, #1042	; 0x412
 800481a:	1b5b      	subs	r3, r3, r5
 800481c:	fa09 f303 	lsl.w	r3, r9, r3
 8004820:	fa2a f202 	lsr.w	r2, sl, r2
 8004824:	ea43 0002 	orr.w	r0, r3, r2
 8004828:	f002 fbac 	bl	8006f84 <__aeabi_ui2d>
 800482c:	2601      	movs	r6, #1
 800482e:	3d01      	subs	r5, #1
 8004830:	46b8      	mov	r8, r7
 8004832:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004836:	9618      	str	r6, [sp, #96]	; 0x60
 8004838:	2200      	movs	r2, #0
 800483a:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <_dtoa_r+0x2dc>)
 800483c:	f002 fa64 	bl	8006d08 <__aeabi_dsub>
 8004840:	a36d      	add	r3, pc, #436	; (adr r3, 80049f8 <_dtoa_r+0x2b8>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f002 fc13 	bl	8007070 <__aeabi_dmul>
 800484a:	a36d      	add	r3, pc, #436	; (adr r3, 8004a00 <_dtoa_r+0x2c0>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f002 fa5c 	bl	8006d0c <__adddf3>
 8004854:	4606      	mov	r6, r0
 8004856:	4628      	mov	r0, r5
 8004858:	460f      	mov	r7, r1
 800485a:	f002 fba3 	bl	8006fa4 <__aeabi_i2d>
 800485e:	a36a      	add	r3, pc, #424	; (adr r3, 8004a08 <_dtoa_r+0x2c8>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f002 fc04 	bl	8007070 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4630      	mov	r0, r6
 800486e:	4639      	mov	r1, r7
 8004870:	f002 fa4c 	bl	8006d0c <__adddf3>
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	f002 fe94 	bl	80075a4 <__aeabi_d2iz>
 800487c:	4639      	mov	r1, r7
 800487e:	9008      	str	r0, [sp, #32]
 8004880:	2200      	movs	r2, #0
 8004882:	4630      	mov	r0, r6
 8004884:	2300      	movs	r3, #0
 8004886:	f002 fe65 	bl	8007554 <__aeabi_dcmplt>
 800488a:	2800      	cmp	r0, #0
 800488c:	f040 822a 	bne.w	8004ce4 <_dtoa_r+0x5a4>
 8004890:	9e08      	ldr	r6, [sp, #32]
 8004892:	2e16      	cmp	r6, #22
 8004894:	f200 8223 	bhi.w	8004cde <_dtoa_r+0x59e>
 8004898:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <_dtoa_r+0x2e0>)
 800489a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800489e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048a2:	4652      	mov	r2, sl
 80048a4:	465b      	mov	r3, fp
 80048a6:	f002 fe73 	bl	8007590 <__aeabi_dcmpgt>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	f000 824e 	beq.w	8004d4c <_dtoa_r+0x60c>
 80048b0:	3e01      	subs	r6, #1
 80048b2:	9608      	str	r6, [sp, #32]
 80048b4:	2600      	movs	r6, #0
 80048b6:	9610      	str	r6, [sp, #64]	; 0x40
 80048b8:	ebc5 0508 	rsb	r5, r5, r8
 80048bc:	3d01      	subs	r5, #1
 80048be:	9507      	str	r5, [sp, #28]
 80048c0:	f100 822a 	bmi.w	8004d18 <_dtoa_r+0x5d8>
 80048c4:	2600      	movs	r6, #0
 80048c6:	960a      	str	r6, [sp, #40]	; 0x28
 80048c8:	9e08      	ldr	r6, [sp, #32]
 80048ca:	2e00      	cmp	r6, #0
 80048cc:	f2c0 8218 	blt.w	8004d00 <_dtoa_r+0x5c0>
 80048d0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80048d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80048d6:	44b6      	add	lr, r6
 80048d8:	2600      	movs	r6, #0
 80048da:	f8cd e01c 	str.w	lr, [sp, #28]
 80048de:	960e      	str	r6, [sp, #56]	; 0x38
 80048e0:	9e04      	ldr	r6, [sp, #16]
 80048e2:	2e09      	cmp	r6, #9
 80048e4:	d82c      	bhi.n	8004940 <_dtoa_r+0x200>
 80048e6:	2e05      	cmp	r6, #5
 80048e8:	bfc4      	itt	gt
 80048ea:	3e04      	subgt	r6, #4
 80048ec:	9604      	strgt	r6, [sp, #16]
 80048ee:	9904      	ldr	r1, [sp, #16]
 80048f0:	f1a1 0302 	sub.w	r3, r1, #2
 80048f4:	bfcc      	ite	gt
 80048f6:	2600      	movgt	r6, #0
 80048f8:	2601      	movle	r6, #1
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d822      	bhi.n	8004944 <_dtoa_r+0x204>
 80048fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004902:	03ae      	.short	0x03ae
 8004904:	03b702a3 	.word	0x03b702a3
 8004908:	04ab      	.short	0x04ab
 800490a:	4a46      	ldr	r2, [pc, #280]	; (8004a24 <_dtoa_r+0x2e4>)
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <_dtoa_r+0x2d8>)
 800490e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8004912:	2800      	cmp	r0, #0
 8004914:	bf0c      	ite	eq
 8004916:	4610      	moveq	r0, r2
 8004918:	4618      	movne	r0, r3
 800491a:	e753      	b.n	80047c4 <_dtoa_r+0x84>
 800491c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004920:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004924:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8004928:	4650      	mov	r0, sl
 800492a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800492e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004932:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004936:	e77f      	b.n	8004838 <_dtoa_r+0xf8>
 8004938:	483b      	ldr	r0, [pc, #236]	; (8004a28 <_dtoa_r+0x2e8>)
 800493a:	e737      	b.n	80047ac <_dtoa_r+0x6c>
 800493c:	1cc3      	adds	r3, r0, #3
 800493e:	e74a      	b.n	80047d6 <_dtoa_r+0x96>
 8004940:	2600      	movs	r6, #0
 8004942:	9604      	str	r6, [sp, #16]
 8004944:	2500      	movs	r5, #0
 8004946:	6465      	str	r5, [r4, #68]	; 0x44
 8004948:	4629      	mov	r1, r5
 800494a:	4620      	mov	r0, r4
 800494c:	f001 f922 	bl	8005b94 <_Balloc>
 8004950:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004954:	2601      	movs	r6, #1
 8004956:	900b      	str	r0, [sp, #44]	; 0x2c
 8004958:	9506      	str	r5, [sp, #24]
 800495a:	6420      	str	r0, [r4, #64]	; 0x40
 800495c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8004960:	960d      	str	r6, [sp, #52]	; 0x34
 8004962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004964:	2b00      	cmp	r3, #0
 8004966:	f2c0 80d1 	blt.w	8004b0c <_dtoa_r+0x3cc>
 800496a:	9e08      	ldr	r6, [sp, #32]
 800496c:	2e0e      	cmp	r6, #14
 800496e:	f300 80cd 	bgt.w	8004b0c <_dtoa_r+0x3cc>
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <_dtoa_r+0x2e0>)
 8004974:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004978:	ed93 7b00 	vldr	d7, [r3]
 800497c:	9e06      	ldr	r6, [sp, #24]
 800497e:	2e00      	cmp	r6, #0
 8004980:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004984:	f2c0 8377 	blt.w	8005076 <_dtoa_r+0x936>
 8004988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498c:	4659      	mov	r1, fp
 800498e:	4650      	mov	r0, sl
 8004990:	f002 fc98 	bl	80072c4 <__aeabi_ddiv>
 8004994:	f002 fe06 	bl	80075a4 <__aeabi_d2iz>
 8004998:	4605      	mov	r5, r0
 800499a:	f002 fb03 	bl	8006fa4 <__aeabi_i2d>
 800499e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049a2:	f002 fb65 	bl	8007070 <__aeabi_dmul>
 80049a6:	460b      	mov	r3, r1
 80049a8:	4602      	mov	r2, r0
 80049aa:	4659      	mov	r1, fp
 80049ac:	4650      	mov	r0, sl
 80049ae:	f002 f9ab 	bl	8006d08 <__aeabi_dsub>
 80049b2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80049b6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80049ba:	f1b9 0f01 	cmp.w	r9, #1
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	f88e 3000 	strb.w	r3, [lr]
 80049c6:	f10e 0b01 	add.w	fp, lr, #1
 80049ca:	d061      	beq.n	8004a90 <_dtoa_r+0x350>
 80049cc:	2200      	movs	r2, #0
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <_dtoa_r+0x2ec>)
 80049d0:	f002 fb4e 	bl	8007070 <__aeabi_dmul>
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	f002 fdb0 	bl	8007540 <__aeabi_dcmpeq>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d17e      	bne.n	8004ae2 <_dtoa_r+0x3a2>
 80049e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80049e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ea:	9406      	str	r4, [sp, #24]
 80049ec:	44c8      	add	r8, r9
 80049ee:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80049f2:	f103 0902 	add.w	r9, r3, #2
 80049f6:	e026      	b.n	8004a46 <_dtoa_r+0x306>
 80049f8:	636f4361 	.word	0x636f4361
 80049fc:	3fd287a7 	.word	0x3fd287a7
 8004a00:	8b60c8b3 	.word	0x8b60c8b3
 8004a04:	3fc68a28 	.word	0x3fc68a28
 8004a08:	509f79fb 	.word	0x509f79fb
 8004a0c:	3fd34413 	.word	0x3fd34413
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08007dc5 	.word	0x08007dc5
 8004a18:	08007de4 	.word	0x08007de4
 8004a1c:	3ff80000 	.word	0x3ff80000
 8004a20:	08007df8 	.word	0x08007df8
 8004a24:	08007dd8 	.word	0x08007dd8
 8004a28:	08007dc4 	.word	0x08007dc4
 8004a2c:	40240000 	.word	0x40240000
 8004a30:	f002 fb1e 	bl	8007070 <__aeabi_dmul>
 8004a34:	2200      	movs	r2, #0
 8004a36:	2300      	movs	r3, #0
 8004a38:	4606      	mov	r6, r0
 8004a3a:	460f      	mov	r7, r1
 8004a3c:	f002 fd80 	bl	8007540 <__aeabi_dcmpeq>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f040 83d3 	bne.w	80051ec <_dtoa_r+0xaac>
 8004a46:	4652      	mov	r2, sl
 8004a48:	465b      	mov	r3, fp
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	f002 fc39 	bl	80072c4 <__aeabi_ddiv>
 8004a52:	f002 fda7 	bl	80075a4 <__aeabi_d2iz>
 8004a56:	4605      	mov	r5, r0
 8004a58:	f002 faa4 	bl	8006fa4 <__aeabi_i2d>
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	465b      	mov	r3, fp
 8004a60:	f002 fb06 	bl	8007070 <__aeabi_dmul>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	f002 f94c 	bl	8006d08 <__aeabi_dsub>
 8004a70:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8004a74:	45c1      	cmp	r9, r8
 8004a76:	f809 ec01 	strb.w	lr, [r9, #-1]
 8004a7a:	464c      	mov	r4, r9
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	4ba9      	ldr	r3, [pc, #676]	; (8004d2c <_dtoa_r+0x5ec>)
 8004a86:	f109 0901 	add.w	r9, r9, #1
 8004a8a:	d1d1      	bne.n	8004a30 <_dtoa_r+0x2f0>
 8004a8c:	46a3      	mov	fp, r4
 8004a8e:	9c06      	ldr	r4, [sp, #24]
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	4630      	mov	r0, r6
 8004a96:	4639      	mov	r1, r7
 8004a98:	f002 f938 	bl	8006d0c <__adddf3>
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	f002 fd54 	bl	8007554 <__aeabi_dcmplt>
 8004aac:	b940      	cbnz	r0, 8004ac0 <_dtoa_r+0x380>
 8004aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	f002 fd43 	bl	8007540 <__aeabi_dcmpeq>
 8004aba:	b190      	cbz	r0, 8004ae2 <_dtoa_r+0x3a2>
 8004abc:	07eb      	lsls	r3, r5, #31
 8004abe:	d510      	bpl.n	8004ae2 <_dtoa_r+0x3a2>
 8004ac0:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8004ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ac6:	e005      	b.n	8004ad4 <_dtoa_r+0x394>
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f000 8431 	beq.w	8005330 <_dtoa_r+0xbf0>
 8004ace:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8004ad2:	469b      	mov	fp, r3
 8004ad4:	2d39      	cmp	r5, #57	; 0x39
 8004ad6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004ada:	d0f5      	beq.n	8004ac8 <_dtoa_r+0x388>
 8004adc:	1c6a      	adds	r2, r5, #1
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ae6:	f001 f87b 	bl	8005be0 <_Bfree>
 8004aea:	9e08      	ldr	r6, [sp, #32]
 8004aec:	1c73      	adds	r3, r6, #1
 8004aee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004af0:	2200      	movs	r2, #0
 8004af2:	f88b 2000 	strb.w	r2, [fp]
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	f000 831e 	beq.w	800513c <_dtoa_r+0x9fc>
 8004b00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004b02:	f8c6 b000 	str.w	fp, [r6]
 8004b06:	b01d      	add	sp, #116	; 0x74
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	f000 8107 	beq.w	8004d22 <_dtoa_r+0x5e2>
 8004b14:	9e04      	ldr	r6, [sp, #16]
 8004b16:	2e01      	cmp	r6, #1
 8004b18:	f340 82d5 	ble.w	80050c6 <_dtoa_r+0x986>
 8004b1c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004b1e:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8004b22:	42be      	cmp	r6, r7
 8004b24:	f2c0 839b 	blt.w	800525e <_dtoa_r+0xb1e>
 8004b28:	1bf7      	subs	r7, r6, r7
 8004b2a:	f1b9 0f00 	cmp.w	r9, #0
 8004b2e:	f2c0 8492 	blt.w	8005456 <_dtoa_r+0xd16>
 8004b32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b34:	464b      	mov	r3, r9
 8004b36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004b38:	441e      	add	r6, r3
 8004b3a:	960a      	str	r6, [sp, #40]	; 0x28
 8004b3c:	9e07      	ldr	r6, [sp, #28]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	441e      	add	r6, r3
 8004b42:	2101      	movs	r1, #1
 8004b44:	9607      	str	r6, [sp, #28]
 8004b46:	f001 f8ef 	bl	8005d28 <__i2b>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	b165      	cbz	r5, 8004b68 <_dtoa_r+0x428>
 8004b4e:	9907      	ldr	r1, [sp, #28]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	dd09      	ble.n	8004b68 <_dtoa_r+0x428>
 8004b54:	460b      	mov	r3, r1
 8004b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	bfa8      	it	ge
 8004b5c:	462b      	movge	r3, r5
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	1ac9      	subs	r1, r1, r3
 8004b62:	920a      	str	r2, [sp, #40]	; 0x28
 8004b64:	1aed      	subs	r5, r5, r3
 8004b66:	9107      	str	r1, [sp, #28]
 8004b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dd1b      	ble.n	8004ba6 <_dtoa_r+0x466>
 8004b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b70:	2900      	cmp	r1, #0
 8004b72:	f000 836a 	beq.w	800524a <_dtoa_r+0xb0a>
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	dd11      	ble.n	8004b9e <_dtoa_r+0x45e>
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	463a      	mov	r2, r7
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f001 f97a 	bl	8005e78 <__pow5mult>
 8004b84:	4606      	mov	r6, r0
 8004b86:	4631      	mov	r1, r6
 8004b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f001 f8d6 	bl	8005d3c <__multiply>
 8004b90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b92:	4680      	mov	r8, r0
 8004b94:	4620      	mov	r0, r4
 8004b96:	f001 f823 	bl	8005be0 <_Bfree>
 8004b9a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ba0:	1bda      	subs	r2, r3, r7
 8004ba2:	f040 828a 	bne.w	80050ba <_dtoa_r+0x97a>
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f001 f8bd 	bl	8005d28 <__i2b>
 8004bae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	dd05      	ble.n	8004bc2 <_dtoa_r+0x482>
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f001 f95c 	bl	8005e78 <__pow5mult>
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	2a01      	cmp	r2, #1
 8004bc6:	f340 82cb 	ble.w	8005160 <_dtoa_r+0xa20>
 8004bca:	2700      	movs	r7, #0
 8004bcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	f040 82aa 	bne.w	8005128 <_dtoa_r+0x9e8>
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	9b07      	ldr	r3, [sp, #28]
 8004bd8:	4403      	add	r3, r0
 8004bda:	f013 031f 	ands.w	r3, r3, #31
 8004bde:	f000 80a7 	beq.w	8004d30 <_dtoa_r+0x5f0>
 8004be2:	f1c3 0220 	rsb	r2, r3, #32
 8004be6:	2a04      	cmp	r2, #4
 8004be8:	f340 84c9 	ble.w	800557e <_dtoa_r+0xe3e>
 8004bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bee:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8004bf2:	f1c3 031c 	rsb	r3, r3, #28
 8004bf6:	441a      	add	r2, r3
 8004bf8:	449e      	add	lr, r3
 8004bfa:	920a      	str	r2, [sp, #40]	; 0x28
 8004bfc:	441d      	add	r5, r3
 8004bfe:	f8cd e01c 	str.w	lr, [sp, #28]
 8004c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	dd05      	ble.n	8004c14 <_dtoa_r+0x4d4>
 8004c08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f001 f981 	bl	8005f14 <__lshift>
 8004c12:	900c      	str	r0, [sp, #48]	; 0x30
 8004c14:	9907      	ldr	r1, [sp, #28]
 8004c16:	2900      	cmp	r1, #0
 8004c18:	dd05      	ble.n	8004c26 <_dtoa_r+0x4e6>
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	9a07      	ldr	r2, [sp, #28]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f001 f978 	bl	8005f14 <__lshift>
 8004c24:	4680      	mov	r8, r0
 8004c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	f040 8262 	bne.w	80050f2 <_dtoa_r+0x9b2>
 8004c2e:	f1b9 0f00 	cmp.w	r9, #0
 8004c32:	f340 82b0 	ble.w	8005196 <_dtoa_r+0xa56>
 8004c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	f040 8089 	bne.w	8004d50 <_dtoa_r+0x610>
 8004c3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004c40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004c42:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004c46:	e006      	b.n	8004c56 <_dtoa_r+0x516>
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f000 ffd0 	bl	8005bf4 <__multadd>
 8004c54:	4607      	mov	r7, r0
 8004c56:	4638      	mov	r0, r7
 8004c58:	4641      	mov	r1, r8
 8004c5a:	f7ff fcd9 	bl	8004610 <quorem>
 8004c5e:	3030      	adds	r0, #48	; 0x30
 8004c60:	f80b 0005 	strb.w	r0, [fp, r5]
 8004c64:	3501      	adds	r5, #1
 8004c66:	45a9      	cmp	r9, r5
 8004c68:	dcee      	bgt.n	8004c48 <_dtoa_r+0x508>
 8004c6a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004c6e:	970c      	str	r7, [sp, #48]	; 0x30
 8004c70:	4682      	mov	sl, r0
 8004c72:	f1b9 0f01 	cmp.w	r9, #1
 8004c76:	bfac      	ite	ge
 8004c78:	44cb      	addge	fp, r9
 8004c7a:	f10b 0b01 	addlt.w	fp, fp, #1
 8004c7e:	2500      	movs	r5, #0
 8004c80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c82:	2201      	movs	r2, #1
 8004c84:	4620      	mov	r0, r4
 8004c86:	f001 f945 	bl	8005f14 <__lshift>
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	900c      	str	r0, [sp, #48]	; 0x30
 8004c8e:	f001 f99f 	bl	8005fd0 <__mcmp>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	f340 8311 	ble.w	80052ba <_dtoa_r+0xb7a>
 8004c98:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8004c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c9e:	e005      	b.n	8004cac <_dtoa_r+0x56c>
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	f000 829a 	beq.w	80051da <_dtoa_r+0xa9a>
 8004ca6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004caa:	469b      	mov	fp, r3
 8004cac:	2a39      	cmp	r2, #57	; 0x39
 8004cae:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004cb2:	d0f5      	beq.n	8004ca0 <_dtoa_r+0x560>
 8004cb4:	3201      	adds	r2, #1
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 ff90 	bl	8005be0 <_Bfree>
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	f43f af0e 	beq.w	8004ae2 <_dtoa_r+0x3a2>
 8004cc6:	b12d      	cbz	r5, 8004cd4 <_dtoa_r+0x594>
 8004cc8:	42b5      	cmp	r5, r6
 8004cca:	d003      	beq.n	8004cd4 <_dtoa_r+0x594>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f000 ff86 	bl	8005be0 <_Bfree>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 ff82 	bl	8005be0 <_Bfree>
 8004cdc:	e701      	b.n	8004ae2 <_dtoa_r+0x3a2>
 8004cde:	2601      	movs	r6, #1
 8004ce0:	9610      	str	r6, [sp, #64]	; 0x40
 8004ce2:	e5e9      	b.n	80048b8 <_dtoa_r+0x178>
 8004ce4:	9808      	ldr	r0, [sp, #32]
 8004ce6:	f002 f95d 	bl	8006fa4 <__aeabi_i2d>
 8004cea:	4632      	mov	r2, r6
 8004cec:	463b      	mov	r3, r7
 8004cee:	f002 fc27 	bl	8007540 <__aeabi_dcmpeq>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f47f adcc 	bne.w	8004890 <_dtoa_r+0x150>
 8004cf8:	9e08      	ldr	r6, [sp, #32]
 8004cfa:	3e01      	subs	r6, #1
 8004cfc:	9608      	str	r6, [sp, #32]
 8004cfe:	e5c7      	b.n	8004890 <_dtoa_r+0x150>
 8004d00:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004d02:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004d06:	ebce 0606 	rsb	r6, lr, r6
 8004d0a:	960a      	str	r6, [sp, #40]	; 0x28
 8004d0c:	f1ce 0600 	rsb	r6, lr, #0
 8004d10:	960e      	str	r6, [sp, #56]	; 0x38
 8004d12:	2600      	movs	r6, #0
 8004d14:	960f      	str	r6, [sp, #60]	; 0x3c
 8004d16:	e5e3      	b.n	80048e0 <_dtoa_r+0x1a0>
 8004d18:	426e      	negs	r6, r5
 8004d1a:	960a      	str	r6, [sp, #40]	; 0x28
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	9607      	str	r6, [sp, #28]
 8004d20:	e5d2      	b.n	80048c8 <_dtoa_r+0x188>
 8004d22:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004d26:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004d28:	e710      	b.n	8004b4c <_dtoa_r+0x40c>
 8004d2a:	bf00      	nop
 8004d2c:	40240000 	.word	0x40240000
 8004d30:	231c      	movs	r3, #28
 8004d32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d34:	9a07      	ldr	r2, [sp, #28]
 8004d36:	4419      	add	r1, r3
 8004d38:	441a      	add	r2, r3
 8004d3a:	910a      	str	r1, [sp, #40]	; 0x28
 8004d3c:	441d      	add	r5, r3
 8004d3e:	9207      	str	r2, [sp, #28]
 8004d40:	e75f      	b.n	8004c02 <_dtoa_r+0x4c2>
 8004d42:	4840      	ldr	r0, [pc, #256]	; (8004e44 <_dtoa_r+0x704>)
 8004d44:	1b40      	subs	r0, r0, r5
 8004d46:	fa0a f000 	lsl.w	r0, sl, r0
 8004d4a:	e56d      	b.n	8004828 <_dtoa_r+0xe8>
 8004d4c:	9010      	str	r0, [sp, #64]	; 0x40
 8004d4e:	e5b3      	b.n	80048b8 <_dtoa_r+0x178>
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	dd05      	ble.n	8004d60 <_dtoa_r+0x620>
 8004d54:	4631      	mov	r1, r6
 8004d56:	462a      	mov	r2, r5
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f001 f8db 	bl	8005f14 <__lshift>
 8004d5e:	4606      	mov	r6, r0
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f040 82ef 	bne.w	8005344 <_dtoa_r+0xc04>
 8004d66:	4637      	mov	r7, r6
 8004d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d6c:	444b      	add	r3, r9
 8004d6e:	f00a 0101 	and.w	r1, sl, #1
 8004d72:	930a      	str	r3, [sp, #40]	; 0x28
 8004d74:	910d      	str	r1, [sp, #52]	; 0x34
 8004d76:	1c55      	adds	r5, r2, #1
 8004d78:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004d7c:	e00a      	b.n	8004d94 <_dtoa_r+0x654>
 8004d7e:	f000 ff39 	bl	8005bf4 <__multadd>
 8004d82:	4639      	mov	r1, r7
 8004d84:	4606      	mov	r6, r0
 8004d86:	220a      	movs	r2, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f000 ff32 	bl	8005bf4 <__multadd>
 8004d90:	4607      	mov	r7, r0
 8004d92:	3501      	adds	r5, #1
 8004d94:	4641      	mov	r1, r8
 8004d96:	4648      	mov	r0, r9
 8004d98:	f7ff fc3a 	bl	8004610 <quorem>
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4683      	mov	fp, r0
 8004da0:	4648      	mov	r0, r9
 8004da2:	f001 f915 	bl	8005fd0 <__mcmp>
 8004da6:	463a      	mov	r2, r7
 8004da8:	9006      	str	r0, [sp, #24]
 8004daa:	4641      	mov	r1, r8
 8004dac:	4620      	mov	r0, r4
 8004dae:	f001 f933 	bl	8006018 <__mdiff>
 8004db2:	68c2      	ldr	r2, [r0, #12]
 8004db4:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8004db8:	4603      	mov	r3, r0
 8004dba:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 8004dbe:	f8cd e01c 	str.w	lr, [sp, #28]
 8004dc2:	2a00      	cmp	r2, #0
 8004dc4:	f040 8188 	bne.w	80050d8 <_dtoa_r+0x998>
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4648      	mov	r0, r9
 8004dcc:	9303      	str	r3, [sp, #12]
 8004dce:	f001 f8ff 	bl	8005fd0 <__mcmp>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4620      	mov	r0, r4
 8004dda:	9203      	str	r2, [sp, #12]
 8004ddc:	f000 ff00 	bl	8005be0 <_Bfree>
 8004de0:	9a03      	ldr	r2, [sp, #12]
 8004de2:	b92a      	cbnz	r2, 8004df0 <_dtoa_r+0x6b0>
 8004de4:	9904      	ldr	r1, [sp, #16]
 8004de6:	b919      	cbnz	r1, 8004df0 <_dtoa_r+0x6b0>
 8004de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 83a7 	beq.w	800553e <_dtoa_r+0xdfe>
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f2c0 8242 	blt.w	800527c <_dtoa_r+0xb3c>
 8004df8:	d105      	bne.n	8004e06 <_dtoa_r+0x6c6>
 8004dfa:	9904      	ldr	r1, [sp, #16]
 8004dfc:	b919      	cbnz	r1, 8004e06 <_dtoa_r+0x6c6>
 8004dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 823b 	beq.w	800527c <_dtoa_r+0xb3c>
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	f300 82b0 	bgt.w	800536c <_dtoa_r+0xc2c>
 8004e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e0e:	f805 ac01 	strb.w	sl, [r5, #-1]
 8004e12:	428d      	cmp	r5, r1
 8004e14:	46ab      	mov	fp, r5
 8004e16:	f000 82ba 	beq.w	800538e <_dtoa_r+0xc4e>
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fee7 	bl	8005bf4 <__multadd>
 8004e26:	42be      	cmp	r6, r7
 8004e28:	4681      	mov	r9, r0
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f04f 020a 	mov.w	r2, #10
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	d1a2      	bne.n	8004d7e <_dtoa_r+0x63e>
 8004e38:	f000 fedc 	bl	8005bf4 <__multadd>
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	4607      	mov	r7, r0
 8004e40:	e7a7      	b.n	8004d92 <_dtoa_r+0x652>
 8004e42:	bf00      	nop
 8004e44:	fffffbee 	.word	0xfffffbee
 8004e48:	2100      	movs	r1, #0
 8004e4a:	910d      	str	r1, [sp, #52]	; 0x34
 8004e4c:	9a06      	ldr	r2, [sp, #24]
 8004e4e:	9b08      	ldr	r3, [sp, #32]
 8004e50:	441a      	add	r2, r3
 8004e52:	f102 0901 	add.w	r9, r2, #1
 8004e56:	f1b9 0f00 	cmp.w	r9, #0
 8004e5a:	9211      	str	r2, [sp, #68]	; 0x44
 8004e5c:	464d      	mov	r5, r9
 8004e5e:	f340 8145 	ble.w	80050ec <_dtoa_r+0x9ac>
 8004e62:	2100      	movs	r1, #0
 8004e64:	2d17      	cmp	r5, #23
 8004e66:	6461      	str	r1, [r4, #68]	; 0x44
 8004e68:	d90a      	bls.n	8004e80 <_dtoa_r+0x740>
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	f103 0014 	add.w	r0, r3, #20
 8004e74:	42a8      	cmp	r0, r5
 8004e76:	4611      	mov	r1, r2
 8004e78:	f102 0201 	add.w	r2, r2, #1
 8004e7c:	d9f7      	bls.n	8004e6e <_dtoa_r+0x72e>
 8004e7e:	6461      	str	r1, [r4, #68]	; 0x44
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 fe87 	bl	8005b94 <_Balloc>
 8004e86:	2d0e      	cmp	r5, #14
 8004e88:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e8a:	6420      	str	r0, [r4, #64]	; 0x40
 8004e8c:	f63f ad69 	bhi.w	8004962 <_dtoa_r+0x222>
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	f43f ad66 	beq.w	8004962 <_dtoa_r+0x222>
 8004e96:	9e08      	ldr	r6, [sp, #32]
 8004e98:	2e00      	cmp	r6, #0
 8004e9a:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8004e9e:	f340 8220 	ble.w	80052e2 <_dtoa_r+0xba2>
 8004ea2:	4ba8      	ldr	r3, [pc, #672]	; (8005144 <_dtoa_r+0xa04>)
 8004ea4:	f006 020f 	and.w	r2, r6, #15
 8004ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eac:	1135      	asrs	r5, r6, #4
 8004eae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004eb2:	06eb      	lsls	r3, r5, #27
 8004eb4:	f140 81db 	bpl.w	800526e <_dtoa_r+0xb2e>
 8004eb8:	4ba3      	ldr	r3, [pc, #652]	; (8005148 <_dtoa_r+0xa08>)
 8004eba:	4650      	mov	r0, sl
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ec2:	f002 f9ff 	bl	80072c4 <__aeabi_ddiv>
 8004ec6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004eca:	f005 050f 	and.w	r5, r5, #15
 8004ece:	f04f 0803 	mov.w	r8, #3
 8004ed2:	b18d      	cbz	r5, 8004ef8 <_dtoa_r+0x7b8>
 8004ed4:	f8df a270 	ldr.w	sl, [pc, #624]	; 8005148 <_dtoa_r+0xa08>
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	07ee      	lsls	r6, r5, #31
 8004ede:	d505      	bpl.n	8004eec <_dtoa_r+0x7ac>
 8004ee0:	e9da 2300 	ldrd	r2, r3, [sl]
 8004ee4:	f002 f8c4 	bl	8007070 <__aeabi_dmul>
 8004ee8:	f108 0801 	add.w	r8, r8, #1
 8004eec:	106d      	asrs	r5, r5, #1
 8004eee:	f10a 0a08 	add.w	sl, sl, #8
 8004ef2:	d1f3      	bne.n	8004edc <_dtoa_r+0x79c>
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	f002 f9e0 	bl	80072c4 <__aeabi_ddiv>
 8004f04:	4682      	mov	sl, r0
 8004f06:	468b      	mov	fp, r1
 8004f08:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004f0a:	b146      	cbz	r6, 8004f1e <_dtoa_r+0x7de>
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	4659      	mov	r1, fp
 8004f10:	2200      	movs	r2, #0
 8004f12:	4b8e      	ldr	r3, [pc, #568]	; (800514c <_dtoa_r+0xa0c>)
 8004f14:	f002 fb1e 	bl	8007554 <__aeabi_dcmplt>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f040 82bd 	bne.w	8005498 <_dtoa_r+0xd58>
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f002 f840 	bl	8006fa4 <__aeabi_i2d>
 8004f24:	4652      	mov	r2, sl
 8004f26:	465b      	mov	r3, fp
 8004f28:	f002 f8a2 	bl	8007070 <__aeabi_dmul>
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4b88      	ldr	r3, [pc, #544]	; (8005150 <_dtoa_r+0xa10>)
 8004f30:	f001 feec 	bl	8006d0c <__adddf3>
 8004f34:	4606      	mov	r6, r0
 8004f36:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004f3a:	f1b9 0f00 	cmp.w	r9, #0
 8004f3e:	f000 8168 	beq.w	8005212 <_dtoa_r+0xad2>
 8004f42:	9908      	ldr	r1, [sp, #32]
 8004f44:	9119      	str	r1, [sp, #100]	; 0x64
 8004f46:	46c8      	mov	r8, r9
 8004f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	f000 8228 	beq.w	80053a0 <_dtoa_r+0xc60>
 8004f50:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <_dtoa_r+0xa04>)
 8004f52:	4980      	ldr	r1, [pc, #512]	; (8005154 <_dtoa_r+0xa14>)
 8004f54:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f002 f9b1 	bl	80072c4 <__aeabi_ddiv>
 8004f62:	4632      	mov	r2, r6
 8004f64:	463b      	mov	r3, r7
 8004f66:	f001 fecf 	bl	8006d08 <__aeabi_dsub>
 8004f6a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f6e:	4659      	mov	r1, fp
 8004f70:	4650      	mov	r0, sl
 8004f72:	f002 fb17 	bl	80075a4 <__aeabi_d2iz>
 8004f76:	4605      	mov	r5, r0
 8004f78:	f002 f814 	bl	8006fa4 <__aeabi_i2d>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4650      	mov	r0, sl
 8004f82:	4659      	mov	r1, fp
 8004f84:	f001 fec0 	bl	8006d08 <__aeabi_dsub>
 8004f88:	3530      	adds	r5, #48	; 0x30
 8004f8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8004f90:	b2ed      	uxtb	r5, r5
 8004f92:	7035      	strb	r5, [r6, #0]
 8004f94:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f9c:	f106 0b01 	add.w	fp, r6, #1
 8004fa0:	f002 faf6 	bl	8007590 <__aeabi_dcmpgt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f040 82bf 	bne.w	8005528 <_dtoa_r+0xde8>
 8004faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	4966      	ldr	r1, [pc, #408]	; (800514c <_dtoa_r+0xa0c>)
 8004fb2:	f001 fea9 	bl	8006d08 <__aeabi_dsub>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004fbe:	f002 fae7 	bl	8007590 <__aeabi_dcmpgt>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f040 82b6 	bne.w	8005534 <_dtoa_r+0xdf4>
 8004fc8:	f1b8 0f01 	cmp.w	r8, #1
 8004fcc:	f340 8185 	ble.w	80052da <_dtoa_r+0xb9a>
 8004fd0:	44b0      	add	r8, r6
 8004fd2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8004fd6:	46a2      	mov	sl, r4
 8004fd8:	46c1      	mov	r9, r8
 8004fda:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fde:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8004fe2:	e00d      	b.n	8005000 <_dtoa_r+0x8c0>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	4959      	ldr	r1, [pc, #356]	; (800514c <_dtoa_r+0xa0c>)
 8004fe8:	f001 fe8e 	bl	8006d08 <__aeabi_dsub>
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	f002 fab0 	bl	8007554 <__aeabi_dcmplt>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	f040 829b 	bne.w	8005530 <_dtoa_r+0xdf0>
 8004ffa:	45cb      	cmp	fp, r9
 8004ffc:	f000 816a 	beq.w	80052d4 <_dtoa_r+0xb94>
 8005000:	4620      	mov	r0, r4
 8005002:	4629      	mov	r1, r5
 8005004:	2200      	movs	r2, #0
 8005006:	4b54      	ldr	r3, [pc, #336]	; (8005158 <_dtoa_r+0xa18>)
 8005008:	f002 f832 	bl	8007070 <__aeabi_dmul>
 800500c:	2200      	movs	r2, #0
 800500e:	4b52      	ldr	r3, [pc, #328]	; (8005158 <_dtoa_r+0xa18>)
 8005010:	4604      	mov	r4, r0
 8005012:	460d      	mov	r5, r1
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f002 f82a 	bl	8007070 <__aeabi_dmul>
 800501c:	460f      	mov	r7, r1
 800501e:	4606      	mov	r6, r0
 8005020:	f002 fac0 	bl	80075a4 <__aeabi_d2iz>
 8005024:	4680      	mov	r8, r0
 8005026:	f001 ffbd 	bl	8006fa4 <__aeabi_i2d>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4630      	mov	r0, r6
 8005030:	4639      	mov	r1, r7
 8005032:	f001 fe69 	bl	8006d08 <__aeabi_dsub>
 8005036:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800503a:	fa5f f888 	uxtb.w	r8, r8
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f80b 8b01 	strb.w	r8, [fp], #1
 8005046:	4606      	mov	r6, r0
 8005048:	460f      	mov	r7, r1
 800504a:	f002 fa83 	bl	8007554 <__aeabi_dcmplt>
 800504e:	4632      	mov	r2, r6
 8005050:	463b      	mov	r3, r7
 8005052:	2800      	cmp	r0, #0
 8005054:	d0c6      	beq.n	8004fe4 <_dtoa_r+0x8a4>
 8005056:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005058:	9608      	str	r6, [sp, #32]
 800505a:	4654      	mov	r4, sl
 800505c:	e541      	b.n	8004ae2 <_dtoa_r+0x3a2>
 800505e:	2200      	movs	r2, #0
 8005060:	920d      	str	r2, [sp, #52]	; 0x34
 8005062:	9b06      	ldr	r3, [sp, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dd3d      	ble.n	80050e4 <_dtoa_r+0x9a4>
 8005068:	461d      	mov	r5, r3
 800506a:	9311      	str	r3, [sp, #68]	; 0x44
 800506c:	4699      	mov	r9, r3
 800506e:	e6f8      	b.n	8004e62 <_dtoa_r+0x722>
 8005070:	2301      	movs	r3, #1
 8005072:	930d      	str	r3, [sp, #52]	; 0x34
 8005074:	e7f5      	b.n	8005062 <_dtoa_r+0x922>
 8005076:	f1b9 0f00 	cmp.w	r9, #0
 800507a:	f73f ac85 	bgt.w	8004988 <_dtoa_r+0x248>
 800507e:	f040 80e0 	bne.w	8005242 <_dtoa_r+0xb02>
 8005082:	2200      	movs	r2, #0
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <_dtoa_r+0xa1c>)
 8005086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800508a:	f001 fff1 	bl	8007070 <__aeabi_dmul>
 800508e:	4652      	mov	r2, sl
 8005090:	465b      	mov	r3, fp
 8005092:	f002 fa73 	bl	800757c <__aeabi_dcmpge>
 8005096:	46c8      	mov	r8, r9
 8005098:	464e      	mov	r6, r9
 800509a:	2800      	cmp	r0, #0
 800509c:	f000 8091 	beq.w	80051c2 <_dtoa_r+0xa82>
 80050a0:	9b06      	ldr	r3, [sp, #24]
 80050a2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80050a6:	43db      	mvns	r3, r3
 80050a8:	9308      	str	r3, [sp, #32]
 80050aa:	4641      	mov	r1, r8
 80050ac:	4620      	mov	r0, r4
 80050ae:	f000 fd97 	bl	8005be0 <_Bfree>
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	f47f ae0e 	bne.w	8004cd4 <_dtoa_r+0x594>
 80050b8:	e513      	b.n	8004ae2 <_dtoa_r+0x3a2>
 80050ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 fedb 	bl	8005e78 <__pow5mult>
 80050c2:	900c      	str	r0, [sp, #48]	; 0x30
 80050c4:	e56f      	b.n	8004ba6 <_dtoa_r+0x466>
 80050c6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	f000 81ca 	beq.w	8005462 <_dtoa_r+0xd22>
 80050ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80050d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80050d6:	e52e      	b.n	8004b36 <_dtoa_r+0x3f6>
 80050d8:	4601      	mov	r1, r0
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 fd80 	bl	8005be0 <_Bfree>
 80050e0:	2201      	movs	r2, #1
 80050e2:	e685      	b.n	8004df0 <_dtoa_r+0x6b0>
 80050e4:	2501      	movs	r5, #1
 80050e6:	9511      	str	r5, [sp, #68]	; 0x44
 80050e8:	46a9      	mov	r9, r5
 80050ea:	9506      	str	r5, [sp, #24]
 80050ec:	2100      	movs	r1, #0
 80050ee:	6461      	str	r1, [r4, #68]	; 0x44
 80050f0:	e6c6      	b.n	8004e80 <_dtoa_r+0x740>
 80050f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80050f4:	4641      	mov	r1, r8
 80050f6:	f000 ff6b 	bl	8005fd0 <__mcmp>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	f6bf ad97 	bge.w	8004c2e <_dtoa_r+0x4ee>
 8005100:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005106:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800510a:	4620      	mov	r0, r4
 800510c:	220a      	movs	r2, #10
 800510e:	2300      	movs	r3, #0
 8005110:	f8cd e020 	str.w	lr, [sp, #32]
 8005114:	f000 fd6e 	bl	8005bf4 <__multadd>
 8005118:	990d      	ldr	r1, [sp, #52]	; 0x34
 800511a:	900c      	str	r0, [sp, #48]	; 0x30
 800511c:	2900      	cmp	r1, #0
 800511e:	f040 8220 	bne.w	8005562 <_dtoa_r+0xe22>
 8005122:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8005126:	e582      	b.n	8004c2e <_dtoa_r+0x4ee>
 8005128:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800512c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005130:	6918      	ldr	r0, [r3, #16]
 8005132:	f000 fdab 	bl	8005c8c <__hi0bits>
 8005136:	f1c0 0020 	rsb	r0, r0, #32
 800513a:	e54c      	b.n	8004bd6 <_dtoa_r+0x496>
 800513c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800513e:	f7ff bb35 	b.w	80047ac <_dtoa_r+0x6c>
 8005142:	bf00      	nop
 8005144:	08007df8 	.word	0x08007df8
 8005148:	08007ec0 	.word	0x08007ec0
 800514c:	3ff00000 	.word	0x3ff00000
 8005150:	401c0000 	.word	0x401c0000
 8005154:	3fe00000 	.word	0x3fe00000
 8005158:	40240000 	.word	0x40240000
 800515c:	40140000 	.word	0x40140000
 8005160:	f1ba 0f00 	cmp.w	sl, #0
 8005164:	f47f ad31 	bne.w	8004bca <_dtoa_r+0x48a>
 8005168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 817f 	bne.w	8005470 <_dtoa_r+0xd30>
 8005172:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005176:	0d3f      	lsrs	r7, r7, #20
 8005178:	053f      	lsls	r7, r7, #20
 800517a:	2f00      	cmp	r7, #0
 800517c:	f43f ad26 	beq.w	8004bcc <_dtoa_r+0x48c>
 8005180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005182:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	f10e 0e01 	add.w	lr, lr, #1
 800518c:	930a      	str	r3, [sp, #40]	; 0x28
 800518e:	f8cd e01c 	str.w	lr, [sp, #28]
 8005192:	2701      	movs	r7, #1
 8005194:	e51a      	b.n	8004bcc <_dtoa_r+0x48c>
 8005196:	9a04      	ldr	r2, [sp, #16]
 8005198:	2a02      	cmp	r2, #2
 800519a:	f77f ad4c 	ble.w	8004c36 <_dtoa_r+0x4f6>
 800519e:	f1b9 0f00 	cmp.w	r9, #0
 80051a2:	f47f af7d 	bne.w	80050a0 <_dtoa_r+0x960>
 80051a6:	4641      	mov	r1, r8
 80051a8:	464b      	mov	r3, r9
 80051aa:	2205      	movs	r2, #5
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fd21 	bl	8005bf4 <__multadd>
 80051b2:	4680      	mov	r8, r0
 80051b4:	4641      	mov	r1, r8
 80051b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051b8:	f000 ff0a 	bl	8005fd0 <__mcmp>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f77f af6f 	ble.w	80050a0 <_dtoa_r+0x960>
 80051c2:	f8dd e020 	ldr.w	lr, [sp, #32]
 80051c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c8:	2331      	movs	r3, #49	; 0x31
 80051ca:	f10e 0e01 	add.w	lr, lr, #1
 80051ce:	f8cd e020 	str.w	lr, [sp, #32]
 80051d2:	700b      	strb	r3, [r1, #0]
 80051d4:	f101 0b01 	add.w	fp, r1, #1
 80051d8:	e767      	b.n	80050aa <_dtoa_r+0x96a>
 80051da:	9a08      	ldr	r2, [sp, #32]
 80051dc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80051e0:	2331      	movs	r3, #49	; 0x31
 80051e2:	3201      	adds	r2, #1
 80051e4:	9208      	str	r2, [sp, #32]
 80051e6:	f88e 3000 	strb.w	r3, [lr]
 80051ea:	e565      	b.n	8004cb8 <_dtoa_r+0x578>
 80051ec:	46a3      	mov	fp, r4
 80051ee:	9c06      	ldr	r4, [sp, #24]
 80051f0:	e477      	b.n	8004ae2 <_dtoa_r+0x3a2>
 80051f2:	4640      	mov	r0, r8
 80051f4:	f001 fed6 	bl	8006fa4 <__aeabi_i2d>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4650      	mov	r0, sl
 80051fe:	4659      	mov	r1, fp
 8005200:	f001 ff36 	bl	8007070 <__aeabi_dmul>
 8005204:	2200      	movs	r2, #0
 8005206:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <_dtoa_r+0xd40>)
 8005208:	f001 fd80 	bl	8006d0c <__adddf3>
 800520c:	4606      	mov	r6, r0
 800520e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	2200      	movs	r2, #0
 8005218:	4b9a      	ldr	r3, [pc, #616]	; (8005484 <_dtoa_r+0xd44>)
 800521a:	f001 fd75 	bl	8006d08 <__aeabi_dsub>
 800521e:	4632      	mov	r2, r6
 8005220:	463b      	mov	r3, r7
 8005222:	4682      	mov	sl, r0
 8005224:	468b      	mov	fp, r1
 8005226:	f002 f9b3 	bl	8007590 <__aeabi_dcmpgt>
 800522a:	2800      	cmp	r0, #0
 800522c:	f040 80b4 	bne.w	8005398 <_dtoa_r+0xc58>
 8005230:	4632      	mov	r2, r6
 8005232:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005236:	4650      	mov	r0, sl
 8005238:	4659      	mov	r1, fp
 800523a:	f002 f98b 	bl	8007554 <__aeabi_dcmplt>
 800523e:	2800      	cmp	r0, #0
 8005240:	d04b      	beq.n	80052da <_dtoa_r+0xb9a>
 8005242:	f04f 0800 	mov.w	r8, #0
 8005246:	4646      	mov	r6, r8
 8005248:	e72a      	b.n	80050a0 <_dtoa_r+0x960>
 800524a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800524c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fe12 	bl	8005e78 <__pow5mult>
 8005254:	900c      	str	r0, [sp, #48]	; 0x30
 8005256:	e4a6      	b.n	8004ba6 <_dtoa_r+0x466>
 8005258:	2101      	movs	r1, #1
 800525a:	910d      	str	r1, [sp, #52]	; 0x34
 800525c:	e5f6      	b.n	8004e4c <_dtoa_r+0x70c>
 800525e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005260:	970e      	str	r7, [sp, #56]	; 0x38
 8005262:	1bbb      	subs	r3, r7, r6
 8005264:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005266:	441e      	add	r6, r3
 8005268:	960f      	str	r6, [sp, #60]	; 0x3c
 800526a:	2700      	movs	r7, #0
 800526c:	e45d      	b.n	8004b2a <_dtoa_r+0x3ea>
 800526e:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8005272:	f04f 0802 	mov.w	r8, #2
 8005276:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800527a:	e62a      	b.n	8004ed2 <_dtoa_r+0x792>
 800527c:	2a00      	cmp	r2, #0
 800527e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005282:	46d9      	mov	r9, fp
 8005284:	dd11      	ble.n	80052aa <_dtoa_r+0xb6a>
 8005286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005288:	2201      	movs	r2, #1
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fe42 	bl	8005f14 <__lshift>
 8005290:	4641      	mov	r1, r8
 8005292:	900c      	str	r0, [sp, #48]	; 0x30
 8005294:	f000 fe9c 	bl	8005fd0 <__mcmp>
 8005298:	2800      	cmp	r0, #0
 800529a:	f340 815b 	ble.w	8005554 <_dtoa_r+0xe14>
 800529e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052a2:	f000 8123 	beq.w	80054ec <_dtoa_r+0xdac>
 80052a6:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 80052aa:	4635      	mov	r5, r6
 80052ac:	9e07      	ldr	r6, [sp, #28]
 80052ae:	f886 a000 	strb.w	sl, [r6]
 80052b2:	f106 0b01 	add.w	fp, r6, #1
 80052b6:	463e      	mov	r6, r7
 80052b8:	e4fe      	b.n	8004cb8 <_dtoa_r+0x578>
 80052ba:	d103      	bne.n	80052c4 <_dtoa_r+0xb84>
 80052bc:	f01a 0f01 	tst.w	sl, #1
 80052c0:	f47f acea 	bne.w	8004c98 <_dtoa_r+0x558>
 80052c4:	465b      	mov	r3, fp
 80052c6:	469b      	mov	fp, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80052ce:	2a30      	cmp	r2, #48	; 0x30
 80052d0:	d0f9      	beq.n	80052c6 <_dtoa_r+0xb86>
 80052d2:	e4f1      	b.n	8004cb8 <_dtoa_r+0x578>
 80052d4:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 80052d8:	4654      	mov	r4, sl
 80052da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 80052de:	f7ff bb40 	b.w	8004962 <_dtoa_r+0x222>
 80052e2:	9e08      	ldr	r6, [sp, #32]
 80052e4:	4275      	negs	r5, r6
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	f000 80c5 	beq.w	8005476 <_dtoa_r+0xd36>
 80052ec:	4b66      	ldr	r3, [pc, #408]	; (8005488 <_dtoa_r+0xd48>)
 80052ee:	f005 020f 	and.w	r2, r5, #15
 80052f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80052fe:	f001 feb7 	bl	8007070 <__aeabi_dmul>
 8005302:	112d      	asrs	r5, r5, #4
 8005304:	4682      	mov	sl, r0
 8005306:	468b      	mov	fp, r1
 8005308:	f000 8136 	beq.w	8005578 <_dtoa_r+0xe38>
 800530c:	4e5f      	ldr	r6, [pc, #380]	; (800548c <_dtoa_r+0xd4c>)
 800530e:	f04f 0802 	mov.w	r8, #2
 8005312:	07ea      	lsls	r2, r5, #31
 8005314:	d505      	bpl.n	8005322 <_dtoa_r+0xbe2>
 8005316:	e9d6 2300 	ldrd	r2, r3, [r6]
 800531a:	f001 fea9 	bl	8007070 <__aeabi_dmul>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	106d      	asrs	r5, r5, #1
 8005324:	f106 0608 	add.w	r6, r6, #8
 8005328:	d1f3      	bne.n	8005312 <_dtoa_r+0xbd2>
 800532a:	4682      	mov	sl, r0
 800532c:	468b      	mov	fp, r1
 800532e:	e5eb      	b.n	8004f08 <_dtoa_r+0x7c8>
 8005330:	9e08      	ldr	r6, [sp, #32]
 8005332:	3601      	adds	r6, #1
 8005334:	9608      	str	r6, [sp, #32]
 8005336:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005338:	2230      	movs	r2, #48	; 0x30
 800533a:	7032      	strb	r2, [r6, #0]
 800533c:	2231      	movs	r2, #49	; 0x31
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	f7ff bbcf 	b.w	8004ae2 <_dtoa_r+0x3a2>
 8005344:	6871      	ldr	r1, [r6, #4]
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fc24 	bl	8005b94 <_Balloc>
 800534c:	6933      	ldr	r3, [r6, #16]
 800534e:	1c9a      	adds	r2, r3, #2
 8005350:	4605      	mov	r5, r0
 8005352:	0092      	lsls	r2, r2, #2
 8005354:	f106 010c 	add.w	r1, r6, #12
 8005358:	300c      	adds	r0, #12
 800535a:	f7fd fb0f 	bl	800297c <memcpy>
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	2201      	movs	r2, #1
 8005364:	f000 fdd6 	bl	8005f14 <__lshift>
 8005368:	4607      	mov	r7, r0
 800536a:	e4fd      	b.n	8004d68 <_dtoa_r+0x628>
 800536c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005370:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005374:	f000 80ba 	beq.w	80054ec <_dtoa_r+0xdac>
 8005378:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800537c:	f10a 0301 	add.w	r3, sl, #1
 8005380:	4635      	mov	r5, r6
 8005382:	f88e 3000 	strb.w	r3, [lr]
 8005386:	f10e 0b01 	add.w	fp, lr, #1
 800538a:	463e      	mov	r6, r7
 800538c:	e494      	b.n	8004cb8 <_dtoa_r+0x578>
 800538e:	4635      	mov	r5, r6
 8005390:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005394:	463e      	mov	r6, r7
 8005396:	e473      	b.n	8004c80 <_dtoa_r+0x540>
 8005398:	f04f 0800 	mov.w	r8, #0
 800539c:	4646      	mov	r6, r8
 800539e:	e710      	b.n	80051c2 <_dtoa_r+0xa82>
 80053a0:	4939      	ldr	r1, [pc, #228]	; (8005488 <_dtoa_r+0xd48>)
 80053a2:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
 80053a6:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b2:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80053b6:	f001 fe5b 	bl	8007070 <__aeabi_dmul>
 80053ba:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80053be:	4659      	mov	r1, fp
 80053c0:	4650      	mov	r0, sl
 80053c2:	f002 f8ef 	bl	80075a4 <__aeabi_d2iz>
 80053c6:	4605      	mov	r5, r0
 80053c8:	f001 fdec 	bl	8006fa4 <__aeabi_i2d>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	f001 fc98 	bl	8006d08 <__aeabi_dsub>
 80053d8:	460f      	mov	r7, r1
 80053da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053dc:	3530      	adds	r5, #48	; 0x30
 80053de:	f1b8 0f01 	cmp.w	r8, #1
 80053e2:	4606      	mov	r6, r0
 80053e4:	700d      	strb	r5, [r1, #0]
 80053e6:	f101 0b01 	add.w	fp, r1, #1
 80053ea:	d021      	beq.n	8005430 <_dtoa_r+0xcf0>
 80053ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ee:	1e4b      	subs	r3, r1, #1
 80053f0:	460d      	mov	r5, r1
 80053f2:	eb03 0a08 	add.w	sl, r3, r8
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	2200      	movs	r2, #0
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <_dtoa_r+0xd50>)
 80053fe:	f001 fe37 	bl	8007070 <__aeabi_dmul>
 8005402:	460f      	mov	r7, r1
 8005404:	4606      	mov	r6, r0
 8005406:	f002 f8cd 	bl	80075a4 <__aeabi_d2iz>
 800540a:	4680      	mov	r8, r0
 800540c:	f001 fdca 	bl	8006fa4 <__aeabi_i2d>
 8005410:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f001 fc74 	bl	8006d08 <__aeabi_dsub>
 8005420:	f805 8f01 	strb.w	r8, [r5, #1]!
 8005424:	4555      	cmp	r5, sl
 8005426:	d1e8      	bne.n	80053fa <_dtoa_r+0xcba>
 8005428:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800542a:	4606      	mov	r6, r0
 800542c:	460f      	mov	r7, r1
 800542e:	4493      	add	fp, r2
 8005430:	2200      	movs	r2, #0
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <_dtoa_r+0xd54>)
 8005434:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005438:	f001 fc68 	bl	8006d0c <__adddf3>
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	f002 f888 	bl	8007554 <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	d05b      	beq.n	8005500 <_dtoa_r+0xdc0>
 8005448:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800544a:	9608      	str	r6, [sp, #32]
 800544c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8005450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005452:	f7ff bb3f 	b.w	8004ad4 <_dtoa_r+0x394>
 8005456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005458:	2300      	movs	r3, #0
 800545a:	ebc9 0506 	rsb	r5, r9, r6
 800545e:	f7ff bb6a 	b.w	8004b36 <_dtoa_r+0x3f6>
 8005462:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005464:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005466:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005468:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800546c:	f7ff bb63 	b.w	8004b36 <_dtoa_r+0x3f6>
 8005470:	4657      	mov	r7, sl
 8005472:	f7ff bbab 	b.w	8004bcc <_dtoa_r+0x48c>
 8005476:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 800547a:	f04f 0802 	mov.w	r8, #2
 800547e:	e543      	b.n	8004f08 <_dtoa_r+0x7c8>
 8005480:	401c0000 	.word	0x401c0000
 8005484:	40140000 	.word	0x40140000
 8005488:	08007df8 	.word	0x08007df8
 800548c:	08007ec0 	.word	0x08007ec0
 8005490:	40240000 	.word	0x40240000
 8005494:	3fe00000 	.word	0x3fe00000
 8005498:	f1b9 0f00 	cmp.w	r9, #0
 800549c:	f43f aea9 	beq.w	80051f2 <_dtoa_r+0xab2>
 80054a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80054a2:	2e00      	cmp	r6, #0
 80054a4:	f77f af19 	ble.w	80052da <_dtoa_r+0xb9a>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b38      	ldr	r3, [pc, #224]	; (800558c <_dtoa_r+0xe4c>)
 80054ac:	4650      	mov	r0, sl
 80054ae:	4659      	mov	r1, fp
 80054b0:	f001 fdde 	bl	8007070 <__aeabi_dmul>
 80054b4:	4682      	mov	sl, r0
 80054b6:	f108 0001 	add.w	r0, r8, #1
 80054ba:	468b      	mov	fp, r1
 80054bc:	f001 fd72 	bl	8006fa4 <__aeabi_i2d>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4650      	mov	r0, sl
 80054c6:	4659      	mov	r1, fp
 80054c8:	f001 fdd2 	bl	8007070 <__aeabi_dmul>
 80054cc:	2200      	movs	r2, #0
 80054ce:	4b30      	ldr	r3, [pc, #192]	; (8005590 <_dtoa_r+0xe50>)
 80054d0:	f001 fc1c 	bl	8006d0c <__adddf3>
 80054d4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80054d8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80054dc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80054e0:	4606      	mov	r6, r0
 80054e2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80054e6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80054ea:	e52d      	b.n	8004f48 <_dtoa_r+0x808>
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054f0:	2239      	movs	r2, #57	; 0x39
 80054f2:	4635      	mov	r5, r6
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	463e      	mov	r6, r7
 80054f8:	f103 0b01 	add.w	fp, r3, #1
 80054fc:	f7ff bbd6 	b.w	8004cac <_dtoa_r+0x56c>
 8005500:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005504:	2000      	movs	r0, #0
 8005506:	4923      	ldr	r1, [pc, #140]	; (8005594 <_dtoa_r+0xe54>)
 8005508:	f001 fbfe 	bl	8006d08 <__aeabi_dsub>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f002 f83e 	bl	8007590 <__aeabi_dcmpgt>
 8005514:	2800      	cmp	r0, #0
 8005516:	f43f aee0 	beq.w	80052da <_dtoa_r+0xb9a>
 800551a:	465b      	mov	r3, fp
 800551c:	469b      	mov	fp, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8005524:	2a30      	cmp	r2, #48	; 0x30
 8005526:	d0f9      	beq.n	800551c <_dtoa_r+0xddc>
 8005528:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800552a:	9608      	str	r6, [sp, #32]
 800552c:	f7ff bad9 	b.w	8004ae2 <_dtoa_r+0x3a2>
 8005530:	4645      	mov	r5, r8
 8005532:	4654      	mov	r4, sl
 8005534:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005536:	9608      	str	r6, [sp, #32]
 8005538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800553a:	f7ff bacb 	b.w	8004ad4 <_dtoa_r+0x394>
 800553e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005542:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005546:	46d9      	mov	r9, fp
 8005548:	d0d0      	beq.n	80054ec <_dtoa_r+0xdac>
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f73f aeaa 	bgt.w	80052a6 <_dtoa_r+0xb66>
 8005552:	e6aa      	b.n	80052aa <_dtoa_r+0xb6a>
 8005554:	f47f aea9 	bne.w	80052aa <_dtoa_r+0xb6a>
 8005558:	f01a 0f01 	tst.w	sl, #1
 800555c:	f43f aea5 	beq.w	80052aa <_dtoa_r+0xb6a>
 8005560:	e69d      	b.n	800529e <_dtoa_r+0xb5e>
 8005562:	4631      	mov	r1, r6
 8005564:	4620      	mov	r0, r4
 8005566:	220a      	movs	r2, #10
 8005568:	2300      	movs	r3, #0
 800556a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800556e:	f000 fb41 	bl	8005bf4 <__multadd>
 8005572:	4606      	mov	r6, r0
 8005574:	f7ff bb5b 	b.w	8004c2e <_dtoa_r+0x4ee>
 8005578:	f04f 0802 	mov.w	r8, #2
 800557c:	e4c4      	b.n	8004f08 <_dtoa_r+0x7c8>
 800557e:	f43f ab40 	beq.w	8004c02 <_dtoa_r+0x4c2>
 8005582:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005586:	f7ff bbd4 	b.w	8004d32 <_dtoa_r+0x5f2>
 800558a:	bf00      	nop
 800558c:	40240000 	.word	0x40240000
 8005590:	401c0000 	.word	0x401c0000
 8005594:	3fe00000 	.word	0x3fe00000

08005598 <_fclose_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	460c      	mov	r4, r1
 800559c:	4605      	mov	r5, r0
 800559e:	b131      	cbz	r1, 80055ae <_fclose_r+0x16>
 80055a0:	b110      	cbz	r0, 80055a8 <_fclose_r+0x10>
 80055a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02f      	beq.n	8005608 <_fclose_r+0x70>
 80055a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ac:	b90b      	cbnz	r3, 80055b2 <_fclose_r+0x1a>
 80055ae:	2000      	movs	r0, #0
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
 80055b2:	4628      	mov	r0, r5
 80055b4:	4621      	mov	r1, r4
 80055b6:	f000 f8e1 	bl	800577c <_fflush_r>
 80055ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055bc:	4606      	mov	r6, r0
 80055be:	b133      	cbz	r3, 80055ce <_fclose_r+0x36>
 80055c0:	4628      	mov	r0, r5
 80055c2:	69e1      	ldr	r1, [r4, #28]
 80055c4:	4798      	blx	r3
 80055c6:	2800      	cmp	r0, #0
 80055c8:	bfb8      	it	lt
 80055ca:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	d41c      	bmi.n	800560e <_fclose_r+0x76>
 80055d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055d6:	b141      	cbz	r1, 80055ea <_fclose_r+0x52>
 80055d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80055dc:	4299      	cmp	r1, r3
 80055de:	d002      	beq.n	80055e6 <_fclose_r+0x4e>
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f92f 	bl	8005844 <_free_r>
 80055e6:	2300      	movs	r3, #0
 80055e8:	6323      	str	r3, [r4, #48]	; 0x30
 80055ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80055ec:	b121      	cbz	r1, 80055f8 <_fclose_r+0x60>
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 f928 	bl	8005844 <_free_r>
 80055f4:	2300      	movs	r3, #0
 80055f6:	6463      	str	r3, [r4, #68]	; 0x44
 80055f8:	f7fc fef2 	bl	80023e0 <__sfp_lock_acquire>
 80055fc:	2300      	movs	r3, #0
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f7fc fef0 	bl	80023e4 <__sfp_lock_release>
 8005604:	4630      	mov	r0, r6
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f7fc fe70 	bl	80022ec <__sinit>
 800560c:	e7cc      	b.n	80055a8 <_fclose_r+0x10>
 800560e:	4628      	mov	r0, r5
 8005610:	6921      	ldr	r1, [r4, #16]
 8005612:	f000 f917 	bl	8005844 <_free_r>
 8005616:	e7dd      	b.n	80055d4 <_fclose_r+0x3c>

08005618 <fclose>:
 8005618:	4b02      	ldr	r3, [pc, #8]	; (8005624 <fclose+0xc>)
 800561a:	4601      	mov	r1, r0
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f7ff bfbb 	b.w	8005598 <_fclose_r>
 8005622:	bf00      	nop
 8005624:	20000458 	.word	0x20000458

08005628 <__sflush_r>:
 8005628:	898b      	ldrh	r3, [r1, #12]
 800562a:	b29a      	uxth	r2, r3
 800562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005630:	460d      	mov	r5, r1
 8005632:	0711      	lsls	r1, r2, #28
 8005634:	4680      	mov	r8, r0
 8005636:	d43c      	bmi.n	80056b2 <__sflush_r+0x8a>
 8005638:	686a      	ldr	r2, [r5, #4]
 800563a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800563e:	2a00      	cmp	r2, #0
 8005640:	81ab      	strh	r3, [r5, #12]
 8005642:	dd59      	ble.n	80056f8 <__sflush_r+0xd0>
 8005644:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005646:	2c00      	cmp	r4, #0
 8005648:	d04b      	beq.n	80056e2 <__sflush_r+0xba>
 800564a:	b29b      	uxth	r3, r3
 800564c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005650:	2100      	movs	r1, #0
 8005652:	b292      	uxth	r2, r2
 8005654:	f8d8 6000 	ldr.w	r6, [r8]
 8005658:	f8c8 1000 	str.w	r1, [r8]
 800565c:	2a00      	cmp	r2, #0
 800565e:	d04f      	beq.n	8005700 <__sflush_r+0xd8>
 8005660:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005662:	075f      	lsls	r7, r3, #29
 8005664:	d505      	bpl.n	8005672 <__sflush_r+0x4a>
 8005666:	6869      	ldr	r1, [r5, #4]
 8005668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800566a:	1a52      	subs	r2, r2, r1
 800566c:	b10b      	cbz	r3, 8005672 <__sflush_r+0x4a>
 800566e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	4640      	mov	r0, r8
 8005674:	69e9      	ldr	r1, [r5, #28]
 8005676:	2300      	movs	r3, #0
 8005678:	47a0      	blx	r4
 800567a:	1c44      	adds	r4, r0, #1
 800567c:	d04a      	beq.n	8005714 <__sflush_r+0xec>
 800567e:	89aa      	ldrh	r2, [r5, #12]
 8005680:	692b      	ldr	r3, [r5, #16]
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8005688:	b29b      	uxth	r3, r3
 800568a:	2200      	movs	r2, #0
 800568c:	606a      	str	r2, [r5, #4]
 800568e:	04da      	lsls	r2, r3, #19
 8005690:	81ab      	strh	r3, [r5, #12]
 8005692:	d44c      	bmi.n	800572e <__sflush_r+0x106>
 8005694:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005696:	f8c8 6000 	str.w	r6, [r8]
 800569a:	b311      	cbz	r1, 80056e2 <__sflush_r+0xba>
 800569c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__sflush_r+0x82>
 80056a4:	4640      	mov	r0, r8
 80056a6:	f000 f8cd 	bl	8005844 <_free_r>
 80056aa:	2000      	movs	r0, #0
 80056ac:	6328      	str	r0, [r5, #48]	; 0x30
 80056ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b2:	692e      	ldr	r6, [r5, #16]
 80056b4:	b1ae      	cbz	r6, 80056e2 <__sflush_r+0xba>
 80056b6:	682c      	ldr	r4, [r5, #0]
 80056b8:	602e      	str	r6, [r5, #0]
 80056ba:	0791      	lsls	r1, r2, #30
 80056bc:	bf0c      	ite	eq
 80056be:	696b      	ldreq	r3, [r5, #20]
 80056c0:	2300      	movne	r3, #0
 80056c2:	1ba4      	subs	r4, r4, r6
 80056c4:	60ab      	str	r3, [r5, #8]
 80056c6:	e00a      	b.n	80056de <__sflush_r+0xb6>
 80056c8:	4632      	mov	r2, r6
 80056ca:	4623      	mov	r3, r4
 80056cc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80056ce:	69e9      	ldr	r1, [r5, #28]
 80056d0:	4640      	mov	r0, r8
 80056d2:	47b8      	blx	r7
 80056d4:	2800      	cmp	r0, #0
 80056d6:	ebc0 0404 	rsb	r4, r0, r4
 80056da:	4406      	add	r6, r0
 80056dc:	dd04      	ble.n	80056e8 <__sflush_r+0xc0>
 80056de:	2c00      	cmp	r4, #0
 80056e0:	dcf2      	bgt.n	80056c8 <__sflush_r+0xa0>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e8:	89ab      	ldrh	r3, [r5, #12]
 80056ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ee:	81ab      	strh	r3, [r5, #12]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	dca2      	bgt.n	8005644 <__sflush_r+0x1c>
 80056fe:	e7f0      	b.n	80056e2 <__sflush_r+0xba>
 8005700:	2301      	movs	r3, #1
 8005702:	4640      	mov	r0, r8
 8005704:	69e9      	ldr	r1, [r5, #28]
 8005706:	47a0      	blx	r4
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	4602      	mov	r2, r0
 800570c:	d01e      	beq.n	800574c <__sflush_r+0x124>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005712:	e7a6      	b.n	8005662 <__sflush_r+0x3a>
 8005714:	f8d8 3000 	ldr.w	r3, [r8]
 8005718:	b95b      	cbnz	r3, 8005732 <__sflush_r+0x10a>
 800571a:	89a9      	ldrh	r1, [r5, #12]
 800571c:	606b      	str	r3, [r5, #4]
 800571e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8005722:	b29b      	uxth	r3, r3
 8005724:	692a      	ldr	r2, [r5, #16]
 8005726:	81ab      	strh	r3, [r5, #12]
 8005728:	04db      	lsls	r3, r3, #19
 800572a:	602a      	str	r2, [r5, #0]
 800572c:	d5b2      	bpl.n	8005694 <__sflush_r+0x6c>
 800572e:	6528      	str	r0, [r5, #80]	; 0x50
 8005730:	e7b0      	b.n	8005694 <__sflush_r+0x6c>
 8005732:	2b1d      	cmp	r3, #29
 8005734:	d001      	beq.n	800573a <__sflush_r+0x112>
 8005736:	2b16      	cmp	r3, #22
 8005738:	d119      	bne.n	800576e <__sflush_r+0x146>
 800573a:	89aa      	ldrh	r2, [r5, #12]
 800573c:	692b      	ldr	r3, [r5, #16]
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005744:	2300      	movs	r3, #0
 8005746:	81aa      	strh	r2, [r5, #12]
 8005748:	606b      	str	r3, [r5, #4]
 800574a:	e7a3      	b.n	8005694 <__sflush_r+0x6c>
 800574c:	f8d8 3000 	ldr.w	r3, [r8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0dc      	beq.n	800570e <__sflush_r+0xe6>
 8005754:	2b1d      	cmp	r3, #29
 8005756:	d007      	beq.n	8005768 <__sflush_r+0x140>
 8005758:	2b16      	cmp	r3, #22
 800575a:	d005      	beq.n	8005768 <__sflush_r+0x140>
 800575c:	89ab      	ldrh	r3, [r5, #12]
 800575e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005762:	81ab      	strh	r3, [r5, #12]
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	f8c8 6000 	str.w	r6, [r8]
 800576c:	e7b9      	b.n	80056e2 <__sflush_r+0xba>
 800576e:	89ab      	ldrh	r3, [r5, #12]
 8005770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005774:	81ab      	strh	r3, [r5, #12]
 8005776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577a:	bf00      	nop

0800577c <_fflush_r>:
 800577c:	b510      	push	{r4, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	b082      	sub	sp, #8
 8005782:	b108      	cbz	r0, 8005788 <_fflush_r+0xc>
 8005784:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005786:	b153      	cbz	r3, 800579e <_fflush_r+0x22>
 8005788:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800578c:	b908      	cbnz	r0, 8005792 <_fflush_r+0x16>
 800578e:	b002      	add	sp, #8
 8005790:	bd10      	pop	{r4, pc}
 8005792:	4620      	mov	r0, r4
 8005794:	b002      	add	sp, #8
 8005796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579a:	f7ff bf45 	b.w	8005628 <__sflush_r>
 800579e:	9101      	str	r1, [sp, #4]
 80057a0:	f7fc fda4 	bl	80022ec <__sinit>
 80057a4:	9901      	ldr	r1, [sp, #4]
 80057a6:	e7ef      	b.n	8005788 <_fflush_r+0xc>

080057a8 <_malloc_trim_r>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	4d23      	ldr	r5, [pc, #140]	; (8005838 <_malloc_trim_r+0x90>)
 80057ac:	460f      	mov	r7, r1
 80057ae:	4604      	mov	r4, r0
 80057b0:	f7fd f9c8 	bl	8002b44 <__malloc_lock>
 80057b4:	68ab      	ldr	r3, [r5, #8]
 80057b6:	685e      	ldr	r6, [r3, #4]
 80057b8:	f026 0603 	bic.w	r6, r6, #3
 80057bc:	1bf1      	subs	r1, r6, r7
 80057be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80057c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80057c6:	f021 010f 	bic.w	r1, r1, #15
 80057ca:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 80057ce:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80057d2:	db07      	blt.n	80057e4 <_malloc_trim_r+0x3c>
 80057d4:	4620      	mov	r0, r4
 80057d6:	2100      	movs	r1, #0
 80057d8:	f7fd f9cc 	bl	8002b74 <_sbrk_r>
 80057dc:	68ab      	ldr	r3, [r5, #8]
 80057de:	4433      	add	r3, r6
 80057e0:	4298      	cmp	r0, r3
 80057e2:	d004      	beq.n	80057ee <_malloc_trim_r+0x46>
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7fd f9af 	bl	8002b48 <__malloc_unlock>
 80057ea:	2000      	movs	r0, #0
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ee:	4620      	mov	r0, r4
 80057f0:	4279      	negs	r1, r7
 80057f2:	f7fd f9bf 	bl	8002b74 <_sbrk_r>
 80057f6:	3001      	adds	r0, #1
 80057f8:	d00d      	beq.n	8005816 <_malloc_trim_r+0x6e>
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <_malloc_trim_r+0x94>)
 80057fc:	68aa      	ldr	r2, [r5, #8]
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	1bf6      	subs	r6, r6, r7
 8005802:	f046 0601 	orr.w	r6, r6, #1
 8005806:	4620      	mov	r0, r4
 8005808:	1bc9      	subs	r1, r1, r7
 800580a:	6056      	str	r6, [r2, #4]
 800580c:	6019      	str	r1, [r3, #0]
 800580e:	f7fd f99b 	bl	8002b48 <__malloc_unlock>
 8005812:	2001      	movs	r0, #1
 8005814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005816:	4620      	mov	r0, r4
 8005818:	2100      	movs	r1, #0
 800581a:	f7fd f9ab 	bl	8002b74 <_sbrk_r>
 800581e:	68ab      	ldr	r3, [r5, #8]
 8005820:	1ac2      	subs	r2, r0, r3
 8005822:	2a0f      	cmp	r2, #15
 8005824:	ddde      	ble.n	80057e4 <_malloc_trim_r+0x3c>
 8005826:	4d06      	ldr	r5, [pc, #24]	; (8005840 <_malloc_trim_r+0x98>)
 8005828:	4904      	ldr	r1, [pc, #16]	; (800583c <_malloc_trim_r+0x94>)
 800582a:	682d      	ldr	r5, [r5, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	1b40      	subs	r0, r0, r5
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	6008      	str	r0, [r1, #0]
 8005836:	e7d5      	b.n	80057e4 <_malloc_trim_r+0x3c>
 8005838:	2000045c 	.word	0x2000045c
 800583c:	20008b00 	.word	0x20008b00
 8005840:	20000868 	.word	0x20000868

08005844 <_free_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	460d      	mov	r5, r1
 800584a:	4606      	mov	r6, r0
 800584c:	2900      	cmp	r1, #0
 800584e:	d055      	beq.n	80058fc <_free_r+0xb8>
 8005850:	f7fd f978 	bl	8002b44 <__malloc_lock>
 8005854:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8005858:	f8df c174 	ldr.w	ip, [pc, #372]	; 80059d0 <_free_r+0x18c>
 800585c:	f021 0301 	bic.w	r3, r1, #1
 8005860:	f1a5 0408 	sub.w	r4, r5, #8
 8005864:	18e2      	adds	r2, r4, r3
 8005866:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800586a:	6857      	ldr	r7, [r2, #4]
 800586c:	4290      	cmp	r0, r2
 800586e:	f027 0703 	bic.w	r7, r7, #3
 8005872:	d069      	beq.n	8005948 <_free_r+0x104>
 8005874:	f011 0101 	ands.w	r1, r1, #1
 8005878:	6057      	str	r7, [r2, #4]
 800587a:	d032      	beq.n	80058e2 <_free_r+0x9e>
 800587c:	2100      	movs	r1, #0
 800587e:	19d0      	adds	r0, r2, r7
 8005880:	6840      	ldr	r0, [r0, #4]
 8005882:	07c0      	lsls	r0, r0, #31
 8005884:	d406      	bmi.n	8005894 <_free_r+0x50>
 8005886:	443b      	add	r3, r7
 8005888:	6890      	ldr	r0, [r2, #8]
 800588a:	2900      	cmp	r1, #0
 800588c:	d04e      	beq.n	800592c <_free_r+0xe8>
 800588e:	68d2      	ldr	r2, [r2, #12]
 8005890:	60c2      	str	r2, [r0, #12]
 8005892:	6090      	str	r0, [r2, #8]
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	6062      	str	r2, [r4, #4]
 800589a:	50e3      	str	r3, [r4, r3]
 800589c:	b9e1      	cbnz	r1, 80058d8 <_free_r+0x94>
 800589e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a2:	d32d      	bcc.n	8005900 <_free_r+0xbc>
 80058a4:	0a5a      	lsrs	r2, r3, #9
 80058a6:	2a04      	cmp	r2, #4
 80058a8:	d86a      	bhi.n	8005980 <_free_r+0x13c>
 80058aa:	0998      	lsrs	r0, r3, #6
 80058ac:	3038      	adds	r0, #56	; 0x38
 80058ae:	0041      	lsls	r1, r0, #1
 80058b0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 80058b4:	4946      	ldr	r1, [pc, #280]	; (80059d0 <_free_r+0x18c>)
 80058b6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80058ba:	4562      	cmp	r2, ip
 80058bc:	d066      	beq.n	800598c <_free_r+0x148>
 80058be:	6851      	ldr	r1, [r2, #4]
 80058c0:	f021 0103 	bic.w	r1, r1, #3
 80058c4:	428b      	cmp	r3, r1
 80058c6:	d202      	bcs.n	80058ce <_free_r+0x8a>
 80058c8:	6892      	ldr	r2, [r2, #8]
 80058ca:	4594      	cmp	ip, r2
 80058cc:	d1f7      	bne.n	80058be <_free_r+0x7a>
 80058ce:	68d3      	ldr	r3, [r2, #12]
 80058d0:	60e3      	str	r3, [r4, #12]
 80058d2:	60a2      	str	r2, [r4, #8]
 80058d4:	609c      	str	r4, [r3, #8]
 80058d6:	60d4      	str	r4, [r2, #12]
 80058d8:	4630      	mov	r0, r6
 80058da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	f7fd b933 	b.w	8002b48 <__malloc_unlock>
 80058e2:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80058e6:	1b64      	subs	r4, r4, r5
 80058e8:	f10c 0808 	add.w	r8, ip, #8
 80058ec:	68a0      	ldr	r0, [r4, #8]
 80058ee:	4540      	cmp	r0, r8
 80058f0:	442b      	add	r3, r5
 80058f2:	d043      	beq.n	800597c <_free_r+0x138>
 80058f4:	68e5      	ldr	r5, [r4, #12]
 80058f6:	60c5      	str	r5, [r0, #12]
 80058f8:	60a8      	str	r0, [r5, #8]
 80058fa:	e7c0      	b.n	800587e <_free_r+0x3a>
 80058fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8005906:	2501      	movs	r5, #1
 8005908:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800590c:	6891      	ldr	r1, [r2, #8]
 800590e:	60a1      	str	r1, [r4, #8]
 8005910:	109b      	asrs	r3, r3, #2
 8005912:	fa05 f303 	lsl.w	r3, r5, r3
 8005916:	4318      	orrs	r0, r3
 8005918:	60e2      	str	r2, [r4, #12]
 800591a:	f8cc 0004 	str.w	r0, [ip, #4]
 800591e:	6094      	str	r4, [r2, #8]
 8005920:	4630      	mov	r0, r6
 8005922:	60cc      	str	r4, [r1, #12]
 8005924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005928:	f7fd b90e 	b.w	8002b48 <__malloc_unlock>
 800592c:	4d29      	ldr	r5, [pc, #164]	; (80059d4 <_free_r+0x190>)
 800592e:	42a8      	cmp	r0, r5
 8005930:	d1ad      	bne.n	800588e <_free_r+0x4a>
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	f8cc 4014 	str.w	r4, [ip, #20]
 800593a:	f8cc 4010 	str.w	r4, [ip, #16]
 800593e:	60e0      	str	r0, [r4, #12]
 8005940:	60a0      	str	r0, [r4, #8]
 8005942:	6062      	str	r2, [r4, #4]
 8005944:	50e3      	str	r3, [r4, r3]
 8005946:	e7c7      	b.n	80058d8 <_free_r+0x94>
 8005948:	441f      	add	r7, r3
 800594a:	07cb      	lsls	r3, r1, #31
 800594c:	d407      	bmi.n	800595e <_free_r+0x11a>
 800594e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8005952:	1ae4      	subs	r4, r4, r3
 8005954:	441f      	add	r7, r3
 8005956:	68a2      	ldr	r2, [r4, #8]
 8005958:	68e3      	ldr	r3, [r4, #12]
 800595a:	60d3      	str	r3, [r2, #12]
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <_free_r+0x194>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f047 0201 	orr.w	r2, r7, #1
 8005966:	429f      	cmp	r7, r3
 8005968:	6062      	str	r2, [r4, #4]
 800596a:	f8cc 4008 	str.w	r4, [ip, #8]
 800596e:	d3b3      	bcc.n	80058d8 <_free_r+0x94>
 8005970:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <_free_r+0x198>)
 8005972:	4630      	mov	r0, r6
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	f7ff ff17 	bl	80057a8 <_malloc_trim_r>
 800597a:	e7ad      	b.n	80058d8 <_free_r+0x94>
 800597c:	2101      	movs	r1, #1
 800597e:	e77e      	b.n	800587e <_free_r+0x3a>
 8005980:	2a14      	cmp	r2, #20
 8005982:	d80c      	bhi.n	800599e <_free_r+0x15a>
 8005984:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005988:	0041      	lsls	r1, r0, #1
 800598a:	e791      	b.n	80058b0 <_free_r+0x6c>
 800598c:	684b      	ldr	r3, [r1, #4]
 800598e:	1080      	asrs	r0, r0, #2
 8005990:	2501      	movs	r5, #1
 8005992:	fa05 f000 	lsl.w	r0, r5, r0
 8005996:	4303      	orrs	r3, r0
 8005998:	604b      	str	r3, [r1, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	e798      	b.n	80058d0 <_free_r+0x8c>
 800599e:	2a54      	cmp	r2, #84	; 0x54
 80059a0:	d803      	bhi.n	80059aa <_free_r+0x166>
 80059a2:	0b18      	lsrs	r0, r3, #12
 80059a4:	306e      	adds	r0, #110	; 0x6e
 80059a6:	0041      	lsls	r1, r0, #1
 80059a8:	e782      	b.n	80058b0 <_free_r+0x6c>
 80059aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80059ae:	d803      	bhi.n	80059b8 <_free_r+0x174>
 80059b0:	0bd8      	lsrs	r0, r3, #15
 80059b2:	3077      	adds	r0, #119	; 0x77
 80059b4:	0041      	lsls	r1, r0, #1
 80059b6:	e77b      	b.n	80058b0 <_free_r+0x6c>
 80059b8:	f240 5154 	movw	r1, #1364	; 0x554
 80059bc:	428a      	cmp	r2, r1
 80059be:	d803      	bhi.n	80059c8 <_free_r+0x184>
 80059c0:	0c98      	lsrs	r0, r3, #18
 80059c2:	307c      	adds	r0, #124	; 0x7c
 80059c4:	0041      	lsls	r1, r0, #1
 80059c6:	e773      	b.n	80058b0 <_free_r+0x6c>
 80059c8:	21fc      	movs	r1, #252	; 0xfc
 80059ca:	207e      	movs	r0, #126	; 0x7e
 80059cc:	e770      	b.n	80058b0 <_free_r+0x6c>
 80059ce:	bf00      	nop
 80059d0:	2000045c 	.word	0x2000045c
 80059d4:	20000464 	.word	0x20000464
 80059d8:	20000864 	.word	0x20000864
 80059dc:	20008afc 	.word	0x20008afc

080059e0 <__locale_charset>:
 80059e0:	4800      	ldr	r0, [pc, #0]	; (80059e4 <__locale_charset+0x4>)
 80059e2:	4770      	bx	lr
 80059e4:	200008a4 	.word	0x200008a4

080059e8 <__locale_mb_cur_max>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__locale_mb_cur_max+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	200008c4 	.word	0x200008c4

080059f4 <_localeconv_r>:
 80059f4:	4800      	ldr	r0, [pc, #0]	; (80059f8 <_localeconv_r+0x4>)
 80059f6:	4770      	bx	lr
 80059f8:	2000086c 	.word	0x2000086c

080059fc <_lseek_r>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4c08      	ldr	r4, [pc, #32]	; (8005a20 <_lseek_r+0x24>)
 8005a00:	4606      	mov	r6, r0
 8005a02:	2500      	movs	r5, #0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6025      	str	r5, [r4, #0]
 8005a0c:	f7fa ffa8 	bl	8000960 <_lseek>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d000      	beq.n	8005a16 <_lseek_r+0x1a>
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0fb      	beq.n	8005a14 <_lseek_r+0x18>
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	20008b28 	.word	0x20008b28

08005a24 <__smakebuf_r>:
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	898b      	ldrh	r3, [r1, #12]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	0796      	lsls	r6, r2, #30
 8005a2c:	b091      	sub	sp, #68	; 0x44
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4605      	mov	r5, r0
 8005a32:	d437      	bmi.n	8005aa4 <__smakebuf_r+0x80>
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	db17      	blt.n	8005a6c <__smakebuf_r+0x48>
 8005a3c:	aa01      	add	r2, sp, #4
 8005a3e:	f000 fcc3 	bl	80063c8 <_fstat_r>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	db10      	blt.n	8005a68 <__smakebuf_r+0x44>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a4c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8005a50:	424f      	negs	r7, r1
 8005a52:	414f      	adcs	r7, r1
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a58:	d02c      	beq.n	8005ab4 <__smakebuf_r+0x90>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005a66:	e00b      	b.n	8005a80 <__smakebuf_r+0x5c>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	bf14      	ite	ne
 8005a78:	2640      	movne	r6, #64	; 0x40
 8005a7a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8005a7e:	2700      	movs	r7, #0
 8005a80:	4628      	mov	r0, r5
 8005a82:	4631      	mov	r1, r6
 8005a84:	f7fc fcde 	bl	8002444 <_malloc_r>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d029      	beq.n	8005ae2 <__smakebuf_r+0xbe>
 8005a8e:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <__smakebuf_r+0xd8>)
 8005a90:	63ea      	str	r2, [r5, #60]	; 0x3c
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	6020      	str	r0, [r4, #0]
 8005a9a:	6120      	str	r0, [r4, #16]
 8005a9c:	6166      	str	r6, [r4, #20]
 8005a9e:	b9a7      	cbnz	r7, 8005aca <__smakebuf_r+0xa6>
 8005aa0:	b011      	add	sp, #68	; 0x44
 8005aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	600b      	str	r3, [r1, #0]
 8005aac:	610b      	str	r3, [r1, #16]
 8005aae:	614a      	str	r2, [r1, #20]
 8005ab0:	b011      	add	sp, #68	; 0x44
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <__smakebuf_r+0xdc>)
 8005ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d1ce      	bne.n	8005a5a <__smakebuf_r+0x36>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005ac2:	4333      	orrs	r3, r6
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005ac8:	e7da      	b.n	8005a80 <__smakebuf_r+0x5c>
 8005aca:	4628      	mov	r0, r5
 8005acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad0:	f000 fe1a 	bl	8006708 <_isatty_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d0e3      	beq.n	8005aa0 <__smakebuf_r+0x7c>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	e7de      	b.n	8005aa0 <__smakebuf_r+0x7c>
 8005ae2:	059a      	lsls	r2, r3, #22
 8005ae4:	d4dc      	bmi.n	8005aa0 <__smakebuf_r+0x7c>
 8005ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aea:	f043 0302 	orr.w	r3, r3, #2
 8005aee:	2101      	movs	r1, #1
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	6122      	str	r2, [r4, #16]
 8005af6:	6161      	str	r1, [r4, #20]
 8005af8:	e7d2      	b.n	8005aa0 <__smakebuf_r+0x7c>
 8005afa:	bf00      	nop
 8005afc:	080022e1 	.word	0x080022e1
 8005b00:	08002c89 	.word	0x08002c89

08005b04 <memchr>:
 8005b04:	0783      	lsls	r3, r0, #30
 8005b06:	b470      	push	{r4, r5, r6}
 8005b08:	b2c9      	uxtb	r1, r1
 8005b0a:	d03f      	beq.n	8005b8c <memchr+0x88>
 8005b0c:	1e54      	subs	r4, r2, #1
 8005b0e:	b32a      	cbz	r2, 8005b5c <memchr+0x58>
 8005b10:	7803      	ldrb	r3, [r0, #0]
 8005b12:	428b      	cmp	r3, r1
 8005b14:	d023      	beq.n	8005b5e <memchr+0x5a>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	e004      	b.n	8005b24 <memchr+0x20>
 8005b1a:	b1fc      	cbz	r4, 8005b5c <memchr+0x58>
 8005b1c:	7804      	ldrb	r4, [r0, #0]
 8005b1e:	428c      	cmp	r4, r1
 8005b20:	d01d      	beq.n	8005b5e <memchr+0x5a>
 8005b22:	4614      	mov	r4, r2
 8005b24:	f013 0f03 	tst.w	r3, #3
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8005b2e:	f103 0301 	add.w	r3, r3, #1
 8005b32:	d1f2      	bne.n	8005b1a <memchr+0x16>
 8005b34:	2c03      	cmp	r4, #3
 8005b36:	d814      	bhi.n	8005b62 <memchr+0x5e>
 8005b38:	1e65      	subs	r5, r4, #1
 8005b3a:	b34c      	cbz	r4, 8005b90 <memchr+0x8c>
 8005b3c:	7803      	ldrb	r3, [r0, #0]
 8005b3e:	428b      	cmp	r3, r1
 8005b40:	d00d      	beq.n	8005b5e <memchr+0x5a>
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	2300      	movs	r3, #0
 8005b46:	e002      	b.n	8005b4e <memchr+0x4a>
 8005b48:	7804      	ldrb	r4, [r0, #0]
 8005b4a:	428c      	cmp	r4, r1
 8005b4c:	d007      	beq.n	8005b5e <memchr+0x5a>
 8005b4e:	42ab      	cmp	r3, r5
 8005b50:	4610      	mov	r0, r2
 8005b52:	f103 0301 	add.w	r3, r3, #1
 8005b56:	f102 0201 	add.w	r2, r2, #1
 8005b5a:	d1f5      	bne.n	8005b48 <memchr+0x44>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	bc70      	pop	{r4, r5, r6}
 8005b60:	4770      	bx	lr
 8005b62:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005b66:	4603      	mov	r3, r0
 8005b68:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3304      	adds	r3, #4
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	4072      	eors	r2, r6
 8005b74:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8005b78:	ea25 0202 	bic.w	r2, r5, r2
 8005b7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005b80:	d1da      	bne.n	8005b38 <memchr+0x34>
 8005b82:	3c04      	subs	r4, #4
 8005b84:	2c03      	cmp	r4, #3
 8005b86:	4618      	mov	r0, r3
 8005b88:	d8f0      	bhi.n	8005b6c <memchr+0x68>
 8005b8a:	e7d5      	b.n	8005b38 <memchr+0x34>
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	e7d1      	b.n	8005b34 <memchr+0x30>
 8005b90:	4620      	mov	r0, r4
 8005b92:	e7e4      	b.n	8005b5e <memchr+0x5a>

08005b94 <_Balloc>:
 8005b94:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005b96:	b570      	push	{r4, r5, r6, lr}
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b14a      	cbz	r2, 8005bb2 <_Balloc+0x1e>
 8005b9e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8005ba2:	b180      	cbz	r0, 8005bc6 <_Balloc+0x32>
 8005ba4:	6801      	ldr	r1, [r0, #0]
 8005ba6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005baa:	2200      	movs	r2, #0
 8005bac:	6102      	str	r2, [r0, #16]
 8005bae:	60c2      	str	r2, [r0, #12]
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
 8005bb2:	2221      	movs	r2, #33	; 0x21
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	f000 fb79 	bl	80062ac <_calloc_r>
 8005bba:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d1ed      	bne.n	8005b9e <_Balloc+0xa>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	fa01 f604 	lsl.w	r6, r1, r4
 8005bcc:	1d72      	adds	r2, r6, #5
 8005bce:	4628      	mov	r0, r5
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	f000 fb6b 	bl	80062ac <_calloc_r>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d0f3      	beq.n	8005bc2 <_Balloc+0x2e>
 8005bda:	6044      	str	r4, [r0, #4]
 8005bdc:	6086      	str	r6, [r0, #8]
 8005bde:	e7e4      	b.n	8005baa <_Balloc+0x16>

08005be0 <_Bfree>:
 8005be0:	b131      	cbz	r1, 8005bf0 <_Bfree+0x10>
 8005be2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005be4:	684a      	ldr	r2, [r1, #4]
 8005be6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005bea:	6008      	str	r0, [r1, #0]
 8005bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop

08005bf4 <__multadd>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	4689      	mov	r9, r1
 8005c00:	4682      	mov	sl, r0
 8005c02:	f101 0514 	add.w	r5, r1, #20
 8005c06:	2400      	movs	r4, #0
 8005c08:	682f      	ldr	r7, [r5, #0]
 8005c0a:	b2be      	uxth	r6, r7
 8005c0c:	0c3f      	lsrs	r7, r7, #16
 8005c0e:	fb02 3606 	mla	r6, r2, r6, r3
 8005c12:	fb02 f307 	mul.w	r3, r2, r7
 8005c16:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8005c1a:	3401      	adds	r4, #1
 8005c1c:	b2b6      	uxth	r6, r6
 8005c1e:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8005c22:	45a0      	cmp	r8, r4
 8005c24:	f845 6b04 	str.w	r6, [r5], #4
 8005c28:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005c2c:	dcec      	bgt.n	8005c08 <__multadd+0x14>
 8005c2e:	b153      	cbz	r3, 8005c46 <__multadd+0x52>
 8005c30:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005c34:	4590      	cmp	r8, r2
 8005c36:	da0a      	bge.n	8005c4e <__multadd+0x5a>
 8005c38:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8005c3c:	f108 0201 	add.w	r2, r8, #1
 8005c40:	614b      	str	r3, [r1, #20]
 8005c42:	f8c9 2010 	str.w	r2, [r9, #16]
 8005c46:	4648      	mov	r0, r9
 8005c48:	b002      	add	sp, #8
 8005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	3101      	adds	r1, #1
 8005c56:	4650      	mov	r0, sl
 8005c58:	f7ff ff9c 	bl	8005b94 <_Balloc>
 8005c5c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005c60:	3202      	adds	r2, #2
 8005c62:	f109 010c 	add.w	r1, r9, #12
 8005c66:	4604      	mov	r4, r0
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	300c      	adds	r0, #12
 8005c6c:	f7fc fe86 	bl	800297c <memcpy>
 8005c70:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8005c74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005c7e:	f8c9 0000 	str.w	r0, [r9]
 8005c82:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 8005c86:	46a1      	mov	r9, r4
 8005c88:	e7d6      	b.n	8005c38 <__multadd+0x44>
 8005c8a:	bf00      	nop

08005c8c <__hi0bits>:
 8005c8c:	0c03      	lsrs	r3, r0, #16
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	b9b3      	cbnz	r3, 8005cc0 <__hi0bits+0x34>
 8005c92:	0400      	lsls	r0, r0, #16
 8005c94:	2310      	movs	r3, #16
 8005c96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c9a:	bf04      	itt	eq
 8005c9c:	0200      	lsleq	r0, r0, #8
 8005c9e:	3308      	addeq	r3, #8
 8005ca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ca4:	bf04      	itt	eq
 8005ca6:	0100      	lsleq	r0, r0, #4
 8005ca8:	3304      	addeq	r3, #4
 8005caa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cae:	bf04      	itt	eq
 8005cb0:	0080      	lsleq	r0, r0, #2
 8005cb2:	3302      	addeq	r3, #2
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	db07      	blt.n	8005cc8 <__hi0bits+0x3c>
 8005cb8:	0042      	lsls	r2, r0, #1
 8005cba:	d403      	bmi.n	8005cc4 <__hi0bits+0x38>
 8005cbc:	2020      	movs	r0, #32
 8005cbe:	4770      	bx	lr
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e7e8      	b.n	8005c96 <__hi0bits+0xa>
 8005cc4:	1c58      	adds	r0, r3, #1
 8005cc6:	4770      	bx	lr
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4770      	bx	lr

08005ccc <__lo0bits>:
 8005ccc:	6803      	ldr	r3, [r0, #0]
 8005cce:	f013 0207 	ands.w	r2, r3, #7
 8005cd2:	d007      	beq.n	8005ce4 <__lo0bits+0x18>
 8005cd4:	07d9      	lsls	r1, r3, #31
 8005cd6:	d420      	bmi.n	8005d1a <__lo0bits+0x4e>
 8005cd8:	079a      	lsls	r2, r3, #30
 8005cda:	d420      	bmi.n	8005d1e <__lo0bits+0x52>
 8005cdc:	089b      	lsrs	r3, r3, #2
 8005cde:	6003      	str	r3, [r0, #0]
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	4770      	bx	lr
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	b909      	cbnz	r1, 8005cec <__lo0bits+0x20>
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	2210      	movs	r2, #16
 8005cec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cf0:	bf04      	itt	eq
 8005cf2:	0a1b      	lsreq	r3, r3, #8
 8005cf4:	3208      	addeq	r2, #8
 8005cf6:	0719      	lsls	r1, r3, #28
 8005cf8:	bf04      	itt	eq
 8005cfa:	091b      	lsreq	r3, r3, #4
 8005cfc:	3204      	addeq	r2, #4
 8005cfe:	0799      	lsls	r1, r3, #30
 8005d00:	bf04      	itt	eq
 8005d02:	089b      	lsreq	r3, r3, #2
 8005d04:	3202      	addeq	r2, #2
 8005d06:	07d9      	lsls	r1, r3, #31
 8005d08:	d404      	bmi.n	8005d14 <__lo0bits+0x48>
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	d101      	bne.n	8005d12 <__lo0bits+0x46>
 8005d0e:	2020      	movs	r0, #32
 8005d10:	4770      	bx	lr
 8005d12:	3201      	adds	r2, #1
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	4610      	mov	r0, r2
 8005d18:	4770      	bx	lr
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	4770      	bx	lr
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	2001      	movs	r0, #1
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <__i2b>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	f7ff ff31 	bl	8005b94 <_Balloc>
 8005d32:	2201      	movs	r2, #1
 8005d34:	6144      	str	r4, [r0, #20]
 8005d36:	6102      	str	r2, [r0, #16]
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	bf00      	nop

08005d3c <__multiply>:
 8005d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	690d      	ldr	r5, [r1, #16]
 8005d42:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8005d46:	454d      	cmp	r5, r9
 8005d48:	b085      	sub	sp, #20
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	4692      	mov	sl, r2
 8005d4e:	da04      	bge.n	8005d5a <__multiply+0x1e>
 8005d50:	462a      	mov	r2, r5
 8005d52:	4654      	mov	r4, sl
 8005d54:	464d      	mov	r5, r9
 8005d56:	468a      	mov	sl, r1
 8005d58:	4691      	mov	r9, r2
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	6861      	ldr	r1, [r4, #4]
 8005d5e:	eb05 0709 	add.w	r7, r5, r9
 8005d62:	429f      	cmp	r7, r3
 8005d64:	bfc8      	it	gt
 8005d66:	3101      	addgt	r1, #1
 8005d68:	f7ff ff14 	bl	8005b94 <_Balloc>
 8005d6c:	f100 0614 	add.w	r6, r0, #20
 8005d70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d74:	4546      	cmp	r6, r8
 8005d76:	9001      	str	r0, [sp, #4]
 8005d78:	d205      	bcs.n	8005d86 <__multiply+0x4a>
 8005d7a:	4633      	mov	r3, r6
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f843 0b04 	str.w	r0, [r3], #4
 8005d82:	4598      	cmp	r8, r3
 8005d84:	d8fb      	bhi.n	8005d7e <__multiply+0x42>
 8005d86:	f10a 0c14 	add.w	ip, sl, #20
 8005d8a:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 8005d8e:	3414      	adds	r4, #20
 8005d90:	45cc      	cmp	ip, r9
 8005d92:	9400      	str	r4, [sp, #0]
 8005d94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005d98:	d25b      	bcs.n	8005e52 <__multiply+0x116>
 8005d9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005d9e:	9703      	str	r7, [sp, #12]
 8005da0:	46c8      	mov	r8, r9
 8005da2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005da6:	b29c      	uxth	r4, r3
 8005da8:	b324      	cbz	r4, 8005df4 <__multiply+0xb8>
 8005daa:	9a00      	ldr	r2, [sp, #0]
 8005dac:	4633      	mov	r3, r6
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	e000      	b.n	8005db6 <__multiply+0x7a>
 8005db4:	460b      	mov	r3, r1
 8005db6:	f852 7b04 	ldr.w	r7, [r2], #4
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	fa1f fb87 	uxth.w	fp, r7
 8005dc0:	fa1f fa81 	uxth.w	sl, r1
 8005dc4:	0c38      	lsrs	r0, r7, #16
 8005dc6:	0c09      	lsrs	r1, r1, #16
 8005dc8:	fb04 a70b 	mla	r7, r4, fp, sl
 8005dcc:	44b9      	add	r9, r7
 8005dce:	fb04 1000 	mla	r0, r4, r0, r1
 8005dd2:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	fa1f f989 	uxth.w	r9, r9
 8005ddc:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 8005de0:	4295      	cmp	r5, r2
 8005de2:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8005de6:	f841 7b04 	str.w	r7, [r1], #4
 8005dea:	d8e3      	bhi.n	8005db4 <__multiply+0x78>
 8005dec:	f8c3 9004 	str.w	r9, [r3, #4]
 8005df0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8005df4:	ea5f 4913 	movs.w	r9, r3, lsr #16
 8005df8:	d024      	beq.n	8005e44 <__multiply+0x108>
 8005dfa:	f8d6 a000 	ldr.w	sl, [r6]
 8005dfe:	9b00      	ldr	r3, [sp, #0]
 8005e00:	4650      	mov	r0, sl
 8005e02:	4631      	mov	r1, r6
 8005e04:	f04f 0b00 	mov.w	fp, #0
 8005e08:	e000      	b.n	8005e0c <__multiply+0xd0>
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	0c00      	lsrs	r0, r0, #16
 8005e10:	fb09 0002 	mla	r0, r9, r2, r0
 8005e14:	4483      	add	fp, r0
 8005e16:	fa1f fa8a 	uxth.w	sl, sl
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 8005e20:	f842 0b04 	str.w	r0, [r2], #4
 8005e24:	f853 7b04 	ldr.w	r7, [r3], #4
 8005e28:	6848      	ldr	r0, [r1, #4]
 8005e2a:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8005e2e:	b284      	uxth	r4, r0
 8005e30:	fb09 4a0a 	mla	sl, r9, sl, r4
 8005e34:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 8005e38:	429d      	cmp	r5, r3
 8005e3a:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 8005e3e:	d8e4      	bhi.n	8005e0a <__multiply+0xce>
 8005e40:	f8c1 a004 	str.w	sl, [r1, #4]
 8005e44:	45e0      	cmp	r8, ip
 8005e46:	f106 0604 	add.w	r6, r6, #4
 8005e4a:	d8aa      	bhi.n	8005da2 <__multiply+0x66>
 8005e4c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005e50:	9f03      	ldr	r7, [sp, #12]
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	dd0a      	ble.n	8005e6c <__multiply+0x130>
 8005e56:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8005e5a:	f1a8 0804 	sub.w	r8, r8, #4
 8005e5e:	b11b      	cbz	r3, 8005e68 <__multiply+0x12c>
 8005e60:	e004      	b.n	8005e6c <__multiply+0x130>
 8005e62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e66:	b90b      	cbnz	r3, 8005e6c <__multiply+0x130>
 8005e68:	3f01      	subs	r7, #1
 8005e6a:	d1fa      	bne.n	8005e62 <__multiply+0x126>
 8005e6c:	9b01      	ldr	r3, [sp, #4]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	611f      	str	r7, [r3, #16]
 8005e72:	b005      	add	sp, #20
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e78 <__pow5mult>:
 8005e78:	f012 0303 	ands.w	r3, r2, #3
 8005e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e80:	4614      	mov	r4, r2
 8005e82:	4607      	mov	r7, r0
 8005e84:	460e      	mov	r6, r1
 8005e86:	d12c      	bne.n	8005ee2 <__pow5mult+0x6a>
 8005e88:	10a4      	asrs	r4, r4, #2
 8005e8a:	d01c      	beq.n	8005ec6 <__pow5mult+0x4e>
 8005e8c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	d030      	beq.n	8005ef4 <__pow5mult+0x7c>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	e004      	b.n	8005ea2 <__pow5mult+0x2a>
 8005e98:	1064      	asrs	r4, r4, #1
 8005e9a:	d014      	beq.n	8005ec6 <__pow5mult+0x4e>
 8005e9c:	6828      	ldr	r0, [r5, #0]
 8005e9e:	b1a8      	cbz	r0, 8005ecc <__pow5mult+0x54>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	07e3      	lsls	r3, r4, #31
 8005ea4:	d5f8      	bpl.n	8005e98 <__pow5mult+0x20>
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	462a      	mov	r2, r5
 8005eac:	f7ff ff46 	bl	8005d3c <__multiply>
 8005eb0:	b1ae      	cbz	r6, 8005ede <__pow5mult+0x66>
 8005eb2:	6872      	ldr	r2, [r6, #4]
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	1064      	asrs	r4, r4, #1
 8005eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ebc:	6031      	str	r1, [r6, #0]
 8005ebe:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	d1ea      	bne.n	8005e9c <__pow5mult+0x24>
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	4638      	mov	r0, r7
 8005ece:	4629      	mov	r1, r5
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	f7ff ff33 	bl	8005d3c <__multiply>
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	f8c0 8000 	str.w	r8, [r0]
 8005edc:	e7e0      	b.n	8005ea0 <__pow5mult+0x28>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	e7da      	b.n	8005e98 <__pow5mult+0x20>
 8005ee2:	1e5d      	subs	r5, r3, #1
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <__pow5mult+0x98>)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8005eec:	f7ff fe82 	bl	8005bf4 <__multadd>
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	e7c9      	b.n	8005e88 <__pow5mult+0x10>
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff fe4c 	bl	8005b94 <_Balloc>
 8005efc:	f240 2171 	movw	r1, #625	; 0x271
 8005f00:	2201      	movs	r2, #1
 8005f02:	2300      	movs	r3, #0
 8005f04:	6141      	str	r1, [r0, #20]
 8005f06:	6102      	str	r2, [r0, #16]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	64b8      	str	r0, [r7, #72]	; 0x48
 8005f0c:	6003      	str	r3, [r0, #0]
 8005f0e:	e7c0      	b.n	8005e92 <__pow5mult+0x1a>
 8005f10:	08007ee8 	.word	0x08007ee8

08005f14 <__lshift>:
 8005f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	4693      	mov	fp, r2
 8005f1a:	690a      	ldr	r2, [r1, #16]
 8005f1c:	688b      	ldr	r3, [r1, #8]
 8005f1e:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8005f22:	eb0a 0902 	add.w	r9, sl, r2
 8005f26:	f109 0601 	add.w	r6, r9, #1
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	4680      	mov	r8, r0
 8005f30:	6849      	ldr	r1, [r1, #4]
 8005f32:	dd04      	ble.n	8005f3e <__lshift+0x2a>
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	429e      	cmp	r6, r3
 8005f38:	f101 0101 	add.w	r1, r1, #1
 8005f3c:	dcfa      	bgt.n	8005f34 <__lshift+0x20>
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fe28 	bl	8005b94 <_Balloc>
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	f100 0414 	add.w	r4, r0, #20
 8005f4c:	dd09      	ble.n	8005f62 <__lshift+0x4e>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	461a      	mov	r2, r3
 8005f52:	4625      	mov	r5, r4
 8005f54:	3301      	adds	r3, #1
 8005f56:	4553      	cmp	r3, sl
 8005f58:	f845 2b04 	str.w	r2, [r5], #4
 8005f5c:	d1fa      	bne.n	8005f54 <__lshift+0x40>
 8005f5e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	f01b 0b1f 	ands.w	fp, fp, #31
 8005f6c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8005f70:	d021      	beq.n	8005fb6 <__lshift+0xa2>
 8005f72:	f1cb 0a20 	rsb	sl, fp, #32
 8005f76:	2200      	movs	r2, #0
 8005f78:	e000      	b.n	8005f7c <__lshift+0x68>
 8005f7a:	462c      	mov	r4, r5
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	4625      	mov	r5, r4
 8005f80:	fa01 f10b 	lsl.w	r1, r1, fp
 8005f84:	430a      	orrs	r2, r1
 8005f86:	f845 2b04 	str.w	r2, [r5], #4
 8005f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8e:	4563      	cmp	r3, ip
 8005f90:	fa22 f20a 	lsr.w	r2, r2, sl
 8005f94:	d3f1      	bcc.n	8005f7a <__lshift+0x66>
 8005f96:	6062      	str	r2, [r4, #4]
 8005f98:	b10a      	cbz	r2, 8005f9e <__lshift+0x8a>
 8005f9a:	f109 0602 	add.w	r6, r9, #2
 8005f9e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	3e01      	subs	r6, #1
 8005fa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005faa:	6106      	str	r6, [r0, #16]
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fba:	f844 2b04 	str.w	r2, [r4], #4
 8005fbe:	459c      	cmp	ip, r3
 8005fc0:	d9ed      	bls.n	8005f9e <__lshift+0x8a>
 8005fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fc6:	f844 2b04 	str.w	r2, [r4], #4
 8005fca:	459c      	cmp	ip, r3
 8005fcc:	d8f3      	bhi.n	8005fb6 <__lshift+0xa2>
 8005fce:	e7e6      	b.n	8005f9e <__lshift+0x8a>

08005fd0 <__mcmp>:
 8005fd0:	6902      	ldr	r2, [r0, #16]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	1ad2      	subs	r2, r2, r3
 8005fd6:	b410      	push	{r4}
 8005fd8:	d115      	bne.n	8006006 <__mcmp+0x36>
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	3014      	adds	r0, #20
 8005fde:	3114      	adds	r1, #20
 8005fe0:	4419      	add	r1, r3
 8005fe2:	4403      	add	r3, r0
 8005fe4:	e001      	b.n	8005fea <__mcmp+0x1a>
 8005fe6:	4298      	cmp	r0, r3
 8005fe8:	d211      	bcs.n	800600e <__mcmp+0x3e>
 8005fea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005fee:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ff2:	42a2      	cmp	r2, r4
 8005ff4:	d0f7      	beq.n	8005fe6 <__mcmp+0x16>
 8005ff6:	4294      	cmp	r4, r2
 8005ff8:	bf94      	ite	ls
 8005ffa:	2001      	movls	r0, #1
 8005ffc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	4610      	mov	r0, r2
 8006008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	2000      	movs	r0, #0
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <__mdiff>:
 8006018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	460d      	mov	r5, r1
 800601e:	4604      	mov	r4, r0
 8006020:	4611      	mov	r1, r2
 8006022:	4628      	mov	r0, r5
 8006024:	4616      	mov	r6, r2
 8006026:	f7ff ffd3 	bl	8005fd0 <__mcmp>
 800602a:	1e07      	subs	r7, r0, #0
 800602c:	d055      	beq.n	80060da <__mdiff+0xc2>
 800602e:	db4e      	blt.n	80060ce <__mdiff+0xb6>
 8006030:	f04f 0800 	mov.w	r8, #0
 8006034:	6869      	ldr	r1, [r5, #4]
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff fdac 	bl	8005b94 <_Balloc>
 800603c:	692f      	ldr	r7, [r5, #16]
 800603e:	6932      	ldr	r2, [r6, #16]
 8006040:	f8c0 800c 	str.w	r8, [r0, #12]
 8006044:	3514      	adds	r5, #20
 8006046:	3614      	adds	r6, #20
 8006048:	f100 0314 	add.w	r3, r0, #20
 800604c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006050:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 8006054:	2100      	movs	r1, #0
 8006056:	f856 2b04 	ldr.w	r2, [r6], #4
 800605a:	f855 4b04 	ldr.w	r4, [r5], #4
 800605e:	fa1f f982 	uxth.w	r9, r2
 8006062:	fa11 fa84 	uxtah	sl, r1, r4
 8006066:	0c11      	lsrs	r1, r2, #16
 8006068:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 800606c:	ebc9 020a 	rsb	r2, r9, sl
 8006070:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8006074:	b292      	uxth	r2, r2
 8006076:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800607a:	45b0      	cmp	r8, r6
 800607c:	f843 2b04 	str.w	r2, [r3], #4
 8006080:	ea4f 4121 	mov.w	r1, r1, asr #16
 8006084:	462c      	mov	r4, r5
 8006086:	d8e6      	bhi.n	8006056 <__mdiff+0x3e>
 8006088:	45ac      	cmp	ip, r5
 800608a:	4698      	mov	r8, r3
 800608c:	d915      	bls.n	80060ba <__mdiff+0xa2>
 800608e:	f854 6b04 	ldr.w	r6, [r4], #4
 8006092:	fa11 f186 	uxtah	r1, r1, r6
 8006096:	0c36      	lsrs	r6, r6, #16
 8006098:	eb06 4621 	add.w	r6, r6, r1, asr #16
 800609c:	b289      	uxth	r1, r1
 800609e:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 80060a2:	45a4      	cmp	ip, r4
 80060a4:	f843 2b04 	str.w	r2, [r3], #4
 80060a8:	ea4f 4126 	mov.w	r1, r6, asr #16
 80060ac:	d8ef      	bhi.n	800608e <__mdiff+0x76>
 80060ae:	43eb      	mvns	r3, r5
 80060b0:	4463      	add	r3, ip
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	3304      	adds	r3, #4
 80060b8:	4443      	add	r3, r8
 80060ba:	3b04      	subs	r3, #4
 80060bc:	b922      	cbnz	r2, 80060c8 <__mdiff+0xb0>
 80060be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80060c2:	3f01      	subs	r7, #1
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d0fa      	beq.n	80060be <__mdiff+0xa6>
 80060c8:	6107      	str	r7, [r0, #16]
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	462b      	mov	r3, r5
 80060d0:	f04f 0801 	mov.w	r8, #1
 80060d4:	4635      	mov	r5, r6
 80060d6:	461e      	mov	r6, r3
 80060d8:	e7ac      	b.n	8006034 <__mdiff+0x1c>
 80060da:	4620      	mov	r0, r4
 80060dc:	4639      	mov	r1, r7
 80060de:	f7ff fd59 	bl	8005b94 <_Balloc>
 80060e2:	2301      	movs	r3, #1
 80060e4:	6147      	str	r7, [r0, #20]
 80060e6:	6103      	str	r3, [r0, #16]
 80060e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060ec <__d2b>:
 80060ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f0:	4689      	mov	r9, r1
 80060f2:	b083      	sub	sp, #12
 80060f4:	2101      	movs	r1, #1
 80060f6:	ec55 4b10 	vmov	r4, r5, d0
 80060fa:	4690      	mov	r8, r2
 80060fc:	f7ff fd4a 	bl	8005b94 <_Balloc>
 8006100:	f3c5 570a 	ubfx	r7, r5, #20, #11
 8006104:	4606      	mov	r6, r0
 8006106:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800610a:	b10f      	cbz	r7, 8006110 <__d2b+0x24>
 800610c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	b314      	cbz	r4, 800615a <__d2b+0x6e>
 8006114:	a802      	add	r0, sp, #8
 8006116:	f840 4d08 	str.w	r4, [r0, #-8]!
 800611a:	4668      	mov	r0, sp
 800611c:	f7ff fdd6 	bl	8005ccc <__lo0bits>
 8006120:	2800      	cmp	r0, #0
 8006122:	d131      	bne.n	8006188 <__d2b+0x9c>
 8006124:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006128:	6172      	str	r2, [r6, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf0c      	ite	eq
 800612e:	2401      	moveq	r4, #1
 8006130:	2402      	movne	r4, #2
 8006132:	61b3      	str	r3, [r6, #24]
 8006134:	6134      	str	r4, [r6, #16]
 8006136:	b9d7      	cbnz	r7, 800616e <__d2b+0x82>
 8006138:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800613c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006140:	f8c9 0000 	str.w	r0, [r9]
 8006144:	6918      	ldr	r0, [r3, #16]
 8006146:	f7ff fda1 	bl	8005c8c <__hi0bits>
 800614a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800614e:	f8c8 0000 	str.w	r0, [r8]
 8006152:	4630      	mov	r0, r6
 8006154:	b003      	add	sp, #12
 8006156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615a:	a801      	add	r0, sp, #4
 800615c:	f7ff fdb6 	bl	8005ccc <__lo0bits>
 8006160:	2401      	movs	r4, #1
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	6173      	str	r3, [r6, #20]
 8006166:	3020      	adds	r0, #32
 8006168:	6134      	str	r4, [r6, #16]
 800616a:	2f00      	cmp	r7, #0
 800616c:	d0e4      	beq.n	8006138 <__d2b+0x4c>
 800616e:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8006172:	4407      	add	r7, r0
 8006174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006178:	f8c9 7000 	str.w	r7, [r9]
 800617c:	f8c8 0000 	str.w	r0, [r8]
 8006180:	4630      	mov	r0, r6
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006188:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800618c:	f1c0 0120 	rsb	r1, r0, #32
 8006190:	fa03 f101 	lsl.w	r1, r3, r1
 8006194:	430a      	orrs	r2, r1
 8006196:	40c3      	lsrs	r3, r0
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	6172      	str	r2, [r6, #20]
 800619c:	e7c5      	b.n	800612a <__d2b+0x3e>
 800619e:	bf00      	nop

080061a0 <_read_r>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4c08      	ldr	r4, [pc, #32]	; (80061c4 <_read_r+0x24>)
 80061a4:	4606      	mov	r6, r0
 80061a6:	2500      	movs	r5, #0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	6025      	str	r5, [r4, #0]
 80061b0:	f7fa fb4e 	bl	8000850 <_read>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d000      	beq.n	80061ba <_read_r+0x1a>
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0fb      	beq.n	80061b8 <_read_r+0x18>
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	20008b28 	.word	0x20008b28

080061c8 <__fpclassifyd>:
 80061c8:	ec53 2b10 	vmov	r2, r3, d0
 80061cc:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 80061d0:	b410      	push	{r4}
 80061d2:	d008      	beq.n	80061e6 <__fpclassifyd+0x1e>
 80061d4:	480f      	ldr	r0, [pc, #60]	; (8006214 <__fpclassifyd+0x4c>)
 80061d6:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80061da:	4284      	cmp	r4, r0
 80061dc:	d80a      	bhi.n	80061f4 <__fpclassifyd+0x2c>
 80061de:	2004      	movs	r0, #4
 80061e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	bf0c      	ite	eq
 80061ea:	2002      	moveq	r0, #2
 80061ec:	2003      	movne	r0, #3
 80061ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80061f8:	d201      	bcs.n	80061fe <__fpclassifyd+0x36>
 80061fa:	2003      	movs	r0, #3
 80061fc:	e7f7      	b.n	80061ee <__fpclassifyd+0x26>
 80061fe:	4806      	ldr	r0, [pc, #24]	; (8006218 <__fpclassifyd+0x50>)
 8006200:	4281      	cmp	r1, r0
 8006202:	d001      	beq.n	8006208 <__fpclassifyd+0x40>
 8006204:	2000      	movs	r0, #0
 8006206:	e7f2      	b.n	80061ee <__fpclassifyd+0x26>
 8006208:	f1d2 0001 	rsbs	r0, r2, #1
 800620c:	bf38      	it	cc
 800620e:	2000      	movcc	r0, #0
 8006210:	e7ed      	b.n	80061ee <__fpclassifyd+0x26>
 8006212:	bf00      	nop
 8006214:	7fdfffff 	.word	0x7fdfffff
 8006218:	7ff00000 	.word	0x7ff00000

0800621c <__sprint_r.part.0>:
 800621c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800621e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006222:	049c      	lsls	r4, r3, #18
 8006224:	460e      	mov	r6, r1
 8006226:	4680      	mov	r8, r0
 8006228:	4691      	mov	r9, r2
 800622a:	d52a      	bpl.n	8006282 <__sprint_r.part.0+0x66>
 800622c:	6893      	ldr	r3, [r2, #8]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	f102 0a08 	add.w	sl, r2, #8
 8006234:	b31b      	cbz	r3, 800627e <__sprint_r.part.0+0x62>
 8006236:	e91a 00a0 	ldmdb	sl, {r5, r7}
 800623a:	08bf      	lsrs	r7, r7, #2
 800623c:	d017      	beq.n	800626e <__sprint_r.part.0+0x52>
 800623e:	3d04      	subs	r5, #4
 8006240:	2400      	movs	r4, #0
 8006242:	e001      	b.n	8006248 <__sprint_r.part.0+0x2c>
 8006244:	42a7      	cmp	r7, r4
 8006246:	d010      	beq.n	800626a <__sprint_r.part.0+0x4e>
 8006248:	4640      	mov	r0, r8
 800624a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800624e:	4632      	mov	r2, r6
 8006250:	f000 f85c 	bl	800630c <_fputwc_r>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	f104 0401 	add.w	r4, r4, #1
 800625a:	d1f3      	bne.n	8006244 <__sprint_r.part.0+0x28>
 800625c:	2300      	movs	r3, #0
 800625e:	f8c9 3008 	str.w	r3, [r9, #8]
 8006262:	f8c9 3004 	str.w	r3, [r9, #4]
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800626e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 8006272:	f8c9 3008 	str.w	r3, [r9, #8]
 8006276:	f10a 0a08 	add.w	sl, sl, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1db      	bne.n	8006236 <__sprint_r.part.0+0x1a>
 800627e:	2000      	movs	r0, #0
 8006280:	e7ec      	b.n	800625c <__sprint_r.part.0+0x40>
 8006282:	f000 f8b5 	bl	80063f0 <__sfvwrite_r>
 8006286:	2300      	movs	r3, #0
 8006288:	f8c9 3008 	str.w	r3, [r9, #8]
 800628c:	f8c9 3004 	str.w	r3, [r9, #4]
 8006290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006294 <__sprint_r>:
 8006294:	6893      	ldr	r3, [r2, #8]
 8006296:	b410      	push	{r4}
 8006298:	b11b      	cbz	r3, 80062a2 <__sprint_r+0xe>
 800629a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629e:	f7ff bfbd 	b.w	800621c <__sprint_r.part.0>
 80062a2:	4618      	mov	r0, r3
 80062a4:	6053      	str	r3, [r2, #4]
 80062a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <_calloc_r>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	fb02 f101 	mul.w	r1, r2, r1
 80062b2:	f7fc f8c7 	bl	8002444 <_malloc_r>
 80062b6:	4604      	mov	r4, r0
 80062b8:	b168      	cbz	r0, 80062d6 <_calloc_r+0x2a>
 80062ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80062be:	f022 0203 	bic.w	r2, r2, #3
 80062c2:	3a04      	subs	r2, #4
 80062c4:	2a24      	cmp	r2, #36	; 0x24
 80062c6:	d818      	bhi.n	80062fa <_calloc_r+0x4e>
 80062c8:	2a13      	cmp	r2, #19
 80062ca:	d806      	bhi.n	80062da <_calloc_r+0x2e>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	609a      	str	r2, [r3, #8]
 80062d6:	4620      	mov	r0, r4
 80062d8:	bd10      	pop	{r4, pc}
 80062da:	2300      	movs	r3, #0
 80062dc:	2a1b      	cmp	r2, #27
 80062de:	6003      	str	r3, [r0, #0]
 80062e0:	6043      	str	r3, [r0, #4]
 80062e2:	d90f      	bls.n	8006304 <_calloc_r+0x58>
 80062e4:	2a24      	cmp	r2, #36	; 0x24
 80062e6:	6083      	str	r3, [r0, #8]
 80062e8:	60c3      	str	r3, [r0, #12]
 80062ea:	bf05      	ittet	eq
 80062ec:	6103      	streq	r3, [r0, #16]
 80062ee:	6143      	streq	r3, [r0, #20]
 80062f0:	f100 0310 	addne.w	r3, r0, #16
 80062f4:	f100 0318 	addeq.w	r3, r0, #24
 80062f8:	e7e9      	b.n	80062ce <_calloc_r+0x22>
 80062fa:	2100      	movs	r1, #0
 80062fc:	f7fc fbd8 	bl	8002ab0 <memset>
 8006300:	4620      	mov	r0, r4
 8006302:	bd10      	pop	{r4, pc}
 8006304:	f100 0308 	add.w	r3, r0, #8
 8006308:	e7e1      	b.n	80062ce <_calloc_r+0x22>
 800630a:	bf00      	nop

0800630c <_fputwc_r>:
 800630c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006310:	8993      	ldrh	r3, [r2, #12]
 8006312:	460f      	mov	r7, r1
 8006314:	0499      	lsls	r1, r3, #18
 8006316:	b082      	sub	sp, #8
 8006318:	4614      	mov	r4, r2
 800631a:	4680      	mov	r8, r0
 800631c:	d406      	bmi.n	800632c <_fputwc_r+0x20>
 800631e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	6662      	str	r2, [r4, #100]	; 0x64
 800632c:	f7ff fb5c 	bl	80059e8 <__locale_mb_cur_max>
 8006330:	2801      	cmp	r0, #1
 8006332:	d03d      	beq.n	80063b0 <_fputwc_r+0xa4>
 8006334:	463a      	mov	r2, r7
 8006336:	4640      	mov	r0, r8
 8006338:	a901      	add	r1, sp, #4
 800633a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800633e:	f000 fc8f 	bl	8006c60 <_wcrtomb_r>
 8006342:	1c42      	adds	r2, r0, #1
 8006344:	4606      	mov	r6, r0
 8006346:	d02c      	beq.n	80063a2 <_fputwc_r+0x96>
 8006348:	2800      	cmp	r0, #0
 800634a:	d039      	beq.n	80063c0 <_fputwc_r+0xb4>
 800634c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8006350:	2500      	movs	r5, #0
 8006352:	e009      	b.n	8006368 <_fputwc_r+0x5c>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	7019      	strb	r1, [r3, #0]
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	3501      	adds	r5, #1
 8006360:	42b5      	cmp	r5, r6
 8006362:	d22d      	bcs.n	80063c0 <_fputwc_r+0xb4>
 8006364:	ab01      	add	r3, sp, #4
 8006366:	5ce9      	ldrb	r1, [r5, r3]
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	3b01      	subs	r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	60a3      	str	r3, [r4, #8]
 8006370:	daf0      	bge.n	8006354 <_fputwc_r+0x48>
 8006372:	69a2      	ldr	r2, [r4, #24]
 8006374:	4293      	cmp	r3, r2
 8006376:	db05      	blt.n	8006384 <_fputwc_r+0x78>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	7019      	strb	r1, [r3, #0]
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	7819      	ldrb	r1, [r3, #0]
 8006380:	290a      	cmp	r1, #10
 8006382:	d1ea      	bne.n	800635a <_fputwc_r+0x4e>
 8006384:	4640      	mov	r0, r8
 8006386:	4622      	mov	r2, r4
 8006388:	f000 fc16 	bl	8006bb8 <__swbuf_r>
 800638c:	f1b0 33ff 	subs.w	r3, r0, #4294967295	; 0xffffffff
 8006390:	4258      	negs	r0, r3
 8006392:	4158      	adcs	r0, r3
 8006394:	2800      	cmp	r0, #0
 8006396:	d0e2      	beq.n	800635e <_fputwc_r+0x52>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639c:	b002      	add	sp, #8
 800639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	b002      	add	sp, #8
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b0:	1e7b      	subs	r3, r7, #1
 80063b2:	2bfe      	cmp	r3, #254	; 0xfe
 80063b4:	d8be      	bhi.n	8006334 <_fputwc_r+0x28>
 80063b6:	b2f9      	uxtb	r1, r7
 80063b8:	4606      	mov	r6, r0
 80063ba:	f88d 1004 	strb.w	r1, [sp, #4]
 80063be:	e7c7      	b.n	8006350 <_fputwc_r+0x44>
 80063c0:	4638      	mov	r0, r7
 80063c2:	b002      	add	sp, #8
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063c8 <_fstat_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4c08      	ldr	r4, [pc, #32]	; (80063ec <_fstat_r+0x24>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4605      	mov	r5, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	f7fa fabe 	bl	8000956 <_fstat>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	d000      	beq.n	80063e0 <_fstat_r+0x18>
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0fb      	beq.n	80063de <_fstat_r+0x16>
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	bd38      	pop	{r3, r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	20008b28 	.word	0x20008b28

080063f0 <__sfvwrite_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	6893      	ldr	r3, [r2, #8]
 80063f6:	b083      	sub	sp, #12
 80063f8:	4616      	mov	r6, r2
 80063fa:	4681      	mov	r9, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	b32b      	cbz	r3, 800644c <__sfvwrite_r+0x5c>
 8006400:	898b      	ldrh	r3, [r1, #12]
 8006402:	0719      	lsls	r1, r3, #28
 8006404:	d526      	bpl.n	8006454 <__sfvwrite_r+0x64>
 8006406:	6922      	ldr	r2, [r4, #16]
 8006408:	b322      	cbz	r2, 8006454 <__sfvwrite_r+0x64>
 800640a:	f003 0202 	and.w	r2, r3, #2
 800640e:	b292      	uxth	r2, r2
 8006410:	6835      	ldr	r5, [r6, #0]
 8006412:	2a00      	cmp	r2, #0
 8006414:	d02c      	beq.n	8006470 <__sfvwrite_r+0x80>
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8006704 <__sfvwrite_r+0x314>
 800641e:	46d0      	mov	r8, sl
 8006420:	45d8      	cmp	r8, fp
 8006422:	bf34      	ite	cc
 8006424:	4643      	movcc	r3, r8
 8006426:	465b      	movcs	r3, fp
 8006428:	4652      	mov	r2, sl
 800642a:	4648      	mov	r0, r9
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	d04f      	beq.n	80064d2 <__sfvwrite_r+0xe2>
 8006432:	69e1      	ldr	r1, [r4, #28]
 8006434:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006436:	47b8      	blx	r7
 8006438:	2800      	cmp	r0, #0
 800643a:	dd56      	ble.n	80064ea <__sfvwrite_r+0xfa>
 800643c:	68b3      	ldr	r3, [r6, #8]
 800643e:	1a1b      	subs	r3, r3, r0
 8006440:	4482      	add	sl, r0
 8006442:	ebc0 0808 	rsb	r8, r0, r8
 8006446:	60b3      	str	r3, [r6, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e9      	bne.n	8006420 <__sfvwrite_r+0x30>
 800644c:	2000      	movs	r0, #0
 800644e:	b003      	add	sp, #12
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	4648      	mov	r0, r9
 8006456:	4621      	mov	r1, r4
 8006458:	f7fe f866 	bl	8004528 <__swsetup_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 8148 	bne.w	80066f2 <__sfvwrite_r+0x302>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	6835      	ldr	r5, [r6, #0]
 8006466:	f003 0202 	and.w	r2, r3, #2
 800646a:	b292      	uxth	r2, r2
 800646c:	2a00      	cmp	r2, #0
 800646e:	d1d2      	bne.n	8006416 <__sfvwrite_r+0x26>
 8006470:	f013 0a01 	ands.w	sl, r3, #1
 8006474:	d142      	bne.n	80064fc <__sfvwrite_r+0x10c>
 8006476:	46d0      	mov	r8, sl
 8006478:	f1b8 0f00 	cmp.w	r8, #0
 800647c:	d023      	beq.n	80064c6 <__sfvwrite_r+0xd6>
 800647e:	059a      	lsls	r2, r3, #22
 8006480:	68a7      	ldr	r7, [r4, #8]
 8006482:	d576      	bpl.n	8006572 <__sfvwrite_r+0x182>
 8006484:	45b8      	cmp	r8, r7
 8006486:	f0c0 80a4 	bcc.w	80065d2 <__sfvwrite_r+0x1e2>
 800648a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800648e:	f040 80b2 	bne.w	80065f6 <__sfvwrite_r+0x206>
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	46bb      	mov	fp, r7
 8006496:	4651      	mov	r1, sl
 8006498:	465a      	mov	r2, fp
 800649a:	f000 f947 	bl	800672c <memmove>
 800649e:	68a2      	ldr	r2, [r4, #8]
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1bd2      	subs	r2, r2, r7
 80064a4:	eb01 030b 	add.w	r3, r1, fp
 80064a8:	60a2      	str	r2, [r4, #8]
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	4642      	mov	r2, r8
 80064ae:	68b3      	ldr	r3, [r6, #8]
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	4492      	add	sl, r2
 80064b4:	ebc2 0808 	rsb	r8, r2, r8
 80064b8:	60b3      	str	r3, [r6, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c6      	beq.n	800644c <__sfvwrite_r+0x5c>
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f1b8 0f00 	cmp.w	r8, #0
 80064c4:	d1db      	bne.n	800647e <__sfvwrite_r+0x8e>
 80064c6:	f8d5 a000 	ldr.w	sl, [r5]
 80064ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80064ce:	3508      	adds	r5, #8
 80064d0:	e7d2      	b.n	8006478 <__sfvwrite_r+0x88>
 80064d2:	f8d5 a000 	ldr.w	sl, [r5]
 80064d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80064da:	3508      	adds	r5, #8
 80064dc:	e7a0      	b.n	8006420 <__sfvwrite_r+0x30>
 80064de:	4648      	mov	r0, r9
 80064e0:	4621      	mov	r1, r4
 80064e2:	f7ff f94b 	bl	800577c <_fflush_r>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d059      	beq.n	800659e <__sfvwrite_r+0x1ae>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	b003      	add	sp, #12
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4692      	mov	sl, r2
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	4693      	mov	fp, r2
 8006502:	4690      	mov	r8, r2
 8006504:	f1b8 0f00 	cmp.w	r8, #0
 8006508:	d02b      	beq.n	8006562 <__sfvwrite_r+0x172>
 800650a:	9f01      	ldr	r7, [sp, #4]
 800650c:	2f00      	cmp	r7, #0
 800650e:	d064      	beq.n	80065da <__sfvwrite_r+0x1ea>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	6921      	ldr	r1, [r4, #16]
 8006514:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006518:	6962      	ldr	r2, [r4, #20]
 800651a:	45c2      	cmp	sl, r8
 800651c:	bf34      	ite	cc
 800651e:	4653      	movcc	r3, sl
 8006520:	4643      	movcs	r3, r8
 8006522:	4288      	cmp	r0, r1
 8006524:	461f      	mov	r7, r3
 8006526:	d903      	bls.n	8006530 <__sfvwrite_r+0x140>
 8006528:	4494      	add	ip, r2
 800652a:	4563      	cmp	r3, ip
 800652c:	f300 80ae 	bgt.w	800668c <__sfvwrite_r+0x29c>
 8006530:	4293      	cmp	r3, r2
 8006532:	db36      	blt.n	80065a2 <__sfvwrite_r+0x1b2>
 8006534:	4613      	mov	r3, r2
 8006536:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006538:	69e1      	ldr	r1, [r4, #28]
 800653a:	4648      	mov	r0, r9
 800653c:	465a      	mov	r2, fp
 800653e:	47b8      	blx	r7
 8006540:	1e07      	subs	r7, r0, #0
 8006542:	ddd2      	ble.n	80064ea <__sfvwrite_r+0xfa>
 8006544:	ebba 0a07 	subs.w	sl, sl, r7
 8006548:	d03a      	beq.n	80065c0 <__sfvwrite_r+0x1d0>
 800654a:	68b3      	ldr	r3, [r6, #8]
 800654c:	1bdb      	subs	r3, r3, r7
 800654e:	44bb      	add	fp, r7
 8006550:	ebc7 0808 	rsb	r8, r7, r8
 8006554:	60b3      	str	r3, [r6, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f43f af78 	beq.w	800644c <__sfvwrite_r+0x5c>
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	d1d3      	bne.n	800650a <__sfvwrite_r+0x11a>
 8006562:	2700      	movs	r7, #0
 8006564:	f8d5 b000 	ldr.w	fp, [r5]
 8006568:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800656c:	9701      	str	r7, [sp, #4]
 800656e:	3508      	adds	r5, #8
 8006570:	e7c8      	b.n	8006504 <__sfvwrite_r+0x114>
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	4298      	cmp	r0, r3
 8006578:	d802      	bhi.n	8006580 <__sfvwrite_r+0x190>
 800657a:	6963      	ldr	r3, [r4, #20]
 800657c:	4598      	cmp	r8, r3
 800657e:	d272      	bcs.n	8006666 <__sfvwrite_r+0x276>
 8006580:	45b8      	cmp	r8, r7
 8006582:	bf38      	it	cc
 8006584:	4647      	movcc	r7, r8
 8006586:	463a      	mov	r2, r7
 8006588:	4651      	mov	r1, sl
 800658a:	f000 f8cf 	bl	800672c <memmove>
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	1bdb      	subs	r3, r3, r7
 8006594:	443a      	add	r2, r7
 8006596:	60a3      	str	r3, [r4, #8]
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d09f      	beq.n	80064de <__sfvwrite_r+0xee>
 800659e:	463a      	mov	r2, r7
 80065a0:	e785      	b.n	80064ae <__sfvwrite_r+0xbe>
 80065a2:	461a      	mov	r2, r3
 80065a4:	4659      	mov	r1, fp
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	f000 f8c0 	bl	800672c <memmove>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	68a1      	ldr	r1, [r4, #8]
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	1ac9      	subs	r1, r1, r3
 80065b4:	ebba 0a07 	subs.w	sl, sl, r7
 80065b8:	4413      	add	r3, r2
 80065ba:	60a1      	str	r1, [r4, #8]
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	d1c4      	bne.n	800654a <__sfvwrite_r+0x15a>
 80065c0:	4648      	mov	r0, r9
 80065c2:	4621      	mov	r1, r4
 80065c4:	f7ff f8da 	bl	800577c <_fflush_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d18e      	bne.n	80064ea <__sfvwrite_r+0xfa>
 80065cc:	f8cd a004 	str.w	sl, [sp, #4]
 80065d0:	e7bb      	b.n	800654a <__sfvwrite_r+0x15a>
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	4647      	mov	r7, r8
 80065d6:	46c3      	mov	fp, r8
 80065d8:	e75d      	b.n	8006496 <__sfvwrite_r+0xa6>
 80065da:	4658      	mov	r0, fp
 80065dc:	210a      	movs	r1, #10
 80065de:	4642      	mov	r2, r8
 80065e0:	f7ff fa90 	bl	8005b04 <memchr>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d07f      	beq.n	80066e8 <__sfvwrite_r+0x2f8>
 80065e8:	f100 0a01 	add.w	sl, r0, #1
 80065ec:	2701      	movs	r7, #1
 80065ee:	ebcb 0a0a 	rsb	sl, fp, sl
 80065f2:	9701      	str	r7, [sp, #4]
 80065f4:	e78c      	b.n	8006510 <__sfvwrite_r+0x120>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	6921      	ldr	r1, [r4, #16]
 80065fa:	6967      	ldr	r7, [r4, #20]
 80065fc:	ebc1 0c02 	rsb	ip, r1, r2
 8006600:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006604:	f10c 0201 	add.w	r2, ip, #1
 8006608:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800660c:	4442      	add	r2, r8
 800660e:	107f      	asrs	r7, r7, #1
 8006610:	4297      	cmp	r7, r2
 8006612:	bf34      	ite	cc
 8006614:	4617      	movcc	r7, r2
 8006616:	463a      	movcs	r2, r7
 8006618:	055b      	lsls	r3, r3, #21
 800661a:	d54f      	bpl.n	80066bc <__sfvwrite_r+0x2cc>
 800661c:	4611      	mov	r1, r2
 800661e:	4648      	mov	r0, r9
 8006620:	f8cd c000 	str.w	ip, [sp]
 8006624:	f7fb ff0e 	bl	8002444 <_malloc_r>
 8006628:	f8dd c000 	ldr.w	ip, [sp]
 800662c:	4683      	mov	fp, r0
 800662e:	2800      	cmp	r0, #0
 8006630:	d062      	beq.n	80066f8 <__sfvwrite_r+0x308>
 8006632:	4662      	mov	r2, ip
 8006634:	6921      	ldr	r1, [r4, #16]
 8006636:	f8cd c000 	str.w	ip, [sp]
 800663a:	f7fc f99f 	bl	800297c <memcpy>
 800663e:	89a2      	ldrh	r2, [r4, #12]
 8006640:	f8dd c000 	ldr.w	ip, [sp]
 8006644:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800664c:	81a2      	strh	r2, [r4, #12]
 800664e:	eb0b 000c 	add.w	r0, fp, ip
 8006652:	ebcc 0207 	rsb	r2, ip, r7
 8006656:	f8c4 b010 	str.w	fp, [r4, #16]
 800665a:	6167      	str	r7, [r4, #20]
 800665c:	6020      	str	r0, [r4, #0]
 800665e:	60a2      	str	r2, [r4, #8]
 8006660:	4647      	mov	r7, r8
 8006662:	46c3      	mov	fp, r8
 8006664:	e717      	b.n	8006496 <__sfvwrite_r+0xa6>
 8006666:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800666a:	4590      	cmp	r8, r2
 800666c:	bf38      	it	cc
 800666e:	4642      	movcc	r2, r8
 8006670:	fb92 f2f3 	sdiv	r2, r2, r3
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800667a:	69e1      	ldr	r1, [r4, #28]
 800667c:	4648      	mov	r0, r9
 800667e:	4652      	mov	r2, sl
 8006680:	47b8      	blx	r7
 8006682:	2800      	cmp	r0, #0
 8006684:	f77f af31 	ble.w	80064ea <__sfvwrite_r+0xfa>
 8006688:	4602      	mov	r2, r0
 800668a:	e710      	b.n	80064ae <__sfvwrite_r+0xbe>
 800668c:	4662      	mov	r2, ip
 800668e:	4659      	mov	r1, fp
 8006690:	f8cd c000 	str.w	ip, [sp]
 8006694:	f000 f84a 	bl	800672c <memmove>
 8006698:	f8dd c000 	ldr.w	ip, [sp]
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	4463      	add	r3, ip
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	4648      	mov	r0, r9
 80066a4:	4621      	mov	r1, r4
 80066a6:	f8cd c000 	str.w	ip, [sp]
 80066aa:	f7ff f867 	bl	800577c <_fflush_r>
 80066ae:	f8dd c000 	ldr.w	ip, [sp]
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f47f af19 	bne.w	80064ea <__sfvwrite_r+0xfa>
 80066b8:	4667      	mov	r7, ip
 80066ba:	e743      	b.n	8006544 <__sfvwrite_r+0x154>
 80066bc:	4648      	mov	r0, r9
 80066be:	f8cd c000 	str.w	ip, [sp]
 80066c2:	f000 f893 	bl	80067ec <_realloc_r>
 80066c6:	f8dd c000 	ldr.w	ip, [sp]
 80066ca:	4683      	mov	fp, r0
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d1be      	bne.n	800664e <__sfvwrite_r+0x25e>
 80066d0:	4648      	mov	r0, r9
 80066d2:	6921      	ldr	r1, [r4, #16]
 80066d4:	f7ff f8b6 	bl	8005844 <_free_r>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	220c      	movs	r2, #12
 80066dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f8c9 2000 	str.w	r2, [r9]
 80066e6:	e701      	b.n	80064ec <__sfvwrite_r+0xfc>
 80066e8:	2701      	movs	r7, #1
 80066ea:	f108 0a01 	add.w	sl, r8, #1
 80066ee:	9701      	str	r7, [sp, #4]
 80066f0:	e70e      	b.n	8006510 <__sfvwrite_r+0x120>
 80066f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f6:	e6aa      	b.n	800644e <__sfvwrite_r+0x5e>
 80066f8:	230c      	movs	r3, #12
 80066fa:	f8c9 3000 	str.w	r3, [r9]
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	e6f4      	b.n	80064ec <__sfvwrite_r+0xfc>
 8006702:	bf00      	nop
 8006704:	7ffffc00 	.word	0x7ffffc00

08006708 <_isatty_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4c07      	ldr	r4, [pc, #28]	; (8006728 <_isatty_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4605      	mov	r5, r0
 8006710:	4608      	mov	r0, r1
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	f000 fae2 	bl	8006cdc <_isatty>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d000      	beq.n	800671e <_isatty_r+0x16>
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0fb      	beq.n	800671c <_isatty_r+0x14>
 8006724:	602b      	str	r3, [r5, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20008b28 	.word	0x20008b28

0800672c <memmove>:
 800672c:	4288      	cmp	r0, r1
 800672e:	b4f0      	push	{r4, r5, r6, r7}
 8006730:	d910      	bls.n	8006754 <memmove+0x28>
 8006732:	188c      	adds	r4, r1, r2
 8006734:	42a0      	cmp	r0, r4
 8006736:	d20d      	bcs.n	8006754 <memmove+0x28>
 8006738:	1885      	adds	r5, r0, r2
 800673a:	1e53      	subs	r3, r2, #1
 800673c:	b142      	cbz	r2, 8006750 <memmove+0x24>
 800673e:	4621      	mov	r1, r4
 8006740:	462a      	mov	r2, r5
 8006742:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8006746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800674a:	3b01      	subs	r3, #1
 800674c:	1c5c      	adds	r4, r3, #1
 800674e:	d1f8      	bne.n	8006742 <memmove+0x16>
 8006750:	bcf0      	pop	{r4, r5, r6, r7}
 8006752:	4770      	bx	lr
 8006754:	2a0f      	cmp	r2, #15
 8006756:	d93f      	bls.n	80067d8 <memmove+0xac>
 8006758:	ea40 0301 	orr.w	r3, r0, r1
 800675c:	079b      	lsls	r3, r3, #30
 800675e:	d13f      	bne.n	80067e0 <memmove+0xb4>
 8006760:	f1a2 0710 	sub.w	r7, r2, #16
 8006764:	093f      	lsrs	r7, r7, #4
 8006766:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800676a:	3610      	adds	r6, #16
 800676c:	460c      	mov	r4, r1
 800676e:	4603      	mov	r3, r0
 8006770:	6825      	ldr	r5, [r4, #0]
 8006772:	601d      	str	r5, [r3, #0]
 8006774:	6865      	ldr	r5, [r4, #4]
 8006776:	605d      	str	r5, [r3, #4]
 8006778:	68a5      	ldr	r5, [r4, #8]
 800677a:	609d      	str	r5, [r3, #8]
 800677c:	68e5      	ldr	r5, [r4, #12]
 800677e:	60dd      	str	r5, [r3, #12]
 8006780:	3310      	adds	r3, #16
 8006782:	42b3      	cmp	r3, r6
 8006784:	f104 0410 	add.w	r4, r4, #16
 8006788:	d1f2      	bne.n	8006770 <memmove+0x44>
 800678a:	1c7b      	adds	r3, r7, #1
 800678c:	f002 0c0f 	and.w	ip, r2, #15
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	f1bc 0f03 	cmp.w	ip, #3
 8006796:	4419      	add	r1, r3
 8006798:	4403      	add	r3, r0
 800679a:	d923      	bls.n	80067e4 <memmove+0xb8>
 800679c:	460e      	mov	r6, r1
 800679e:	461d      	mov	r5, r3
 80067a0:	4664      	mov	r4, ip
 80067a2:	3c04      	subs	r4, #4
 80067a4:	f856 7b04 	ldr.w	r7, [r6], #4
 80067a8:	f845 7b04 	str.w	r7, [r5], #4
 80067ac:	2c03      	cmp	r4, #3
 80067ae:	d8f8      	bhi.n	80067a2 <memmove+0x76>
 80067b0:	f1ac 0404 	sub.w	r4, ip, #4
 80067b4:	f024 0403 	bic.w	r4, r4, #3
 80067b8:	3404      	adds	r4, #4
 80067ba:	f002 0203 	and.w	r2, r2, #3
 80067be:	4423      	add	r3, r4
 80067c0:	4421      	add	r1, r4
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	d0c4      	beq.n	8006750 <memmove+0x24>
 80067c6:	441a      	add	r2, r3
 80067c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067cc:	f803 4b01 	strb.w	r4, [r3], #1
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d1f9      	bne.n	80067c8 <memmove+0x9c>
 80067d4:	bcf0      	pop	{r4, r5, r6, r7}
 80067d6:	4770      	bx	lr
 80067d8:	4603      	mov	r3, r0
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d1f3      	bne.n	80067c6 <memmove+0x9a>
 80067de:	e7b7      	b.n	8006750 <memmove+0x24>
 80067e0:	4603      	mov	r3, r0
 80067e2:	e7f0      	b.n	80067c6 <memmove+0x9a>
 80067e4:	4662      	mov	r2, ip
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d1ed      	bne.n	80067c6 <memmove+0x9a>
 80067ea:	e7b1      	b.n	8006750 <memmove+0x24>

080067ec <_realloc_r>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	460c      	mov	r4, r1
 80067f2:	b083      	sub	sp, #12
 80067f4:	4690      	mov	r8, r2
 80067f6:	4681      	mov	r9, r0
 80067f8:	2900      	cmp	r1, #0
 80067fa:	f000 80e2 	beq.w	80069c2 <_realloc_r+0x1d6>
 80067fe:	f7fc f9a1 	bl	8002b44 <__malloc_lock>
 8006802:	f108 060b 	add.w	r6, r8, #11
 8006806:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800680a:	2e16      	cmp	r6, #22
 800680c:	f023 0503 	bic.w	r5, r3, #3
 8006810:	f1a4 0708 	sub.w	r7, r4, #8
 8006814:	d84b      	bhi.n	80068ae <_realloc_r+0xc2>
 8006816:	2110      	movs	r1, #16
 8006818:	460e      	mov	r6, r1
 800681a:	45b0      	cmp	r8, r6
 800681c:	d84c      	bhi.n	80068b8 <_realloc_r+0xcc>
 800681e:	428d      	cmp	r5, r1
 8006820:	da78      	bge.n	8006914 <_realloc_r+0x128>
 8006822:	f8df b390 	ldr.w	fp, [pc, #912]	; 8006bb4 <_realloc_r+0x3c8>
 8006826:	f8db e008 	ldr.w	lr, [fp, #8]
 800682a:	1978      	adds	r0, r7, r5
 800682c:	4586      	cmp	lr, r0
 800682e:	f000 80ce 	beq.w	80069ce <_realloc_r+0x1e2>
 8006832:	6842      	ldr	r2, [r0, #4]
 8006834:	f022 0c01 	bic.w	ip, r2, #1
 8006838:	4484      	add	ip, r0
 800683a:	f8dc c004 	ldr.w	ip, [ip, #4]
 800683e:	f01c 0f01 	tst.w	ip, #1
 8006842:	d07a      	beq.n	800693a <_realloc_r+0x14e>
 8006844:	2200      	movs	r2, #0
 8006846:	4610      	mov	r0, r2
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	f100 8092 	bmi.w	8006972 <_realloc_r+0x186>
 800684e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006852:	ebc3 0a07 	rsb	sl, r3, r7
 8006856:	f8da 3004 	ldr.w	r3, [sl, #4]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	442b      	add	r3, r5
 8006860:	b388      	cbz	r0, 80068c6 <_realloc_r+0xda>
 8006862:	4570      	cmp	r0, lr
 8006864:	f000 80ed 	beq.w	8006a42 <_realloc_r+0x256>
 8006868:	eb02 0e03 	add.w	lr, r2, r3
 800686c:	458e      	cmp	lr, r1
 800686e:	db2a      	blt.n	80068c6 <_realloc_r+0xda>
 8006870:	68c3      	ldr	r3, [r0, #12]
 8006872:	6882      	ldr	r2, [r0, #8]
 8006874:	4657      	mov	r7, sl
 8006876:	60d3      	str	r3, [r2, #12]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800687e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006882:	60cb      	str	r3, [r1, #12]
 8006884:	1f2a      	subs	r2, r5, #4
 8006886:	2a24      	cmp	r2, #36	; 0x24
 8006888:	6099      	str	r1, [r3, #8]
 800688a:	f200 8126 	bhi.w	8006ada <_realloc_r+0x2ee>
 800688e:	2a13      	cmp	r2, #19
 8006890:	f240 80b3 	bls.w	80069fa <_realloc_r+0x20e>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	f8ca 3008 	str.w	r3, [sl, #8]
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	f8ca 300c 	str.w	r3, [sl, #12]
 80068a0:	2a1b      	cmp	r2, #27
 80068a2:	f200 8130 	bhi.w	8006b06 <_realloc_r+0x31a>
 80068a6:	3408      	adds	r4, #8
 80068a8:	f10a 0310 	add.w	r3, sl, #16
 80068ac:	e0a6      	b.n	80069fc <_realloc_r+0x210>
 80068ae:	f026 0607 	bic.w	r6, r6, #7
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	4631      	mov	r1, r6
 80068b6:	dab0      	bge.n	800681a <_realloc_r+0x2e>
 80068b8:	230c      	movs	r3, #12
 80068ba:	2000      	movs	r0, #0
 80068bc:	f8c9 3000 	str.w	r3, [r9]
 80068c0:	b003      	add	sp, #12
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	428b      	cmp	r3, r1
 80068c8:	db53      	blt.n	8006972 <_realloc_r+0x186>
 80068ca:	4657      	mov	r7, sl
 80068cc:	f8da 100c 	ldr.w	r1, [sl, #12]
 80068d0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80068d4:	1f2a      	subs	r2, r5, #4
 80068d6:	2a24      	cmp	r2, #36	; 0x24
 80068d8:	60c1      	str	r1, [r0, #12]
 80068da:	6088      	str	r0, [r1, #8]
 80068dc:	f200 8109 	bhi.w	8006af2 <_realloc_r+0x306>
 80068e0:	2a13      	cmp	r2, #19
 80068e2:	f240 8104 	bls.w	8006aee <_realloc_r+0x302>
 80068e6:	6821      	ldr	r1, [r4, #0]
 80068e8:	f8ca 1008 	str.w	r1, [sl, #8]
 80068ec:	6861      	ldr	r1, [r4, #4]
 80068ee:	f8ca 100c 	str.w	r1, [sl, #12]
 80068f2:	2a1b      	cmp	r2, #27
 80068f4:	f200 811c 	bhi.w	8006b30 <_realloc_r+0x344>
 80068f8:	3408      	adds	r4, #8
 80068fa:	f10a 0210 	add.w	r2, sl, #16
 80068fe:	6821      	ldr	r1, [r4, #0]
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	6861      	ldr	r1, [r4, #4]
 8006904:	6051      	str	r1, [r2, #4]
 8006906:	68a1      	ldr	r1, [r4, #8]
 8006908:	6091      	str	r1, [r2, #8]
 800690a:	461d      	mov	r5, r3
 800690c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006910:	463c      	mov	r4, r7
 8006912:	4657      	mov	r7, sl
 8006914:	1baa      	subs	r2, r5, r6
 8006916:	2a0f      	cmp	r2, #15
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	d819      	bhi.n	8006952 <_realloc_r+0x166>
 800691e:	432b      	orrs	r3, r5
 8006920:	443d      	add	r5, r7
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	686b      	ldr	r3, [r5, #4]
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	606b      	str	r3, [r5, #4]
 800692c:	4648      	mov	r0, r9
 800692e:	f7fc f90b 	bl	8002b48 <__malloc_unlock>
 8006932:	4620      	mov	r0, r4
 8006934:	b003      	add	sp, #12
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	f022 0203 	bic.w	r2, r2, #3
 800693e:	eb02 0c05 	add.w	ip, r2, r5
 8006942:	458c      	cmp	ip, r1
 8006944:	db80      	blt.n	8006848 <_realloc_r+0x5c>
 8006946:	68c2      	ldr	r2, [r0, #12]
 8006948:	6881      	ldr	r1, [r0, #8]
 800694a:	4665      	mov	r5, ip
 800694c:	60ca      	str	r2, [r1, #12]
 800694e:	6091      	str	r1, [r2, #8]
 8006950:	e7e0      	b.n	8006914 <_realloc_r+0x128>
 8006952:	19b9      	adds	r1, r7, r6
 8006954:	f042 0001 	orr.w	r0, r2, #1
 8006958:	431e      	orrs	r6, r3
 800695a:	440a      	add	r2, r1
 800695c:	607e      	str	r6, [r7, #4]
 800695e:	6048      	str	r0, [r1, #4]
 8006960:	6853      	ldr	r3, [r2, #4]
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	3108      	adds	r1, #8
 8006968:	6053      	str	r3, [r2, #4]
 800696a:	4648      	mov	r0, r9
 800696c:	f7fe ff6a 	bl	8005844 <_free_r>
 8006970:	e7dc      	b.n	800692c <_realloc_r+0x140>
 8006972:	4641      	mov	r1, r8
 8006974:	4648      	mov	r0, r9
 8006976:	f7fb fd65 	bl	8002444 <_malloc_r>
 800697a:	4680      	mov	r8, r0
 800697c:	b1d0      	cbz	r0, 80069b4 <_realloc_r+0x1c8>
 800697e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006982:	f023 0201 	bic.w	r2, r3, #1
 8006986:	443a      	add	r2, r7
 8006988:	f1a0 0108 	sub.w	r1, r0, #8
 800698c:	4291      	cmp	r1, r2
 800698e:	f000 809e 	beq.w	8006ace <_realloc_r+0x2e2>
 8006992:	1f2a      	subs	r2, r5, #4
 8006994:	2a24      	cmp	r2, #36	; 0x24
 8006996:	d850      	bhi.n	8006a3a <_realloc_r+0x24e>
 8006998:	2a13      	cmp	r2, #19
 800699a:	d823      	bhi.n	80069e4 <_realloc_r+0x1f8>
 800699c:	4603      	mov	r3, r0
 800699e:	4622      	mov	r2, r4
 80069a0:	6811      	ldr	r1, [r2, #0]
 80069a2:	6019      	str	r1, [r3, #0]
 80069a4:	6851      	ldr	r1, [r2, #4]
 80069a6:	6059      	str	r1, [r3, #4]
 80069a8:	6892      	ldr	r2, [r2, #8]
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	4621      	mov	r1, r4
 80069ae:	4648      	mov	r0, r9
 80069b0:	f7fe ff48 	bl	8005844 <_free_r>
 80069b4:	4648      	mov	r0, r9
 80069b6:	f7fc f8c7 	bl	8002b48 <__malloc_unlock>
 80069ba:	4640      	mov	r0, r8
 80069bc:	b003      	add	sp, #12
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	4611      	mov	r1, r2
 80069c4:	b003      	add	sp, #12
 80069c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f7fb bd3b 	b.w	8002444 <_malloc_r>
 80069ce:	f8de 2004 	ldr.w	r2, [lr, #4]
 80069d2:	f022 0203 	bic.w	r2, r2, #3
 80069d6:	1950      	adds	r0, r2, r5
 80069d8:	f106 0c10 	add.w	ip, r6, #16
 80069dc:	4560      	cmp	r0, ip
 80069de:	da19      	bge.n	8006a14 <_realloc_r+0x228>
 80069e0:	4670      	mov	r0, lr
 80069e2:	e731      	b.n	8006848 <_realloc_r+0x5c>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	6003      	str	r3, [r0, #0]
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	6043      	str	r3, [r0, #4]
 80069ec:	2a1b      	cmp	r2, #27
 80069ee:	d863      	bhi.n	8006ab8 <_realloc_r+0x2cc>
 80069f0:	f100 0308 	add.w	r3, r0, #8
 80069f4:	f104 0208 	add.w	r2, r4, #8
 80069f8:	e7d2      	b.n	80069a0 <_realloc_r+0x1b4>
 80069fa:	463b      	mov	r3, r7
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	6862      	ldr	r2, [r4, #4]
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	68a2      	ldr	r2, [r4, #8]
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	463c      	mov	r4, r7
 8006a0a:	4675      	mov	r5, lr
 8006a0c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006a10:	4657      	mov	r7, sl
 8006a12:	e77f      	b.n	8006914 <_realloc_r+0x128>
 8006a14:	4437      	add	r7, r6
 8006a16:	1b83      	subs	r3, r0, r6
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	f8cb 7008 	str.w	r7, [fp, #8]
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	431e      	orrs	r6, r3
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f844 6c04 	str.w	r6, [r4, #-4]
 8006a32:	f7fc f889 	bl	8002b48 <__malloc_unlock>
 8006a36:	4620      	mov	r0, r4
 8006a38:	e77c      	b.n	8006934 <_realloc_r+0x148>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	f7ff fe76 	bl	800672c <memmove>
 8006a40:	e7b4      	b.n	80069ac <_realloc_r+0x1c0>
 8006a42:	eb02 0c03 	add.w	ip, r2, r3
 8006a46:	f106 0210 	add.w	r2, r6, #16
 8006a4a:	4594      	cmp	ip, r2
 8006a4c:	f6ff af3b 	blt.w	80068c6 <_realloc_r+0xda>
 8006a50:	4657      	mov	r7, sl
 8006a52:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006a56:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006a5a:	1f2a      	subs	r2, r5, #4
 8006a5c:	2a24      	cmp	r2, #36	; 0x24
 8006a5e:	60cb      	str	r3, [r1, #12]
 8006a60:	6099      	str	r1, [r3, #8]
 8006a62:	f200 8087 	bhi.w	8006b74 <_realloc_r+0x388>
 8006a66:	2a13      	cmp	r2, #19
 8006a68:	d978      	bls.n	8006b5c <_realloc_r+0x370>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f8ca 3008 	str.w	r3, [sl, #8]
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	f8ca 300c 	str.w	r3, [sl, #12]
 8006a76:	2a1b      	cmp	r2, #27
 8006a78:	f200 8085 	bhi.w	8006b86 <_realloc_r+0x39a>
 8006a7c:	3408      	adds	r4, #8
 8006a7e:	f10a 0310 	add.w	r3, sl, #16
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	68a2      	ldr	r2, [r4, #8]
 8006a8c:	609a      	str	r2, [r3, #8]
 8006a8e:	eb0a 0306 	add.w	r3, sl, r6
 8006a92:	ebc6 020c 	rsb	r2, r6, ip
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	f8cb 3008 	str.w	r3, [fp, #8]
 8006a9e:	605a      	str	r2, [r3, #4]
 8006aa0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	431e      	orrs	r6, r3
 8006aaa:	4648      	mov	r0, r9
 8006aac:	f8ca 6004 	str.w	r6, [sl, #4]
 8006ab0:	f7fc f84a 	bl	8002b48 <__malloc_unlock>
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	e73d      	b.n	8006934 <_realloc_r+0x148>
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	6083      	str	r3, [r0, #8]
 8006abc:	68e3      	ldr	r3, [r4, #12]
 8006abe:	60c3      	str	r3, [r0, #12]
 8006ac0:	2a24      	cmp	r2, #36	; 0x24
 8006ac2:	d02c      	beq.n	8006b1e <_realloc_r+0x332>
 8006ac4:	f100 0310 	add.w	r3, r0, #16
 8006ac8:	f104 0210 	add.w	r2, r4, #16
 8006acc:	e768      	b.n	80069a0 <_realloc_r+0x1b4>
 8006ace:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006ad2:	f022 0203 	bic.w	r2, r2, #3
 8006ad6:	4415      	add	r5, r2
 8006ad8:	e71c      	b.n	8006914 <_realloc_r+0x128>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4638      	mov	r0, r7
 8006ade:	4675      	mov	r5, lr
 8006ae0:	463c      	mov	r4, r7
 8006ae2:	f7ff fe23 	bl	800672c <memmove>
 8006ae6:	4657      	mov	r7, sl
 8006ae8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006aec:	e712      	b.n	8006914 <_realloc_r+0x128>
 8006aee:	463a      	mov	r2, r7
 8006af0:	e705      	b.n	80068fe <_realloc_r+0x112>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4638      	mov	r0, r7
 8006af6:	461d      	mov	r5, r3
 8006af8:	463c      	mov	r4, r7
 8006afa:	f7ff fe17 	bl	800672c <memmove>
 8006afe:	4657      	mov	r7, sl
 8006b00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006b04:	e706      	b.n	8006914 <_realloc_r+0x128>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	f8ca 3010 	str.w	r3, [sl, #16]
 8006b0c:	68e3      	ldr	r3, [r4, #12]
 8006b0e:	f8ca 3014 	str.w	r3, [sl, #20]
 8006b12:	2a24      	cmp	r2, #36	; 0x24
 8006b14:	d018      	beq.n	8006b48 <_realloc_r+0x35c>
 8006b16:	3410      	adds	r4, #16
 8006b18:	f10a 0318 	add.w	r3, sl, #24
 8006b1c:	e76e      	b.n	80069fc <_realloc_r+0x210>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	6103      	str	r3, [r0, #16]
 8006b22:	6963      	ldr	r3, [r4, #20]
 8006b24:	6143      	str	r3, [r0, #20]
 8006b26:	f104 0218 	add.w	r2, r4, #24
 8006b2a:	f100 0318 	add.w	r3, r0, #24
 8006b2e:	e737      	b.n	80069a0 <_realloc_r+0x1b4>
 8006b30:	68a1      	ldr	r1, [r4, #8]
 8006b32:	f8ca 1010 	str.w	r1, [sl, #16]
 8006b36:	68e1      	ldr	r1, [r4, #12]
 8006b38:	f8ca 1014 	str.w	r1, [sl, #20]
 8006b3c:	2a24      	cmp	r2, #36	; 0x24
 8006b3e:	d00f      	beq.n	8006b60 <_realloc_r+0x374>
 8006b40:	3410      	adds	r4, #16
 8006b42:	f10a 0218 	add.w	r2, sl, #24
 8006b46:	e6da      	b.n	80068fe <_realloc_r+0x112>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	f8ca 3018 	str.w	r3, [sl, #24]
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	f8ca 301c 	str.w	r3, [sl, #28]
 8006b54:	3418      	adds	r4, #24
 8006b56:	f10a 0320 	add.w	r3, sl, #32
 8006b5a:	e74f      	b.n	80069fc <_realloc_r+0x210>
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	e790      	b.n	8006a82 <_realloc_r+0x296>
 8006b60:	6922      	ldr	r2, [r4, #16]
 8006b62:	f8ca 2018 	str.w	r2, [sl, #24]
 8006b66:	6962      	ldr	r2, [r4, #20]
 8006b68:	f8ca 201c 	str.w	r2, [sl, #28]
 8006b6c:	3418      	adds	r4, #24
 8006b6e:	f10a 0220 	add.w	r2, sl, #32
 8006b72:	e6c4      	b.n	80068fe <_realloc_r+0x112>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4638      	mov	r0, r7
 8006b78:	f8cd c004 	str.w	ip, [sp, #4]
 8006b7c:	f7ff fdd6 	bl	800672c <memmove>
 8006b80:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006b84:	e783      	b.n	8006a8e <_realloc_r+0x2a2>
 8006b86:	68a3      	ldr	r3, [r4, #8]
 8006b88:	f8ca 3010 	str.w	r3, [sl, #16]
 8006b8c:	68e3      	ldr	r3, [r4, #12]
 8006b8e:	f8ca 3014 	str.w	r3, [sl, #20]
 8006b92:	2a24      	cmp	r2, #36	; 0x24
 8006b94:	d003      	beq.n	8006b9e <_realloc_r+0x3b2>
 8006b96:	3410      	adds	r4, #16
 8006b98:	f10a 0318 	add.w	r3, sl, #24
 8006b9c:	e771      	b.n	8006a82 <_realloc_r+0x296>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	f8ca 3018 	str.w	r3, [sl, #24]
 8006ba4:	6963      	ldr	r3, [r4, #20]
 8006ba6:	f8ca 301c 	str.w	r3, [sl, #28]
 8006baa:	3418      	adds	r4, #24
 8006bac:	f10a 0320 	add.w	r3, sl, #32
 8006bb0:	e767      	b.n	8006a82 <_realloc_r+0x296>
 8006bb2:	bf00      	nop
 8006bb4:	2000045c 	.word	0x2000045c

08006bb8 <__swbuf_r>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	460d      	mov	r5, r1
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	4607      	mov	r7, r0
 8006bc0:	b110      	cbz	r0, 8006bc8 <__swbuf_r+0x10>
 8006bc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d048      	beq.n	8006c5a <__swbuf_r+0xa2>
 8006bc8:	89a2      	ldrh	r2, [r4, #12]
 8006bca:	69a3      	ldr	r3, [r4, #24]
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	b293      	uxth	r3, r2
 8006bd0:	0718      	lsls	r0, r3, #28
 8006bd2:	d538      	bpl.n	8006c46 <__swbuf_r+0x8e>
 8006bd4:	6926      	ldr	r6, [r4, #16]
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d035      	beq.n	8006c46 <__swbuf_r+0x8e>
 8006bda:	0499      	lsls	r1, r3, #18
 8006bdc:	b2ed      	uxtb	r5, r5
 8006bde:	d515      	bpl.n	8006c0c <__swbuf_r+0x54>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6962      	ldr	r2, [r4, #20]
 8006be4:	1b9e      	subs	r6, r3, r6
 8006be6:	4296      	cmp	r6, r2
 8006be8:	da1c      	bge.n	8006c24 <__swbuf_r+0x6c>
 8006bea:	3601      	adds	r6, #1
 8006bec:	68a2      	ldr	r2, [r4, #8]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	3a01      	subs	r2, #1
 8006bf2:	60a2      	str	r2, [r4, #8]
 8006bf4:	6021      	str	r1, [r4, #0]
 8006bf6:	701d      	strb	r5, [r3, #0]
 8006bf8:	6963      	ldr	r3, [r4, #20]
 8006bfa:	42b3      	cmp	r3, r6
 8006bfc:	d01a      	beq.n	8006c34 <__swbuf_r+0x7c>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	07db      	lsls	r3, r3, #31
 8006c02:	d501      	bpl.n	8006c08 <__swbuf_r+0x50>
 8006c04:	2d0a      	cmp	r5, #10
 8006c06:	d015      	beq.n	8006c34 <__swbuf_r+0x7c>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c16:	6663      	str	r3, [r4, #100]	; 0x64
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	81a2      	strh	r2, [r4, #12]
 8006c1c:	6962      	ldr	r2, [r4, #20]
 8006c1e:	1b9e      	subs	r6, r3, r6
 8006c20:	4296      	cmp	r6, r2
 8006c22:	dbe2      	blt.n	8006bea <__swbuf_r+0x32>
 8006c24:	4638      	mov	r0, r7
 8006c26:	4621      	mov	r1, r4
 8006c28:	f7fe fda8 	bl	800577c <_fflush_r>
 8006c2c:	b940      	cbnz	r0, 8006c40 <__swbuf_r+0x88>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	2601      	movs	r6, #1
 8006c32:	e7db      	b.n	8006bec <__swbuf_r+0x34>
 8006c34:	4638      	mov	r0, r7
 8006c36:	4621      	mov	r1, r4
 8006c38:	f7fe fda0 	bl	800577c <_fflush_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d0e3      	beq.n	8006c08 <__swbuf_r+0x50>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c46:	4638      	mov	r0, r7
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7fd fc6d 	bl	8004528 <__swsetup_r>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d1f6      	bne.n	8006c40 <__swbuf_r+0x88>
 8006c52:	89a2      	ldrh	r2, [r4, #12]
 8006c54:	6926      	ldr	r6, [r4, #16]
 8006c56:	b293      	uxth	r3, r2
 8006c58:	e7bf      	b.n	8006bda <__swbuf_r+0x22>
 8006c5a:	f7fb fb47 	bl	80022ec <__sinit>
 8006c5e:	e7b3      	b.n	8006bc8 <__swbuf_r+0x10>

08006c60 <_wcrtomb_r>:
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	461e      	mov	r6, r3
 8006c66:	b086      	sub	sp, #24
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	4617      	mov	r7, r2
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <_wcrtomb_r+0x4c>)
 8006c70:	b191      	cbz	r1, 8006c98 <_wcrtomb_r+0x38>
 8006c72:	f8d3 8000 	ldr.w	r8, [r3]
 8006c76:	f7fe feb3 	bl	80059e0 <__locale_charset>
 8006c7a:	9600      	str	r6, [sp, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4621      	mov	r1, r4
 8006c80:	463a      	mov	r2, r7
 8006c82:	4628      	mov	r0, r5
 8006c84:	47c0      	blx	r8
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	d103      	bne.n	8006c92 <_wcrtomb_r+0x32>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	238a      	movs	r3, #138	; 0x8a
 8006c8e:	6032      	str	r2, [r6, #0]
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	b006      	add	sp, #24
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	681f      	ldr	r7, [r3, #0]
 8006c9a:	f7fe fea1 	bl	80059e0 <__locale_charset>
 8006c9e:	9600      	str	r6, [sp, #0]
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	a903      	add	r1, sp, #12
 8006ca8:	47b8      	blx	r7
 8006caa:	e7ec      	b.n	8006c86 <_wcrtomb_r+0x26>
 8006cac:	200008c8 	.word	0x200008c8

08006cb0 <__ascii_wctomb>:
 8006cb0:	b121      	cbz	r1, 8006cbc <__ascii_wctomb+0xc>
 8006cb2:	2aff      	cmp	r2, #255	; 0xff
 8006cb4:	d804      	bhi.n	8006cc0 <__ascii_wctomb+0x10>
 8006cb6:	700a      	strb	r2, [r1, #0]
 8006cb8:	2001      	movs	r0, #1
 8006cba:	4770      	bx	lr
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4770      	bx	lr
 8006cc0:	238a      	movs	r3, #138	; 0x8a
 8006cc2:	6003      	str	r3, [r0, #0]
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <_getpid>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <_getpid+0xc>)
 8006cce:	2258      	movs	r2, #88	; 0x58
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd6:	4770      	bx	lr
 8006cd8:	20008b28 	.word	0x20008b28

08006cdc <_isatty>:
 8006cdc:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <_isatty+0xc>)
 8006cde:	2258      	movs	r2, #88	; 0x58
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20008b28 	.word	0x20008b28

08006cec <_kill>:
 8006cec:	4b02      	ldr	r3, [pc, #8]	; (8006cf8 <_kill+0xc>)
 8006cee:	2258      	movs	r2, #88	; 0x58
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf6:	4770      	bx	lr
 8006cf8:	20008b28 	.word	0x20008b28

08006cfc <_exit>:
 8006cfc:	e7fe      	b.n	8006cfc <_exit>
 8006cfe:	bf00      	nop

08006d00 <__aeabi_drsub>:
 8006d00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d04:	e002      	b.n	8006d0c <__adddf3>
 8006d06:	bf00      	nop

08006d08 <__aeabi_dsub>:
 8006d08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d0c <__adddf3>:
 8006d0c:	b530      	push	{r4, r5, lr}
 8006d0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006d12:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006d16:	ea94 0f05 	teq	r4, r5
 8006d1a:	bf08      	it	eq
 8006d1c:	ea90 0f02 	teqeq	r0, r2
 8006d20:	bf1f      	itttt	ne
 8006d22:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006d26:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006d2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006d2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006d32:	f000 80e2 	beq.w	8006efa <__adddf3+0x1ee>
 8006d36:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006d3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006d3e:	bfb8      	it	lt
 8006d40:	426d      	neglt	r5, r5
 8006d42:	dd0c      	ble.n	8006d5e <__adddf3+0x52>
 8006d44:	442c      	add	r4, r5
 8006d46:	ea80 0202 	eor.w	r2, r0, r2
 8006d4a:	ea81 0303 	eor.w	r3, r1, r3
 8006d4e:	ea82 0000 	eor.w	r0, r2, r0
 8006d52:	ea83 0101 	eor.w	r1, r3, r1
 8006d56:	ea80 0202 	eor.w	r2, r0, r2
 8006d5a:	ea81 0303 	eor.w	r3, r1, r3
 8006d5e:	2d36      	cmp	r5, #54	; 0x36
 8006d60:	bf88      	it	hi
 8006d62:	bd30      	pophi	{r4, r5, pc}
 8006d64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006d68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006d6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006d70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006d74:	d002      	beq.n	8006d7c <__adddf3+0x70>
 8006d76:	4240      	negs	r0, r0
 8006d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006d7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006d80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006d84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006d88:	d002      	beq.n	8006d90 <__adddf3+0x84>
 8006d8a:	4252      	negs	r2, r2
 8006d8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006d90:	ea94 0f05 	teq	r4, r5
 8006d94:	f000 80a7 	beq.w	8006ee6 <__adddf3+0x1da>
 8006d98:	f1a4 0401 	sub.w	r4, r4, #1
 8006d9c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006da0:	db0d      	blt.n	8006dbe <__adddf3+0xb2>
 8006da2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006da6:	fa22 f205 	lsr.w	r2, r2, r5
 8006daa:	1880      	adds	r0, r0, r2
 8006dac:	f141 0100 	adc.w	r1, r1, #0
 8006db0:	fa03 f20e 	lsl.w	r2, r3, lr
 8006db4:	1880      	adds	r0, r0, r2
 8006db6:	fa43 f305 	asr.w	r3, r3, r5
 8006dba:	4159      	adcs	r1, r3
 8006dbc:	e00e      	b.n	8006ddc <__adddf3+0xd0>
 8006dbe:	f1a5 0520 	sub.w	r5, r5, #32
 8006dc2:	f10e 0e20 	add.w	lr, lr, #32
 8006dc6:	2a01      	cmp	r2, #1
 8006dc8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006dcc:	bf28      	it	cs
 8006dce:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006dd2:	fa43 f305 	asr.w	r3, r3, r5
 8006dd6:	18c0      	adds	r0, r0, r3
 8006dd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ddc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006de0:	d507      	bpl.n	8006df2 <__adddf3+0xe6>
 8006de2:	f04f 0e00 	mov.w	lr, #0
 8006de6:	f1dc 0c00 	rsbs	ip, ip, #0
 8006dea:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006dee:	eb6e 0101 	sbc.w	r1, lr, r1
 8006df2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006df6:	d31b      	bcc.n	8006e30 <__adddf3+0x124>
 8006df8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006dfc:	d30c      	bcc.n	8006e18 <__adddf3+0x10c>
 8006dfe:	0849      	lsrs	r1, r1, #1
 8006e00:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e08:	f104 0401 	add.w	r4, r4, #1
 8006e0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006e10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006e14:	f080 809a 	bcs.w	8006f4c <__adddf3+0x240>
 8006e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006e1c:	bf08      	it	eq
 8006e1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006e22:	f150 0000 	adcs.w	r0, r0, #0
 8006e26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006e2a:	ea41 0105 	orr.w	r1, r1, r5
 8006e2e:	bd30      	pop	{r4, r5, pc}
 8006e30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006e34:	4140      	adcs	r0, r0
 8006e36:	eb41 0101 	adc.w	r1, r1, r1
 8006e3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e3e:	f1a4 0401 	sub.w	r4, r4, #1
 8006e42:	d1e9      	bne.n	8006e18 <__adddf3+0x10c>
 8006e44:	f091 0f00 	teq	r1, #0
 8006e48:	bf04      	itt	eq
 8006e4a:	4601      	moveq	r1, r0
 8006e4c:	2000      	moveq	r0, #0
 8006e4e:	fab1 f381 	clz	r3, r1
 8006e52:	bf08      	it	eq
 8006e54:	3320      	addeq	r3, #32
 8006e56:	f1a3 030b 	sub.w	r3, r3, #11
 8006e5a:	f1b3 0220 	subs.w	r2, r3, #32
 8006e5e:	da0c      	bge.n	8006e7a <__adddf3+0x16e>
 8006e60:	320c      	adds	r2, #12
 8006e62:	dd08      	ble.n	8006e76 <__adddf3+0x16a>
 8006e64:	f102 0c14 	add.w	ip, r2, #20
 8006e68:	f1c2 020c 	rsb	r2, r2, #12
 8006e6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006e70:	fa21 f102 	lsr.w	r1, r1, r2
 8006e74:	e00c      	b.n	8006e90 <__adddf3+0x184>
 8006e76:	f102 0214 	add.w	r2, r2, #20
 8006e7a:	bfd8      	it	le
 8006e7c:	f1c2 0c20 	rsble	ip, r2, #32
 8006e80:	fa01 f102 	lsl.w	r1, r1, r2
 8006e84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006e88:	bfdc      	itt	le
 8006e8a:	ea41 010c 	orrle.w	r1, r1, ip
 8006e8e:	4090      	lslle	r0, r2
 8006e90:	1ae4      	subs	r4, r4, r3
 8006e92:	bfa2      	ittt	ge
 8006e94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006e98:	4329      	orrge	r1, r5
 8006e9a:	bd30      	popge	{r4, r5, pc}
 8006e9c:	ea6f 0404 	mvn.w	r4, r4
 8006ea0:	3c1f      	subs	r4, #31
 8006ea2:	da1c      	bge.n	8006ede <__adddf3+0x1d2>
 8006ea4:	340c      	adds	r4, #12
 8006ea6:	dc0e      	bgt.n	8006ec6 <__adddf3+0x1ba>
 8006ea8:	f104 0414 	add.w	r4, r4, #20
 8006eac:	f1c4 0220 	rsb	r2, r4, #32
 8006eb0:	fa20 f004 	lsr.w	r0, r0, r4
 8006eb4:	fa01 f302 	lsl.w	r3, r1, r2
 8006eb8:	ea40 0003 	orr.w	r0, r0, r3
 8006ebc:	fa21 f304 	lsr.w	r3, r1, r4
 8006ec0:	ea45 0103 	orr.w	r1, r5, r3
 8006ec4:	bd30      	pop	{r4, r5, pc}
 8006ec6:	f1c4 040c 	rsb	r4, r4, #12
 8006eca:	f1c4 0220 	rsb	r2, r4, #32
 8006ece:	fa20 f002 	lsr.w	r0, r0, r2
 8006ed2:	fa01 f304 	lsl.w	r3, r1, r4
 8006ed6:	ea40 0003 	orr.w	r0, r0, r3
 8006eda:	4629      	mov	r1, r5
 8006edc:	bd30      	pop	{r4, r5, pc}
 8006ede:	fa21 f004 	lsr.w	r0, r1, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	bd30      	pop	{r4, r5, pc}
 8006ee6:	f094 0f00 	teq	r4, #0
 8006eea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006eee:	bf06      	itte	eq
 8006ef0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006ef4:	3401      	addeq	r4, #1
 8006ef6:	3d01      	subne	r5, #1
 8006ef8:	e74e      	b.n	8006d98 <__adddf3+0x8c>
 8006efa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006efe:	bf18      	it	ne
 8006f00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f04:	d029      	beq.n	8006f5a <__adddf3+0x24e>
 8006f06:	ea94 0f05 	teq	r4, r5
 8006f0a:	bf08      	it	eq
 8006f0c:	ea90 0f02 	teqeq	r0, r2
 8006f10:	d005      	beq.n	8006f1e <__adddf3+0x212>
 8006f12:	ea54 0c00 	orrs.w	ip, r4, r0
 8006f16:	bf04      	itt	eq
 8006f18:	4619      	moveq	r1, r3
 8006f1a:	4610      	moveq	r0, r2
 8006f1c:	bd30      	pop	{r4, r5, pc}
 8006f1e:	ea91 0f03 	teq	r1, r3
 8006f22:	bf1e      	ittt	ne
 8006f24:	2100      	movne	r1, #0
 8006f26:	2000      	movne	r0, #0
 8006f28:	bd30      	popne	{r4, r5, pc}
 8006f2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006f2e:	d105      	bne.n	8006f3c <__adddf3+0x230>
 8006f30:	0040      	lsls	r0, r0, #1
 8006f32:	4149      	adcs	r1, r1
 8006f34:	bf28      	it	cs
 8006f36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006f3a:	bd30      	pop	{r4, r5, pc}
 8006f3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006f40:	bf3c      	itt	cc
 8006f42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006f46:	bd30      	popcc	{r4, r5, pc}
 8006f48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006f50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	bd30      	pop	{r4, r5, pc}
 8006f5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f5e:	bf1a      	itte	ne
 8006f60:	4619      	movne	r1, r3
 8006f62:	4610      	movne	r0, r2
 8006f64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006f68:	bf1c      	itt	ne
 8006f6a:	460b      	movne	r3, r1
 8006f6c:	4602      	movne	r2, r0
 8006f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006f72:	bf06      	itte	eq
 8006f74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006f78:	ea91 0f03 	teqeq	r1, r3
 8006f7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006f80:	bd30      	pop	{r4, r5, pc}
 8006f82:	bf00      	nop

08006f84 <__aeabi_ui2d>:
 8006f84:	f090 0f00 	teq	r0, #0
 8006f88:	bf04      	itt	eq
 8006f8a:	2100      	moveq	r1, #0
 8006f8c:	4770      	bxeq	lr
 8006f8e:	b530      	push	{r4, r5, lr}
 8006f90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006f94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006f98:	f04f 0500 	mov.w	r5, #0
 8006f9c:	f04f 0100 	mov.w	r1, #0
 8006fa0:	e750      	b.n	8006e44 <__adddf3+0x138>
 8006fa2:	bf00      	nop

08006fa4 <__aeabi_i2d>:
 8006fa4:	f090 0f00 	teq	r0, #0
 8006fa8:	bf04      	itt	eq
 8006faa:	2100      	moveq	r1, #0
 8006fac:	4770      	bxeq	lr
 8006fae:	b530      	push	{r4, r5, lr}
 8006fb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006fb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006fb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006fbc:	bf48      	it	mi
 8006fbe:	4240      	negmi	r0, r0
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	e73e      	b.n	8006e44 <__adddf3+0x138>
 8006fc6:	bf00      	nop

08006fc8 <__aeabi_f2d>:
 8006fc8:	0042      	lsls	r2, r0, #1
 8006fca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006fce:	ea4f 0131 	mov.w	r1, r1, rrx
 8006fd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006fd6:	bf1f      	itttt	ne
 8006fd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006fdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006fe0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006fe4:	4770      	bxne	lr
 8006fe6:	f092 0f00 	teq	r2, #0
 8006fea:	bf14      	ite	ne
 8006fec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006ff0:	4770      	bxeq	lr
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006ff8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007000:	e720      	b.n	8006e44 <__adddf3+0x138>
 8007002:	bf00      	nop

08007004 <__aeabi_ul2d>:
 8007004:	ea50 0201 	orrs.w	r2, r0, r1
 8007008:	bf08      	it	eq
 800700a:	4770      	bxeq	lr
 800700c:	b530      	push	{r4, r5, lr}
 800700e:	f04f 0500 	mov.w	r5, #0
 8007012:	e00a      	b.n	800702a <__aeabi_l2d+0x16>

08007014 <__aeabi_l2d>:
 8007014:	ea50 0201 	orrs.w	r2, r0, r1
 8007018:	bf08      	it	eq
 800701a:	4770      	bxeq	lr
 800701c:	b530      	push	{r4, r5, lr}
 800701e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007022:	d502      	bpl.n	800702a <__aeabi_l2d+0x16>
 8007024:	4240      	negs	r0, r0
 8007026:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800702a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800702e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007032:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007036:	f43f aedc 	beq.w	8006df2 <__adddf3+0xe6>
 800703a:	f04f 0203 	mov.w	r2, #3
 800703e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007042:	bf18      	it	ne
 8007044:	3203      	addne	r2, #3
 8007046:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800704a:	bf18      	it	ne
 800704c:	3203      	addne	r2, #3
 800704e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007052:	f1c2 0320 	rsb	r3, r2, #32
 8007056:	fa00 fc03 	lsl.w	ip, r0, r3
 800705a:	fa20 f002 	lsr.w	r0, r0, r2
 800705e:	fa01 fe03 	lsl.w	lr, r1, r3
 8007062:	ea40 000e 	orr.w	r0, r0, lr
 8007066:	fa21 f102 	lsr.w	r1, r1, r2
 800706a:	4414      	add	r4, r2
 800706c:	e6c1      	b.n	8006df2 <__adddf3+0xe6>
 800706e:	bf00      	nop

08007070 <__aeabi_dmul>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007076:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800707a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800707e:	bf1d      	ittte	ne
 8007080:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007084:	ea94 0f0c 	teqne	r4, ip
 8007088:	ea95 0f0c 	teqne	r5, ip
 800708c:	f000 f8de 	bleq	800724c <__aeabi_dmul+0x1dc>
 8007090:	442c      	add	r4, r5
 8007092:	ea81 0603 	eor.w	r6, r1, r3
 8007096:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800709a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800709e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80070a2:	bf18      	it	ne
 80070a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80070a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070b0:	d038      	beq.n	8007124 <__aeabi_dmul+0xb4>
 80070b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80070b6:	f04f 0500 	mov.w	r5, #0
 80070ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80070be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80070c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80070c6:	f04f 0600 	mov.w	r6, #0
 80070ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80070ce:	f09c 0f00 	teq	ip, #0
 80070d2:	bf18      	it	ne
 80070d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80070d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80070dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80070e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80070e4:	d204      	bcs.n	80070f0 <__aeabi_dmul+0x80>
 80070e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80070ea:	416d      	adcs	r5, r5
 80070ec:	eb46 0606 	adc.w	r6, r6, r6
 80070f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80070f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80070f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80070fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007100:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007104:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007108:	bf88      	it	hi
 800710a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800710e:	d81e      	bhi.n	800714e <__aeabi_dmul+0xde>
 8007110:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007114:	bf08      	it	eq
 8007116:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800711a:	f150 0000 	adcs.w	r0, r0, #0
 800711e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007128:	ea46 0101 	orr.w	r1, r6, r1
 800712c:	ea40 0002 	orr.w	r0, r0, r2
 8007130:	ea81 0103 	eor.w	r1, r1, r3
 8007134:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007138:	bfc2      	ittt	gt
 800713a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800713e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007142:	bd70      	popgt	{r4, r5, r6, pc}
 8007144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007148:	f04f 0e00 	mov.w	lr, #0
 800714c:	3c01      	subs	r4, #1
 800714e:	f300 80ab 	bgt.w	80072a8 <__aeabi_dmul+0x238>
 8007152:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007156:	bfde      	ittt	le
 8007158:	2000      	movle	r0, #0
 800715a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800715e:	bd70      	pople	{r4, r5, r6, pc}
 8007160:	f1c4 0400 	rsb	r4, r4, #0
 8007164:	3c20      	subs	r4, #32
 8007166:	da35      	bge.n	80071d4 <__aeabi_dmul+0x164>
 8007168:	340c      	adds	r4, #12
 800716a:	dc1b      	bgt.n	80071a4 <__aeabi_dmul+0x134>
 800716c:	f104 0414 	add.w	r4, r4, #20
 8007170:	f1c4 0520 	rsb	r5, r4, #32
 8007174:	fa00 f305 	lsl.w	r3, r0, r5
 8007178:	fa20 f004 	lsr.w	r0, r0, r4
 800717c:	fa01 f205 	lsl.w	r2, r1, r5
 8007180:	ea40 0002 	orr.w	r0, r0, r2
 8007184:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800718c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007190:	fa21 f604 	lsr.w	r6, r1, r4
 8007194:	eb42 0106 	adc.w	r1, r2, r6
 8007198:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800719c:	bf08      	it	eq
 800719e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f1c4 040c 	rsb	r4, r4, #12
 80071a8:	f1c4 0520 	rsb	r5, r4, #32
 80071ac:	fa00 f304 	lsl.w	r3, r0, r4
 80071b0:	fa20 f005 	lsr.w	r0, r0, r5
 80071b4:	fa01 f204 	lsl.w	r2, r1, r4
 80071b8:	ea40 0002 	orr.w	r0, r0, r2
 80071bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80071c4:	f141 0100 	adc.w	r1, r1, #0
 80071c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071cc:	bf08      	it	eq
 80071ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	f1c4 0520 	rsb	r5, r4, #32
 80071d8:	fa00 f205 	lsl.w	r2, r0, r5
 80071dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80071e0:	fa20 f304 	lsr.w	r3, r0, r4
 80071e4:	fa01 f205 	lsl.w	r2, r1, r5
 80071e8:	ea43 0302 	orr.w	r3, r3, r2
 80071ec:	fa21 f004 	lsr.w	r0, r1, r4
 80071f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071f4:	fa21 f204 	lsr.w	r2, r1, r4
 80071f8:	ea20 0002 	bic.w	r0, r0, r2
 80071fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007204:	bf08      	it	eq
 8007206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	f094 0f00 	teq	r4, #0
 8007210:	d10f      	bne.n	8007232 <__aeabi_dmul+0x1c2>
 8007212:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007216:	0040      	lsls	r0, r0, #1
 8007218:	eb41 0101 	adc.w	r1, r1, r1
 800721c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007220:	bf08      	it	eq
 8007222:	3c01      	subeq	r4, #1
 8007224:	d0f7      	beq.n	8007216 <__aeabi_dmul+0x1a6>
 8007226:	ea41 0106 	orr.w	r1, r1, r6
 800722a:	f095 0f00 	teq	r5, #0
 800722e:	bf18      	it	ne
 8007230:	4770      	bxne	lr
 8007232:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007236:	0052      	lsls	r2, r2, #1
 8007238:	eb43 0303 	adc.w	r3, r3, r3
 800723c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007240:	bf08      	it	eq
 8007242:	3d01      	subeq	r5, #1
 8007244:	d0f7      	beq.n	8007236 <__aeabi_dmul+0x1c6>
 8007246:	ea43 0306 	orr.w	r3, r3, r6
 800724a:	4770      	bx	lr
 800724c:	ea94 0f0c 	teq	r4, ip
 8007250:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007254:	bf18      	it	ne
 8007256:	ea95 0f0c 	teqne	r5, ip
 800725a:	d00c      	beq.n	8007276 <__aeabi_dmul+0x206>
 800725c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007260:	bf18      	it	ne
 8007262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007266:	d1d1      	bne.n	800720c <__aeabi_dmul+0x19c>
 8007268:	ea81 0103 	eor.w	r1, r1, r3
 800726c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007270:	f04f 0000 	mov.w	r0, #0
 8007274:	bd70      	pop	{r4, r5, r6, pc}
 8007276:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800727a:	bf06      	itte	eq
 800727c:	4610      	moveq	r0, r2
 800727e:	4619      	moveq	r1, r3
 8007280:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007284:	d019      	beq.n	80072ba <__aeabi_dmul+0x24a>
 8007286:	ea94 0f0c 	teq	r4, ip
 800728a:	d102      	bne.n	8007292 <__aeabi_dmul+0x222>
 800728c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007290:	d113      	bne.n	80072ba <__aeabi_dmul+0x24a>
 8007292:	ea95 0f0c 	teq	r5, ip
 8007296:	d105      	bne.n	80072a4 <__aeabi_dmul+0x234>
 8007298:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800729c:	bf1c      	itt	ne
 800729e:	4610      	movne	r0, r2
 80072a0:	4619      	movne	r1, r3
 80072a2:	d10a      	bne.n	80072ba <__aeabi_dmul+0x24a>
 80072a4:	ea81 0103 	eor.w	r1, r1, r3
 80072a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072b4:	f04f 0000 	mov.w	r0, #0
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80072c2:	bd70      	pop	{r4, r5, r6, pc}

080072c4 <__aeabi_ddiv>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80072ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80072ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80072d2:	bf1d      	ittte	ne
 80072d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80072d8:	ea94 0f0c 	teqne	r4, ip
 80072dc:	ea95 0f0c 	teqne	r5, ip
 80072e0:	f000 f8a7 	bleq	8007432 <__aeabi_ddiv+0x16e>
 80072e4:	eba4 0405 	sub.w	r4, r4, r5
 80072e8:	ea81 0e03 	eor.w	lr, r1, r3
 80072ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80072f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80072f4:	f000 8088 	beq.w	8007408 <__aeabi_ddiv+0x144>
 80072f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80072fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007300:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007304:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007308:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800730c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007310:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007314:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007318:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800731c:	429d      	cmp	r5, r3
 800731e:	bf08      	it	eq
 8007320:	4296      	cmpeq	r6, r2
 8007322:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007326:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800732a:	d202      	bcs.n	8007332 <__aeabi_ddiv+0x6e>
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007332:	1ab6      	subs	r6, r6, r2
 8007334:	eb65 0503 	sbc.w	r5, r5, r3
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	ea4f 0232 	mov.w	r2, r2, rrx
 800733e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007342:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007346:	ebb6 0e02 	subs.w	lr, r6, r2
 800734a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800734e:	bf22      	ittt	cs
 8007350:	1ab6      	subcs	r6, r6, r2
 8007352:	4675      	movcs	r5, lr
 8007354:	ea40 000c 	orrcs.w	r0, r0, ip
 8007358:	085b      	lsrs	r3, r3, #1
 800735a:	ea4f 0232 	mov.w	r2, r2, rrx
 800735e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007362:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007366:	bf22      	ittt	cs
 8007368:	1ab6      	subcs	r6, r6, r2
 800736a:	4675      	movcs	r5, lr
 800736c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	ea4f 0232 	mov.w	r2, r2, rrx
 8007376:	ebb6 0e02 	subs.w	lr, r6, r2
 800737a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800737e:	bf22      	ittt	cs
 8007380:	1ab6      	subcs	r6, r6, r2
 8007382:	4675      	movcs	r5, lr
 8007384:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	ea4f 0232 	mov.w	r2, r2, rrx
 800738e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007392:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007396:	bf22      	ittt	cs
 8007398:	1ab6      	subcs	r6, r6, r2
 800739a:	4675      	movcs	r5, lr
 800739c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80073a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80073a4:	d018      	beq.n	80073d8 <__aeabi_ddiv+0x114>
 80073a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80073aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80073ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80073b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80073ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80073be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80073c2:	d1c0      	bne.n	8007346 <__aeabi_ddiv+0x82>
 80073c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073c8:	d10b      	bne.n	80073e2 <__aeabi_ddiv+0x11e>
 80073ca:	ea41 0100 	orr.w	r1, r1, r0
 80073ce:	f04f 0000 	mov.w	r0, #0
 80073d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80073d6:	e7b6      	b.n	8007346 <__aeabi_ddiv+0x82>
 80073d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073dc:	bf04      	itt	eq
 80073de:	4301      	orreq	r1, r0
 80073e0:	2000      	moveq	r0, #0
 80073e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80073e6:	bf88      	it	hi
 80073e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80073ec:	f63f aeaf 	bhi.w	800714e <__aeabi_dmul+0xde>
 80073f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80073f4:	bf04      	itt	eq
 80073f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80073fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80073fe:	f150 0000 	adcs.w	r0, r0, #0
 8007402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800740c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007410:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007414:	bfc2      	ittt	gt
 8007416:	ebd4 050c 	rsbsgt	r5, r4, ip
 800741a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800741e:	bd70      	popgt	{r4, r5, r6, pc}
 8007420:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007424:	f04f 0e00 	mov.w	lr, #0
 8007428:	3c01      	subs	r4, #1
 800742a:	e690      	b.n	800714e <__aeabi_dmul+0xde>
 800742c:	ea45 0e06 	orr.w	lr, r5, r6
 8007430:	e68d      	b.n	800714e <__aeabi_dmul+0xde>
 8007432:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007436:	ea94 0f0c 	teq	r4, ip
 800743a:	bf08      	it	eq
 800743c:	ea95 0f0c 	teqeq	r5, ip
 8007440:	f43f af3b 	beq.w	80072ba <__aeabi_dmul+0x24a>
 8007444:	ea94 0f0c 	teq	r4, ip
 8007448:	d10a      	bne.n	8007460 <__aeabi_ddiv+0x19c>
 800744a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800744e:	f47f af34 	bne.w	80072ba <__aeabi_dmul+0x24a>
 8007452:	ea95 0f0c 	teq	r5, ip
 8007456:	f47f af25 	bne.w	80072a4 <__aeabi_dmul+0x234>
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	e72c      	b.n	80072ba <__aeabi_dmul+0x24a>
 8007460:	ea95 0f0c 	teq	r5, ip
 8007464:	d106      	bne.n	8007474 <__aeabi_ddiv+0x1b0>
 8007466:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800746a:	f43f aefd 	beq.w	8007268 <__aeabi_dmul+0x1f8>
 800746e:	4610      	mov	r0, r2
 8007470:	4619      	mov	r1, r3
 8007472:	e722      	b.n	80072ba <__aeabi_dmul+0x24a>
 8007474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007478:	bf18      	it	ne
 800747a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800747e:	f47f aec5 	bne.w	800720c <__aeabi_dmul+0x19c>
 8007482:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007486:	f47f af0d 	bne.w	80072a4 <__aeabi_dmul+0x234>
 800748a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800748e:	f47f aeeb 	bne.w	8007268 <__aeabi_dmul+0x1f8>
 8007492:	e712      	b.n	80072ba <__aeabi_dmul+0x24a>

08007494 <__gedf2>:
 8007494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007498:	e006      	b.n	80074a8 <__cmpdf2+0x4>
 800749a:	bf00      	nop

0800749c <__ledf2>:
 800749c:	f04f 0c01 	mov.w	ip, #1
 80074a0:	e002      	b.n	80074a8 <__cmpdf2+0x4>
 80074a2:	bf00      	nop

080074a4 <__cmpdf2>:
 80074a4:	f04f 0c01 	mov.w	ip, #1
 80074a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80074ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80074b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80074b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80074b8:	bf18      	it	ne
 80074ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80074be:	d01b      	beq.n	80074f8 <__cmpdf2+0x54>
 80074c0:	b001      	add	sp, #4
 80074c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80074c6:	bf0c      	ite	eq
 80074c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80074cc:	ea91 0f03 	teqne	r1, r3
 80074d0:	bf02      	ittt	eq
 80074d2:	ea90 0f02 	teqeq	r0, r2
 80074d6:	2000      	moveq	r0, #0
 80074d8:	4770      	bxeq	lr
 80074da:	f110 0f00 	cmn.w	r0, #0
 80074de:	ea91 0f03 	teq	r1, r3
 80074e2:	bf58      	it	pl
 80074e4:	4299      	cmppl	r1, r3
 80074e6:	bf08      	it	eq
 80074e8:	4290      	cmpeq	r0, r2
 80074ea:	bf2c      	ite	cs
 80074ec:	17d8      	asrcs	r0, r3, #31
 80074ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80074f2:	f040 0001 	orr.w	r0, r0, #1
 80074f6:	4770      	bx	lr
 80074f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80074fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007500:	d102      	bne.n	8007508 <__cmpdf2+0x64>
 8007502:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007506:	d107      	bne.n	8007518 <__cmpdf2+0x74>
 8007508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800750c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007510:	d1d6      	bne.n	80074c0 <__cmpdf2+0x1c>
 8007512:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007516:	d0d3      	beq.n	80074c0 <__cmpdf2+0x1c>
 8007518:	f85d 0b04 	ldr.w	r0, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop

08007520 <__aeabi_cdrcmple>:
 8007520:	4684      	mov	ip, r0
 8007522:	4610      	mov	r0, r2
 8007524:	4662      	mov	r2, ip
 8007526:	468c      	mov	ip, r1
 8007528:	4619      	mov	r1, r3
 800752a:	4663      	mov	r3, ip
 800752c:	e000      	b.n	8007530 <__aeabi_cdcmpeq>
 800752e:	bf00      	nop

08007530 <__aeabi_cdcmpeq>:
 8007530:	b501      	push	{r0, lr}
 8007532:	f7ff ffb7 	bl	80074a4 <__cmpdf2>
 8007536:	2800      	cmp	r0, #0
 8007538:	bf48      	it	mi
 800753a:	f110 0f00 	cmnmi.w	r0, #0
 800753e:	bd01      	pop	{r0, pc}

08007540 <__aeabi_dcmpeq>:
 8007540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007544:	f7ff fff4 	bl	8007530 <__aeabi_cdcmpeq>
 8007548:	bf0c      	ite	eq
 800754a:	2001      	moveq	r0, #1
 800754c:	2000      	movne	r0, #0
 800754e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007552:	bf00      	nop

08007554 <__aeabi_dcmplt>:
 8007554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007558:	f7ff ffea 	bl	8007530 <__aeabi_cdcmpeq>
 800755c:	bf34      	ite	cc
 800755e:	2001      	movcc	r0, #1
 8007560:	2000      	movcs	r0, #0
 8007562:	f85d fb08 	ldr.w	pc, [sp], #8
 8007566:	bf00      	nop

08007568 <__aeabi_dcmple>:
 8007568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800756c:	f7ff ffe0 	bl	8007530 <__aeabi_cdcmpeq>
 8007570:	bf94      	ite	ls
 8007572:	2001      	movls	r0, #1
 8007574:	2000      	movhi	r0, #0
 8007576:	f85d fb08 	ldr.w	pc, [sp], #8
 800757a:	bf00      	nop

0800757c <__aeabi_dcmpge>:
 800757c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007580:	f7ff ffce 	bl	8007520 <__aeabi_cdrcmple>
 8007584:	bf94      	ite	ls
 8007586:	2001      	movls	r0, #1
 8007588:	2000      	movhi	r0, #0
 800758a:	f85d fb08 	ldr.w	pc, [sp], #8
 800758e:	bf00      	nop

08007590 <__aeabi_dcmpgt>:
 8007590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007594:	f7ff ffc4 	bl	8007520 <__aeabi_cdrcmple>
 8007598:	bf34      	ite	cc
 800759a:	2001      	movcc	r0, #1
 800759c:	2000      	movcs	r0, #0
 800759e:	f85d fb08 	ldr.w	pc, [sp], #8
 80075a2:	bf00      	nop

080075a4 <__aeabi_d2iz>:
 80075a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80075a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80075ac:	d215      	bcs.n	80075da <__aeabi_d2iz+0x36>
 80075ae:	d511      	bpl.n	80075d4 <__aeabi_d2iz+0x30>
 80075b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80075b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80075b8:	d912      	bls.n	80075e0 <__aeabi_d2iz+0x3c>
 80075ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80075be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80075c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80075ca:	fa23 f002 	lsr.w	r0, r3, r2
 80075ce:	bf18      	it	ne
 80075d0:	4240      	negne	r0, r0
 80075d2:	4770      	bx	lr
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	4770      	bx	lr
 80075da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80075de:	d105      	bne.n	80075ec <__aeabi_d2iz+0x48>
 80075e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80075e4:	bf08      	it	eq
 80075e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80075ea:	4770      	bx	lr
 80075ec:	f04f 0000 	mov.w	r0, #0
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop

080075f4 <__aeabi_uldivmod>:
 80075f4:	b94b      	cbnz	r3, 800760a <__aeabi_uldivmod+0x16>
 80075f6:	b942      	cbnz	r2, 800760a <__aeabi_uldivmod+0x16>
 80075f8:	2900      	cmp	r1, #0
 80075fa:	bf08      	it	eq
 80075fc:	2800      	cmpeq	r0, #0
 80075fe:	d002      	beq.n	8007606 <__aeabi_uldivmod+0x12>
 8007600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007604:	4608      	mov	r0, r1
 8007606:	f000 b83b 	b.w	8007680 <__aeabi_idiv0>
 800760a:	b082      	sub	sp, #8
 800760c:	46ec      	mov	ip, sp
 800760e:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007612:	f000 f81d 	bl	8007650 <__gnu_uldivmod_helper>
 8007616:	f8dd e004 	ldr.w	lr, [sp, #4]
 800761a:	b002      	add	sp, #8
 800761c:	bc0c      	pop	{r2, r3}
 800761e:	4770      	bx	lr

08007620 <__gnu_ldivmod_helper>:
 8007620:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007624:	9e06      	ldr	r6, [sp, #24]
 8007626:	4614      	mov	r4, r2
 8007628:	461d      	mov	r5, r3
 800762a:	4680      	mov	r8, r0
 800762c:	4689      	mov	r9, r1
 800762e:	f000 f829 	bl	8007684 <__divdi3>
 8007632:	fb04 f301 	mul.w	r3, r4, r1
 8007636:	fb00 3305 	mla	r3, r0, r5, r3
 800763a:	fba4 4500 	umull	r4, r5, r4, r0
 800763e:	441d      	add	r5, r3
 8007640:	ebb8 0404 	subs.w	r4, r8, r4
 8007644:	eb69 0505 	sbc.w	r5, r9, r5
 8007648:	e9c6 4500 	strd	r4, r5, [r6]
 800764c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08007650 <__gnu_uldivmod_helper>:
 8007650:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007654:	9e06      	ldr	r6, [sp, #24]
 8007656:	4614      	mov	r4, r2
 8007658:	4680      	mov	r8, r0
 800765a:	4689      	mov	r9, r1
 800765c:	461d      	mov	r5, r3
 800765e:	f000 f95d 	bl	800791c <__udivdi3>
 8007662:	fb00 f505 	mul.w	r5, r0, r5
 8007666:	fb04 5301 	mla	r3, r4, r1, r5
 800766a:	fba0 4504 	umull	r4, r5, r0, r4
 800766e:	441d      	add	r5, r3
 8007670:	ebb8 0404 	subs.w	r4, r8, r4
 8007674:	eb69 0505 	sbc.w	r5, r9, r5
 8007678:	e9c6 4500 	strd	r4, r5, [r6]
 800767c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08007680 <__aeabi_idiv0>:
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop

08007684 <__divdi3>:
 8007684:	2900      	cmp	r1, #0
 8007686:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800768a:	f2c0 809f 	blt.w	80077cc <__divdi3+0x148>
 800768e:	2400      	movs	r4, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	f2c0 8096 	blt.w	80077c2 <__divdi3+0x13e>
 8007696:	4615      	mov	r5, r2
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d13e      	bne.n	800771e <__divdi3+0x9a>
 80076a0:	428a      	cmp	r2, r1
 80076a2:	d957      	bls.n	8007754 <__divdi3+0xd0>
 80076a4:	fab2 f382 	clz	r3, r2
 80076a8:	b14b      	cbz	r3, 80076be <__divdi3+0x3a>
 80076aa:	f1c3 0220 	rsb	r2, r3, #32
 80076ae:	fa01 f703 	lsl.w	r7, r1, r3
 80076b2:	fa20 f202 	lsr.w	r2, r0, r2
 80076b6:	409d      	lsls	r5, r3
 80076b8:	4317      	orrs	r7, r2
 80076ba:	fa00 f603 	lsl.w	r6, r0, r3
 80076be:	0c29      	lsrs	r1, r5, #16
 80076c0:	fbb7 f2f1 	udiv	r2, r7, r1
 80076c4:	0c33      	lsrs	r3, r6, #16
 80076c6:	fb01 7c12 	mls	ip, r1, r2, r7
 80076ca:	b2a8      	uxth	r0, r5
 80076cc:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 80076d0:	fb00 f302 	mul.w	r3, r0, r2
 80076d4:	42bb      	cmp	r3, r7
 80076d6:	d909      	bls.n	80076ec <__divdi3+0x68>
 80076d8:	197f      	adds	r7, r7, r5
 80076da:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80076de:	f080 8101 	bcs.w	80078e4 <__divdi3+0x260>
 80076e2:	42bb      	cmp	r3, r7
 80076e4:	f240 80fe 	bls.w	80078e4 <__divdi3+0x260>
 80076e8:	3a02      	subs	r2, #2
 80076ea:	442f      	add	r7, r5
 80076ec:	1aff      	subs	r7, r7, r3
 80076ee:	fbb7 f3f1 	udiv	r3, r7, r1
 80076f2:	b2b6      	uxth	r6, r6
 80076f4:	fb01 7113 	mls	r1, r1, r3, r7
 80076f8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80076fc:	fb00 f003 	mul.w	r0, r0, r3
 8007700:	4288      	cmp	r0, r1
 8007702:	d908      	bls.n	8007716 <__divdi3+0x92>
 8007704:	1949      	adds	r1, r1, r5
 8007706:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 800770a:	f080 80ed 	bcs.w	80078e8 <__divdi3+0x264>
 800770e:	4288      	cmp	r0, r1
 8007710:	f240 80ea 	bls.w	80078e8 <__divdi3+0x264>
 8007714:	3b02      	subs	r3, #2
 8007716:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800771a:	2300      	movs	r3, #0
 800771c:	e003      	b.n	8007726 <__divdi3+0xa2>
 800771e:	428b      	cmp	r3, r1
 8007720:	d90a      	bls.n	8007738 <__divdi3+0xb4>
 8007722:	2300      	movs	r3, #0
 8007724:	461a      	mov	r2, r3
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	b114      	cbz	r4, 8007732 <__divdi3+0xae>
 800772c:	4240      	negs	r0, r0
 800772e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007732:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007736:	4770      	bx	lr
 8007738:	fab3 f883 	clz	r8, r3
 800773c:	f1b8 0f00 	cmp.w	r8, #0
 8007740:	f040 8084 	bne.w	800784c <__divdi3+0x1c8>
 8007744:	428b      	cmp	r3, r1
 8007746:	d302      	bcc.n	800774e <__divdi3+0xca>
 8007748:	4282      	cmp	r2, r0
 800774a:	f200 80de 	bhi.w	800790a <__divdi3+0x286>
 800774e:	2300      	movs	r3, #0
 8007750:	2201      	movs	r2, #1
 8007752:	e7e8      	b.n	8007726 <__divdi3+0xa2>
 8007754:	b912      	cbnz	r2, 800775c <__divdi3+0xd8>
 8007756:	2301      	movs	r3, #1
 8007758:	fbb3 f5f2 	udiv	r5, r3, r2
 800775c:	fab5 f285 	clz	r2, r5
 8007760:	2a00      	cmp	r2, #0
 8007762:	d139      	bne.n	80077d8 <__divdi3+0x154>
 8007764:	1b7f      	subs	r7, r7, r5
 8007766:	0c28      	lsrs	r0, r5, #16
 8007768:	fa1f fc85 	uxth.w	ip, r5
 800776c:	2301      	movs	r3, #1
 800776e:	fbb7 f1f0 	udiv	r1, r7, r0
 8007772:	0c32      	lsrs	r2, r6, #16
 8007774:	fb00 7711 	mls	r7, r0, r1, r7
 8007778:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800777c:	fb0c f201 	mul.w	r2, ip, r1
 8007780:	42ba      	cmp	r2, r7
 8007782:	d907      	bls.n	8007794 <__divdi3+0x110>
 8007784:	197f      	adds	r7, r7, r5
 8007786:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800778a:	d202      	bcs.n	8007792 <__divdi3+0x10e>
 800778c:	42ba      	cmp	r2, r7
 800778e:	f200 80c1 	bhi.w	8007914 <__divdi3+0x290>
 8007792:	4641      	mov	r1, r8
 8007794:	1abf      	subs	r7, r7, r2
 8007796:	fbb7 f2f0 	udiv	r2, r7, r0
 800779a:	b2b6      	uxth	r6, r6
 800779c:	fb00 7012 	mls	r0, r0, r2, r7
 80077a0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 80077a4:	fb0c fc02 	mul.w	ip, ip, r2
 80077a8:	4584      	cmp	ip, r0
 80077aa:	d907      	bls.n	80077bc <__divdi3+0x138>
 80077ac:	1940      	adds	r0, r0, r5
 80077ae:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 80077b2:	d202      	bcs.n	80077ba <__divdi3+0x136>
 80077b4:	4584      	cmp	ip, r0
 80077b6:	f200 80ab 	bhi.w	8007910 <__divdi3+0x28c>
 80077ba:	463a      	mov	r2, r7
 80077bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077c0:	e7b1      	b.n	8007726 <__divdi3+0xa2>
 80077c2:	43e4      	mvns	r4, r4
 80077c4:	4252      	negs	r2, r2
 80077c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80077ca:	e764      	b.n	8007696 <__divdi3+0x12>
 80077cc:	4240      	negs	r0, r0
 80077ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80077d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077d6:	e75b      	b.n	8007690 <__divdi3+0xc>
 80077d8:	4095      	lsls	r5, r2
 80077da:	f1c2 0320 	rsb	r3, r2, #32
 80077de:	fa27 f103 	lsr.w	r1, r7, r3
 80077e2:	0c28      	lsrs	r0, r5, #16
 80077e4:	fa26 f303 	lsr.w	r3, r6, r3
 80077e8:	4097      	lsls	r7, r2
 80077ea:	fbb1 f8f0 	udiv	r8, r1, r0
 80077ee:	431f      	orrs	r7, r3
 80077f0:	0c3b      	lsrs	r3, r7, #16
 80077f2:	fb00 1118 	mls	r1, r0, r8, r1
 80077f6:	fa1f fc85 	uxth.w	ip, r5
 80077fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80077fe:	fb0c f308 	mul.w	r3, ip, r8
 8007802:	428b      	cmp	r3, r1
 8007804:	fa06 f602 	lsl.w	r6, r6, r2
 8007808:	d908      	bls.n	800781c <__divdi3+0x198>
 800780a:	1949      	adds	r1, r1, r5
 800780c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007810:	d279      	bcs.n	8007906 <__divdi3+0x282>
 8007812:	428b      	cmp	r3, r1
 8007814:	d977      	bls.n	8007906 <__divdi3+0x282>
 8007816:	f1a8 0802 	sub.w	r8, r8, #2
 800781a:	4429      	add	r1, r5
 800781c:	1ac9      	subs	r1, r1, r3
 800781e:	fbb1 f3f0 	udiv	r3, r1, r0
 8007822:	b2bf      	uxth	r7, r7
 8007824:	fb00 1113 	mls	r1, r0, r3, r1
 8007828:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800782c:	fb0c f203 	mul.w	r2, ip, r3
 8007830:	42ba      	cmp	r2, r7
 8007832:	d907      	bls.n	8007844 <__divdi3+0x1c0>
 8007834:	197f      	adds	r7, r7, r5
 8007836:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800783a:	d260      	bcs.n	80078fe <__divdi3+0x27a>
 800783c:	42ba      	cmp	r2, r7
 800783e:	d95e      	bls.n	80078fe <__divdi3+0x27a>
 8007840:	3b02      	subs	r3, #2
 8007842:	442f      	add	r7, r5
 8007844:	1abf      	subs	r7, r7, r2
 8007846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800784a:	e790      	b.n	800776e <__divdi3+0xea>
 800784c:	f1c8 0220 	rsb	r2, r8, #32
 8007850:	fa03 fc08 	lsl.w	ip, r3, r8
 8007854:	fa25 f302 	lsr.w	r3, r5, r2
 8007858:	ea43 0c0c 	orr.w	ip, r3, ip
 800785c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007860:	fa21 f302 	lsr.w	r3, r1, r2
 8007864:	fa01 f708 	lsl.w	r7, r1, r8
 8007868:	fa20 f202 	lsr.w	r2, r0, r2
 800786c:	fbb3 f1f9 	udiv	r1, r3, r9
 8007870:	4317      	orrs	r7, r2
 8007872:	fb09 3311 	mls	r3, r9, r1, r3
 8007876:	0c3a      	lsrs	r2, r7, #16
 8007878:	fa1f fb8c 	uxth.w	fp, ip
 800787c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007880:	fb0b fa01 	mul.w	sl, fp, r1
 8007884:	459a      	cmp	sl, r3
 8007886:	fa05 f008 	lsl.w	r0, r5, r8
 800788a:	d908      	bls.n	800789e <__divdi3+0x21a>
 800788c:	eb13 030c 	adds.w	r3, r3, ip
 8007890:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8007894:	d235      	bcs.n	8007902 <__divdi3+0x27e>
 8007896:	459a      	cmp	sl, r3
 8007898:	d933      	bls.n	8007902 <__divdi3+0x27e>
 800789a:	3902      	subs	r1, #2
 800789c:	4463      	add	r3, ip
 800789e:	ebca 0303 	rsb	r3, sl, r3
 80078a2:	fbb3 f2f9 	udiv	r2, r3, r9
 80078a6:	fb09 3312 	mls	r3, r9, r2, r3
 80078aa:	b2bf      	uxth	r7, r7
 80078ac:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 80078b0:	fb0b f902 	mul.w	r9, fp, r2
 80078b4:	45b9      	cmp	r9, r7
 80078b6:	d908      	bls.n	80078ca <__divdi3+0x246>
 80078b8:	eb17 070c 	adds.w	r7, r7, ip
 80078bc:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80078c0:	d21b      	bcs.n	80078fa <__divdi3+0x276>
 80078c2:	45b9      	cmp	r9, r7
 80078c4:	d919      	bls.n	80078fa <__divdi3+0x276>
 80078c6:	3a02      	subs	r2, #2
 80078c8:	4467      	add	r7, ip
 80078ca:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 80078ce:	fba5 0100 	umull	r0, r1, r5, r0
 80078d2:	ebc9 0707 	rsb	r7, r9, r7
 80078d6:	428f      	cmp	r7, r1
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	d30a      	bcc.n	80078f4 <__divdi3+0x270>
 80078de:	d005      	beq.n	80078ec <__divdi3+0x268>
 80078e0:	462a      	mov	r2, r5
 80078e2:	e720      	b.n	8007726 <__divdi3+0xa2>
 80078e4:	4662      	mov	r2, ip
 80078e6:	e701      	b.n	80076ec <__divdi3+0x68>
 80078e8:	463b      	mov	r3, r7
 80078ea:	e714      	b.n	8007716 <__divdi3+0x92>
 80078ec:	fa06 f608 	lsl.w	r6, r6, r8
 80078f0:	4286      	cmp	r6, r0
 80078f2:	d2f5      	bcs.n	80078e0 <__divdi3+0x25c>
 80078f4:	1e6a      	subs	r2, r5, #1
 80078f6:	2300      	movs	r3, #0
 80078f8:	e715      	b.n	8007726 <__divdi3+0xa2>
 80078fa:	461a      	mov	r2, r3
 80078fc:	e7e5      	b.n	80078ca <__divdi3+0x246>
 80078fe:	460b      	mov	r3, r1
 8007900:	e7a0      	b.n	8007844 <__divdi3+0x1c0>
 8007902:	4611      	mov	r1, r2
 8007904:	e7cb      	b.n	800789e <__divdi3+0x21a>
 8007906:	4690      	mov	r8, r2
 8007908:	e788      	b.n	800781c <__divdi3+0x198>
 800790a:	4643      	mov	r3, r8
 800790c:	4642      	mov	r2, r8
 800790e:	e70a      	b.n	8007726 <__divdi3+0xa2>
 8007910:	3a02      	subs	r2, #2
 8007912:	e753      	b.n	80077bc <__divdi3+0x138>
 8007914:	3902      	subs	r1, #2
 8007916:	442f      	add	r7, r5
 8007918:	e73c      	b.n	8007794 <__divdi3+0x110>
 800791a:	bf00      	nop

0800791c <__udivdi3>:
 800791c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007920:	4614      	mov	r4, r2
 8007922:	4605      	mov	r5, r0
 8007924:	460e      	mov	r6, r1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d143      	bne.n	80079b2 <__udivdi3+0x96>
 800792a:	428a      	cmp	r2, r1
 800792c:	d953      	bls.n	80079d6 <__udivdi3+0xba>
 800792e:	fab2 f782 	clz	r7, r2
 8007932:	b157      	cbz	r7, 800794a <__udivdi3+0x2e>
 8007934:	f1c7 0620 	rsb	r6, r7, #32
 8007938:	fa20 f606 	lsr.w	r6, r0, r6
 800793c:	fa01 f307 	lsl.w	r3, r1, r7
 8007940:	fa02 f407 	lsl.w	r4, r2, r7
 8007944:	431e      	orrs	r6, r3
 8007946:	fa00 f507 	lsl.w	r5, r0, r7
 800794a:	0c21      	lsrs	r1, r4, #16
 800794c:	fbb6 f2f1 	udiv	r2, r6, r1
 8007950:	0c2b      	lsrs	r3, r5, #16
 8007952:	fb01 6712 	mls	r7, r1, r2, r6
 8007956:	b2a0      	uxth	r0, r4
 8007958:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 800795c:	fb00 f302 	mul.w	r3, r0, r2
 8007960:	42b3      	cmp	r3, r6
 8007962:	d909      	bls.n	8007978 <__udivdi3+0x5c>
 8007964:	1936      	adds	r6, r6, r4
 8007966:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 800796a:	f080 80f6 	bcs.w	8007b5a <__udivdi3+0x23e>
 800796e:	42b3      	cmp	r3, r6
 8007970:	f240 80f3 	bls.w	8007b5a <__udivdi3+0x23e>
 8007974:	3a02      	subs	r2, #2
 8007976:	4426      	add	r6, r4
 8007978:	1af6      	subs	r6, r6, r3
 800797a:	fbb6 f3f1 	udiv	r3, r6, r1
 800797e:	b2ad      	uxth	r5, r5
 8007980:	fb01 6113 	mls	r1, r1, r3, r6
 8007984:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8007988:	fb00 f003 	mul.w	r0, r0, r3
 800798c:	4288      	cmp	r0, r1
 800798e:	d908      	bls.n	80079a2 <__udivdi3+0x86>
 8007990:	1909      	adds	r1, r1, r4
 8007992:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 8007996:	f080 80e2 	bcs.w	8007b5e <__udivdi3+0x242>
 800799a:	4288      	cmp	r0, r1
 800799c:	f240 80df 	bls.w	8007b5e <__udivdi3+0x242>
 80079a0:	3b02      	subs	r3, #2
 80079a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80079a6:	2300      	movs	r3, #0
 80079a8:	4610      	mov	r0, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079b0:	4770      	bx	lr
 80079b2:	428b      	cmp	r3, r1
 80079b4:	d84a      	bhi.n	8007a4c <__udivdi3+0x130>
 80079b6:	fab3 f683 	clz	r6, r3
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d14d      	bne.n	8007a5a <__udivdi3+0x13e>
 80079be:	428b      	cmp	r3, r1
 80079c0:	d302      	bcc.n	80079c8 <__udivdi3+0xac>
 80079c2:	4282      	cmp	r2, r0
 80079c4:	f200 80d6 	bhi.w	8007b74 <__udivdi3+0x258>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2201      	movs	r2, #1
 80079cc:	4610      	mov	r0, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079d4:	4770      	bx	lr
 80079d6:	b912      	cbnz	r2, 80079de <__udivdi3+0xc2>
 80079d8:	2401      	movs	r4, #1
 80079da:	fbb4 f4f2 	udiv	r4, r4, r2
 80079de:	fab4 f284 	clz	r2, r4
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d17c      	bne.n	8007ae0 <__udivdi3+0x1c4>
 80079e6:	1b09      	subs	r1, r1, r4
 80079e8:	0c26      	lsrs	r6, r4, #16
 80079ea:	b2a7      	uxth	r7, r4
 80079ec:	2301      	movs	r3, #1
 80079ee:	fbb1 f0f6 	udiv	r0, r1, r6
 80079f2:	0c2a      	lsrs	r2, r5, #16
 80079f4:	fb06 1110 	mls	r1, r6, r0, r1
 80079f8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80079fc:	fb07 f200 	mul.w	r2, r7, r0
 8007a00:	428a      	cmp	r2, r1
 8007a02:	d907      	bls.n	8007a14 <__udivdi3+0xf8>
 8007a04:	1909      	adds	r1, r1, r4
 8007a06:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007a0a:	d202      	bcs.n	8007a12 <__udivdi3+0xf6>
 8007a0c:	428a      	cmp	r2, r1
 8007a0e:	f200 80c3 	bhi.w	8007b98 <__udivdi3+0x27c>
 8007a12:	4660      	mov	r0, ip
 8007a14:	1a89      	subs	r1, r1, r2
 8007a16:	fbb1 f2f6 	udiv	r2, r1, r6
 8007a1a:	b2ad      	uxth	r5, r5
 8007a1c:	fb06 1112 	mls	r1, r6, r2, r1
 8007a20:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8007a24:	fb07 f702 	mul.w	r7, r7, r2
 8007a28:	42af      	cmp	r7, r5
 8007a2a:	d908      	bls.n	8007a3e <__udivdi3+0x122>
 8007a2c:	192c      	adds	r4, r5, r4
 8007a2e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8007a32:	f080 8096 	bcs.w	8007b62 <__udivdi3+0x246>
 8007a36:	42a7      	cmp	r7, r4
 8007a38:	f240 8093 	bls.w	8007b62 <__udivdi3+0x246>
 8007a3c:	3a02      	subs	r2, #2
 8007a3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a4a:	4770      	bx	lr
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a58:	4770      	bx	lr
 8007a5a:	f1c6 0520 	rsb	r5, r6, #32
 8007a5e:	fa22 f405 	lsr.w	r4, r2, r5
 8007a62:	40b3      	lsls	r3, r6
 8007a64:	431c      	orrs	r4, r3
 8007a66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a6a:	fa21 f305 	lsr.w	r3, r1, r5
 8007a6e:	fa01 f706 	lsl.w	r7, r1, r6
 8007a72:	fa20 f505 	lsr.w	r5, r0, r5
 8007a76:	fbb3 fcf8 	udiv	ip, r3, r8
 8007a7a:	432f      	orrs	r7, r5
 8007a7c:	fb08 331c 	mls	r3, r8, ip, r3
 8007a80:	0c3d      	lsrs	r5, r7, #16
 8007a82:	fa1f fa84 	uxth.w	sl, r4
 8007a86:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007a8a:	fb0a f90c 	mul.w	r9, sl, ip
 8007a8e:	4599      	cmp	r9, r3
 8007a90:	fa02 fb06 	lsl.w	fp, r2, r6
 8007a94:	d904      	bls.n	8007aa0 <__udivdi3+0x184>
 8007a96:	191b      	adds	r3, r3, r4
 8007a98:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8007a9c:	d36d      	bcc.n	8007b7a <__udivdi3+0x25e>
 8007a9e:	4694      	mov	ip, r2
 8007aa0:	ebc9 0303 	rsb	r3, r9, r3
 8007aa4:	fbb3 f5f8 	udiv	r5, r3, r8
 8007aa8:	fb08 3315 	mls	r3, r8, r5, r3
 8007aac:	b2bf      	uxth	r7, r7
 8007aae:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8007ab2:	fb0a f805 	mul.w	r8, sl, r5
 8007ab6:	45b8      	cmp	r8, r7
 8007ab8:	d904      	bls.n	8007ac4 <__udivdi3+0x1a8>
 8007aba:	193f      	adds	r7, r7, r4
 8007abc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007ac0:	d361      	bcc.n	8007b86 <__udivdi3+0x26a>
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8007ac8:	fbac 230b 	umull	r2, r3, ip, fp
 8007acc:	ebc8 0707 	rsb	r7, r8, r7
 8007ad0:	429f      	cmp	r7, r3
 8007ad2:	f04f 0500 	mov.w	r5, #0
 8007ad6:	d349      	bcc.n	8007b6c <__udivdi3+0x250>
 8007ad8:	d045      	beq.n	8007b66 <__udivdi3+0x24a>
 8007ada:	4662      	mov	r2, ip
 8007adc:	462b      	mov	r3, r5
 8007ade:	e763      	b.n	80079a8 <__udivdi3+0x8c>
 8007ae0:	4094      	lsls	r4, r2
 8007ae2:	f1c2 0320 	rsb	r3, r2, #32
 8007ae6:	fa21 fc03 	lsr.w	ip, r1, r3
 8007aea:	0c26      	lsrs	r6, r4, #16
 8007aec:	fa20 f303 	lsr.w	r3, r0, r3
 8007af0:	fa01 f502 	lsl.w	r5, r1, r2
 8007af4:	fbbc f8f6 	udiv	r8, ip, r6
 8007af8:	ea43 0105 	orr.w	r1, r3, r5
 8007afc:	0c0b      	lsrs	r3, r1, #16
 8007afe:	fb06 cc18 	mls	ip, r6, r8, ip
 8007b02:	b2a7      	uxth	r7, r4
 8007b04:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8007b08:	fb07 f308 	mul.w	r3, r7, r8
 8007b0c:	4563      	cmp	r3, ip
 8007b0e:	fa00 f502 	lsl.w	r5, r0, r2
 8007b12:	d909      	bls.n	8007b28 <__udivdi3+0x20c>
 8007b14:	eb1c 0c04 	adds.w	ip, ip, r4
 8007b18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007b1c:	d23a      	bcs.n	8007b94 <__udivdi3+0x278>
 8007b1e:	4563      	cmp	r3, ip
 8007b20:	d938      	bls.n	8007b94 <__udivdi3+0x278>
 8007b22:	f1a8 0802 	sub.w	r8, r8, #2
 8007b26:	44a4      	add	ip, r4
 8007b28:	ebc3 0c0c 	rsb	ip, r3, ip
 8007b2c:	fbbc f3f6 	udiv	r3, ip, r6
 8007b30:	b289      	uxth	r1, r1
 8007b32:	fb06 cc13 	mls	ip, r6, r3, ip
 8007b36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8007b3a:	fb07 f203 	mul.w	r2, r7, r3
 8007b3e:	428a      	cmp	r2, r1
 8007b40:	d907      	bls.n	8007b52 <__udivdi3+0x236>
 8007b42:	1909      	adds	r1, r1, r4
 8007b44:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8007b48:	d222      	bcs.n	8007b90 <__udivdi3+0x274>
 8007b4a:	428a      	cmp	r2, r1
 8007b4c:	d920      	bls.n	8007b90 <__udivdi3+0x274>
 8007b4e:	3b02      	subs	r3, #2
 8007b50:	4421      	add	r1, r4
 8007b52:	1a89      	subs	r1, r1, r2
 8007b54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007b58:	e749      	b.n	80079ee <__udivdi3+0xd2>
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	e70c      	b.n	8007978 <__udivdi3+0x5c>
 8007b5e:	4633      	mov	r3, r6
 8007b60:	e71f      	b.n	80079a2 <__udivdi3+0x86>
 8007b62:	460a      	mov	r2, r1
 8007b64:	e76b      	b.n	8007a3e <__udivdi3+0x122>
 8007b66:	40b0      	lsls	r0, r6
 8007b68:	4290      	cmp	r0, r2
 8007b6a:	d2b6      	bcs.n	8007ada <__udivdi3+0x1be>
 8007b6c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8007b70:	2300      	movs	r3, #0
 8007b72:	e719      	b.n	80079a8 <__udivdi3+0x8c>
 8007b74:	4633      	mov	r3, r6
 8007b76:	4632      	mov	r2, r6
 8007b78:	e716      	b.n	80079a8 <__udivdi3+0x8c>
 8007b7a:	4599      	cmp	r9, r3
 8007b7c:	d98f      	bls.n	8007a9e <__udivdi3+0x182>
 8007b7e:	f1ac 0c02 	sub.w	ip, ip, #2
 8007b82:	4423      	add	r3, r4
 8007b84:	e78c      	b.n	8007aa0 <__udivdi3+0x184>
 8007b86:	45b8      	cmp	r8, r7
 8007b88:	d99b      	bls.n	8007ac2 <__udivdi3+0x1a6>
 8007b8a:	3d02      	subs	r5, #2
 8007b8c:	4427      	add	r7, r4
 8007b8e:	e799      	b.n	8007ac4 <__udivdi3+0x1a8>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e7de      	b.n	8007b52 <__udivdi3+0x236>
 8007b94:	4690      	mov	r8, r2
 8007b96:	e7c7      	b.n	8007b28 <__udivdi3+0x20c>
 8007b98:	3802      	subs	r0, #2
 8007b9a:	4421      	add	r1, r4
 8007b9c:	e73a      	b.n	8007a14 <__udivdi3+0xf8>
 8007b9e:	bf00      	nop
 8007ba0:	322e3625 	.word	0x322e3625
 8007ba4:	000a2066 	.word	0x000a2066
 8007ba8:	696b7341 	.word	0x696b7341
 8007bac:	6620676e 	.word	0x6620676e
 8007bb0:	203a726f 	.word	0x203a726f
 8007bb4:	79622000 	.word	0x79622000
 8007bb8:	2e736574 	.word	0x2e736574
 8007bbc:	6548000a 	.word	0x6548000a
 8007bc0:	6f207061 	.word	0x6f207061
 8007bc4:	66726576 	.word	0x66726576
 8007bc8:	21776f6c 	.word	0x21776f6c
 8007bcc:	6463000a 	.word	0x6463000a
 8007bd0:	6d636163 	.word	0x6d636163
 8007bd4:	00000000 	.word	0x00000000

08007bd8 <dotab_cdcacm>:
 8007bd8:	08007bce 08000a4d 08000a51 08000a75     .{..M...Q...u...
 8007be8:	08000ad1                                ....

08007bec <data_endp>:
 8007bec:	02010507 07010040 40028205 05070100              ....@......@..

08007bfa <comm_endp>:
 8007bfa:	03830507 09ff0010                                .......

08007c01 <comm_iface>:
 8007c01:	00000409 01020201 007bfa00 007c6f08     ..........{..o|.
 8007c11:	00001308 43524100 6c2d534f 55206261     .....ARCOS-lab U
 8007c21:	43005243 412d4344 55204d43 20545241     CR.CDC-ACM UART 
 8007c31:	65746e49 63616672 01120065                       Interface.

08007c3b <dev>:
 8007c3b:	02000112 40000002 57400483 02010200     .......@..@W....
 8007c4b:	04090103                                         ..

08007c4d <data_iface>:
 8007c4d:	00010409 00000a02 007bec00 00000008     ..........{.....
 8007c5d:	00000000 00020900                                .....

08007c62 <config>:
 8007c62:	00000209 80000102 007c8432 00240508              ........2.|..

08007c6f <cdcacm_functional_descriptors>:
 8007c6f:	10002405 01240501 24040100 24050202     .$....$....$...$
 8007c7f:	00010006 00000100                                .....

08007c84 <ifaces>:
 8007c84:	00000001 00000000 08007c01 00000001     .........|......
 8007c94:	00000000 08007c4d                       ....M|..

08007c9c <hse_8mhz_3v3>:
 8007c9c:	00600008 00000202 00000603 01040500     ..`.............
 8007cac:	00b71b00 016e3600 00f00008 00000502     .....6n.........
 8007cbc:	00000603 01040500 01c9c380 03938700     ................
 8007ccc:	01500008 00000702 00000605 00040500     ..P.............
 8007cdc:	0280de80 0501bd00                       ........

08007ce4 <CSWTCH.22>:
 8007ce4:	0800172b 00000000 00000000 00000000     +...............
 8007cf4:	00000000 080017a5 080017cd 00000000     ................
 8007d04:	080016fd 080016cb                       ........

08007d0c <CSWTCH.24>:
 8007d0c:	08001743 00000000 00000000 00000000     C...............
	...
 8007d34:	0800171f 08001711                       ........

08007d3c <stm32f107_usb_driver>:
 8007d3c:	08001d55 08001edd 08001ef5 0800202b     U...........+ ..
 8007d4c:	08002035 080020a1 08002083 080020c9     5 ... ... ... ..
 8007d5c:	08002121 080021ad 080022b3 50000000     !!...!...".....P
 8007d6c:	00800001 00000043                       ....C...

08007d74 <blanks.6777>:
 8007d74:	20202020 20202020 20202020 20202020                     
 8007d84:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8007d94:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8007da4:	00000000 33323130 37363534 62613938     ....0123456789ab
 8007db4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8007dc4:	00000030                                0...

08007dc8 <zeroes.6778>:
 8007dc8:	30303030 30303030 30303030 30303030     0000000000000000
 8007dd8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8007de8:	49534f50 00000058 0000002e 00000000     POSIX...........

08007df8 <__mprec_tens>:
 8007df8:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007e08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007e18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007e28:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007e38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007e48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8007e58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8007e68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8007e78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8007e88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8007e98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8007ea8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007eb8:	79d99db4 44ea7843                       ...yCx.D

08007ec0 <__mprec_bigtens>:
 8007ec0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007ed0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8007ee0:	7f73bf3c 75154fdd                       <.s..O.u

08007ee8 <p05.5269>:
 8007ee8:	00000005 00000019 0000007d              ........}...
